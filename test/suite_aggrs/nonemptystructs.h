/* {cfdcfpj[15]lddj} */
struct A1 { c m0; f m1; d m2; c m3; f m4; p m5; j m6[15]; l m7; d m8; d m9; j m10; };
void f_cpA1(struct A1 *x, const struct A1 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m6[11] = y->m6[11]; x->m6[12] = y->m6[12]; x->m6[13] = y->m6[13]; x->m6[14] = y->m6[14]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1(const struct A1 *x, const struct A1 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m6[11] == y->m6[11] && x->m6[12] == y->m6[12] && x->m6[13] == y->m6[13] && x->m6[14] == y->m6[14] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1, m6), 15);
		dcStructField(at, 'l', offsetof(struct A1, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {i{cfdcfpj[15]lddj}ps} */
struct A2 { i m0; struct A1 m1; p m2; s m3; };
void f_cpA2(struct A2 *x, const struct A2 *y) { x->m0 = y->m0; f_cpA1(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA2(const struct A2 *x, const struct A2 *y) { return x->m0 == y->m0 && f_cmpA1(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA2() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A2), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A2, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2, m1), 1, f_touchdcstA1());
		dcStructField(at, 'p', offsetof(struct A2, m2), 1);
		dcStructField(at, 's', offsetof(struct A2, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fpj{i{cfdcfpj[15]lddj}ps}i} */
struct A3 { f m0; p m1; j m2; struct A2 m3; i m4; };
void f_cpA3(struct A3 *x, const struct A3 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA2(&x->m3, &y->m3); x->m4 = y->m4; };
int f_cmpA3(const struct A3 *x, const struct A3 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA2(&x->m3, &y->m3) && x->m4 == y->m4; };
DCstruct* f_touchdcstA3() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A3), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A3, m0), 1);
		dcStructField(at, 'p', offsetof(struct A3, m1), 1);
		dcStructField(at, 'j', offsetof(struct A3, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A3, m3), 1, f_touchdcstA2());
		dcStructField(at, 'i', offsetof(struct A3, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ilcsdp> */
union  A4 { i m0; l m1; c m2; s m3; d m4; p m5; };
void f_cpA4(union  A4 *x, const union  A4 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA4(const union  A4 *x, const union  A4 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA4() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A4), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A4, m0), 1);
		dcStructField(at, 'l', offsetof(union  A4, m1), 1);
		dcStructField(at, 'c', offsetof(union  A4, m2), 1);
		dcStructField(at, 's', offsetof(union  A4, m3), 1);
		dcStructField(at, 'd', offsetof(union  A4, m4), 1);
		dcStructField(at, 'p', offsetof(union  A4, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {i} */
struct A5 { i m0; };
void f_cpA5(struct A5 *x, const struct A5 *y) { x->m0 = y->m0; };
int f_cmpA5(const struct A5 *x, const struct A5 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA5() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A5), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A5, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {js} */
struct A6 { j m0; s m1; };
void f_cpA6(struct A6 *x, const struct A6 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA6(const struct A6 *x, const struct A6 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA6() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A6), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A6, m0), 1);
		dcStructField(at, 's', offsetof(struct A6, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iipp> */
union  A7 { i m0; i m1; p m2; p m3; };
void f_cpA7(union  A7 *x, const union  A7 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA7(const union  A7 *x, const union  A7 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA7() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A7), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A7, m0), 1);
		dcStructField(at, 'i', offsetof(union  A7, m1), 1);
		dcStructField(at, 'p', offsetof(union  A7, m2), 1);
		dcStructField(at, 'p', offsetof(union  A7, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fjcif} */
struct A8 { f m0; j m1; c m2; i m3; f m4; };
void f_cpA8(struct A8 *x, const struct A8 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA8(const struct A8 *x, const struct A8 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA8() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A8), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A8, m0), 1);
		dcStructField(at, 'j', offsetof(struct A8, m1), 1);
		dcStructField(at, 'c', offsetof(struct A8, m2), 1);
		dcStructField(at, 'i', offsetof(struct A8, m3), 1);
		dcStructField(at, 'f', offsetof(struct A8, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cpjjdifcjcp} */
struct A9 { c m0; p m1; j m2; j m3; d m4; i m5; f m6; c m7; j m8; c m9; p m10; };
void f_cpA9(struct A9 *x, const struct A9 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA9(const struct A9 *x, const struct A9 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA9() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A9), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A9, m0), 1);
		dcStructField(at, 'p', offsetof(struct A9, m1), 1);
		dcStructField(at, 'j', offsetof(struct A9, m2), 1);
		dcStructField(at, 'j', offsetof(struct A9, m3), 1);
		dcStructField(at, 'd', offsetof(struct A9, m4), 1);
		dcStructField(at, 'i', offsetof(struct A9, m5), 1);
		dcStructField(at, 'f', offsetof(struct A9, m6), 1);
		dcStructField(at, 'c', offsetof(struct A9, m7), 1);
		dcStructField(at, 'j', offsetof(struct A9, m8), 1);
		dcStructField(at, 'c', offsetof(struct A9, m9), 1);
		dcStructField(at, 'p', offsetof(struct A9, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{i}{js}dcids<iipp>{fjcif}{cpjjdifcjcp}if> */
union  A10 { struct A5 m0; struct A6 m1; d m2; c m3; i m4; d m5; s m6; union  A7 m7; struct A8 m8; struct A9 m9; i m10; f m11; };
void f_cpA10(union  A10 *x, const union  A10 *y) { f_cpA5(&x->m0, &y->m0); f_cpA6(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA7(&x->m7, &y->m7); f_cpA8(&x->m8, &y->m8); f_cpA9(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA10(const union  A10 *x, const union  A10 *y) { return f_cmpA5(&x->m0, &y->m0) && f_cmpA6(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA7(&x->m7, &y->m7) && f_cmpA8(&x->m8, &y->m8) && f_cmpA9(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA10() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A10), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A10, m0), 1, f_touchdcstA5());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A10, m1), 1, f_touchdcstA6());
		dcStructField(at, 'd', offsetof(union  A10, m2), 1);
		dcStructField(at, 'c', offsetof(union  A10, m3), 1);
		dcStructField(at, 'i', offsetof(union  A10, m4), 1);
		dcStructField(at, 'd', offsetof(union  A10, m5), 1);
		dcStructField(at, 's', offsetof(union  A10, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A10, m7), 1, f_touchdcstA7());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A10, m8), 1, f_touchdcstA8());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A10, m9), 1, f_touchdcstA9());
		dcStructField(at, 'i', offsetof(union  A10, m10), 1);
		dcStructField(at, 'f', offsetof(union  A10, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cl> */
union  A11 { c m0; l m1; };
void f_cpA11(union  A11 *x, const union  A11 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA11(const union  A11 *x, const union  A11 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA11() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A11), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A11, m0), 1);
		dcStructField(at, 'l', offsetof(union  A11, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lcpsicpspl[3]ff> */
union  A12 { l m0; c m1; p m2; s m3; i m4; c m5; p m6; s m7; p m8; l m9[3]; f m10; f m11; };
void f_cpA12(union  A12 *x, const union  A12 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA12(const union  A12 *x, const union  A12 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA12() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A12), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A12, m0), 1);
		dcStructField(at, 'c', offsetof(union  A12, m1), 1);
		dcStructField(at, 'p', offsetof(union  A12, m2), 1);
		dcStructField(at, 's', offsetof(union  A12, m3), 1);
		dcStructField(at, 'i', offsetof(union  A12, m4), 1);
		dcStructField(at, 'c', offsetof(union  A12, m5), 1);
		dcStructField(at, 'p', offsetof(union  A12, m6), 1);
		dcStructField(at, 's', offsetof(union  A12, m7), 1);
		dcStructField(at, 'p', offsetof(union  A12, m8), 1);
		dcStructField(at, 'l', offsetof(union  A12, m9), 3);
		dcStructField(at, 'f', offsetof(union  A12, m10), 1);
		dcStructField(at, 'f', offsetof(union  A12, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sj} */
struct A13 { s m0; j m1; };
void f_cpA13(struct A13 *x, const struct A13 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA13(const struct A13 *x, const struct A13 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA13() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A13), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A13, m0), 1);
		dcStructField(at, 'j', offsetof(struct A13, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lddidfc{sj}> */
union  A14 { l m0; d m1; d m2; i m3; d m4; f m5; c m6; struct A13 m7; };
void f_cpA14(union  A14 *x, const union  A14 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA13(&x->m7, &y->m7); };
int f_cmpA14(const union  A14 *x, const union  A14 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA13(&x->m7, &y->m7); };
DCstruct* f_touchdcstA14() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A14), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A14, m0), 1);
		dcStructField(at, 'd', offsetof(union  A14, m1), 1);
		dcStructField(at, 'd', offsetof(union  A14, m2), 1);
		dcStructField(at, 'i', offsetof(union  A14, m3), 1);
		dcStructField(at, 'd', offsetof(union  A14, m4), 1);
		dcStructField(at, 'f', offsetof(union  A14, m5), 1);
		dcStructField(at, 'c', offsetof(union  A14, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A14, m7), 1, f_touchdcstA13());
		dcCloseStruct(at);
	}
	return at;
};
/* {ppsldspj} */
struct A15 { p m0; p m1; s m2; l m3; d m4; s m5; p m6; j m7; };
void f_cpA15(struct A15 *x, const struct A15 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA15(const struct A15 *x, const struct A15 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA15() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A15), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A15, m0), 1);
		dcStructField(at, 'p', offsetof(struct A15, m1), 1);
		dcStructField(at, 's', offsetof(struct A15, m2), 1);
		dcStructField(at, 'l', offsetof(struct A15, m3), 1);
		dcStructField(at, 'd', offsetof(struct A15, m4), 1);
		dcStructField(at, 's', offsetof(struct A15, m5), 1);
		dcStructField(at, 'p', offsetof(struct A15, m6), 1);
		dcStructField(at, 'j', offsetof(struct A15, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <s[7]csddcfdlpfd> */
union  A16 { s m0[7]; c m1; s m2; d m3; d m4; c m5; f m6; d m7; l m8; p m9; f m10; d m11; };
void f_cpA16(union  A16 *x, const union  A16 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA16(const union  A16 *x, const union  A16 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA16() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A16), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A16, m0), 7);
		dcStructField(at, 'c', offsetof(union  A16, m1), 1);
		dcStructField(at, 's', offsetof(union  A16, m2), 1);
		dcStructField(at, 'd', offsetof(union  A16, m3), 1);
		dcStructField(at, 'd', offsetof(union  A16, m4), 1);
		dcStructField(at, 'c', offsetof(union  A16, m5), 1);
		dcStructField(at, 'f', offsetof(union  A16, m6), 1);
		dcStructField(at, 'd', offsetof(union  A16, m7), 1);
		dcStructField(at, 'l', offsetof(union  A16, m8), 1);
		dcStructField(at, 'p', offsetof(union  A16, m9), 1);
		dcStructField(at, 'f', offsetof(union  A16, m10), 1);
		dcStructField(at, 'd', offsetof(union  A16, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ffficscid} */
struct A17 { f m0; f m1; f m2; i m3; c m4; s m5; c m6; i m7; d m8; };
void f_cpA17(struct A17 *x, const struct A17 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA17(const struct A17 *x, const struct A17 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA17() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A17), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A17, m0), 1);
		dcStructField(at, 'f', offsetof(struct A17, m1), 1);
		dcStructField(at, 'f', offsetof(struct A17, m2), 1);
		dcStructField(at, 'i', offsetof(struct A17, m3), 1);
		dcStructField(at, 'c', offsetof(struct A17, m4), 1);
		dcStructField(at, 's', offsetof(struct A17, m5), 1);
		dcStructField(at, 'c', offsetof(struct A17, m6), 1);
		dcStructField(at, 'i', offsetof(struct A17, m7), 1);
		dcStructField(at, 'd', offsetof(struct A17, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ilc[3]fscssj> */
union  A18 { i m0; l m1; c m2[3]; f m3; s m4; c m5; s m6; s m7; j m8; };
void f_cpA18(union  A18 *x, const union  A18 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA18(const union  A18 *x, const union  A18 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA18() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A18), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A18, m0), 1);
		dcStructField(at, 'l', offsetof(union  A18, m1), 1);
		dcStructField(at, 'c', offsetof(union  A18, m2), 3);
		dcStructField(at, 'f', offsetof(union  A18, m3), 1);
		dcStructField(at, 's', offsetof(union  A18, m4), 1);
		dcStructField(at, 'c', offsetof(union  A18, m5), 1);
		dcStructField(at, 's', offsetof(union  A18, m6), 1);
		dcStructField(at, 's', offsetof(union  A18, m7), 1);
		dcStructField(at, 'j', offsetof(union  A18, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{ppsldspj}<s[7]csddcfdlpfd>dj{ffficscid}piij<ilc[3]fscssj>ds> */
union  A19 { struct A15 m0; union  A16 m1; d m2; j m3; struct A17 m4; p m5; i m6; i m7; j m8; union  A18 m9; d m10; s m11; };
void f_cpA19(union  A19 *x, const union  A19 *y) { f_cpA15(&x->m0, &y->m0); f_cpA16(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; f_cpA17(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA18(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA19(const union  A19 *x, const union  A19 *y) { return f_cmpA15(&x->m0, &y->m0) && f_cmpA16(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA17(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA18(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA19() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A19), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A19, m0), 1, f_touchdcstA15());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A19, m1), 1, f_touchdcstA16());
		dcStructField(at, 'd', offsetof(union  A19, m2), 1);
		dcStructField(at, 'j', offsetof(union  A19, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A19, m4), 1, f_touchdcstA17());
		dcStructField(at, 'p', offsetof(union  A19, m5), 1);
		dcStructField(at, 'i', offsetof(union  A19, m6), 1);
		dcStructField(at, 'i', offsetof(union  A19, m7), 1);
		dcStructField(at, 'j', offsetof(union  A19, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A19, m9), 1, f_touchdcstA18());
		dcStructField(at, 'd', offsetof(union  A19, m10), 1);
		dcStructField(at, 's', offsetof(union  A19, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <l> */
union  A20 { l m0; };
void f_cpA20(union  A20 *x, const union  A20 *y) { x->m0 = y->m0; };
int f_cmpA20(const union  A20 *x, const union  A20 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA20() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A20), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A20, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lllcp<lddidfc{sj}>jl<{ppsldspj}<s[7]csddcfdlpfd>dj{ffficscid}piij<ilc[3]fscssj>ds>c<l>i> */
union  A21 { l m0; l m1; l m2; c m3; p m4; union  A14 m5; j m6; l m7; union  A19 m8; c m9; union  A20 m10; i m11; };
void f_cpA21(union  A21 *x, const union  A21 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA14(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; f_cpA19(&x->m8, &y->m8); x->m9 = y->m9; f_cpA20(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA21(const union  A21 *x, const union  A21 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA14(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA19(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA20(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA21() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A21), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A21, m0), 1);
		dcStructField(at, 'l', offsetof(union  A21, m1), 1);
		dcStructField(at, 'l', offsetof(union  A21, m2), 1);
		dcStructField(at, 'c', offsetof(union  A21, m3), 1);
		dcStructField(at, 'p', offsetof(union  A21, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A21, m5), 1, f_touchdcstA14());
		dcStructField(at, 'j', offsetof(union  A21, m6), 1);
		dcStructField(at, 'l', offsetof(union  A21, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A21, m8), 1, f_touchdcstA19());
		dcStructField(at, 'c', offsetof(union  A21, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A21, m10), 1, f_touchdcstA20());
		dcStructField(at, 'i', offsetof(union  A21, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pdjcpjsilfdp} */
struct A22 { p m0; d m1; j m2; c m3; p m4; j m5; s m6; i m7; l m8; f m9; d m10; p m11; };
void f_cpA22(struct A22 *x, const struct A22 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA22(const struct A22 *x, const struct A22 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA22() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A22), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A22, m0), 1);
		dcStructField(at, 'd', offsetof(struct A22, m1), 1);
		dcStructField(at, 'j', offsetof(struct A22, m2), 1);
		dcStructField(at, 'c', offsetof(struct A22, m3), 1);
		dcStructField(at, 'p', offsetof(struct A22, m4), 1);
		dcStructField(at, 'j', offsetof(struct A22, m5), 1);
		dcStructField(at, 's', offsetof(struct A22, m6), 1);
		dcStructField(at, 'i', offsetof(struct A22, m7), 1);
		dcStructField(at, 'l', offsetof(struct A22, m8), 1);
		dcStructField(at, 'f', offsetof(struct A22, m9), 1);
		dcStructField(at, 'd', offsetof(struct A22, m10), 1);
		dcStructField(at, 'p', offsetof(struct A22, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pllif> */
union  A23 { p m0; l m1; l m2; i m3; f m4; };
void f_cpA23(union  A23 *x, const union  A23 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA23(const union  A23 *x, const union  A23 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA23() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A23), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A23, m0), 1);
		dcStructField(at, 'l', offsetof(union  A23, m1), 1);
		dcStructField(at, 'l', offsetof(union  A23, m2), 1);
		dcStructField(at, 'i', offsetof(union  A23, m3), 1);
		dcStructField(at, 'f', offsetof(union  A23, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cfci} */
struct A24 { c m0; f m1; c m2; i m3; };
void f_cpA24(struct A24 *x, const struct A24 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA24(const struct A24 *x, const struct A24 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA24() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A24), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A24, m0), 1);
		dcStructField(at, 'f', offsetof(struct A24, m1), 1);
		dcStructField(at, 'c', offsetof(struct A24, m2), 1);
		dcStructField(at, 'i', offsetof(struct A24, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p{pdjcpjsilfdp}jd<pllif>d{cfci}sdc[16]if> */
union  A25 { p m0; struct A22 m1; j m2; d m3; union  A23 m4; d m5; struct A24 m6; s m7; d m8; c m9[16]; i m10; f m11; };
void f_cpA25(union  A25 *x, const union  A25 *y) { x->m0 = y->m0; f_cpA22(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; f_cpA23(&x->m4, &y->m4); x->m5 = y->m5; f_cpA24(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m9[8] = y->m9[8]; x->m9[9] = y->m9[9]; x->m9[10] = y->m9[10]; x->m9[11] = y->m9[11]; x->m9[12] = y->m9[12]; x->m9[13] = y->m9[13]; x->m9[14] = y->m9[14]; x->m9[15] = y->m9[15]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA25(const union  A25 *x, const union  A25 *y) { return x->m0 == y->m0 && f_cmpA22(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA23(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA24(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m9[8] == y->m9[8] && x->m9[9] == y->m9[9] && x->m9[10] == y->m9[10] && x->m9[11] == y->m9[11] && x->m9[12] == y->m9[12] && x->m9[13] == y->m9[13] && x->m9[14] == y->m9[14] && x->m9[15] == y->m9[15] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA25() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A25), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A25, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A25, m1), 1, f_touchdcstA22());
		dcStructField(at, 'j', offsetof(union  A25, m2), 1);
		dcStructField(at, 'd', offsetof(union  A25, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A25, m4), 1, f_touchdcstA23());
		dcStructField(at, 'd', offsetof(union  A25, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A25, m6), 1, f_touchdcstA24());
		dcStructField(at, 's', offsetof(union  A25, m7), 1);
		dcStructField(at, 'd', offsetof(union  A25, m8), 1);
		dcStructField(at, 'c', offsetof(union  A25, m9), 16);
		dcStructField(at, 'i', offsetof(union  A25, m10), 1);
		dcStructField(at, 'f', offsetof(union  A25, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ddipljjssifc} */
struct A26 { d m0; d m1; i m2; p m3; l m4; j m5; j m6; s m7; s m8; i m9; f m10; c m11; };
void f_cpA26(struct A26 *x, const struct A26 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA26(const struct A26 *x, const struct A26 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA26() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A26), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A26, m0), 1);
		dcStructField(at, 'd', offsetof(struct A26, m1), 1);
		dcStructField(at, 'i', offsetof(struct A26, m2), 1);
		dcStructField(at, 'p', offsetof(struct A26, m3), 1);
		dcStructField(at, 'l', offsetof(struct A26, m4), 1);
		dcStructField(at, 'j', offsetof(struct A26, m5), 1);
		dcStructField(at, 'j', offsetof(struct A26, m6), 1);
		dcStructField(at, 's', offsetof(struct A26, m7), 1);
		dcStructField(at, 's', offsetof(struct A26, m8), 1);
		dcStructField(at, 'i', offsetof(struct A26, m9), 1);
		dcStructField(at, 'f', offsetof(struct A26, m10), 1);
		dcStructField(at, 'c', offsetof(struct A26, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <icdf> */
union  A27 { i m0; c m1; d m2; f m3; };
void f_cpA27(union  A27 *x, const union  A27 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA27(const union  A27 *x, const union  A27 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA27() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A27), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A27, m0), 1);
		dcStructField(at, 'c', offsetof(union  A27, m1), 1);
		dcStructField(at, 'd', offsetof(union  A27, m2), 1);
		dcStructField(at, 'f', offsetof(union  A27, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jpdfpc> */
union  A28 { j m0; p m1; d m2; f m3; p m4; c m5; };
void f_cpA28(union  A28 *x, const union  A28 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA28(const union  A28 *x, const union  A28 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA28() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A28), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A28, m0), 1);
		dcStructField(at, 'p', offsetof(union  A28, m1), 1);
		dcStructField(at, 'd', offsetof(union  A28, m2), 1);
		dcStructField(at, 'f', offsetof(union  A28, m3), 1);
		dcStructField(at, 'p', offsetof(union  A28, m4), 1);
		dcStructField(at, 'c', offsetof(union  A28, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <slfdfs{ddipljjssifc}d<icdf>f<jpdfpc>l[6]> */
union  A29 { s m0; l m1; f m2; d m3; f m4; s m5; struct A26 m6; d m7; union  A27 m8; f m9; union  A28 m10; l m11[6]; };
void f_cpA29(union  A29 *x, const union  A29 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA26(&x->m6, &y->m6); x->m7 = y->m7; f_cpA27(&x->m8, &y->m8); x->m9 = y->m9; f_cpA28(&x->m10, &y->m10); x->m11[0] = y->m11[0]; x->m11[1] = y->m11[1]; x->m11[2] = y->m11[2]; x->m11[3] = y->m11[3]; x->m11[4] = y->m11[4]; x->m11[5] = y->m11[5]; };
int f_cmpA29(const union  A29 *x, const union  A29 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA26(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA27(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA28(&x->m10, &y->m10) && x->m11[0] == y->m11[0] && x->m11[1] == y->m11[1] && x->m11[2] == y->m11[2] && x->m11[3] == y->m11[3] && x->m11[4] == y->m11[4] && x->m11[5] == y->m11[5]; };
DCstruct* f_touchdcstA29() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A29), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A29, m0), 1);
		dcStructField(at, 'l', offsetof(union  A29, m1), 1);
		dcStructField(at, 'f', offsetof(union  A29, m2), 1);
		dcStructField(at, 'd', offsetof(union  A29, m3), 1);
		dcStructField(at, 'f', offsetof(union  A29, m4), 1);
		dcStructField(at, 's', offsetof(union  A29, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A29, m6), 1, f_touchdcstA26());
		dcStructField(at, 'd', offsetof(union  A29, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A29, m8), 1, f_touchdcstA27());
		dcStructField(at, 'f', offsetof(union  A29, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A29, m10), 1, f_touchdcstA28());
		dcStructField(at, 'l', offsetof(union  A29, m11), 6);
		dcCloseStruct(at);
	}
	return at;
};
/* <slcdd> */
union  A30 { s m0; l m1; c m2; d m3; d m4; };
void f_cpA30(union  A30 *x, const union  A30 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA30(const union  A30 *x, const union  A30 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA30() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A30), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A30, m0), 1);
		dcStructField(at, 'l', offsetof(union  A30, m1), 1);
		dcStructField(at, 'c', offsetof(union  A30, m2), 1);
		dcStructField(at, 'd', offsetof(union  A30, m3), 1);
		dcStructField(at, 'd', offsetof(union  A30, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lps<slcdd>[11]j[2]spj[9]pdjj> */
union  A31 { l m0; p m1; s m2; union  A30 m3[11]; j m4[2]; s m5; p m6; j m7[9]; p m8; d m9; j m10; j m11; };
void f_cpA31(union  A31 *x, const union  A31 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA30(&x->m3[0], &y->m3[0]); f_cpA30(&x->m3[1], &y->m3[1]); f_cpA30(&x->m3[2], &y->m3[2]); f_cpA30(&x->m3[3], &y->m3[3]); f_cpA30(&x->m3[4], &y->m3[4]); f_cpA30(&x->m3[5], &y->m3[5]); f_cpA30(&x->m3[6], &y->m3[6]); f_cpA30(&x->m3[7], &y->m3[7]); f_cpA30(&x->m3[8], &y->m3[8]); f_cpA30(&x->m3[9], &y->m3[9]); f_cpA30(&x->m3[10], &y->m3[10]); x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; x->m7[7] = y->m7[7]; x->m7[8] = y->m7[8]; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA31(const union  A31 *x, const union  A31 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA30(&x->m3[0], &y->m3[0]) && f_cmpA30(&x->m3[1], &y->m3[1]) && f_cmpA30(&x->m3[2], &y->m3[2]) && f_cmpA30(&x->m3[3], &y->m3[3]) && f_cmpA30(&x->m3[4], &y->m3[4]) && f_cmpA30(&x->m3[5], &y->m3[5]) && f_cmpA30(&x->m3[6], &y->m3[6]) && f_cmpA30(&x->m3[7], &y->m3[7]) && f_cmpA30(&x->m3[8], &y->m3[8]) && f_cmpA30(&x->m3[9], &y->m3[9]) && f_cmpA30(&x->m3[10], &y->m3[10]) && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6] && x->m7[7] == y->m7[7] && x->m7[8] == y->m7[8] && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA31() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A31), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A31, m0), 1);
		dcStructField(at, 'p', offsetof(union  A31, m1), 1);
		dcStructField(at, 's', offsetof(union  A31, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A31, m3), 11, f_touchdcstA30());
		dcStructField(at, 'j', offsetof(union  A31, m4), 2);
		dcStructField(at, 's', offsetof(union  A31, m5), 1);
		dcStructField(at, 'p', offsetof(union  A31, m6), 1);
		dcStructField(at, 'j', offsetof(union  A31, m7), 9);
		dcStructField(at, 'p', offsetof(union  A31, m8), 1);
		dcStructField(at, 'd', offsetof(union  A31, m9), 1);
		dcStructField(at, 'j', offsetof(union  A31, m10), 1);
		dcStructField(at, 'j', offsetof(union  A31, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ij<p{pdjcpjsilfdp}jd<pllif>d{cfci}sdc[16]if>l[12]s<slfdfs{ddipljjssifc}d<icdf>f<jpdfpc>l[6]>p<lps<slcdd>[11]j[2]spj[9]pdjj>} */
struct A32 { i m0; j m1; union  A25 m2; l m3[12]; s m4; union  A29 m5; p m6; union  A31 m7; };
void f_cpA32(struct A32 *x, const struct A32 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA25(&x->m2, &y->m2); x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m4 = y->m4; f_cpA29(&x->m5, &y->m5); x->m6 = y->m6; f_cpA31(&x->m7, &y->m7); };
int f_cmpA32(const struct A32 *x, const struct A32 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA25(&x->m2, &y->m2) && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m4 == y->m4 && f_cmpA29(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA31(&x->m7, &y->m7); };
DCstruct* f_touchdcstA32() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A32), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A32, m0), 1);
		dcStructField(at, 'j', offsetof(struct A32, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A32, m2), 1, f_touchdcstA25());
		dcStructField(at, 'l', offsetof(struct A32, m3), 12);
		dcStructField(at, 's', offsetof(struct A32, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A32, m5), 1, f_touchdcstA29());
		dcStructField(at, 'p', offsetof(struct A32, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A32, m7), 1, f_touchdcstA31());
		dcCloseStruct(at);
	}
	return at;
};
/* {p} */
struct A33 { p m0; };
void f_cpA33(struct A33 *x, const struct A33 *y) { x->m0 = y->m0; };
int f_cmpA33(const struct A33 *x, const struct A33 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA33() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A33), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A33, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lssl} */
struct A34 { l m0; s m1; s m2; l m3; };
void f_cpA34(struct A34 *x, const struct A34 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA34(const struct A34 *x, const struct A34 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA34() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A34), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A34, m0), 1);
		dcStructField(at, 's', offsetof(struct A34, m1), 1);
		dcStructField(at, 's', offsetof(struct A34, m2), 1);
		dcStructField(at, 'l', offsetof(struct A34, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {illds} */
struct A35 { i m0; l m1; l m2; d m3; s m4; };
void f_cpA35(struct A35 *x, const struct A35 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA35(const struct A35 *x, const struct A35 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA35() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A35), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A35, m0), 1);
		dcStructField(at, 'l', offsetof(struct A35, m1), 1);
		dcStructField(at, 'l', offsetof(struct A35, m2), 1);
		dcStructField(at, 'd', offsetof(struct A35, m3), 1);
		dcStructField(at, 's', offsetof(struct A35, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p> */
union  A36 { p m0; };
void f_cpA36(union  A36 *x, const union  A36 *y) { x->m0 = y->m0; };
int f_cmpA36(const union  A36 *x, const union  A36 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA36() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A36), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A36, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jplcpsppjisf> */
union  A37 { j m0; p m1; l m2; c m3; p m4; s m5; p m6; p m7; j m8; i m9; s m10; f m11; };
void f_cpA37(union  A37 *x, const union  A37 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA37(const union  A37 *x, const union  A37 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA37() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A37), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A37, m0), 1);
		dcStructField(at, 'p', offsetof(union  A37, m1), 1);
		dcStructField(at, 'l', offsetof(union  A37, m2), 1);
		dcStructField(at, 'c', offsetof(union  A37, m3), 1);
		dcStructField(at, 'p', offsetof(union  A37, m4), 1);
		dcStructField(at, 's', offsetof(union  A37, m5), 1);
		dcStructField(at, 'p', offsetof(union  A37, m6), 1);
		dcStructField(at, 'p', offsetof(union  A37, m7), 1);
		dcStructField(at, 'j', offsetof(union  A37, m8), 1);
		dcStructField(at, 'i', offsetof(union  A37, m9), 1);
		dcStructField(at, 's', offsetof(union  A37, m10), 1);
		dcStructField(at, 'f', offsetof(union  A37, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dddidfjidllf> */
union  A38 { d m0; d m1; d m2; i m3; d m4; f m5; j m6; i m7; d m8; l m9; l m10; f m11; };
void f_cpA38(union  A38 *x, const union  A38 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA38(const union  A38 *x, const union  A38 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA38() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A38), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A38, m0), 1);
		dcStructField(at, 'd', offsetof(union  A38, m1), 1);
		dcStructField(at, 'd', offsetof(union  A38, m2), 1);
		dcStructField(at, 'i', offsetof(union  A38, m3), 1);
		dcStructField(at, 'd', offsetof(union  A38, m4), 1);
		dcStructField(at, 'f', offsetof(union  A38, m5), 1);
		dcStructField(at, 'j', offsetof(union  A38, m6), 1);
		dcStructField(at, 'i', offsetof(union  A38, m7), 1);
		dcStructField(at, 'd', offsetof(union  A38, m8), 1);
		dcStructField(at, 'l', offsetof(union  A38, m9), 1);
		dcStructField(at, 'l', offsetof(union  A38, m10), 1);
		dcStructField(at, 'f', offsetof(union  A38, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cjcdcpcilccs} */
struct A39 { c m0; j m1; c m2; d m3; c m4; p m5; c m6; i m7; l m8; c m9; c m10; s m11; };
void f_cpA39(struct A39 *x, const struct A39 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA39(const struct A39 *x, const struct A39 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA39() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A39), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A39, m0), 1);
		dcStructField(at, 'j', offsetof(struct A39, m1), 1);
		dcStructField(at, 'c', offsetof(struct A39, m2), 1);
		dcStructField(at, 'd', offsetof(struct A39, m3), 1);
		dcStructField(at, 'c', offsetof(struct A39, m4), 1);
		dcStructField(at, 'p', offsetof(struct A39, m5), 1);
		dcStructField(at, 'c', offsetof(struct A39, m6), 1);
		dcStructField(at, 'i', offsetof(struct A39, m7), 1);
		dcStructField(at, 'l', offsetof(struct A39, m8), 1);
		dcStructField(at, 'c', offsetof(struct A39, m9), 1);
		dcStructField(at, 'c', offsetof(struct A39, m10), 1);
		dcStructField(at, 's', offsetof(struct A39, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cic[16]scpsfjlfl} */
struct A40 { c m0; i m1; c m2[16]; s m3; c m4; p m5; s m6; f m7; j m8; l m9; f m10; l m11; };
void f_cpA40(struct A40 *x, const struct A40 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m2[13] = y->m2[13]; x->m2[14] = y->m2[14]; x->m2[15] = y->m2[15]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA40(const struct A40 *x, const struct A40 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m2[13] == y->m2[13] && x->m2[14] == y->m2[14] && x->m2[15] == y->m2[15] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA40() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A40), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A40, m0), 1);
		dcStructField(at, 'i', offsetof(struct A40, m1), 1);
		dcStructField(at, 'c', offsetof(struct A40, m2), 16);
		dcStructField(at, 's', offsetof(struct A40, m3), 1);
		dcStructField(at, 'c', offsetof(struct A40, m4), 1);
		dcStructField(at, 'p', offsetof(struct A40, m5), 1);
		dcStructField(at, 's', offsetof(struct A40, m6), 1);
		dcStructField(at, 'f', offsetof(struct A40, m7), 1);
		dcStructField(at, 'j', offsetof(struct A40, m8), 1);
		dcStructField(at, 'l', offsetof(struct A40, m9), 1);
		dcStructField(at, 'f', offsetof(struct A40, m10), 1);
		dcStructField(at, 'l', offsetof(struct A40, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <s{cjcdcpcilccs}icpfcs{cic[16]scpsfjlfl}> */
union  A41 { s m0; struct A39 m1; i m2; c m3; p m4; f m5; c m6; s m7; struct A40 m8; };
void f_cpA41(union  A41 *x, const union  A41 *y) { x->m0 = y->m0; f_cpA39(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA40(&x->m8, &y->m8); };
int f_cmpA41(const union  A41 *x, const union  A41 *y) { return x->m0 == y->m0 && f_cmpA39(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA40(&x->m8, &y->m8); };
DCstruct* f_touchdcstA41() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A41), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A41, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A41, m1), 1, f_touchdcstA39());
		dcStructField(at, 'i', offsetof(union  A41, m2), 1);
		dcStructField(at, 'c', offsetof(union  A41, m3), 1);
		dcStructField(at, 'p', offsetof(union  A41, m4), 1);
		dcStructField(at, 'f', offsetof(union  A41, m5), 1);
		dcStructField(at, 'c', offsetof(union  A41, m6), 1);
		dcStructField(at, 's', offsetof(union  A41, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A41, m8), 1, f_touchdcstA40());
		dcCloseStruct(at);
	}
	return at;
};
/* {cccs} */
struct A42 { c m0; c m1; c m2; s m3; };
void f_cpA42(struct A42 *x, const struct A42 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA42(const struct A42 *x, const struct A42 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA42() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A42), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A42, m0), 1);
		dcStructField(at, 'c', offsetof(struct A42, m1), 1);
		dcStructField(at, 'c', offsetof(struct A42, m2), 1);
		dcStructField(at, 's', offsetof(struct A42, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <j> */
union  A43 { j m0; };
void f_cpA43(union  A43 *x, const union  A43 *y) { x->m0 = y->m0; };
int f_cmpA43(const union  A43 *x, const union  A43 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA43() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A43), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A43, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lli> */
union  A44 { l m0; l m1; i m2; };
void f_cpA44(union  A44 *x, const union  A44 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA44(const union  A44 *x, const union  A44 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA44() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A44), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A44, m0), 1);
		dcStructField(at, 'l', offsetof(union  A44, m1), 1);
		dcStructField(at, 'i', offsetof(union  A44, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ciffl> */
union  A45 { c m0; i m1; f m2; f m3; l m4; };
void f_cpA45(union  A45 *x, const union  A45 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA45(const union  A45 *x, const union  A45 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA45() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A45), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A45, m0), 1);
		dcStructField(at, 'i', offsetof(union  A45, m1), 1);
		dcStructField(at, 'f', offsetof(union  A45, m2), 1);
		dcStructField(at, 'f', offsetof(union  A45, m3), 1);
		dcStructField(at, 'l', offsetof(union  A45, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fscf} */
struct A46 { f m0; s m1; c m2; f m3; };
void f_cpA46(struct A46 *x, const struct A46 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA46(const struct A46 *x, const struct A46 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA46() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A46), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A46, m0), 1);
		dcStructField(at, 's', offsetof(struct A46, m1), 1);
		dcStructField(at, 'c', offsetof(struct A46, m2), 1);
		dcStructField(at, 'f', offsetof(struct A46, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {d} */
struct A47 { d m0; };
void f_cpA47(struct A47 *x, const struct A47 *y) { x->m0 = y->m0; };
int f_cmpA47(const struct A47 *x, const struct A47 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA47() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A47), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A47, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {spiddl[12]pps<ciffl>{fscf}{d}} */
struct A48 { s m0; p m1; i m2; d m3; d m4; l m5[12]; p m6; p m7; s m8; union  A45 m9; struct A46 m10; struct A47 m11; };
void f_cpA48(struct A48 *x, const struct A48 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m5[11] = y->m5[11]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA45(&x->m9, &y->m9); f_cpA46(&x->m10, &y->m10); f_cpA47(&x->m11, &y->m11); };
int f_cmpA48(const struct A48 *x, const struct A48 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m5[11] == y->m5[11] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA45(&x->m9, &y->m9) && f_cmpA46(&x->m10, &y->m10) && f_cmpA47(&x->m11, &y->m11); };
DCstruct* f_touchdcstA48() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A48), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A48, m0), 1);
		dcStructField(at, 'p', offsetof(struct A48, m1), 1);
		dcStructField(at, 'i', offsetof(struct A48, m2), 1);
		dcStructField(at, 'd', offsetof(struct A48, m3), 1);
		dcStructField(at, 'd', offsetof(struct A48, m4), 1);
		dcStructField(at, 'l', offsetof(struct A48, m5), 12);
		dcStructField(at, 'p', offsetof(struct A48, m6), 1);
		dcStructField(at, 'p', offsetof(struct A48, m7), 1);
		dcStructField(at, 's', offsetof(struct A48, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A48, m9), 1, f_touchdcstA45());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A48, m10), 1, f_touchdcstA46());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A48, m11), 1, f_touchdcstA47());
		dcCloseStruct(at);
	}
	return at;
};
/* {sd<lli>{spiddl[12]pps<ciffl>{fscf}{d}}jsdlccss} */
struct A49 { s m0; d m1; union  A44 m2; struct A48 m3; j m4; s m5; d m6; l m7; c m8; c m9; s m10; s m11; };
void f_cpA49(struct A49 *x, const struct A49 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA44(&x->m2, &y->m2); f_cpA48(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA49(const struct A49 *x, const struct A49 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA44(&x->m2, &y->m2) && f_cmpA48(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA49() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A49), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A49, m0), 1);
		dcStructField(at, 'd', offsetof(struct A49, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A49, m2), 1, f_touchdcstA44());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A49, m3), 1, f_touchdcstA48());
		dcStructField(at, 'j', offsetof(struct A49, m4), 1);
		dcStructField(at, 's', offsetof(struct A49, m5), 1);
		dcStructField(at, 'd', offsetof(struct A49, m6), 1);
		dcStructField(at, 'l', offsetof(struct A49, m7), 1);
		dcStructField(at, 'c', offsetof(struct A49, m8), 1);
		dcStructField(at, 'c', offsetof(struct A49, m9), 1);
		dcStructField(at, 's', offsetof(struct A49, m10), 1);
		dcStructField(at, 's', offsetof(struct A49, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lcidjsljpidi[10]> */
union  A50 { l m0; c m1; i m2; d m3; j m4; s m5; l m6; j m7; p m8; i m9; d m10; i m11[10]; };
void f_cpA50(union  A50 *x, const union  A50 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11[0] = y->m11[0]; x->m11[1] = y->m11[1]; x->m11[2] = y->m11[2]; x->m11[3] = y->m11[3]; x->m11[4] = y->m11[4]; x->m11[5] = y->m11[5]; x->m11[6] = y->m11[6]; x->m11[7] = y->m11[7]; x->m11[8] = y->m11[8]; x->m11[9] = y->m11[9]; };
int f_cmpA50(const union  A50 *x, const union  A50 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11[0] == y->m11[0] && x->m11[1] == y->m11[1] && x->m11[2] == y->m11[2] && x->m11[3] == y->m11[3] && x->m11[4] == y->m11[4] && x->m11[5] == y->m11[5] && x->m11[6] == y->m11[6] && x->m11[7] == y->m11[7] && x->m11[8] == y->m11[8] && x->m11[9] == y->m11[9]; };
DCstruct* f_touchdcstA50() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A50), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A50, m0), 1);
		dcStructField(at, 'c', offsetof(union  A50, m1), 1);
		dcStructField(at, 'i', offsetof(union  A50, m2), 1);
		dcStructField(at, 'd', offsetof(union  A50, m3), 1);
		dcStructField(at, 'j', offsetof(union  A50, m4), 1);
		dcStructField(at, 's', offsetof(union  A50, m5), 1);
		dcStructField(at, 'l', offsetof(union  A50, m6), 1);
		dcStructField(at, 'j', offsetof(union  A50, m7), 1);
		dcStructField(at, 'p', offsetof(union  A50, m8), 1);
		dcStructField(at, 'i', offsetof(union  A50, m9), 1);
		dcStructField(at, 'd', offsetof(union  A50, m10), 1);
		dcStructField(at, 'i', offsetof(union  A50, m11), 10);
		dcCloseStruct(at);
	}
	return at;
};
/* <il> */
union  A51 { i m0; l m1; };
void f_cpA51(union  A51 *x, const union  A51 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA51(const union  A51 *x, const union  A51 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA51() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A51), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A51, m0), 1);
		dcStructField(at, 'l', offsetof(union  A51, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jjdfill<lcidjsljpidi[10]><il>> */
union  A52 { j m0; j m1; d m2; f m3; i m4; l m5; l m6; union  A50 m7; union  A51 m8; };
void f_cpA52(union  A52 *x, const union  A52 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA50(&x->m7, &y->m7); f_cpA51(&x->m8, &y->m8); };
int f_cmpA52(const union  A52 *x, const union  A52 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA50(&x->m7, &y->m7) && f_cmpA51(&x->m8, &y->m8); };
DCstruct* f_touchdcstA52() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A52), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A52, m0), 1);
		dcStructField(at, 'j', offsetof(union  A52, m1), 1);
		dcStructField(at, 'd', offsetof(union  A52, m2), 1);
		dcStructField(at, 'f', offsetof(union  A52, m3), 1);
		dcStructField(at, 'i', offsetof(union  A52, m4), 1);
		dcStructField(at, 'l', offsetof(union  A52, m5), 1);
		dcStructField(at, 'l', offsetof(union  A52, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A52, m7), 1, f_touchdcstA50());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A52, m8), 1, f_touchdcstA51());
		dcCloseStruct(at);
	}
	return at;
};
/* {fls[1]jjdd<jjdfill<lcidjsljpidi[10]><il>>c} */
struct A53 { f m0; l m1; s m2[1]; j m3; j m4; d m5; d m6; union  A52 m7; c m8; };
void f_cpA53(struct A53 *x, const struct A53 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA52(&x->m7, &y->m7); x->m8 = y->m8; };
int f_cmpA53(const struct A53 *x, const struct A53 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA52(&x->m7, &y->m7) && x->m8 == y->m8; };
DCstruct* f_touchdcstA53() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A53), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A53, m0), 1);
		dcStructField(at, 'l', offsetof(struct A53, m1), 1);
		dcStructField(at, 's', offsetof(struct A53, m2), 1);
		dcStructField(at, 'j', offsetof(struct A53, m3), 1);
		dcStructField(at, 'j', offsetof(struct A53, m4), 1);
		dcStructField(at, 'd', offsetof(struct A53, m5), 1);
		dcStructField(at, 'd', offsetof(struct A53, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A53, m7), 1, f_touchdcstA52());
		dcStructField(at, 'c', offsetof(struct A53, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pdc} */
struct A54 { p m0; d m1; c m2; };
void f_cpA54(struct A54 *x, const struct A54 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA54(const struct A54 *x, const struct A54 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA54() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A54), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A54, m0), 1);
		dcStructField(at, 'd', offsetof(struct A54, m1), 1);
		dcStructField(at, 'c', offsetof(struct A54, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fdppljdcdpi[5]d> */
union  A55 { f m0; d m1; p m2; p m3; l m4; j m5; d m6; c m7; d m8; p m9; i m10[5]; d m11; };
void f_cpA55(union  A55 *x, const union  A55 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m11 = y->m11; };
int f_cmpA55(const union  A55 *x, const union  A55 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m11 == y->m11; };
DCstruct* f_touchdcstA55() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A55), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A55, m0), 1);
		dcStructField(at, 'd', offsetof(union  A55, m1), 1);
		dcStructField(at, 'p', offsetof(union  A55, m2), 1);
		dcStructField(at, 'p', offsetof(union  A55, m3), 1);
		dcStructField(at, 'l', offsetof(union  A55, m4), 1);
		dcStructField(at, 'j', offsetof(union  A55, m5), 1);
		dcStructField(at, 'd', offsetof(union  A55, m6), 1);
		dcStructField(at, 'c', offsetof(union  A55, m7), 1);
		dcStructField(at, 'd', offsetof(union  A55, m8), 1);
		dcStructField(at, 'p', offsetof(union  A55, m9), 1);
		dcStructField(at, 'i', offsetof(union  A55, m10), 5);
		dcStructField(at, 'd', offsetof(union  A55, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pjlsl> */
union  A56 { p m0; j m1; l m2; s m3; l m4; };
void f_cpA56(union  A56 *x, const union  A56 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA56(const union  A56 *x, const union  A56 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA56() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A56), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A56, m0), 1);
		dcStructField(at, 'j', offsetof(union  A56, m1), 1);
		dcStructField(at, 'l', offsetof(union  A56, m2), 1);
		dcStructField(at, 's', offsetof(union  A56, m3), 1);
		dcStructField(at, 'l', offsetof(union  A56, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lflsfifldljl} */
struct A57 { l m0; f m1; l m2; s m3; f m4; i m5; f m6; l m7; d m8; l m9; j m10; l m11; };
void f_cpA57(struct A57 *x, const struct A57 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA57(const struct A57 *x, const struct A57 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA57() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A57), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A57, m0), 1);
		dcStructField(at, 'f', offsetof(struct A57, m1), 1);
		dcStructField(at, 'l', offsetof(struct A57, m2), 1);
		dcStructField(at, 's', offsetof(struct A57, m3), 1);
		dcStructField(at, 'f', offsetof(struct A57, m4), 1);
		dcStructField(at, 'i', offsetof(struct A57, m5), 1);
		dcStructField(at, 'f', offsetof(struct A57, m6), 1);
		dcStructField(at, 'l', offsetof(struct A57, m7), 1);
		dcStructField(at, 'd', offsetof(struct A57, m8), 1);
		dcStructField(at, 'l', offsetof(struct A57, m9), 1);
		dcStructField(at, 'j', offsetof(struct A57, m10), 1);
		dcStructField(at, 'l', offsetof(struct A57, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f[2]fsspi} */
struct A58 { f m0[2]; f m1; s m2; s m3; p m4; i m5; };
void f_cpA58(struct A58 *x, const struct A58 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA58(const struct A58 *x, const struct A58 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA58() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A58), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A58, m0), 2);
		dcStructField(at, 'f', offsetof(struct A58, m1), 1);
		dcStructField(at, 's', offsetof(struct A58, m2), 1);
		dcStructField(at, 's', offsetof(struct A58, m3), 1);
		dcStructField(at, 'p', offsetof(struct A58, m4), 1);
		dcStructField(at, 'i', offsetof(struct A58, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{pdc}fl<fdppljdcdpi[5]d>jc<pjlsl>{lflsfifldljl}lls{f[2]fsspi}} */
struct A59 { struct A54 m0; f m1; l m2; union  A55 m3; j m4; c m5; union  A56 m6; struct A57 m7; l m8; l m9; s m10; struct A58 m11; };
void f_cpA59(struct A59 *x, const struct A59 *y) { f_cpA54(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA55(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; f_cpA56(&x->m6, &y->m6); f_cpA57(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA58(&x->m11, &y->m11); };
int f_cmpA59(const struct A59 *x, const struct A59 *y) { return f_cmpA54(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA55(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA56(&x->m6, &y->m6) && f_cmpA57(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA58(&x->m11, &y->m11); };
DCstruct* f_touchdcstA59() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A59), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A59, m0), 1, f_touchdcstA54());
		dcStructField(at, 'f', offsetof(struct A59, m1), 1);
		dcStructField(at, 'l', offsetof(struct A59, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A59, m3), 1, f_touchdcstA55());
		dcStructField(at, 'j', offsetof(struct A59, m4), 1);
		dcStructField(at, 'c', offsetof(struct A59, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A59, m6), 1, f_touchdcstA56());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A59, m7), 1, f_touchdcstA57());
		dcStructField(at, 'l', offsetof(struct A59, m8), 1);
		dcStructField(at, 'l', offsetof(struct A59, m9), 1);
		dcStructField(at, 's', offsetof(struct A59, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A59, m11), 1, f_touchdcstA58());
		dcCloseStruct(at);
	}
	return at;
};
/* <cjjclcfi> */
union  A60 { c m0; j m1; j m2; c m3; l m4; c m5; f m6; i m7; };
void f_cpA60(union  A60 *x, const union  A60 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA60(const union  A60 *x, const union  A60 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA60() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A60), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A60, m0), 1);
		dcStructField(at, 'j', offsetof(union  A60, m1), 1);
		dcStructField(at, 'j', offsetof(union  A60, m2), 1);
		dcStructField(at, 'c', offsetof(union  A60, m3), 1);
		dcStructField(at, 'l', offsetof(union  A60, m4), 1);
		dcStructField(at, 'c', offsetof(union  A60, m5), 1);
		dcStructField(at, 'f', offsetof(union  A60, m6), 1);
		dcStructField(at, 'i', offsetof(union  A60, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fcjsfsicplsf} */
struct A61 { f m0; c m1; j m2; s m3; f m4; s m5; i m6; c m7; p m8; l m9; s m10; f m11; };
void f_cpA61(struct A61 *x, const struct A61 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA61(const struct A61 *x, const struct A61 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA61() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A61), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A61, m0), 1);
		dcStructField(at, 'c', offsetof(struct A61, m1), 1);
		dcStructField(at, 'j', offsetof(struct A61, m2), 1);
		dcStructField(at, 's', offsetof(struct A61, m3), 1);
		dcStructField(at, 'f', offsetof(struct A61, m4), 1);
		dcStructField(at, 's', offsetof(struct A61, m5), 1);
		dcStructField(at, 'i', offsetof(struct A61, m6), 1);
		dcStructField(at, 'c', offsetof(struct A61, m7), 1);
		dcStructField(at, 'p', offsetof(struct A61, m8), 1);
		dcStructField(at, 'l', offsetof(struct A61, m9), 1);
		dcStructField(at, 's', offsetof(struct A61, m10), 1);
		dcStructField(at, 'f', offsetof(struct A61, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <i> */
union  A62 { i m0; };
void f_cpA62(union  A62 *x, const union  A62 *y) { x->m0 = y->m0; };
int f_cmpA62(const union  A62 *x, const union  A62 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA62() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A62), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A62, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sciclf{fcjsfsicplsf}f{d}p<i>i> */
union  A63 { s m0; c m1; i m2; c m3; l m4; f m5; struct A61 m6; f m7; struct A47 m8; p m9; union  A62 m10; i m11; };
void f_cpA63(union  A63 *x, const union  A63 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA61(&x->m6, &y->m6); x->m7 = y->m7; f_cpA47(&x->m8, &y->m8); x->m9 = y->m9; f_cpA62(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA63(const union  A63 *x, const union  A63 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA61(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA47(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA62(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA63() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A63), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A63, m0), 1);
		dcStructField(at, 'c', offsetof(union  A63, m1), 1);
		dcStructField(at, 'i', offsetof(union  A63, m2), 1);
		dcStructField(at, 'c', offsetof(union  A63, m3), 1);
		dcStructField(at, 'l', offsetof(union  A63, m4), 1);
		dcStructField(at, 'f', offsetof(union  A63, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A63, m6), 1, f_touchdcstA61());
		dcStructField(at, 'f', offsetof(union  A63, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A63, m8), 1, f_touchdcstA47());
		dcStructField(at, 'p', offsetof(union  A63, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A63, m10), 1, f_touchdcstA62());
		dcStructField(at, 'i', offsetof(union  A63, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sfci[16]> */
union  A64 { s m0; f m1; c m2; i m3[16]; };
void f_cpA64(union  A64 *x, const union  A64 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m3[12] = y->m3[12]; x->m3[13] = y->m3[13]; x->m3[14] = y->m3[14]; x->m3[15] = y->m3[15]; };
int f_cmpA64(const union  A64 *x, const union  A64 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m3[12] == y->m3[12] && x->m3[13] == y->m3[13] && x->m3[14] == y->m3[14] && x->m3[15] == y->m3[15]; };
DCstruct* f_touchdcstA64() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A64), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A64, m0), 1);
		dcStructField(at, 'f', offsetof(union  A64, m1), 1);
		dcStructField(at, 'c', offsetof(union  A64, m2), 1);
		dcStructField(at, 'i', offsetof(union  A64, m3), 16);
		dcCloseStruct(at);
	}
	return at;
};
/* {dpcc} */
struct A65 { d m0; p m1; c m2; c m3; };
void f_cpA65(struct A65 *x, const struct A65 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA65(const struct A65 *x, const struct A65 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA65() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A65), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A65, m0), 1);
		dcStructField(at, 'p', offsetof(struct A65, m1), 1);
		dcStructField(at, 'c', offsetof(struct A65, m2), 1);
		dcStructField(at, 'c', offsetof(struct A65, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <slj> */
union  A66 { s m0; l m1; j m2; };
void f_cpA66(union  A66 *x, const union  A66 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA66(const union  A66 *x, const union  A66 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA66() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A66), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A66, m0), 1);
		dcStructField(at, 'l', offsetof(union  A66, m1), 1);
		dcStructField(at, 'j', offsetof(union  A66, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fc<slj>d} */
struct A67 { f m0; c m1; union  A66 m2; d m3; };
void f_cpA67(struct A67 *x, const struct A67 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA66(&x->m2, &y->m2); x->m3 = y->m3; };
int f_cmpA67(const struct A67 *x, const struct A67 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA66(&x->m2, &y->m2) && x->m3 == y->m3; };
DCstruct* f_touchdcstA67() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A67), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A67, m0), 1);
		dcStructField(at, 'c', offsetof(struct A67, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A67, m2), 1, f_touchdcstA66());
		dcStructField(at, 'd', offsetof(struct A67, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{{pdc}fl<fdppljdcdpi[5]d>jc<pjlsl>{lflsfifldljl}lls{f[2]fsspi}}<cjjclcfi><sciclf{fcjsfsicplsf}f{d}p<i>i>slpff<sfci[16]>j{dpcc}{fc<slj>d}} */
struct A68 { struct A59 m0; union  A60 m1; union  A63 m2; s m3; l m4; p m5; f m6; f m7; union  A64 m8; j m9; struct A65 m10; struct A67 m11; };
void f_cpA68(struct A68 *x, const struct A68 *y) { f_cpA59(&x->m0, &y->m0); f_cpA60(&x->m1, &y->m1); f_cpA63(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA64(&x->m8, &y->m8); x->m9 = y->m9; f_cpA65(&x->m10, &y->m10); f_cpA67(&x->m11, &y->m11); };
int f_cmpA68(const struct A68 *x, const struct A68 *y) { return f_cmpA59(&x->m0, &y->m0) && f_cmpA60(&x->m1, &y->m1) && f_cmpA63(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA64(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA65(&x->m10, &y->m10) && f_cmpA67(&x->m11, &y->m11); };
DCstruct* f_touchdcstA68() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A68), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A68, m0), 1, f_touchdcstA59());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A68, m1), 1, f_touchdcstA60());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A68, m2), 1, f_touchdcstA63());
		dcStructField(at, 's', offsetof(struct A68, m3), 1);
		dcStructField(at, 'l', offsetof(struct A68, m4), 1);
		dcStructField(at, 'p', offsetof(struct A68, m5), 1);
		dcStructField(at, 'f', offsetof(struct A68, m6), 1);
		dcStructField(at, 'f', offsetof(struct A68, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A68, m8), 1, f_touchdcstA64());
		dcStructField(at, 'j', offsetof(struct A68, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A68, m10), 1, f_touchdcstA65());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A68, m11), 1, f_touchdcstA67());
		dcCloseStruct(at);
	}
	return at;
};
/* <pjifdj> */
union  A69 { p m0; j m1; i m2; f m3; d m4; j m5; };
void f_cpA69(union  A69 *x, const union  A69 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA69(const union  A69 *x, const union  A69 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA69() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A69), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A69, m0), 1);
		dcStructField(at, 'j', offsetof(union  A69, m1), 1);
		dcStructField(at, 'i', offsetof(union  A69, m2), 1);
		dcStructField(at, 'f', offsetof(union  A69, m3), 1);
		dcStructField(at, 'd', offsetof(union  A69, m4), 1);
		dcStructField(at, 'j', offsetof(union  A69, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {d<pjifdj>} */
struct A70 { d m0; union  A69 m1; };
void f_cpA70(struct A70 *x, const struct A70 *y) { x->m0 = y->m0; f_cpA69(&x->m1, &y->m1); };
int f_cmpA70(const struct A70 *x, const struct A70 *y) { return x->m0 == y->m0 && f_cmpA69(&x->m1, &y->m1); };
DCstruct* f_touchdcstA70() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A70), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A70, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A70, m1), 1, f_touchdcstA69());
		dcCloseStruct(at);
	}
	return at;
};
/* <clflpdcplclj> */
union  A71 { c m0; l m1; f m2; l m3; p m4; d m5; c m6; p m7; l m8; c m9; l m10; j m11; };
void f_cpA71(union  A71 *x, const union  A71 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA71(const union  A71 *x, const union  A71 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA71() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A71), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A71, m0), 1);
		dcStructField(at, 'l', offsetof(union  A71, m1), 1);
		dcStructField(at, 'f', offsetof(union  A71, m2), 1);
		dcStructField(at, 'l', offsetof(union  A71, m3), 1);
		dcStructField(at, 'p', offsetof(union  A71, m4), 1);
		dcStructField(at, 'd', offsetof(union  A71, m5), 1);
		dcStructField(at, 'c', offsetof(union  A71, m6), 1);
		dcStructField(at, 'p', offsetof(union  A71, m7), 1);
		dcStructField(at, 'l', offsetof(union  A71, m8), 1);
		dcStructField(at, 'c', offsetof(union  A71, m9), 1);
		dcStructField(at, 'l', offsetof(union  A71, m10), 1);
		dcStructField(at, 'j', offsetof(union  A71, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fjcpfdccjcjd} */
struct A72 { f m0; j m1; c m2; p m3; f m4; d m5; c m6; c m7; j m8; c m9; j m10; d m11; };
void f_cpA72(struct A72 *x, const struct A72 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA72(const struct A72 *x, const struct A72 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA72() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A72), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A72, m0), 1);
		dcStructField(at, 'j', offsetof(struct A72, m1), 1);
		dcStructField(at, 'c', offsetof(struct A72, m2), 1);
		dcStructField(at, 'p', offsetof(struct A72, m3), 1);
		dcStructField(at, 'f', offsetof(struct A72, m4), 1);
		dcStructField(at, 'd', offsetof(struct A72, m5), 1);
		dcStructField(at, 'c', offsetof(struct A72, m6), 1);
		dcStructField(at, 'c', offsetof(struct A72, m7), 1);
		dcStructField(at, 'j', offsetof(struct A72, m8), 1);
		dcStructField(at, 'c', offsetof(struct A72, m9), 1);
		dcStructField(at, 'j', offsetof(struct A72, m10), 1);
		dcStructField(at, 'd', offsetof(struct A72, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {s<clflpdcplclj>jjcjc{fjcpfdccjcjd}scis} */
struct A73 { s m0; union  A71 m1; j m2; j m3; c m4; j m5; c m6; struct A72 m7; s m8; c m9; i m10; s m11; };
void f_cpA73(struct A73 *x, const struct A73 *y) { x->m0 = y->m0; f_cpA71(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA72(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA73(const struct A73 *x, const struct A73 *y) { return x->m0 == y->m0 && f_cmpA71(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA72(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA73() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A73), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A73, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A73, m1), 1, f_touchdcstA71());
		dcStructField(at, 'j', offsetof(struct A73, m2), 1);
		dcStructField(at, 'j', offsetof(struct A73, m3), 1);
		dcStructField(at, 'c', offsetof(struct A73, m4), 1);
		dcStructField(at, 'j', offsetof(struct A73, m5), 1);
		dcStructField(at, 'c', offsetof(struct A73, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A73, m7), 1, f_touchdcstA72());
		dcStructField(at, 's', offsetof(struct A73, m8), 1);
		dcStructField(at, 'c', offsetof(struct A73, m9), 1);
		dcStructField(at, 'i', offsetof(struct A73, m10), 1);
		dcStructField(at, 's', offsetof(struct A73, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ij{s<clflpdcplclj>jjcjc{fjcpfdccjcjd}scis}jdlj} */
struct A74 { i m0; j m1; struct A73 m2; j m3; d m4; l m5; j m6; };
void f_cpA74(struct A74 *x, const struct A74 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA73(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA74(const struct A74 *x, const struct A74 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA73(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA74() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A74), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A74, m0), 1);
		dcStructField(at, 'j', offsetof(struct A74, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A74, m2), 1, f_touchdcstA73());
		dcStructField(at, 'j', offsetof(struct A74, m3), 1);
		dcStructField(at, 'd', offsetof(struct A74, m4), 1);
		dcStructField(at, 'l', offsetof(struct A74, m5), 1);
		dcStructField(at, 'j', offsetof(struct A74, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cf[1]> */
union  A75 { c m0; f m1[1]; };
void f_cpA75(union  A75 *x, const union  A75 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; };
int f_cmpA75(const union  A75 *x, const union  A75 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0]; };
DCstruct* f_touchdcstA75() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A75), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A75, m0), 1);
		dcStructField(at, 'f', offsetof(union  A75, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dpcf[15]cdffdpji} */
struct A76 { d m0; p m1; c m2; f m3[15]; c m4; d m5; f m6; f m7; d m8; p m9; j m10; i m11; };
void f_cpA76(struct A76 *x, const struct A76 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m3[12] = y->m3[12]; x->m3[13] = y->m3[13]; x->m3[14] = y->m3[14]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA76(const struct A76 *x, const struct A76 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m3[12] == y->m3[12] && x->m3[13] == y->m3[13] && x->m3[14] == y->m3[14] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA76() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A76), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A76, m0), 1);
		dcStructField(at, 'p', offsetof(struct A76, m1), 1);
		dcStructField(at, 'c', offsetof(struct A76, m2), 1);
		dcStructField(at, 'f', offsetof(struct A76, m3), 15);
		dcStructField(at, 'c', offsetof(struct A76, m4), 1);
		dcStructField(at, 'd', offsetof(struct A76, m5), 1);
		dcStructField(at, 'f', offsetof(struct A76, m6), 1);
		dcStructField(at, 'f', offsetof(struct A76, m7), 1);
		dcStructField(at, 'd', offsetof(struct A76, m8), 1);
		dcStructField(at, 'p', offsetof(struct A76, m9), 1);
		dcStructField(at, 'j', offsetof(struct A76, m10), 1);
		dcStructField(at, 'i', offsetof(struct A76, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{dpcf[15]cdffdpji}ff> */
union  A77 { struct A76 m0; f m1; f m2; };
void f_cpA77(union  A77 *x, const union  A77 *y) { f_cpA76(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA77(const union  A77 *x, const union  A77 *y) { return f_cmpA76(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA77() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A77), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A77, m0), 1, f_touchdcstA76());
		dcStructField(at, 'f', offsetof(union  A77, m1), 1);
		dcStructField(at, 'f', offsetof(union  A77, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <if> */
union  A78 { i m0; f m1; };
void f_cpA78(union  A78 *x, const union  A78 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA78(const union  A78 *x, const union  A78 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA78() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A78), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A78, m0), 1);
		dcStructField(at, 'f', offsetof(union  A78, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jsp[5]jic} */
struct A79 { j m0; s m1; p m2[5]; j m3; i m4; c m5; };
void f_cpA79(struct A79 *x, const struct A79 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA79(const struct A79 *x, const struct A79 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA79() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A79), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A79, m0), 1);
		dcStructField(at, 's', offsetof(struct A79, m1), 1);
		dcStructField(at, 'p', offsetof(struct A79, m2), 5);
		dcStructField(at, 'j', offsetof(struct A79, m3), 1);
		dcStructField(at, 'i', offsetof(struct A79, m4), 1);
		dcStructField(at, 'c', offsetof(struct A79, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fl<if>s{jsp[5]jic}pspddjp> */
union  A80 { f m0; l m1; union  A78 m2; s m3; struct A79 m4; p m5; s m6; p m7; d m8; d m9; j m10; p m11; };
void f_cpA80(union  A80 *x, const union  A80 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA78(&x->m2, &y->m2); x->m3 = y->m3; f_cpA79(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA80(const union  A80 *x, const union  A80 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA78(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA79(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA80() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A80), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A80, m0), 1);
		dcStructField(at, 'l', offsetof(union  A80, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A80, m2), 1, f_touchdcstA78());
		dcStructField(at, 's', offsetof(union  A80, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A80, m4), 1, f_touchdcstA79());
		dcStructField(at, 'p', offsetof(union  A80, m5), 1);
		dcStructField(at, 's', offsetof(union  A80, m6), 1);
		dcStructField(at, 'p', offsetof(union  A80, m7), 1);
		dcStructField(at, 'd', offsetof(union  A80, m8), 1);
		dcStructField(at, 'd', offsetof(union  A80, m9), 1);
		dcStructField(at, 'j', offsetof(union  A80, m10), 1);
		dcStructField(at, 'p', offsetof(union  A80, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cd<{dpcf[15]cdffdpji}ff><fl<if>s{jsp[5]jic}pspddjp>> */
union  A81 { c m0; d m1; union  A77 m2; union  A80 m3; };
void f_cpA81(union  A81 *x, const union  A81 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA77(&x->m2, &y->m2); f_cpA80(&x->m3, &y->m3); };
int f_cmpA81(const union  A81 *x, const union  A81 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA77(&x->m2, &y->m2) && f_cmpA80(&x->m3, &y->m3); };
DCstruct* f_touchdcstA81() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A81), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A81, m0), 1);
		dcStructField(at, 'd', offsetof(union  A81, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A81, m2), 1, f_touchdcstA77());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A81, m3), 1, f_touchdcstA80());
		dcCloseStruct(at);
	}
	return at;
};
/* <dlfidsdfjpif> */
union  A82 { d m0; l m1; f m2; i m3; d m4; s m5; d m6; f m7; j m8; p m9; i m10; f m11; };
void f_cpA82(union  A82 *x, const union  A82 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA82(const union  A82 *x, const union  A82 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA82() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A82), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A82, m0), 1);
		dcStructField(at, 'l', offsetof(union  A82, m1), 1);
		dcStructField(at, 'f', offsetof(union  A82, m2), 1);
		dcStructField(at, 'i', offsetof(union  A82, m3), 1);
		dcStructField(at, 'd', offsetof(union  A82, m4), 1);
		dcStructField(at, 's', offsetof(union  A82, m5), 1);
		dcStructField(at, 'd', offsetof(union  A82, m6), 1);
		dcStructField(at, 'f', offsetof(union  A82, m7), 1);
		dcStructField(at, 'j', offsetof(union  A82, m8), 1);
		dcStructField(at, 'p', offsetof(union  A82, m9), 1);
		dcStructField(at, 'i', offsetof(union  A82, m10), 1);
		dcStructField(at, 'f', offsetof(union  A82, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<dlfidsdfjpif>lldc> */
union  A83 { union  A82 m0; l m1; l m2; d m3; c m4; };
void f_cpA83(union  A83 *x, const union  A83 *y) { f_cpA82(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA83(const union  A83 *x, const union  A83 *y) { return f_cmpA82(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA83() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A83), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A83, m0), 1, f_touchdcstA82());
		dcStructField(at, 'l', offsetof(union  A83, m1), 1);
		dcStructField(at, 'l', offsetof(union  A83, m2), 1);
		dcStructField(at, 'd', offsetof(union  A83, m3), 1);
		dcStructField(at, 'c', offsetof(union  A83, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pslcf[5]cl> */
union  A84 { p m0; s m1; l m2; c m3; f m4[5]; c m5; l m6; };
void f_cpA84(union  A84 *x, const union  A84 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA84(const union  A84 *x, const union  A84 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA84() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A84), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A84, m0), 1);
		dcStructField(at, 's', offsetof(union  A84, m1), 1);
		dcStructField(at, 'l', offsetof(union  A84, m2), 1);
		dcStructField(at, 'c', offsetof(union  A84, m3), 1);
		dcStructField(at, 'f', offsetof(union  A84, m4), 5);
		dcStructField(at, 'c', offsetof(union  A84, m5), 1);
		dcStructField(at, 'l', offsetof(union  A84, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <icddcliislj> */
union  A85 { i m0; c m1; d m2; d m3; c m4; l m5; i m6; i m7; s m8; l m9; j m10; };
void f_cpA85(union  A85 *x, const union  A85 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA85(const union  A85 *x, const union  A85 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA85() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A85), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A85, m0), 1);
		dcStructField(at, 'c', offsetof(union  A85, m1), 1);
		dcStructField(at, 'd', offsetof(union  A85, m2), 1);
		dcStructField(at, 'd', offsetof(union  A85, m3), 1);
		dcStructField(at, 'c', offsetof(union  A85, m4), 1);
		dcStructField(at, 'l', offsetof(union  A85, m5), 1);
		dcStructField(at, 'i', offsetof(union  A85, m6), 1);
		dcStructField(at, 'i', offsetof(union  A85, m7), 1);
		dcStructField(at, 's', offsetof(union  A85, m8), 1);
		dcStructField(at, 'l', offsetof(union  A85, m9), 1);
		dcStructField(at, 'j', offsetof(union  A85, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <js<pslcf[5]cl><icddcliislj>jjl> */
union  A86 { j m0; s m1; union  A84 m2; union  A85 m3; j m4; j m5; l m6; };
void f_cpA86(union  A86 *x, const union  A86 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA84(&x->m2, &y->m2); f_cpA85(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA86(const union  A86 *x, const union  A86 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA84(&x->m2, &y->m2) && f_cmpA85(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA86() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A86), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A86, m0), 1);
		dcStructField(at, 's', offsetof(union  A86, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A86, m2), 1, f_touchdcstA84());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A86, m3), 1, f_touchdcstA85());
		dcStructField(at, 'j', offsetof(union  A86, m4), 1);
		dcStructField(at, 'j', offsetof(union  A86, m5), 1);
		dcStructField(at, 'l', offsetof(union  A86, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <djpfslj> */
union  A87 { d m0; j m1; p m2; f m3; s m4; l m5; j m6; };
void f_cpA87(union  A87 *x, const union  A87 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA87(const union  A87 *x, const union  A87 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA87() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A87), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A87, m0), 1);
		dcStructField(at, 'j', offsetof(union  A87, m1), 1);
		dcStructField(at, 'p', offsetof(union  A87, m2), 1);
		dcStructField(at, 'f', offsetof(union  A87, m3), 1);
		dcStructField(at, 's', offsetof(union  A87, m4), 1);
		dcStructField(at, 'l', offsetof(union  A87, m5), 1);
		dcStructField(at, 'j', offsetof(union  A87, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {d<djpfslj>} */
struct A88 { d m0; union  A87 m1; };
void f_cpA88(struct A88 *x, const struct A88 *y) { x->m0 = y->m0; f_cpA87(&x->m1, &y->m1); };
int f_cmpA88(const struct A88 *x, const struct A88 *y) { return x->m0 == y->m0 && f_cmpA87(&x->m1, &y->m1); };
DCstruct* f_touchdcstA88() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A88), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A88, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A88, m1), 1, f_touchdcstA87());
		dcCloseStruct(at);
	}
	return at;
};
/* {jdpfiijjpfld} */
struct A89 { j m0; d m1; p m2; f m3; i m4; i m5; j m6; j m7; p m8; f m9; l m10; d m11; };
void f_cpA89(struct A89 *x, const struct A89 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA89(const struct A89 *x, const struct A89 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA89() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A89), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A89, m0), 1);
		dcStructField(at, 'd', offsetof(struct A89, m1), 1);
		dcStructField(at, 'p', offsetof(struct A89, m2), 1);
		dcStructField(at, 'f', offsetof(struct A89, m3), 1);
		dcStructField(at, 'i', offsetof(struct A89, m4), 1);
		dcStructField(at, 'i', offsetof(struct A89, m5), 1);
		dcStructField(at, 'j', offsetof(struct A89, m6), 1);
		dcStructField(at, 'j', offsetof(struct A89, m7), 1);
		dcStructField(at, 'p', offsetof(struct A89, m8), 1);
		dcStructField(at, 'f', offsetof(struct A89, m9), 1);
		dcStructField(at, 'l', offsetof(struct A89, m10), 1);
		dcStructField(at, 'd', offsetof(struct A89, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ffp[2]di[16]fpsc> */
union  A90 { f m0; f m1; p m2[2]; d m3; i m4[16]; f m5; p m6; s m7; c m8; };
void f_cpA90(union  A90 *x, const union  A90 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m4[12] = y->m4[12]; x->m4[13] = y->m4[13]; x->m4[14] = y->m4[14]; x->m4[15] = y->m4[15]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA90(const union  A90 *x, const union  A90 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m4[12] == y->m4[12] && x->m4[13] == y->m4[13] && x->m4[14] == y->m4[14] && x->m4[15] == y->m4[15] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA90() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A90), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A90, m0), 1);
		dcStructField(at, 'f', offsetof(union  A90, m1), 1);
		dcStructField(at, 'p', offsetof(union  A90, m2), 2);
		dcStructField(at, 'd', offsetof(union  A90, m3), 1);
		dcStructField(at, 'i', offsetof(union  A90, m4), 16);
		dcStructField(at, 'f', offsetof(union  A90, m5), 1);
		dcStructField(at, 'p', offsetof(union  A90, m6), 1);
		dcStructField(at, 's', offsetof(union  A90, m7), 1);
		dcStructField(at, 'c', offsetof(union  A90, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ljfdfisifjid} */
struct A91 { l m0; j m1; f m2; d m3; f m4; i m5; s m6; i m7; f m8; j m9; i m10; d m11; };
void f_cpA91(struct A91 *x, const struct A91 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA91(const struct A91 *x, const struct A91 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA91() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A91), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A91, m0), 1);
		dcStructField(at, 'j', offsetof(struct A91, m1), 1);
		dcStructField(at, 'f', offsetof(struct A91, m2), 1);
		dcStructField(at, 'd', offsetof(struct A91, m3), 1);
		dcStructField(at, 'f', offsetof(struct A91, m4), 1);
		dcStructField(at, 'i', offsetof(struct A91, m5), 1);
		dcStructField(at, 's', offsetof(struct A91, m6), 1);
		dcStructField(at, 'i', offsetof(struct A91, m7), 1);
		dcStructField(at, 'f', offsetof(struct A91, m8), 1);
		dcStructField(at, 'j', offsetof(struct A91, m9), 1);
		dcStructField(at, 'i', offsetof(struct A91, m10), 1);
		dcStructField(at, 'd', offsetof(struct A91, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dcslc} */
struct A92 { d m0; c m1; s m2; l m3; c m4; };
void f_cpA92(struct A92 *x, const struct A92 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA92(const struct A92 *x, const struct A92 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA92() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A92), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A92, m0), 1);
		dcStructField(at, 'c', offsetof(struct A92, m1), 1);
		dcStructField(at, 's', offsetof(struct A92, m2), 1);
		dcStructField(at, 'l', offsetof(struct A92, m3), 1);
		dcStructField(at, 'c', offsetof(struct A92, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<ffp[2]di[16]fpsc>i{ljfdfisifjid}{dcslc}fipj<j>> */
union  A93 { union  A90 m0; i m1; struct A91 m2; struct A92 m3; f m4; i m5; p m6; j m7; union  A43 m8; };
void f_cpA93(union  A93 *x, const union  A93 *y) { f_cpA90(&x->m0, &y->m0); x->m1 = y->m1; f_cpA91(&x->m2, &y->m2); f_cpA92(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA43(&x->m8, &y->m8); };
int f_cmpA93(const union  A93 *x, const union  A93 *y) { return f_cmpA90(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA91(&x->m2, &y->m2) && f_cmpA92(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA43(&x->m8, &y->m8); };
DCstruct* f_touchdcstA93() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A93), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A93, m0), 1, f_touchdcstA90());
		dcStructField(at, 'i', offsetof(union  A93, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A93, m2), 1, f_touchdcstA91());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A93, m3), 1, f_touchdcstA92());
		dcStructField(at, 'f', offsetof(union  A93, m4), 1);
		dcStructField(at, 'i', offsetof(union  A93, m5), 1);
		dcStructField(at, 'p', offsetof(union  A93, m6), 1);
		dcStructField(at, 'j', offsetof(union  A93, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A93, m8), 1, f_touchdcstA43());
		dcCloseStruct(at);
	}
	return at;
};
/* <cdpjpjjsifds> */
union  A94 { c m0; d m1; p m2; j m3; p m4; j m5; j m6; s m7; i m8; f m9; d m10; s m11; };
void f_cpA94(union  A94 *x, const union  A94 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA94(const union  A94 *x, const union  A94 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA94() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A94), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A94, m0), 1);
		dcStructField(at, 'd', offsetof(union  A94, m1), 1);
		dcStructField(at, 'p', offsetof(union  A94, m2), 1);
		dcStructField(at, 'j', offsetof(union  A94, m3), 1);
		dcStructField(at, 'p', offsetof(union  A94, m4), 1);
		dcStructField(at, 'j', offsetof(union  A94, m5), 1);
		dcStructField(at, 'j', offsetof(union  A94, m6), 1);
		dcStructField(at, 's', offsetof(union  A94, m7), 1);
		dcStructField(at, 'i', offsetof(union  A94, m8), 1);
		dcStructField(at, 'f', offsetof(union  A94, m9), 1);
		dcStructField(at, 'd', offsetof(union  A94, m10), 1);
		dcStructField(at, 's', offsetof(union  A94, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <j<cdpjpjjsifds>ddc> */
union  A95 { j m0; union  A94 m1; d m2; d m3; c m4; };
void f_cpA95(union  A95 *x, const union  A95 *y) { x->m0 = y->m0; f_cpA94(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA95(const union  A95 *x, const union  A95 *y) { return x->m0 == y->m0 && f_cmpA94(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA95() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A95), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A95, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A95, m1), 1, f_touchdcstA94());
		dcStructField(at, 'd', offsetof(union  A95, m2), 1);
		dcStructField(at, 'd', offsetof(union  A95, m3), 1);
		dcStructField(at, 'c', offsetof(union  A95, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dsjscc} */
struct A96 { d m0; s m1; j m2; s m3; c m4; c m5; };
void f_cpA96(struct A96 *x, const struct A96 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA96(const struct A96 *x, const struct A96 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA96() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A96), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A96, m0), 1);
		dcStructField(at, 's', offsetof(struct A96, m1), 1);
		dcStructField(at, 'j', offsetof(struct A96, m2), 1);
		dcStructField(at, 's', offsetof(struct A96, m3), 1);
		dcStructField(at, 'c', offsetof(struct A96, m4), 1);
		dcStructField(at, 'c', offsetof(struct A96, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iljjfildc> */
union  A97 { i m0; l m1; j m2; j m3; f m4; i m5; l m6; d m7; c m8; };
void f_cpA97(union  A97 *x, const union  A97 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA97(const union  A97 *x, const union  A97 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA97() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A97), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A97, m0), 1);
		dcStructField(at, 'l', offsetof(union  A97, m1), 1);
		dcStructField(at, 'j', offsetof(union  A97, m2), 1);
		dcStructField(at, 'j', offsetof(union  A97, m3), 1);
		dcStructField(at, 'f', offsetof(union  A97, m4), 1);
		dcStructField(at, 'i', offsetof(union  A97, m5), 1);
		dcStructField(at, 'l', offsetof(union  A97, m6), 1);
		dcStructField(at, 'd', offsetof(union  A97, m7), 1);
		dcStructField(at, 'c', offsetof(union  A97, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ls> */
union  A98 { l m0; s m1; };
void f_cpA98(union  A98 *x, const union  A98 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA98(const union  A98 *x, const union  A98 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA98() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A98), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A98, m0), 1);
		dcStructField(at, 's', offsetof(union  A98, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {l{dsjscc}<iljjfildc>fddjc[13]<ls>jis} */
struct A99 { l m0; struct A96 m1; union  A97 m2; f m3; d m4; d m5; j m6; c m7[13]; union  A98 m8; j m9; i m10; s m11; };
void f_cpA99(struct A99 *x, const struct A99 *y) { x->m0 = y->m0; f_cpA96(&x->m1, &y->m1); f_cpA97(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; x->m7[7] = y->m7[7]; x->m7[8] = y->m7[8]; x->m7[9] = y->m7[9]; x->m7[10] = y->m7[10]; x->m7[11] = y->m7[11]; x->m7[12] = y->m7[12]; f_cpA98(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA99(const struct A99 *x, const struct A99 *y) { return x->m0 == y->m0 && f_cmpA96(&x->m1, &y->m1) && f_cmpA97(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6] && x->m7[7] == y->m7[7] && x->m7[8] == y->m7[8] && x->m7[9] == y->m7[9] && x->m7[10] == y->m7[10] && x->m7[11] == y->m7[11] && x->m7[12] == y->m7[12] && f_cmpA98(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA99() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A99), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A99, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A99, m1), 1, f_touchdcstA96());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A99, m2), 1, f_touchdcstA97());
		dcStructField(at, 'f', offsetof(struct A99, m3), 1);
		dcStructField(at, 'd', offsetof(struct A99, m4), 1);
		dcStructField(at, 'd', offsetof(struct A99, m5), 1);
		dcStructField(at, 'j', offsetof(struct A99, m6), 1);
		dcStructField(at, 'c', offsetof(struct A99, m7), 13);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A99, m8), 1, f_touchdcstA98());
		dcStructField(at, 'j', offsetof(struct A99, m9), 1);
		dcStructField(at, 'i', offsetof(struct A99, m10), 1);
		dcStructField(at, 's', offsetof(struct A99, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dscfcflpp{l{dsjscc}<iljjfildc>fddjc[13]<ls>jis}lf} */
struct A100 { d m0; s m1; c m2; f m3; c m4; f m5; l m6; p m7; p m8; struct A99 m9; l m10; f m11; };
void f_cpA100(struct A100 *x, const struct A100 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA99(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA100(const struct A100 *x, const struct A100 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA99(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA100() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A100), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A100, m0), 1);
		dcStructField(at, 's', offsetof(struct A100, m1), 1);
		dcStructField(at, 'c', offsetof(struct A100, m2), 1);
		dcStructField(at, 'f', offsetof(struct A100, m3), 1);
		dcStructField(at, 'c', offsetof(struct A100, m4), 1);
		dcStructField(at, 'f', offsetof(struct A100, m5), 1);
		dcStructField(at, 'l', offsetof(struct A100, m6), 1);
		dcStructField(at, 'p', offsetof(struct A100, m7), 1);
		dcStructField(at, 'p', offsetof(struct A100, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A100, m9), 1, f_touchdcstA99());
		dcStructField(at, 'l', offsetof(struct A100, m10), 1);
		dcStructField(at, 'f', offsetof(struct A100, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dj> */
union  A101 { d m0; j m1; };
void f_cpA101(union  A101 *x, const union  A101 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA101(const union  A101 *x, const union  A101 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA101() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A101), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A101, m0), 1);
		dcStructField(at, 'j', offsetof(union  A101, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jlpf} */
struct A102 { j m0; l m1; p m2; f m3; };
void f_cpA102(struct A102 *x, const struct A102 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA102(const struct A102 *x, const struct A102 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA102() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A102), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A102, m0), 1);
		dcStructField(at, 'l', offsetof(struct A102, m1), 1);
		dcStructField(at, 'p', offsetof(struct A102, m2), 1);
		dcStructField(at, 'f', offsetof(struct A102, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {picfjfjlcl} */
struct A103 { p m0; i m1; c m2; f m3; j m4; f m5; j m6; l m7; c m8; l m9; };
void f_cpA103(struct A103 *x, const struct A103 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA103(const struct A103 *x, const struct A103 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA103() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A103), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A103, m0), 1);
		dcStructField(at, 'i', offsetof(struct A103, m1), 1);
		dcStructField(at, 'c', offsetof(struct A103, m2), 1);
		dcStructField(at, 'f', offsetof(struct A103, m3), 1);
		dcStructField(at, 'j', offsetof(struct A103, m4), 1);
		dcStructField(at, 'f', offsetof(struct A103, m5), 1);
		dcStructField(at, 'j', offsetof(struct A103, m6), 1);
		dcStructField(at, 'l', offsetof(struct A103, m7), 1);
		dcStructField(at, 'c', offsetof(struct A103, m8), 1);
		dcStructField(at, 'l', offsetof(struct A103, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ccfiijf> */
union  A104 { c m0; c m1; f m2; i m3; i m4; j m5; f m6; };
void f_cpA104(union  A104 *x, const union  A104 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA104(const union  A104 *x, const union  A104 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA104() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A104), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A104, m0), 1);
		dcStructField(at, 'c', offsetof(union  A104, m1), 1);
		dcStructField(at, 'f', offsetof(union  A104, m2), 1);
		dcStructField(at, 'i', offsetof(union  A104, m3), 1);
		dcStructField(at, 'i', offsetof(union  A104, m4), 1);
		dcStructField(at, 'j', offsetof(union  A104, m5), 1);
		dcStructField(at, 'f', offsetof(union  A104, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fdjj[4]} */
struct A105 { f m0; d m1; j m2; j m3[4]; };
void f_cpA105(struct A105 *x, const struct A105 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; };
int f_cmpA105(const struct A105 *x, const struct A105 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3]; };
DCstruct* f_touchdcstA105() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A105), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A105, m0), 1);
		dcStructField(at, 'd', offsetof(struct A105, m1), 1);
		dcStructField(at, 'j', offsetof(struct A105, m2), 1);
		dcStructField(at, 'j', offsetof(struct A105, m3), 4);
		dcCloseStruct(at);
	}
	return at;
};
/* <jsjpids> */
union  A106 { j m0; s m1; j m2; p m3; i m4; d m5; s m6; };
void f_cpA106(union  A106 *x, const union  A106 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA106(const union  A106 *x, const union  A106 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA106() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A106), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A106, m0), 1);
		dcStructField(at, 's', offsetof(union  A106, m1), 1);
		dcStructField(at, 'j', offsetof(union  A106, m2), 1);
		dcStructField(at, 'p', offsetof(union  A106, m3), 1);
		dcStructField(at, 'i', offsetof(union  A106, m4), 1);
		dcStructField(at, 'd', offsetof(union  A106, m5), 1);
		dcStructField(at, 's', offsetof(union  A106, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lsdispii} */
struct A107 { l m0; s m1; d m2; i m3; s m4; p m5; i m6; i m7; };
void f_cpA107(struct A107 *x, const struct A107 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA107(const struct A107 *x, const struct A107 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA107() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A107), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A107, m0), 1);
		dcStructField(at, 's', offsetof(struct A107, m1), 1);
		dcStructField(at, 'd', offsetof(struct A107, m2), 1);
		dcStructField(at, 'i', offsetof(struct A107, m3), 1);
		dcStructField(at, 's', offsetof(struct A107, m4), 1);
		dcStructField(at, 'p', offsetof(struct A107, m5), 1);
		dcStructField(at, 'i', offsetof(struct A107, m6), 1);
		dcStructField(at, 'i', offsetof(struct A107, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pp} */
struct A108 { p m0; p m1; };
void f_cpA108(struct A108 *x, const struct A108 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA108(const struct A108 *x, const struct A108 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA108() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A108), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A108, m0), 1);
		dcStructField(at, 'p', offsetof(struct A108, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{picfjfjlcl}d<ccfiijf>f{fdjj[4]}<jsjpids>cs{lsdispii}ld{pp}} */
struct A109 { struct A103 m0; d m1; union  A104 m2; f m3; struct A105 m4; union  A106 m5; c m6; s m7; struct A107 m8; l m9; d m10; struct A108 m11; };
void f_cpA109(struct A109 *x, const struct A109 *y) { f_cpA103(&x->m0, &y->m0); x->m1 = y->m1; f_cpA104(&x->m2, &y->m2); x->m3 = y->m3; f_cpA105(&x->m4, &y->m4); f_cpA106(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; f_cpA107(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; f_cpA108(&x->m11, &y->m11); };
int f_cmpA109(const struct A109 *x, const struct A109 *y) { return f_cmpA103(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA104(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA105(&x->m4, &y->m4) && f_cmpA106(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA107(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA108(&x->m11, &y->m11); };
DCstruct* f_touchdcstA109() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A109), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A109, m0), 1, f_touchdcstA103());
		dcStructField(at, 'd', offsetof(struct A109, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A109, m2), 1, f_touchdcstA104());
		dcStructField(at, 'f', offsetof(struct A109, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A109, m4), 1, f_touchdcstA105());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A109, m5), 1, f_touchdcstA106());
		dcStructField(at, 'c', offsetof(struct A109, m6), 1);
		dcStructField(at, 's', offsetof(struct A109, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A109, m8), 1, f_touchdcstA107());
		dcStructField(at, 'l', offsetof(struct A109, m9), 1);
		dcStructField(at, 'd', offsetof(struct A109, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A109, m11), 1, f_touchdcstA108());
		dcCloseStruct(at);
	}
	return at;
};
/* {ssjjdifcsp[12]ps} */
struct A110 { s m0; s m1; j m2; j m3; d m4; i m5; f m6; c m7; s m8; p m9[12]; p m10; s m11; };
void f_cpA110(struct A110 *x, const struct A110 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m9[8] = y->m9[8]; x->m9[9] = y->m9[9]; x->m9[10] = y->m9[10]; x->m9[11] = y->m9[11]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA110(const struct A110 *x, const struct A110 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m9[8] == y->m9[8] && x->m9[9] == y->m9[9] && x->m9[10] == y->m9[10] && x->m9[11] == y->m9[11] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA110() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A110), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A110, m0), 1);
		dcStructField(at, 's', offsetof(struct A110, m1), 1);
		dcStructField(at, 'j', offsetof(struct A110, m2), 1);
		dcStructField(at, 'j', offsetof(struct A110, m3), 1);
		dcStructField(at, 'd', offsetof(struct A110, m4), 1);
		dcStructField(at, 'i', offsetof(struct A110, m5), 1);
		dcStructField(at, 'f', offsetof(struct A110, m6), 1);
		dcStructField(at, 'c', offsetof(struct A110, m7), 1);
		dcStructField(at, 's', offsetof(struct A110, m8), 1);
		dcStructField(at, 'p', offsetof(struct A110, m9), 12);
		dcStructField(at, 'p', offsetof(struct A110, m10), 1);
		dcStructField(at, 's', offsetof(struct A110, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ip{ssjjdifcsp[12]ps}d} */
struct A111 { i m0; p m1; struct A110 m2; d m3; };
void f_cpA111(struct A111 *x, const struct A111 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA110(&x->m2, &y->m2); x->m3 = y->m3; };
int f_cmpA111(const struct A111 *x, const struct A111 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA110(&x->m2, &y->m2) && x->m3 == y->m3; };
DCstruct* f_touchdcstA111() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A111), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A111, m0), 1);
		dcStructField(at, 'p', offsetof(struct A111, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A111, m2), 1, f_touchdcstA110());
		dcStructField(at, 'd', offsetof(struct A111, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {if[13]f} */
struct A112 { i m0; f m1[13]; f m2; };
void f_cpA112(struct A112 *x, const struct A112 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m1[10] = y->m1[10]; x->m1[11] = y->m1[11]; x->m1[12] = y->m1[12]; x->m2 = y->m2; };
int f_cmpA112(const struct A112 *x, const struct A112 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m1[10] == y->m1[10] && x->m1[11] == y->m1[11] && x->m1[12] == y->m1[12] && x->m2 == y->m2; };
DCstruct* f_touchdcstA112() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A112), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A112, m0), 1);
		dcStructField(at, 'f', offsetof(struct A112, m1), 13);
		dcStructField(at, 'f', offsetof(struct A112, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{{picfjfjlcl}d<ccfiijf>f{fdjj[4]}<jsjpids>cs{lsdispii}ld{pp}}pdd{ip{ssjjdifcsp[12]ps}d}fffs{if[13]f}id> */
union  A113 { struct A109 m0; p m1; d m2; d m3; struct A111 m4; f m5; f m6; f m7; s m8; struct A112 m9; i m10; d m11; };
void f_cpA113(union  A113 *x, const union  A113 *y) { f_cpA109(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA111(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA112(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA113(const union  A113 *x, const union  A113 *y) { return f_cmpA109(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA111(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA112(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA113() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A113), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A113, m0), 1, f_touchdcstA109());
		dcStructField(at, 'p', offsetof(union  A113, m1), 1);
		dcStructField(at, 'd', offsetof(union  A113, m2), 1);
		dcStructField(at, 'd', offsetof(union  A113, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A113, m4), 1, f_touchdcstA111());
		dcStructField(at, 'f', offsetof(union  A113, m5), 1);
		dcStructField(at, 'f', offsetof(union  A113, m6), 1);
		dcStructField(at, 'f', offsetof(union  A113, m7), 1);
		dcStructField(at, 's', offsetof(union  A113, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A113, m9), 1, f_touchdcstA112());
		dcStructField(at, 'i', offsetof(union  A113, m10), 1);
		dcStructField(at, 'd', offsetof(union  A113, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fjl} */
struct A114 { f m0; j m1; l m2; };
void f_cpA114(struct A114 *x, const struct A114 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA114(const struct A114 *x, const struct A114 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA114() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A114), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A114, m0), 1);
		dcStructField(at, 'j', offsetof(struct A114, m1), 1);
		dcStructField(at, 'l', offsetof(struct A114, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lpidj> */
union  A115 { l m0; p m1; i m2; d m3; j m4; };
void f_cpA115(union  A115 *x, const union  A115 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA115(const union  A115 *x, const union  A115 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA115() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A115), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A115, m0), 1);
		dcStructField(at, 'p', offsetof(union  A115, m1), 1);
		dcStructField(at, 'i', offsetof(union  A115, m2), 1);
		dcStructField(at, 'd', offsetof(union  A115, m3), 1);
		dcStructField(at, 'j', offsetof(union  A115, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <c> */
union  A116 { c m0; };
void f_cpA116(union  A116 *x, const union  A116 *y) { x->m0 = y->m0; };
int f_cmpA116(const union  A116 *x, const union  A116 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA116() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A116), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A116, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {j} */
struct A117 { j m0; };
void f_cpA117(struct A117 *x, const struct A117 *y) { x->m0 = y->m0; };
int f_cmpA117(const struct A117 *x, const struct A117 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA117() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A117), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A117, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<c>{j}> */
union  A118 { union  A116 m0; struct A117 m1; };
void f_cpA118(union  A118 *x, const union  A118 *y) { f_cpA116(&x->m0, &y->m0); f_cpA117(&x->m1, &y->m1); };
int f_cmpA118(const union  A118 *x, const union  A118 *y) { return f_cmpA116(&x->m0, &y->m0) && f_cmpA117(&x->m1, &y->m1); };
DCstruct* f_touchdcstA118() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A118), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A118, m0), 1, f_touchdcstA116());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A118, m1), 1, f_touchdcstA117());
		dcCloseStruct(at);
	}
	return at;
};
/* <fcldjppiddc> */
union  A119 { f m0; c m1; l m2; d m3; j m4; p m5; p m6; i m7; d m8; d m9; c m10; };
void f_cpA119(union  A119 *x, const union  A119 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA119(const union  A119 *x, const union  A119 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA119() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A119), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A119, m0), 1);
		dcStructField(at, 'c', offsetof(union  A119, m1), 1);
		dcStructField(at, 'l', offsetof(union  A119, m2), 1);
		dcStructField(at, 'd', offsetof(union  A119, m3), 1);
		dcStructField(at, 'j', offsetof(union  A119, m4), 1);
		dcStructField(at, 'p', offsetof(union  A119, m5), 1);
		dcStructField(at, 'p', offsetof(union  A119, m6), 1);
		dcStructField(at, 'i', offsetof(union  A119, m7), 1);
		dcStructField(at, 'd', offsetof(union  A119, m8), 1);
		dcStructField(at, 'd', offsetof(union  A119, m9), 1);
		dcStructField(at, 'c', offsetof(union  A119, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fcp} */
struct A120 { f m0; c m1; p m2; };
void f_cpA120(struct A120 *x, const struct A120 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA120(const struct A120 *x, const struct A120 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA120() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A120), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A120, m0), 1);
		dcStructField(at, 'c', offsetof(struct A120, m1), 1);
		dcStructField(at, 'p', offsetof(struct A120, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pjic<fcldjppiddc>{fcp}ii[3]} */
struct A121 { p m0; j m1; i m2; c m3; union  A119 m4; struct A120 m5; i m6; i m7[3]; };
void f_cpA121(struct A121 *x, const struct A121 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA119(&x->m4, &y->m4); f_cpA120(&x->m5, &y->m5); x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; };
int f_cmpA121(const struct A121 *x, const struct A121 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA119(&x->m4, &y->m4) && f_cmpA120(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2]; };
DCstruct* f_touchdcstA121() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A121), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A121, m0), 1);
		dcStructField(at, 'j', offsetof(struct A121, m1), 1);
		dcStructField(at, 'i', offsetof(struct A121, m2), 1);
		dcStructField(at, 'c', offsetof(struct A121, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A121, m4), 1, f_touchdcstA119());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A121, m5), 1, f_touchdcstA120());
		dcStructField(at, 'i', offsetof(struct A121, m6), 1);
		dcStructField(at, 'i', offsetof(struct A121, m7), 3);
		dcCloseStruct(at);
	}
	return at;
};
/* {jfi{fjl}ps<lpidj>i<<c>{j}>j{pjic<fcldjppiddc>{fcp}ii[3]}p} */
struct A122 { j m0; f m1; i m2; struct A114 m3; p m4; s m5; union  A115 m6; i m7; union  A118 m8; j m9; struct A121 m10; p m11; };
void f_cpA122(struct A122 *x, const struct A122 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA114(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; f_cpA115(&x->m6, &y->m6); x->m7 = y->m7; f_cpA118(&x->m8, &y->m8); x->m9 = y->m9; f_cpA121(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA122(const struct A122 *x, const struct A122 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA114(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA115(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA118(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA121(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA122() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A122), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A122, m0), 1);
		dcStructField(at, 'f', offsetof(struct A122, m1), 1);
		dcStructField(at, 'i', offsetof(struct A122, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A122, m3), 1, f_touchdcstA114());
		dcStructField(at, 'p', offsetof(struct A122, m4), 1);
		dcStructField(at, 's', offsetof(struct A122, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A122, m6), 1, f_touchdcstA115());
		dcStructField(at, 'i', offsetof(struct A122, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A122, m8), 1, f_touchdcstA118());
		dcStructField(at, 'j', offsetof(struct A122, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A122, m10), 1, f_touchdcstA121());
		dcStructField(at, 'p', offsetof(struct A122, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djjdpjdc} */
struct A123 { d m0; j m1; j m2; d m3; p m4; j m5; d m6; c m7; };
void f_cpA123(struct A123 *x, const struct A123 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA123(const struct A123 *x, const struct A123 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA123() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A123), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A123, m0), 1);
		dcStructField(at, 'j', offsetof(struct A123, m1), 1);
		dcStructField(at, 'j', offsetof(struct A123, m2), 1);
		dcStructField(at, 'd', offsetof(struct A123, m3), 1);
		dcStructField(at, 'p', offsetof(struct A123, m4), 1);
		dcStructField(at, 'j', offsetof(struct A123, m5), 1);
		dcStructField(at, 'd', offsetof(struct A123, m6), 1);
		dcStructField(at, 'c', offsetof(struct A123, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pfcilplilpcl> */
union  A124 { p m0; f m1; c m2; i m3; l m4; p m5; l m6; i m7; l m8; p m9; c m10; l m11; };
void f_cpA124(union  A124 *x, const union  A124 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA124(const union  A124 *x, const union  A124 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA124() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A124), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A124, m0), 1);
		dcStructField(at, 'f', offsetof(union  A124, m1), 1);
		dcStructField(at, 'c', offsetof(union  A124, m2), 1);
		dcStructField(at, 'i', offsetof(union  A124, m3), 1);
		dcStructField(at, 'l', offsetof(union  A124, m4), 1);
		dcStructField(at, 'p', offsetof(union  A124, m5), 1);
		dcStructField(at, 'l', offsetof(union  A124, m6), 1);
		dcStructField(at, 'i', offsetof(union  A124, m7), 1);
		dcStructField(at, 'l', offsetof(union  A124, m8), 1);
		dcStructField(at, 'p', offsetof(union  A124, m9), 1);
		dcStructField(at, 'c', offsetof(union  A124, m10), 1);
		dcStructField(at, 'l', offsetof(union  A124, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ff} */
struct A125 { f m0; f m1; };
void f_cpA125(struct A125 *x, const struct A125 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA125(const struct A125 *x, const struct A125 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA125() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A125), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A125, m0), 1);
		dcStructField(at, 'f', offsetof(struct A125, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sjldflcdilii> */
union  A126 { s m0; j m1; l m2; d m3; f m4; l m5; c m6; d m7; i m8; l m9; i m10; i m11; };
void f_cpA126(union  A126 *x, const union  A126 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA126(const union  A126 *x, const union  A126 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA126() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A126), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A126, m0), 1);
		dcStructField(at, 'j', offsetof(union  A126, m1), 1);
		dcStructField(at, 'l', offsetof(union  A126, m2), 1);
		dcStructField(at, 'd', offsetof(union  A126, m3), 1);
		dcStructField(at, 'f', offsetof(union  A126, m4), 1);
		dcStructField(at, 'l', offsetof(union  A126, m5), 1);
		dcStructField(at, 'c', offsetof(union  A126, m6), 1);
		dcStructField(at, 'd', offsetof(union  A126, m7), 1);
		dcStructField(at, 'i', offsetof(union  A126, m8), 1);
		dcStructField(at, 'l', offsetof(union  A126, m9), 1);
		dcStructField(at, 'i', offsetof(union  A126, m10), 1);
		dcStructField(at, 'i', offsetof(union  A126, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {psi} */
struct A127 { p m0; s m1; i m2; };
void f_cpA127(struct A127 *x, const struct A127 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA127(const struct A127 *x, const struct A127 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA127() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A127), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A127, m0), 1);
		dcStructField(at, 's', offsetof(struct A127, m1), 1);
		dcStructField(at, 'i', offsetof(struct A127, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jsf[7]pjpcdjdcp> */
union  A128 { j m0; s m1; f m2[7]; p m3; j m4; p m5; c m6; d m7; j m8; d m9; c m10; p m11; };
void f_cpA128(union  A128 *x, const union  A128 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA128(const union  A128 *x, const union  A128 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA128() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A128), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A128, m0), 1);
		dcStructField(at, 's', offsetof(union  A128, m1), 1);
		dcStructField(at, 'f', offsetof(union  A128, m2), 7);
		dcStructField(at, 'p', offsetof(union  A128, m3), 1);
		dcStructField(at, 'j', offsetof(union  A128, m4), 1);
		dcStructField(at, 'p', offsetof(union  A128, m5), 1);
		dcStructField(at, 'c', offsetof(union  A128, m6), 1);
		dcStructField(at, 'd', offsetof(union  A128, m7), 1);
		dcStructField(at, 'j', offsetof(union  A128, m8), 1);
		dcStructField(at, 'd', offsetof(union  A128, m9), 1);
		dcStructField(at, 'c', offsetof(union  A128, m10), 1);
		dcStructField(at, 'p', offsetof(union  A128, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {d<pfcilplilpcl>p{ff}<sjldflcdilii>{p}p{psi}i<jsf[7]pjpcdjdcp>} */
struct A129 { d m0; union  A124 m1; p m2; struct A125 m3; union  A126 m4; struct A33 m5; p m6; struct A127 m7; i m8; union  A128 m9; };
void f_cpA129(struct A129 *x, const struct A129 *y) { x->m0 = y->m0; f_cpA124(&x->m1, &y->m1); x->m2 = y->m2; f_cpA125(&x->m3, &y->m3); f_cpA126(&x->m4, &y->m4); f_cpA33(&x->m5, &y->m5); x->m6 = y->m6; f_cpA127(&x->m7, &y->m7); x->m8 = y->m8; f_cpA128(&x->m9, &y->m9); };
int f_cmpA129(const struct A129 *x, const struct A129 *y) { return x->m0 == y->m0 && f_cmpA124(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA125(&x->m3, &y->m3) && f_cmpA126(&x->m4, &y->m4) && f_cmpA33(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA127(&x->m7, &y->m7) && x->m8 == y->m8 && f_cmpA128(&x->m9, &y->m9); };
DCstruct* f_touchdcstA129() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A129), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A129, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A129, m1), 1, f_touchdcstA124());
		dcStructField(at, 'p', offsetof(struct A129, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A129, m3), 1, f_touchdcstA125());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A129, m4), 1, f_touchdcstA126());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A129, m5), 1, f_touchdcstA33());
		dcStructField(at, 'p', offsetof(struct A129, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A129, m7), 1, f_touchdcstA127());
		dcStructField(at, 'i', offsetof(struct A129, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A129, m9), 1, f_touchdcstA128());
		dcCloseStruct(at);
	}
	return at;
};
/* {cjlc} */
struct A130 { c m0; j m1; l m2; c m3; };
void f_cpA130(struct A130 *x, const struct A130 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA130(const struct A130 *x, const struct A130 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA130() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A130), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A130, m0), 1);
		dcStructField(at, 'j', offsetof(struct A130, m1), 1);
		dcStructField(at, 'l', offsetof(struct A130, m2), 1);
		dcStructField(at, 'c', offsetof(struct A130, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpsscdlfcfcd> */
union  A131 { c m0; p m1; s m2; s m3; c m4; d m5; l m6; f m7; c m8; f m9; c m10; d m11; };
void f_cpA131(union  A131 *x, const union  A131 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA131(const union  A131 *x, const union  A131 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA131() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A131), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A131, m0), 1);
		dcStructField(at, 'p', offsetof(union  A131, m1), 1);
		dcStructField(at, 's', offsetof(union  A131, m2), 1);
		dcStructField(at, 's', offsetof(union  A131, m3), 1);
		dcStructField(at, 'c', offsetof(union  A131, m4), 1);
		dcStructField(at, 'd', offsetof(union  A131, m5), 1);
		dcStructField(at, 'l', offsetof(union  A131, m6), 1);
		dcStructField(at, 'f', offsetof(union  A131, m7), 1);
		dcStructField(at, 'c', offsetof(union  A131, m8), 1);
		dcStructField(at, 'f', offsetof(union  A131, m9), 1);
		dcStructField(at, 'c', offsetof(union  A131, m10), 1);
		dcStructField(at, 'd', offsetof(union  A131, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dfdjjs<cpsscdlfcfcd>lclfl> */
union  A132 { d m0; f m1; d m2; j m3; j m4; s m5; union  A131 m6; l m7; c m8; l m9; f m10; l m11; };
void f_cpA132(union  A132 *x, const union  A132 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA131(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA132(const union  A132 *x, const union  A132 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA131(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA132() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A132), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A132, m0), 1);
		dcStructField(at, 'f', offsetof(union  A132, m1), 1);
		dcStructField(at, 'd', offsetof(union  A132, m2), 1);
		dcStructField(at, 'j', offsetof(union  A132, m3), 1);
		dcStructField(at, 'j', offsetof(union  A132, m4), 1);
		dcStructField(at, 's', offsetof(union  A132, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A132, m6), 1, f_touchdcstA131());
		dcStructField(at, 'l', offsetof(union  A132, m7), 1);
		dcStructField(at, 'c', offsetof(union  A132, m8), 1);
		dcStructField(at, 'l', offsetof(union  A132, m9), 1);
		dcStructField(at, 'f', offsetof(union  A132, m10), 1);
		dcStructField(at, 'l', offsetof(union  A132, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ldp{cjlc}<dfdjjs<cpsscdlfcfcd>lclfl>if[16]d} */
struct A133 { l m0; d m1; p m2; struct A130 m3; union  A132 m4; i m5; f m6[16]; d m7; };
void f_cpA133(struct A133 *x, const struct A133 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA130(&x->m3, &y->m3); f_cpA132(&x->m4, &y->m4); x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m6[11] = y->m6[11]; x->m6[12] = y->m6[12]; x->m6[13] = y->m6[13]; x->m6[14] = y->m6[14]; x->m6[15] = y->m6[15]; x->m7 = y->m7; };
int f_cmpA133(const struct A133 *x, const struct A133 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA130(&x->m3, &y->m3) && f_cmpA132(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m6[11] == y->m6[11] && x->m6[12] == y->m6[12] && x->m6[13] == y->m6[13] && x->m6[14] == y->m6[14] && x->m6[15] == y->m6[15] && x->m7 == y->m7; };
DCstruct* f_touchdcstA133() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A133), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A133, m0), 1);
		dcStructField(at, 'd', offsetof(struct A133, m1), 1);
		dcStructField(at, 'p', offsetof(struct A133, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A133, m3), 1, f_touchdcstA130());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A133, m4), 1, f_touchdcstA132());
		dcStructField(at, 'i', offsetof(struct A133, m5), 1);
		dcStructField(at, 'f', offsetof(struct A133, m6), 16);
		dcStructField(at, 'd', offsetof(struct A133, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sdlclcfij[3]cjp} */
struct A134 { s m0; d m1; l m2; c m3; l m4; c m5; f m6; i m7; j m8[3]; c m9; j m10; p m11; };
void f_cpA134(struct A134 *x, const struct A134 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA134(const struct A134 *x, const struct A134 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA134() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A134), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A134, m0), 1);
		dcStructField(at, 'd', offsetof(struct A134, m1), 1);
		dcStructField(at, 'l', offsetof(struct A134, m2), 1);
		dcStructField(at, 'c', offsetof(struct A134, m3), 1);
		dcStructField(at, 'l', offsetof(struct A134, m4), 1);
		dcStructField(at, 'c', offsetof(struct A134, m5), 1);
		dcStructField(at, 'f', offsetof(struct A134, m6), 1);
		dcStructField(at, 'i', offsetof(struct A134, m7), 1);
		dcStructField(at, 'j', offsetof(struct A134, m8), 3);
		dcStructField(at, 'c', offsetof(struct A134, m9), 1);
		dcStructField(at, 'j', offsetof(struct A134, m10), 1);
		dcStructField(at, 'p', offsetof(struct A134, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pi[13]{sdlclcfij[3]cjp}sd[9]ili<i>f} */
struct A135 { p m0; i m1[13]; struct A134 m2; s m3; d m4[9]; i m5; l m6; i m7; union  A62 m8; f m9; };
void f_cpA135(struct A135 *x, const struct A135 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m1[10] = y->m1[10]; x->m1[11] = y->m1[11]; x->m1[12] = y->m1[12]; f_cpA134(&x->m2, &y->m2); x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA62(&x->m8, &y->m8); x->m9 = y->m9; };
int f_cmpA135(const struct A135 *x, const struct A135 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m1[10] == y->m1[10] && x->m1[11] == y->m1[11] && x->m1[12] == y->m1[12] && f_cmpA134(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA62(&x->m8, &y->m8) && x->m9 == y->m9; };
DCstruct* f_touchdcstA135() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A135), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A135, m0), 1);
		dcStructField(at, 'i', offsetof(struct A135, m1), 13);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A135, m2), 1, f_touchdcstA134());
		dcStructField(at, 's', offsetof(struct A135, m3), 1);
		dcStructField(at, 'd', offsetof(struct A135, m4), 9);
		dcStructField(at, 'i', offsetof(struct A135, m5), 1);
		dcStructField(at, 'l', offsetof(struct A135, m6), 1);
		dcStructField(at, 'i', offsetof(struct A135, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A135, m8), 1, f_touchdcstA62());
		dcStructField(at, 'f', offsetof(struct A135, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{pi[13]{sdlclcfij[3]cjp}sd[9]ili<i>f}l} */
struct A136 { struct A135 m0; l m1; };
void f_cpA136(struct A136 *x, const struct A136 *y) { f_cpA135(&x->m0, &y->m0); x->m1 = y->m1; };
int f_cmpA136(const struct A136 *x, const struct A136 *y) { return f_cmpA135(&x->m0, &y->m0) && x->m1 == y->m1; };
DCstruct* f_touchdcstA136() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A136), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A136, m0), 1, f_touchdcstA135());
		dcStructField(at, 'l', offsetof(struct A136, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cdpdjfscplpi> */
union  A137 { c m0; d m1; p m2; d m3; j m4; f m5; s m6; c m7; p m8; l m9; p m10; i m11; };
void f_cpA137(union  A137 *x, const union  A137 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA137(const union  A137 *x, const union  A137 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA137() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A137), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A137, m0), 1);
		dcStructField(at, 'd', offsetof(union  A137, m1), 1);
		dcStructField(at, 'p', offsetof(union  A137, m2), 1);
		dcStructField(at, 'd', offsetof(union  A137, m3), 1);
		dcStructField(at, 'j', offsetof(union  A137, m4), 1);
		dcStructField(at, 'f', offsetof(union  A137, m5), 1);
		dcStructField(at, 's', offsetof(union  A137, m6), 1);
		dcStructField(at, 'c', offsetof(union  A137, m7), 1);
		dcStructField(at, 'p', offsetof(union  A137, m8), 1);
		dcStructField(at, 'l', offsetof(union  A137, m9), 1);
		dcStructField(at, 'p', offsetof(union  A137, m10), 1);
		dcStructField(at, 'i', offsetof(union  A137, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pfcls} */
struct A138 { p m0; f m1; c m2; l m3; s m4; };
void f_cpA138(struct A138 *x, const struct A138 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA138(const struct A138 *x, const struct A138 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA138() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A138), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A138, m0), 1);
		dcStructField(at, 'f', offsetof(struct A138, m1), 1);
		dcStructField(at, 'c', offsetof(struct A138, m2), 1);
		dcStructField(at, 'l', offsetof(struct A138, m3), 1);
		dcStructField(at, 's', offsetof(struct A138, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lif} */
struct A139 { l m0; i m1; f m2; };
void f_cpA139(struct A139 *x, const struct A139 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA139(const struct A139 *x, const struct A139 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA139() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A139), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A139, m0), 1);
		dcStructField(at, 'i', offsetof(struct A139, m1), 1);
		dcStructField(at, 'f', offsetof(struct A139, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{lif}fdfjccl} */
struct A140 { struct A139 m0; f m1; d m2; f m3; j m4; c m5; c m6; l m7; };
void f_cpA140(struct A140 *x, const struct A140 *y) { f_cpA139(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA140(const struct A140 *x, const struct A140 *y) { return f_cmpA139(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA140() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A140), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A140, m0), 1, f_touchdcstA139());
		dcStructField(at, 'f', offsetof(struct A140, m1), 1);
		dcStructField(at, 'd', offsetof(struct A140, m2), 1);
		dcStructField(at, 'f', offsetof(struct A140, m3), 1);
		dcStructField(at, 'j', offsetof(struct A140, m4), 1);
		dcStructField(at, 'c', offsetof(struct A140, m5), 1);
		dcStructField(at, 'c', offsetof(struct A140, m6), 1);
		dcStructField(at, 'l', offsetof(struct A140, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {l} */
struct A141 { l m0; };
void f_cpA141(struct A141 *x, const struct A141 *y) { x->m0 = y->m0; };
int f_cmpA141(const struct A141 *x, const struct A141 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA141() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A141), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A141, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jlfsdsjssssj} */
struct A142 { j m0; l m1; f m2; s m3; d m4; s m5; j m6; s m7; s m8; s m9; s m10; j m11; };
void f_cpA142(struct A142 *x, const struct A142 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA142(const struct A142 *x, const struct A142 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA142() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A142), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A142, m0), 1);
		dcStructField(at, 'l', offsetof(struct A142, m1), 1);
		dcStructField(at, 'f', offsetof(struct A142, m2), 1);
		dcStructField(at, 's', offsetof(struct A142, m3), 1);
		dcStructField(at, 'd', offsetof(struct A142, m4), 1);
		dcStructField(at, 's', offsetof(struct A142, m5), 1);
		dcStructField(at, 'j', offsetof(struct A142, m6), 1);
		dcStructField(at, 's', offsetof(struct A142, m7), 1);
		dcStructField(at, 's', offsetof(struct A142, m8), 1);
		dcStructField(at, 's', offsetof(struct A142, m9), 1);
		dcStructField(at, 's', offsetof(struct A142, m10), 1);
		dcStructField(at, 'j', offsetof(struct A142, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{l}csjifi{jlfsdsjssssj}> */
union  A143 { struct A141 m0; c m1; s m2; j m3; i m4; f m5; i m6; struct A142 m7; };
void f_cpA143(union  A143 *x, const union  A143 *y) { f_cpA141(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA142(&x->m7, &y->m7); };
int f_cmpA143(const union  A143 *x, const union  A143 *y) { return f_cmpA141(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA142(&x->m7, &y->m7); };
DCstruct* f_touchdcstA143() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A143), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A143, m0), 1, f_touchdcstA141());
		dcStructField(at, 'c', offsetof(union  A143, m1), 1);
		dcStructField(at, 's', offsetof(union  A143, m2), 1);
		dcStructField(at, 'j', offsetof(union  A143, m3), 1);
		dcStructField(at, 'i', offsetof(union  A143, m4), 1);
		dcStructField(at, 'f', offsetof(union  A143, m5), 1);
		dcStructField(at, 'i', offsetof(union  A143, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A143, m7), 1, f_touchdcstA142());
		dcCloseStruct(at);
	}
	return at;
};
/* {ipdjifj} */
struct A144 { i m0; p m1; d m2; j m3; i m4; f m5; j m6; };
void f_cpA144(struct A144 *x, const struct A144 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA144(const struct A144 *x, const struct A144 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA144() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A144), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A144, m0), 1);
		dcStructField(at, 'p', offsetof(struct A144, m1), 1);
		dcStructField(at, 'd', offsetof(struct A144, m2), 1);
		dcStructField(at, 'j', offsetof(struct A144, m3), 1);
		dcStructField(at, 'i', offsetof(struct A144, m4), 1);
		dcStructField(at, 'f', offsetof(struct A144, m5), 1);
		dcStructField(at, 'j', offsetof(struct A144, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jpiifjfis{ipdjifj}pc} */
struct A145 { j m0; p m1; i m2; i m3; f m4; j m5; f m6; i m7; s m8; struct A144 m9; p m10; c m11; };
void f_cpA145(struct A145 *x, const struct A145 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA144(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA145(const struct A145 *x, const struct A145 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA144(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA145() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A145), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A145, m0), 1);
		dcStructField(at, 'p', offsetof(struct A145, m1), 1);
		dcStructField(at, 'i', offsetof(struct A145, m2), 1);
		dcStructField(at, 'i', offsetof(struct A145, m3), 1);
		dcStructField(at, 'f', offsetof(struct A145, m4), 1);
		dcStructField(at, 'j', offsetof(struct A145, m5), 1);
		dcStructField(at, 'f', offsetof(struct A145, m6), 1);
		dcStructField(at, 'i', offsetof(struct A145, m7), 1);
		dcStructField(at, 's', offsetof(struct A145, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A145, m9), 1, f_touchdcstA144());
		dcStructField(at, 'p', offsetof(struct A145, m10), 1);
		dcStructField(at, 'c', offsetof(struct A145, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fcslfdd} */
struct A146 { f m0; c m1; s m2; l m3; f m4; d m5; d m6; };
void f_cpA146(struct A146 *x, const struct A146 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA146(const struct A146 *x, const struct A146 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA146() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A146), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A146, m0), 1);
		dcStructField(at, 'c', offsetof(struct A146, m1), 1);
		dcStructField(at, 's', offsetof(struct A146, m2), 1);
		dcStructField(at, 'l', offsetof(struct A146, m3), 1);
		dcStructField(at, 'f', offsetof(struct A146, m4), 1);
		dcStructField(at, 'd', offsetof(struct A146, m5), 1);
		dcStructField(at, 'd', offsetof(struct A146, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{jpiifjfis{ipdjifj}pc}if{fcslfdd}ffpj} */
struct A147 { struct A145 m0; i m1; f m2; struct A146 m3; f m4; f m5; p m6; j m7; };
void f_cpA147(struct A147 *x, const struct A147 *y) { f_cpA145(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA146(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA147(const struct A147 *x, const struct A147 *y) { return f_cmpA145(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA146(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA147() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A147), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A147, m0), 1, f_touchdcstA145());
		dcStructField(at, 'i', offsetof(struct A147, m1), 1);
		dcStructField(at, 'f', offsetof(struct A147, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A147, m3), 1, f_touchdcstA146());
		dcStructField(at, 'f', offsetof(struct A147, m4), 1);
		dcStructField(at, 'f', offsetof(struct A147, m5), 1);
		dcStructField(at, 'p', offsetof(struct A147, m6), 1);
		dcStructField(at, 'j', offsetof(struct A147, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dpljclld} */
struct A148 { d m0; p m1; l m2; j m3; c m4; l m5; l m6; d m7; };
void f_cpA148(struct A148 *x, const struct A148 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA148(const struct A148 *x, const struct A148 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA148() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A148), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A148, m0), 1);
		dcStructField(at, 'p', offsetof(struct A148, m1), 1);
		dcStructField(at, 'l', offsetof(struct A148, m2), 1);
		dcStructField(at, 'j', offsetof(struct A148, m3), 1);
		dcStructField(at, 'c', offsetof(struct A148, m4), 1);
		dcStructField(at, 'l', offsetof(struct A148, m5), 1);
		dcStructField(at, 'l', offsetof(struct A148, m6), 1);
		dcStructField(at, 'd', offsetof(struct A148, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pflj} */
struct A149 { p m0; f m1; l m2; j m3; };
void f_cpA149(struct A149 *x, const struct A149 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA149(const struct A149 *x, const struct A149 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA149() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A149), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A149, m0), 1);
		dcStructField(at, 'f', offsetof(struct A149, m1), 1);
		dcStructField(at, 'l', offsetof(struct A149, m2), 1);
		dcStructField(at, 'j', offsetof(struct A149, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sfdlscsllfdf> */
union  A150 { s m0; f m1; d m2; l m3; s m4; c m5; s m6; l m7; l m8; f m9; d m10; f m11; };
void f_cpA150(union  A150 *x, const union  A150 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA150(const union  A150 *x, const union  A150 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA150() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A150), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A150, m0), 1);
		dcStructField(at, 'f', offsetof(union  A150, m1), 1);
		dcStructField(at, 'd', offsetof(union  A150, m2), 1);
		dcStructField(at, 'l', offsetof(union  A150, m3), 1);
		dcStructField(at, 's', offsetof(union  A150, m4), 1);
		dcStructField(at, 'c', offsetof(union  A150, m5), 1);
		dcStructField(at, 's', offsetof(union  A150, m6), 1);
		dcStructField(at, 'l', offsetof(union  A150, m7), 1);
		dcStructField(at, 'l', offsetof(union  A150, m8), 1);
		dcStructField(at, 'f', offsetof(union  A150, m9), 1);
		dcStructField(at, 'd', offsetof(union  A150, m10), 1);
		dcStructField(at, 'f', offsetof(union  A150, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {spcs} */
struct A151 { s m0; p m1; c m2; s m3; };
void f_cpA151(struct A151 *x, const struct A151 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA151(const struct A151 *x, const struct A151 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA151() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A151), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A151, m0), 1);
		dcStructField(at, 'p', offsetof(struct A151, m1), 1);
		dcStructField(at, 'c', offsetof(struct A151, m2), 1);
		dcStructField(at, 's', offsetof(struct A151, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fi{pflj}d<sfdlscsllfdf>{spcs}pfccff> */
union  A152 { f m0; i m1; struct A149 m2; d m3; union  A150 m4; struct A151 m5; p m6; f m7; c m8; c m9; f m10; f m11; };
void f_cpA152(union  A152 *x, const union  A152 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA149(&x->m2, &y->m2); x->m3 = y->m3; f_cpA150(&x->m4, &y->m4); f_cpA151(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA152(const union  A152 *x, const union  A152 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA149(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA150(&x->m4, &y->m4) && f_cmpA151(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA152() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A152), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A152, m0), 1);
		dcStructField(at, 'i', offsetof(union  A152, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A152, m2), 1, f_touchdcstA149());
		dcStructField(at, 'd', offsetof(union  A152, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A152, m4), 1, f_touchdcstA150());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A152, m5), 1, f_touchdcstA151());
		dcStructField(at, 'p', offsetof(union  A152, m6), 1);
		dcStructField(at, 'f', offsetof(union  A152, m7), 1);
		dcStructField(at, 'c', offsetof(union  A152, m8), 1);
		dcStructField(at, 'c', offsetof(union  A152, m9), 1);
		dcStructField(at, 'f', offsetof(union  A152, m10), 1);
		dcStructField(at, 'f', offsetof(union  A152, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fjdclci} */
struct A153 { f m0; j m1; d m2; c m3; l m4; c m5; i m6; };
void f_cpA153(struct A153 *x, const struct A153 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA153(const struct A153 *x, const struct A153 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA153() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A153), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A153, m0), 1);
		dcStructField(at, 'j', offsetof(struct A153, m1), 1);
		dcStructField(at, 'd', offsetof(struct A153, m2), 1);
		dcStructField(at, 'c', offsetof(struct A153, m3), 1);
		dcStructField(at, 'l', offsetof(struct A153, m4), 1);
		dcStructField(at, 'c', offsetof(struct A153, m5), 1);
		dcStructField(at, 'i', offsetof(struct A153, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jsdflcf{fjdclci}} */
struct A154 { j m0; s m1; d m2; f m3; l m4; c m5; f m6; struct A153 m7; };
void f_cpA154(struct A154 *x, const struct A154 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA153(&x->m7, &y->m7); };
int f_cmpA154(const struct A154 *x, const struct A154 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA153(&x->m7, &y->m7); };
DCstruct* f_touchdcstA154() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A154), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A154, m0), 1);
		dcStructField(at, 's', offsetof(struct A154, m1), 1);
		dcStructField(at, 'd', offsetof(struct A154, m2), 1);
		dcStructField(at, 'f', offsetof(struct A154, m3), 1);
		dcStructField(at, 'l', offsetof(struct A154, m4), 1);
		dcStructField(at, 'c', offsetof(struct A154, m5), 1);
		dcStructField(at, 'f', offsetof(struct A154, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A154, m7), 1, f_touchdcstA153());
		dcCloseStruct(at);
	}
	return at;
};
/* {ffl<fi{pflj}d<sfdlscsllfdf>{spcs}pfccff>jid{jsdflcf{fjdclci}}ppjc} */
struct A155 { f m0; f m1; l m2; union  A152 m3; j m4; i m5; d m6; struct A154 m7; p m8; p m9; j m10; c m11; };
void f_cpA155(struct A155 *x, const struct A155 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA152(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA154(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA155(const struct A155 *x, const struct A155 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA152(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA154(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA155() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A155), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A155, m0), 1);
		dcStructField(at, 'f', offsetof(struct A155, m1), 1);
		dcStructField(at, 'l', offsetof(struct A155, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A155, m3), 1, f_touchdcstA152());
		dcStructField(at, 'j', offsetof(struct A155, m4), 1);
		dcStructField(at, 'i', offsetof(struct A155, m5), 1);
		dcStructField(at, 'd', offsetof(struct A155, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A155, m7), 1, f_touchdcstA154());
		dcStructField(at, 'p', offsetof(struct A155, m8), 1);
		dcStructField(at, 'p', offsetof(struct A155, m9), 1);
		dcStructField(at, 'j', offsetof(struct A155, m10), 1);
		dcStructField(at, 'c', offsetof(struct A155, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cjf> */
union  A156 { c m0; j m1; f m2; };
void f_cpA156(union  A156 *x, const union  A156 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA156(const union  A156 *x, const union  A156 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA156() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A156), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A156, m0), 1);
		dcStructField(at, 'j', offsetof(union  A156, m1), 1);
		dcStructField(at, 'f', offsetof(union  A156, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ssiiijf} */
struct A157 { s m0; s m1; i m2; i m3; i m4; j m5; f m6; };
void f_cpA157(struct A157 *x, const struct A157 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA157(const struct A157 *x, const struct A157 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA157() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A157), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A157, m0), 1);
		dcStructField(at, 's', offsetof(struct A157, m1), 1);
		dcStructField(at, 'i', offsetof(struct A157, m2), 1);
		dcStructField(at, 'i', offsetof(struct A157, m3), 1);
		dcStructField(at, 'i', offsetof(struct A157, m4), 1);
		dcStructField(at, 'j', offsetof(struct A157, m5), 1);
		dcStructField(at, 'f', offsetof(struct A157, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sjif{ssiiijf}djfpijc> */
union  A158 { s m0; j m1; i m2; f m3; struct A157 m4; d m5; j m6; f m7; p m8; i m9; j m10; c m11; };
void f_cpA158(union  A158 *x, const union  A158 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA157(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA158(const union  A158 *x, const union  A158 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA157(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA158() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A158), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A158, m0), 1);
		dcStructField(at, 'j', offsetof(union  A158, m1), 1);
		dcStructField(at, 'i', offsetof(union  A158, m2), 1);
		dcStructField(at, 'f', offsetof(union  A158, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A158, m4), 1, f_touchdcstA157());
		dcStructField(at, 'd', offsetof(union  A158, m5), 1);
		dcStructField(at, 'j', offsetof(union  A158, m6), 1);
		dcStructField(at, 'f', offsetof(union  A158, m7), 1);
		dcStructField(at, 'p', offsetof(union  A158, m8), 1);
		dcStructField(at, 'i', offsetof(union  A158, m9), 1);
		dcStructField(at, 'j', offsetof(union  A158, m10), 1);
		dcStructField(at, 'c', offsetof(union  A158, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pjsd> */
union  A159 { p m0; j m1; s m2; d m3; };
void f_cpA159(union  A159 *x, const union  A159 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA159(const union  A159 *x, const union  A159 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA159() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A159), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A159, m0), 1);
		dcStructField(at, 'j', offsetof(union  A159, m1), 1);
		dcStructField(at, 's', offsetof(union  A159, m2), 1);
		dcStructField(at, 'd', offsetof(union  A159, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <f[6]dijip[1]> */
union  A160 { f m0[6]; d m1; i m2; j m3; i m4; p m5[1]; };
void f_cpA160(union  A160 *x, const union  A160 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; };
int f_cmpA160(const union  A160 *x, const union  A160 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0]; };
DCstruct* f_touchdcstA160() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A160), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A160, m0), 6);
		dcStructField(at, 'd', offsetof(union  A160, m1), 1);
		dcStructField(at, 'i', offsetof(union  A160, m2), 1);
		dcStructField(at, 'j', offsetof(union  A160, m3), 1);
		dcStructField(at, 'i', offsetof(union  A160, m4), 1);
		dcStructField(at, 'p', offsetof(union  A160, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sflld<pjsd>lisff<f[6]dijip[1]>} */
struct A161 { s m0; f m1; l m2; l m3; d m4; union  A159 m5; l m6; i m7; s m8; f m9; f m10; union  A160 m11; };
void f_cpA161(struct A161 *x, const struct A161 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA159(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA160(&x->m11, &y->m11); };
int f_cmpA161(const struct A161 *x, const struct A161 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA159(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA160(&x->m11, &y->m11); };
DCstruct* f_touchdcstA161() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A161), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A161, m0), 1);
		dcStructField(at, 'f', offsetof(struct A161, m1), 1);
		dcStructField(at, 'l', offsetof(struct A161, m2), 1);
		dcStructField(at, 'l', offsetof(struct A161, m3), 1);
		dcStructField(at, 'd', offsetof(struct A161, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A161, m5), 1, f_touchdcstA159());
		dcStructField(at, 'l', offsetof(struct A161, m6), 1);
		dcStructField(at, 'i', offsetof(struct A161, m7), 1);
		dcStructField(at, 's', offsetof(struct A161, m8), 1);
		dcStructField(at, 'f', offsetof(struct A161, m9), 1);
		dcStructField(at, 'f', offsetof(struct A161, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A161, m11), 1, f_touchdcstA160());
		dcCloseStruct(at);
	}
	return at;
};
/* {s} */
struct A162 { s m0; };
void f_cpA162(struct A162 *x, const struct A162 *y) { x->m0 = y->m0; };
int f_cmpA162(const struct A162 *x, const struct A162 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA162() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A162), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A162, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cp> */
union  A163 { c m0; p m1; };
void f_cpA163(union  A163 *x, const union  A163 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA163(const union  A163 *x, const union  A163 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA163() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A163), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A163, m0), 1);
		dcStructField(at, 'p', offsetof(union  A163, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sppsldldd> */
union  A164 { s m0; p m1; p m2; s m3; l m4; d m5; l m6; d m7; d m8; };
void f_cpA164(union  A164 *x, const union  A164 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA164(const union  A164 *x, const union  A164 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA164() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A164), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A164, m0), 1);
		dcStructField(at, 'p', offsetof(union  A164, m1), 1);
		dcStructField(at, 'p', offsetof(union  A164, m2), 1);
		dcStructField(at, 's', offsetof(union  A164, m3), 1);
		dcStructField(at, 'l', offsetof(union  A164, m4), 1);
		dcStructField(at, 'd', offsetof(union  A164, m5), 1);
		dcStructField(at, 'l', offsetof(union  A164, m6), 1);
		dcStructField(at, 'd', offsetof(union  A164, m7), 1);
		dcStructField(at, 'd', offsetof(union  A164, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {d<sjif{ssiiijf}djfpijc>jps{sflld<pjsd>lisff<f[6]dijip[1]>}i{s}<cp>j<sppsldldd>p} */
struct A165 { d m0; union  A158 m1; j m2; p m3; s m4; struct A161 m5; i m6; struct A162 m7; union  A163 m8; j m9; union  A164 m10; p m11; };
void f_cpA165(struct A165 *x, const struct A165 *y) { x->m0 = y->m0; f_cpA158(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA161(&x->m5, &y->m5); x->m6 = y->m6; f_cpA162(&x->m7, &y->m7); f_cpA163(&x->m8, &y->m8); x->m9 = y->m9; f_cpA164(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA165(const struct A165 *x, const struct A165 *y) { return x->m0 == y->m0 && f_cmpA158(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA161(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA162(&x->m7, &y->m7) && f_cmpA163(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA164(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA165() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A165), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A165, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A165, m1), 1, f_touchdcstA158());
		dcStructField(at, 'j', offsetof(struct A165, m2), 1);
		dcStructField(at, 'p', offsetof(struct A165, m3), 1);
		dcStructField(at, 's', offsetof(struct A165, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A165, m5), 1, f_touchdcstA161());
		dcStructField(at, 'i', offsetof(struct A165, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A165, m7), 1, f_touchdcstA162());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A165, m8), 1, f_touchdcstA163());
		dcStructField(at, 'j', offsetof(struct A165, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A165, m10), 1, f_touchdcstA164());
		dcStructField(at, 'p', offsetof(struct A165, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {siji} */
struct A166 { s m0; i m1; j m2; i m3; };
void f_cpA166(struct A166 *x, const struct A166 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA166(const struct A166 *x, const struct A166 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA166() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A166), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A166, m0), 1);
		dcStructField(at, 'i', offsetof(struct A166, m1), 1);
		dcStructField(at, 'j', offsetof(struct A166, m2), 1);
		dcStructField(at, 'i', offsetof(struct A166, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <djsisd> */
union  A167 { d m0; j m1; s m2; i m3; s m4; d m5; };
void f_cpA167(union  A167 *x, const union  A167 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA167(const union  A167 *x, const union  A167 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA167() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A167), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A167, m0), 1);
		dcStructField(at, 'j', offsetof(union  A167, m1), 1);
		dcStructField(at, 's', offsetof(union  A167, m2), 1);
		dcStructField(at, 'i', offsetof(union  A167, m3), 1);
		dcStructField(at, 's', offsetof(union  A167, m4), 1);
		dcStructField(at, 'd', offsetof(union  A167, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <is[13]ls<djsisd>jd> */
union  A168 { i m0; s m1[13]; l m2; s m3; union  A167 m4; j m5; d m6; };
void f_cpA168(union  A168 *x, const union  A168 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m1[10] = y->m1[10]; x->m1[11] = y->m1[11]; x->m1[12] = y->m1[12]; x->m2 = y->m2; x->m3 = y->m3; f_cpA167(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA168(const union  A168 *x, const union  A168 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m1[10] == y->m1[10] && x->m1[11] == y->m1[11] && x->m1[12] == y->m1[12] && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA167(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA168() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A168), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A168, m0), 1);
		dcStructField(at, 's', offsetof(union  A168, m1), 13);
		dcStructField(at, 'l', offsetof(union  A168, m2), 1);
		dcStructField(at, 's', offsetof(union  A168, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A168, m4), 1, f_touchdcstA167());
		dcStructField(at, 'j', offsetof(union  A168, m5), 1);
		dcStructField(at, 'd', offsetof(union  A168, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<is[13]ls<djsisd>jd>jds> */
union  A169 { union  A168 m0; j m1; d m2; s m3; };
void f_cpA169(union  A169 *x, const union  A169 *y) { f_cpA168(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA169(const union  A169 *x, const union  A169 *y) { return f_cmpA168(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA169() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A169), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A169, m0), 1, f_touchdcstA168());
		dcStructField(at, 'j', offsetof(union  A169, m1), 1);
		dcStructField(at, 'd', offsetof(union  A169, m2), 1);
		dcStructField(at, 's', offsetof(union  A169, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cjdsdij> */
union  A170 { c m0; j m1; d m2; s m3; d m4; i m5; j m6; };
void f_cpA170(union  A170 *x, const union  A170 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA170(const union  A170 *x, const union  A170 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA170() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A170), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A170, m0), 1);
		dcStructField(at, 'j', offsetof(union  A170, m1), 1);
		dcStructField(at, 'd', offsetof(union  A170, m2), 1);
		dcStructField(at, 's', offsetof(union  A170, m3), 1);
		dcStructField(at, 'd', offsetof(union  A170, m4), 1);
		dcStructField(at, 'i', offsetof(union  A170, m5), 1);
		dcStructField(at, 'j', offsetof(union  A170, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <j[12]ljisssplspi> */
union  A171 { j m0[12]; l m1; j m2; i m3; s m4; s m5; s m6; p m7; l m8; s m9; p m10; i m11; };
void f_cpA171(union  A171 *x, const union  A171 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA171(const union  A171 *x, const union  A171 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA171() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A171), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A171, m0), 12);
		dcStructField(at, 'l', offsetof(union  A171, m1), 1);
		dcStructField(at, 'j', offsetof(union  A171, m2), 1);
		dcStructField(at, 'i', offsetof(union  A171, m3), 1);
		dcStructField(at, 's', offsetof(union  A171, m4), 1);
		dcStructField(at, 's', offsetof(union  A171, m5), 1);
		dcStructField(at, 's', offsetof(union  A171, m6), 1);
		dcStructField(at, 'p', offsetof(union  A171, m7), 1);
		dcStructField(at, 'l', offsetof(union  A171, m8), 1);
		dcStructField(at, 's', offsetof(union  A171, m9), 1);
		dcStructField(at, 'p', offsetof(union  A171, m10), 1);
		dcStructField(at, 'i', offsetof(union  A171, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ddjc[12]lcjipcj} */
struct A172 { d m0; d m1; j m2; c m3[12]; l m4; c m5; j m6; i m7; p m8; c m9; j m10; };
void f_cpA172(struct A172 *x, const struct A172 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA172(const struct A172 *x, const struct A172 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA172() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A172), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A172, m0), 1);
		dcStructField(at, 'd', offsetof(struct A172, m1), 1);
		dcStructField(at, 'j', offsetof(struct A172, m2), 1);
		dcStructField(at, 'c', offsetof(struct A172, m3), 12);
		dcStructField(at, 'l', offsetof(struct A172, m4), 1);
		dcStructField(at, 'c', offsetof(struct A172, m5), 1);
		dcStructField(at, 'j', offsetof(struct A172, m6), 1);
		dcStructField(at, 'i', offsetof(struct A172, m7), 1);
		dcStructField(at, 'p', offsetof(struct A172, m8), 1);
		dcStructField(at, 'c', offsetof(struct A172, m9), 1);
		dcStructField(at, 'j', offsetof(struct A172, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<j[12]ljisssplspi>[3]i[15]f{ddjc[12]lcjipcj}jpdipscc} */
struct A173 { union  A171 m0[3]; i m1[15]; f m2; struct A172 m3; j m4; p m5; d m6; i m7; p m8; s m9; c m10; c m11; };
void f_cpA173(struct A173 *x, const struct A173 *y) { f_cpA171(&x->m0[0], &y->m0[0]); f_cpA171(&x->m0[1], &y->m0[1]); f_cpA171(&x->m0[2], &y->m0[2]); x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m1[10] = y->m1[10]; x->m1[11] = y->m1[11]; x->m1[12] = y->m1[12]; x->m1[13] = y->m1[13]; x->m1[14] = y->m1[14]; x->m2 = y->m2; f_cpA172(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA173(const struct A173 *x, const struct A173 *y) { return f_cmpA171(&x->m0[0], &y->m0[0]) && f_cmpA171(&x->m0[1], &y->m0[1]) && f_cmpA171(&x->m0[2], &y->m0[2]) && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m1[10] == y->m1[10] && x->m1[11] == y->m1[11] && x->m1[12] == y->m1[12] && x->m1[13] == y->m1[13] && x->m1[14] == y->m1[14] && x->m2 == y->m2 && f_cmpA172(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA173() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A173), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A173, m0), 3, f_touchdcstA171());
		dcStructField(at, 'i', offsetof(struct A173, m1), 15);
		dcStructField(at, 'f', offsetof(struct A173, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A173, m3), 1, f_touchdcstA172());
		dcStructField(at, 'j', offsetof(struct A173, m4), 1);
		dcStructField(at, 'p', offsetof(struct A173, m5), 1);
		dcStructField(at, 'd', offsetof(struct A173, m6), 1);
		dcStructField(at, 'i', offsetof(struct A173, m7), 1);
		dcStructField(at, 'p', offsetof(struct A173, m8), 1);
		dcStructField(at, 's', offsetof(struct A173, m9), 1);
		dcStructField(at, 'c', offsetof(struct A173, m10), 1);
		dcStructField(at, 'c', offsetof(struct A173, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djpplcpdpclf} */
struct A174 { d m0; j m1; p m2; p m3; l m4; c m5; p m6; d m7; p m8; c m9; l m10; f m11; };
void f_cpA174(struct A174 *x, const struct A174 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA174(const struct A174 *x, const struct A174 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA174() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A174), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A174, m0), 1);
		dcStructField(at, 'j', offsetof(struct A174, m1), 1);
		dcStructField(at, 'p', offsetof(struct A174, m2), 1);
		dcStructField(at, 'p', offsetof(struct A174, m3), 1);
		dcStructField(at, 'l', offsetof(struct A174, m4), 1);
		dcStructField(at, 'c', offsetof(struct A174, m5), 1);
		dcStructField(at, 'p', offsetof(struct A174, m6), 1);
		dcStructField(at, 'd', offsetof(struct A174, m7), 1);
		dcStructField(at, 'p', offsetof(struct A174, m8), 1);
		dcStructField(at, 'c', offsetof(struct A174, m9), 1);
		dcStructField(at, 'l', offsetof(struct A174, m10), 1);
		dcStructField(at, 'f', offsetof(struct A174, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ii{djpplcpdpclf}l> */
union  A175 { i m0; i m1; struct A174 m2; l m3; };
void f_cpA175(union  A175 *x, const union  A175 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA174(&x->m2, &y->m2); x->m3 = y->m3; };
int f_cmpA175(const union  A175 *x, const union  A175 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA174(&x->m2, &y->m2) && x->m3 == y->m3; };
DCstruct* f_touchdcstA175() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A175), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A175, m0), 1);
		dcStructField(at, 'i', offsetof(union  A175, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A175, m2), 1, f_touchdcstA174());
		dcStructField(at, 'l', offsetof(union  A175, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ljsjpiipllcc> */
union  A176 { l m0; j m1; s m2; j m3; p m4; i m5; i m6; p m7; l m8; l m9; c m10; c m11; };
void f_cpA176(union  A176 *x, const union  A176 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA176(const union  A176 *x, const union  A176 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA176() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A176), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A176, m0), 1);
		dcStructField(at, 'j', offsetof(union  A176, m1), 1);
		dcStructField(at, 's', offsetof(union  A176, m2), 1);
		dcStructField(at, 'j', offsetof(union  A176, m3), 1);
		dcStructField(at, 'p', offsetof(union  A176, m4), 1);
		dcStructField(at, 'i', offsetof(union  A176, m5), 1);
		dcStructField(at, 'i', offsetof(union  A176, m6), 1);
		dcStructField(at, 'p', offsetof(union  A176, m7), 1);
		dcStructField(at, 'l', offsetof(union  A176, m8), 1);
		dcStructField(at, 'l', offsetof(union  A176, m9), 1);
		dcStructField(at, 'c', offsetof(union  A176, m10), 1);
		dcStructField(at, 'c', offsetof(union  A176, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sspdcfijdsfs> */
union  A177 { s m0; s m1; p m2; d m3; c m4; f m5; i m6; j m7; d m8; s m9; f m10; s m11; };
void f_cpA177(union  A177 *x, const union  A177 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA177(const union  A177 *x, const union  A177 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA177() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A177), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A177, m0), 1);
		dcStructField(at, 's', offsetof(union  A177, m1), 1);
		dcStructField(at, 'p', offsetof(union  A177, m2), 1);
		dcStructField(at, 'd', offsetof(union  A177, m3), 1);
		dcStructField(at, 'c', offsetof(union  A177, m4), 1);
		dcStructField(at, 'f', offsetof(union  A177, m5), 1);
		dcStructField(at, 'i', offsetof(union  A177, m6), 1);
		dcStructField(at, 'j', offsetof(union  A177, m7), 1);
		dcStructField(at, 'd', offsetof(union  A177, m8), 1);
		dcStructField(at, 's', offsetof(union  A177, m9), 1);
		dcStructField(at, 'f', offsetof(union  A177, m10), 1);
		dcStructField(at, 's', offsetof(union  A177, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ip<ljsjpiipllcc>ldcf<sspdcfijdsfs>{l}<if>ci} */
struct A178 { i m0; p m1; union  A176 m2; l m3; d m4; c m5; f m6; union  A177 m7; struct A141 m8; union  A78 m9; c m10; i m11; };
void f_cpA178(struct A178 *x, const struct A178 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA176(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA177(&x->m7, &y->m7); f_cpA141(&x->m8, &y->m8); f_cpA78(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA178(const struct A178 *x, const struct A178 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA176(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA177(&x->m7, &y->m7) && f_cmpA141(&x->m8, &y->m8) && f_cmpA78(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA178() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A178), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A178, m0), 1);
		dcStructField(at, 'p', offsetof(struct A178, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A178, m2), 1, f_touchdcstA176());
		dcStructField(at, 'l', offsetof(struct A178, m3), 1);
		dcStructField(at, 'd', offsetof(struct A178, m4), 1);
		dcStructField(at, 'c', offsetof(struct A178, m5), 1);
		dcStructField(at, 'f', offsetof(struct A178, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A178, m7), 1, f_touchdcstA177());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A178, m8), 1, f_touchdcstA141());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A178, m9), 1, f_touchdcstA78());
		dcStructField(at, 'c', offsetof(struct A178, m10), 1);
		dcStructField(at, 'i', offsetof(struct A178, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <s> */
union  A179 { s m0; };
void f_cpA179(union  A179 *x, const union  A179 *y) { x->m0 = y->m0; };
int f_cmpA179(const union  A179 *x, const union  A179 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA179() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A179), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A179, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{<j[12]ljisssplspi>[3]i[15]f{ddjc[12]lcjipcj}jpdipscc}<ii{djpplcpdpclf}l>slpsp{ip<ljsjpiipllcc>ldcf<sspdcfijdsfs>{l}<if>ci}p<s>s[10]s} */
struct A180 { struct A173 m0; union  A175 m1; s m2; l m3; p m4; s m5; p m6; struct A178 m7; p m8; union  A179 m9; s m10[10]; s m11; };
void f_cpA180(struct A180 *x, const struct A180 *y) { f_cpA173(&x->m0, &y->m0); f_cpA175(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA178(&x->m7, &y->m7); x->m8 = y->m8; f_cpA179(&x->m9, &y->m9); x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m10[8] = y->m10[8]; x->m10[9] = y->m10[9]; x->m11 = y->m11; };
int f_cmpA180(const struct A180 *x, const struct A180 *y) { return f_cmpA173(&x->m0, &y->m0) && f_cmpA175(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA178(&x->m7, &y->m7) && x->m8 == y->m8 && f_cmpA179(&x->m9, &y->m9) && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m10[8] == y->m10[8] && x->m10[9] == y->m10[9] && x->m11 == y->m11; };
DCstruct* f_touchdcstA180() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A180), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A180, m0), 1, f_touchdcstA173());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A180, m1), 1, f_touchdcstA175());
		dcStructField(at, 's', offsetof(struct A180, m2), 1);
		dcStructField(at, 'l', offsetof(struct A180, m3), 1);
		dcStructField(at, 'p', offsetof(struct A180, m4), 1);
		dcStructField(at, 's', offsetof(struct A180, m5), 1);
		dcStructField(at, 'p', offsetof(struct A180, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A180, m7), 1, f_touchdcstA178());
		dcStructField(at, 'p', offsetof(struct A180, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A180, m9), 1, f_touchdcstA179());
		dcStructField(at, 's', offsetof(struct A180, m10), 10);
		dcStructField(at, 's', offsetof(struct A180, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cddpiicc} */
struct A181 { c m0; d m1; d m2; p m3; i m4; i m5; c m6; c m7; };
void f_cpA181(struct A181 *x, const struct A181 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA181(const struct A181 *x, const struct A181 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA181() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A181), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A181, m0), 1);
		dcStructField(at, 'd', offsetof(struct A181, m1), 1);
		dcStructField(at, 'd', offsetof(struct A181, m2), 1);
		dcStructField(at, 'p', offsetof(struct A181, m3), 1);
		dcStructField(at, 'i', offsetof(struct A181, m4), 1);
		dcStructField(at, 'i', offsetof(struct A181, m5), 1);
		dcStructField(at, 'c', offsetof(struct A181, m6), 1);
		dcStructField(at, 'c', offsetof(struct A181, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {c{cddpiicc}<s>cjlpc{d}djf[2]} */
struct A182 { c m0; struct A181 m1; union  A179 m2; c m3; j m4; l m5; p m6; c m7; struct A47 m8; d m9; j m10; f m11[2]; };
void f_cpA182(struct A182 *x, const struct A182 *y) { x->m0 = y->m0; f_cpA181(&x->m1, &y->m1); f_cpA179(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA47(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11[0] = y->m11[0]; x->m11[1] = y->m11[1]; };
int f_cmpA182(const struct A182 *x, const struct A182 *y) { return x->m0 == y->m0 && f_cmpA181(&x->m1, &y->m1) && f_cmpA179(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA47(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11[0] == y->m11[0] && x->m11[1] == y->m11[1]; };
DCstruct* f_touchdcstA182() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A182), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A182, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A182, m1), 1, f_touchdcstA181());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A182, m2), 1, f_touchdcstA179());
		dcStructField(at, 'c', offsetof(struct A182, m3), 1);
		dcStructField(at, 'j', offsetof(struct A182, m4), 1);
		dcStructField(at, 'l', offsetof(struct A182, m5), 1);
		dcStructField(at, 'p', offsetof(struct A182, m6), 1);
		dcStructField(at, 'c', offsetof(struct A182, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A182, m8), 1, f_touchdcstA47());
		dcStructField(at, 'd', offsetof(struct A182, m9), 1);
		dcStructField(at, 'j', offsetof(struct A182, m10), 1);
		dcStructField(at, 'f', offsetof(struct A182, m11), 2);
		dcCloseStruct(at);
	}
	return at;
};
/* <sfcclifipfcs> */
union  A183 { s m0; f m1; c m2; c m3; l m4; i m5; f m6; i m7; p m8; f m9; c m10; s m11; };
void f_cpA183(union  A183 *x, const union  A183 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA183(const union  A183 *x, const union  A183 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA183() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A183), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A183, m0), 1);
		dcStructField(at, 'f', offsetof(union  A183, m1), 1);
		dcStructField(at, 'c', offsetof(union  A183, m2), 1);
		dcStructField(at, 'c', offsetof(union  A183, m3), 1);
		dcStructField(at, 'l', offsetof(union  A183, m4), 1);
		dcStructField(at, 'i', offsetof(union  A183, m5), 1);
		dcStructField(at, 'f', offsetof(union  A183, m6), 1);
		dcStructField(at, 'i', offsetof(union  A183, m7), 1);
		dcStructField(at, 'p', offsetof(union  A183, m8), 1);
		dcStructField(at, 'f', offsetof(union  A183, m9), 1);
		dcStructField(at, 'c', offsetof(union  A183, m10), 1);
		dcStructField(at, 's', offsetof(union  A183, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p<sfcclifipfcs>i} */
struct A184 { p m0; union  A183 m1; i m2; };
void f_cpA184(struct A184 *x, const struct A184 *y) { x->m0 = y->m0; f_cpA183(&x->m1, &y->m1); x->m2 = y->m2; };
int f_cmpA184(const struct A184 *x, const struct A184 *y) { return x->m0 == y->m0 && f_cmpA183(&x->m1, &y->m1) && x->m2 == y->m2; };
DCstruct* f_touchdcstA184() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A184), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A184, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A184, m1), 1, f_touchdcstA183());
		dcStructField(at, 'i', offsetof(struct A184, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jl[10]plldsjl> */
union  A185 { j m0; l m1[10]; p m2; l m3; l m4; d m5; s m6; j m7; l m8; };
void f_cpA185(union  A185 *x, const union  A185 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA185(const union  A185 *x, const union  A185 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA185() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A185), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A185, m0), 1);
		dcStructField(at, 'l', offsetof(union  A185, m1), 10);
		dcStructField(at, 'p', offsetof(union  A185, m2), 1);
		dcStructField(at, 'l', offsetof(union  A185, m3), 1);
		dcStructField(at, 'l', offsetof(union  A185, m4), 1);
		dcStructField(at, 'd', offsetof(union  A185, m5), 1);
		dcStructField(at, 's', offsetof(union  A185, m6), 1);
		dcStructField(at, 'j', offsetof(union  A185, m7), 1);
		dcStructField(at, 'l', offsetof(union  A185, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <psf<jl[10]plldsjl>j> */
union  A186 { p m0; s m1; f m2; union  A185 m3; j m4; };
void f_cpA186(union  A186 *x, const union  A186 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA185(&x->m3, &y->m3); x->m4 = y->m4; };
int f_cmpA186(const union  A186 *x, const union  A186 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA185(&x->m3, &y->m3) && x->m4 == y->m4; };
DCstruct* f_touchdcstA186() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A186), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A186, m0), 1);
		dcStructField(at, 's', offsetof(union  A186, m1), 1);
		dcStructField(at, 'f', offsetof(union  A186, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A186, m3), 1, f_touchdcstA185());
		dcStructField(at, 'j', offsetof(union  A186, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ijliiddflips} */
struct A187 { i m0; j m1; l m2; i m3; i m4; d m5; d m6; f m7; l m8; i m9; p m10; s m11; };
void f_cpA187(struct A187 *x, const struct A187 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA187(const struct A187 *x, const struct A187 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA187() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A187), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A187, m0), 1);
		dcStructField(at, 'j', offsetof(struct A187, m1), 1);
		dcStructField(at, 'l', offsetof(struct A187, m2), 1);
		dcStructField(at, 'i', offsetof(struct A187, m3), 1);
		dcStructField(at, 'i', offsetof(struct A187, m4), 1);
		dcStructField(at, 'd', offsetof(struct A187, m5), 1);
		dcStructField(at, 'd', offsetof(struct A187, m6), 1);
		dcStructField(at, 'f', offsetof(struct A187, m7), 1);
		dcStructField(at, 'l', offsetof(struct A187, m8), 1);
		dcStructField(at, 'i', offsetof(struct A187, m9), 1);
		dcStructField(at, 'p', offsetof(struct A187, m10), 1);
		dcStructField(at, 's', offsetof(struct A187, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ii} */
struct A188 { i m0; i m1; };
void f_cpA188(struct A188 *x, const struct A188 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA188(const struct A188 *x, const struct A188 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA188() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A188), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A188, m0), 1);
		dcStructField(at, 'i', offsetof(struct A188, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fsc[2]{ijliiddflips}jc{ii}sd} */
struct A189 { f m0; s m1; c m2[2]; struct A187 m3; j m4; c m5; struct A188 m6; s m7; d m8; };
void f_cpA189(struct A189 *x, const struct A189 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; f_cpA187(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; f_cpA188(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA189(const struct A189 *x, const struct A189 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && f_cmpA187(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA188(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA189() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A189), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A189, m0), 1);
		dcStructField(at, 's', offsetof(struct A189, m1), 1);
		dcStructField(at, 'c', offsetof(struct A189, m2), 2);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A189, m3), 1, f_touchdcstA187());
		dcStructField(at, 'j', offsetof(struct A189, m4), 1);
		dcStructField(at, 'c', offsetof(struct A189, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A189, m6), 1, f_touchdcstA188());
		dcStructField(at, 's', offsetof(struct A189, m7), 1);
		dcStructField(at, 'd', offsetof(struct A189, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{c{cddpiicc}<s>cjlpc{d}djf[2]}{p<sfcclifipfcs>i}pc<psf<jl[10]plldsjl>j>if{fsc[2]{ijliiddflips}jc{ii}sd}> */
union  A190 { struct A182 m0; struct A184 m1; p m2; c m3; union  A186 m4; i m5; f m6; struct A189 m7; };
void f_cpA190(union  A190 *x, const union  A190 *y) { f_cpA182(&x->m0, &y->m0); f_cpA184(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; f_cpA186(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA189(&x->m7, &y->m7); };
int f_cmpA190(const union  A190 *x, const union  A190 *y) { return f_cmpA182(&x->m0, &y->m0) && f_cmpA184(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA186(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA189(&x->m7, &y->m7); };
DCstruct* f_touchdcstA190() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A190), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A190, m0), 1, f_touchdcstA182());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A190, m1), 1, f_touchdcstA184());
		dcStructField(at, 'p', offsetof(union  A190, m2), 1);
		dcStructField(at, 'c', offsetof(union  A190, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A190, m4), 1, f_touchdcstA186());
		dcStructField(at, 'i', offsetof(union  A190, m5), 1);
		dcStructField(at, 'f', offsetof(union  A190, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A190, m7), 1, f_touchdcstA189());
		dcCloseStruct(at);
	}
	return at;
};
/* {lp} */
struct A191 { l m0; p m1; };
void f_cpA191(struct A191 *x, const struct A191 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA191(const struct A191 *x, const struct A191 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA191() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A191), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A191, m0), 1);
		dcStructField(at, 'p', offsetof(struct A191, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dfdddssplijf} */
struct A192 { d m0; f m1; d m2; d m3; d m4; s m5; s m6; p m7; l m8; i m9; j m10; f m11; };
void f_cpA192(struct A192 *x, const struct A192 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA192(const struct A192 *x, const struct A192 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA192() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A192), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A192, m0), 1);
		dcStructField(at, 'f', offsetof(struct A192, m1), 1);
		dcStructField(at, 'd', offsetof(struct A192, m2), 1);
		dcStructField(at, 'd', offsetof(struct A192, m3), 1);
		dcStructField(at, 'd', offsetof(struct A192, m4), 1);
		dcStructField(at, 's', offsetof(struct A192, m5), 1);
		dcStructField(at, 's', offsetof(struct A192, m6), 1);
		dcStructField(at, 'p', offsetof(struct A192, m7), 1);
		dcStructField(at, 'l', offsetof(struct A192, m8), 1);
		dcStructField(at, 'i', offsetof(struct A192, m9), 1);
		dcStructField(at, 'j', offsetof(struct A192, m10), 1);
		dcStructField(at, 'f', offsetof(struct A192, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dsfs[8]s{lp}{dfdddssplijf}cjjpd> */
union  A193 { d m0; s m1; f m2; s m3[8]; s m4; struct A191 m5; struct A192 m6; c m7; j m8; j m9; p m10; d m11; };
void f_cpA193(union  A193 *x, const union  A193 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m4 = y->m4; f_cpA191(&x->m5, &y->m5); f_cpA192(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA193(const union  A193 *x, const union  A193 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m4 == y->m4 && f_cmpA191(&x->m5, &y->m5) && f_cmpA192(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA193() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A193), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A193, m0), 1);
		dcStructField(at, 's', offsetof(union  A193, m1), 1);
		dcStructField(at, 'f', offsetof(union  A193, m2), 1);
		dcStructField(at, 's', offsetof(union  A193, m3), 8);
		dcStructField(at, 's', offsetof(union  A193, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A193, m5), 1, f_touchdcstA191());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A193, m6), 1, f_touchdcstA192());
		dcStructField(at, 'c', offsetof(union  A193, m7), 1);
		dcStructField(at, 'j', offsetof(union  A193, m8), 1);
		dcStructField(at, 'j', offsetof(union  A193, m9), 1);
		dcStructField(at, 'p', offsetof(union  A193, m10), 1);
		dcStructField(at, 'd', offsetof(union  A193, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ffppjspfppif> */
union  A194 { f m0; f m1; p m2; p m3; j m4; s m5; p m6; f m7; p m8; p m9; i m10; f m11; };
void f_cpA194(union  A194 *x, const union  A194 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA194(const union  A194 *x, const union  A194 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA194() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A194), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A194, m0), 1);
		dcStructField(at, 'f', offsetof(union  A194, m1), 1);
		dcStructField(at, 'p', offsetof(union  A194, m2), 1);
		dcStructField(at, 'p', offsetof(union  A194, m3), 1);
		dcStructField(at, 'j', offsetof(union  A194, m4), 1);
		dcStructField(at, 's', offsetof(union  A194, m5), 1);
		dcStructField(at, 'p', offsetof(union  A194, m6), 1);
		dcStructField(at, 'f', offsetof(union  A194, m7), 1);
		dcStructField(at, 'p', offsetof(union  A194, m8), 1);
		dcStructField(at, 'p', offsetof(union  A194, m9), 1);
		dcStructField(at, 'i', offsetof(union  A194, m10), 1);
		dcStructField(at, 'f', offsetof(union  A194, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f} */
struct A195 { f m0; };
void f_cpA195(struct A195 *x, const struct A195 *y) { x->m0 = y->m0; };
int f_cmpA195(const struct A195 *x, const struct A195 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA195() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A195), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A195, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sss<dsfs[8]s{lp}{dfdddssplijf}cjjpd><ffppjspfppif>pcdi{f}jl} */
struct A196 { s m0; s m1; s m2; union  A193 m3; union  A194 m4; p m5; c m6; d m7; i m8; struct A195 m9; j m10; l m11; };
void f_cpA196(struct A196 *x, const struct A196 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA193(&x->m3, &y->m3); f_cpA194(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA195(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA196(const struct A196 *x, const struct A196 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA193(&x->m3, &y->m3) && f_cmpA194(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA195(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA196() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A196), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A196, m0), 1);
		dcStructField(at, 's', offsetof(struct A196, m1), 1);
		dcStructField(at, 's', offsetof(struct A196, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A196, m3), 1, f_touchdcstA193());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A196, m4), 1, f_touchdcstA194());
		dcStructField(at, 'p', offsetof(struct A196, m5), 1);
		dcStructField(at, 'c', offsetof(struct A196, m6), 1);
		dcStructField(at, 'd', offsetof(struct A196, m7), 1);
		dcStructField(at, 'i', offsetof(struct A196, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A196, m9), 1, f_touchdcstA195());
		dcStructField(at, 'j', offsetof(struct A196, m10), 1);
		dcStructField(at, 'l', offsetof(struct A196, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <llljd> */
union  A197 { l m0; l m1; l m2; j m3; d m4; };
void f_cpA197(union  A197 *x, const union  A197 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA197(const union  A197 *x, const union  A197 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA197() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A197), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A197, m0), 1);
		dcStructField(at, 'l', offsetof(union  A197, m1), 1);
		dcStructField(at, 'l', offsetof(union  A197, m2), 1);
		dcStructField(at, 'j', offsetof(union  A197, m3), 1);
		dcStructField(at, 'd', offsetof(union  A197, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpssdsjpdl<j>s> */
union  A198 { c m0; p m1; s m2; s m3; d m4; s m5; j m6; p m7; d m8; l m9; union  A43 m10; s m11; };
void f_cpA198(union  A198 *x, const union  A198 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA43(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA198(const union  A198 *x, const union  A198 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA43(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA198() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A198), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A198, m0), 1);
		dcStructField(at, 'p', offsetof(union  A198, m1), 1);
		dcStructField(at, 's', offsetof(union  A198, m2), 1);
		dcStructField(at, 's', offsetof(union  A198, m3), 1);
		dcStructField(at, 'd', offsetof(union  A198, m4), 1);
		dcStructField(at, 's', offsetof(union  A198, m5), 1);
		dcStructField(at, 'j', offsetof(union  A198, m6), 1);
		dcStructField(at, 'p', offsetof(union  A198, m7), 1);
		dcStructField(at, 'd', offsetof(union  A198, m8), 1);
		dcStructField(at, 'l', offsetof(union  A198, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A198, m10), 1, f_touchdcstA43());
		dcStructField(at, 's', offsetof(union  A198, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {didjjfj{l}lps} */
struct A199 { d m0; i m1; d m2; j m3; j m4; f m5; j m6; struct A141 m7; l m8; p m9; s m10; };
void f_cpA199(struct A199 *x, const struct A199 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA141(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA199(const struct A199 *x, const struct A199 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA141(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA199() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A199), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A199, m0), 1);
		dcStructField(at, 'i', offsetof(struct A199, m1), 1);
		dcStructField(at, 'd', offsetof(struct A199, m2), 1);
		dcStructField(at, 'j', offsetof(struct A199, m3), 1);
		dcStructField(at, 'j', offsetof(struct A199, m4), 1);
		dcStructField(at, 'f', offsetof(struct A199, m5), 1);
		dcStructField(at, 'j', offsetof(struct A199, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A199, m7), 1, f_touchdcstA141());
		dcStructField(at, 'l', offsetof(struct A199, m8), 1);
		dcStructField(at, 'p', offsetof(struct A199, m9), 1);
		dcStructField(at, 's', offsetof(struct A199, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cl{didjjfj{l}lps}jd> */
union  A200 { c m0; l m1; struct A199 m2; j m3; d m4; };
void f_cpA200(union  A200 *x, const union  A200 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA199(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA200(const union  A200 *x, const union  A200 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA199(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA200() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A200), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A200, m0), 1);
		dcStructField(at, 'l', offsetof(union  A200, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A200, m2), 1, f_touchdcstA199());
		dcStructField(at, 'j', offsetof(union  A200, m3), 1);
		dcStructField(at, 'd', offsetof(union  A200, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {flsisssfcj} */
struct A201 { f m0; l m1; s m2; i m3; s m4; s m5; s m6; f m7; c m8; j m9; };
void f_cpA201(struct A201 *x, const struct A201 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA201(const struct A201 *x, const struct A201 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA201() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A201), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A201, m0), 1);
		dcStructField(at, 'l', offsetof(struct A201, m1), 1);
		dcStructField(at, 's', offsetof(struct A201, m2), 1);
		dcStructField(at, 'i', offsetof(struct A201, m3), 1);
		dcStructField(at, 's', offsetof(struct A201, m4), 1);
		dcStructField(at, 's', offsetof(struct A201, m5), 1);
		dcStructField(at, 's', offsetof(struct A201, m6), 1);
		dcStructField(at, 'f', offsetof(struct A201, m7), 1);
		dcStructField(at, 'c', offsetof(struct A201, m8), 1);
		dcStructField(at, 'j', offsetof(struct A201, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pflj> */
union  A202 { p m0; f m1; l m2; j m3; };
void f_cpA202(union  A202 *x, const union  A202 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA202(const union  A202 *x, const union  A202 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA202() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A202), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A202, m0), 1);
		dcStructField(at, 'f', offsetof(union  A202, m1), 1);
		dcStructField(at, 'l', offsetof(union  A202, m2), 1);
		dcStructField(at, 'j', offsetof(union  A202, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lfip> */
union  A203 { l m0; f m1; i m2; p m3; };
void f_cpA203(union  A203 *x, const union  A203 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA203(const union  A203 *x, const union  A203 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA203() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A203), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A203, m0), 1);
		dcStructField(at, 'f', offsetof(union  A203, m1), 1);
		dcStructField(at, 'i', offsetof(union  A203, m2), 1);
		dcStructField(at, 'p', offsetof(union  A203, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {scpdld<lfip>fccds} */
struct A204 { s m0; c m1; p m2; d m3; l m4; d m5; union  A203 m6; f m7; c m8; c m9; d m10; s m11; };
void f_cpA204(struct A204 *x, const struct A204 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA203(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA204(const struct A204 *x, const struct A204 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA203(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA204() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A204), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A204, m0), 1);
		dcStructField(at, 'c', offsetof(struct A204, m1), 1);
		dcStructField(at, 'p', offsetof(struct A204, m2), 1);
		dcStructField(at, 'd', offsetof(struct A204, m3), 1);
		dcStructField(at, 'l', offsetof(struct A204, m4), 1);
		dcStructField(at, 'd', offsetof(struct A204, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A204, m6), 1, f_touchdcstA203());
		dcStructField(at, 'f', offsetof(struct A204, m7), 1);
		dcStructField(at, 'c', offsetof(struct A204, m8), 1);
		dcStructField(at, 'c', offsetof(struct A204, m9), 1);
		dcStructField(at, 'd', offsetof(struct A204, m10), 1);
		dcStructField(at, 's', offsetof(struct A204, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fij} */
struct A205 { f m0; i m1; j m2; };
void f_cpA205(struct A205 *x, const struct A205 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA205(const struct A205 *x, const struct A205 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA205() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A205), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A205, m0), 1);
		dcStructField(at, 'i', offsetof(struct A205, m1), 1);
		dcStructField(at, 'j', offsetof(struct A205, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pis{fij}ccspficp> */
union  A206 { p m0; i m1; s m2; struct A205 m3; c m4; c m5; s m6; p m7; f m8; i m9; c m10; p m11; };
void f_cpA206(union  A206 *x, const union  A206 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA205(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA206(const union  A206 *x, const union  A206 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA205(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA206() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A206), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A206, m0), 1);
		dcStructField(at, 'i', offsetof(union  A206, m1), 1);
		dcStructField(at, 's', offsetof(union  A206, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A206, m3), 1, f_touchdcstA205());
		dcStructField(at, 'c', offsetof(union  A206, m4), 1);
		dcStructField(at, 'c', offsetof(union  A206, m5), 1);
		dcStructField(at, 's', offsetof(union  A206, m6), 1);
		dcStructField(at, 'p', offsetof(union  A206, m7), 1);
		dcStructField(at, 'f', offsetof(union  A206, m8), 1);
		dcStructField(at, 'i', offsetof(union  A206, m9), 1);
		dcStructField(at, 'c', offsetof(union  A206, m10), 1);
		dcStructField(at, 'p', offsetof(union  A206, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{scpdld<lfip>fccds}<pis{fij}ccspficp>[6]pcpjjjsjjp> */
union  A207 { struct A204 m0; union  A206 m1[6]; p m2; c m3; p m4; j m5; j m6; j m7; s m8; j m9; j m10; p m11; };
void f_cpA207(union  A207 *x, const union  A207 *y) { f_cpA204(&x->m0, &y->m0); f_cpA206(&x->m1[0], &y->m1[0]); f_cpA206(&x->m1[1], &y->m1[1]); f_cpA206(&x->m1[2], &y->m1[2]); f_cpA206(&x->m1[3], &y->m1[3]); f_cpA206(&x->m1[4], &y->m1[4]); f_cpA206(&x->m1[5], &y->m1[5]); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA207(const union  A207 *x, const union  A207 *y) { return f_cmpA204(&x->m0, &y->m0) && f_cmpA206(&x->m1[0], &y->m1[0]) && f_cmpA206(&x->m1[1], &y->m1[1]) && f_cmpA206(&x->m1[2], &y->m1[2]) && f_cmpA206(&x->m1[3], &y->m1[3]) && f_cmpA206(&x->m1[4], &y->m1[4]) && f_cmpA206(&x->m1[5], &y->m1[5]) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA207() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A207), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A207, m0), 1, f_touchdcstA204());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A207, m1), 6, f_touchdcstA206());
		dcStructField(at, 'p', offsetof(union  A207, m2), 1);
		dcStructField(at, 'c', offsetof(union  A207, m3), 1);
		dcStructField(at, 'p', offsetof(union  A207, m4), 1);
		dcStructField(at, 'j', offsetof(union  A207, m5), 1);
		dcStructField(at, 'j', offsetof(union  A207, m6), 1);
		dcStructField(at, 'j', offsetof(union  A207, m7), 1);
		dcStructField(at, 's', offsetof(union  A207, m8), 1);
		dcStructField(at, 'j', offsetof(union  A207, m9), 1);
		dcStructField(at, 'j', offsetof(union  A207, m10), 1);
		dcStructField(at, 'p', offsetof(union  A207, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lifj} */
struct A208 { l m0; i m1; f m2; j m3; };
void f_cpA208(struct A208 *x, const struct A208 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA208(const struct A208 *x, const struct A208 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA208() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A208), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A208, m0), 1);
		dcStructField(at, 'i', offsetof(struct A208, m1), 1);
		dcStructField(at, 'f', offsetof(struct A208, m2), 1);
		dcStructField(at, 'j', offsetof(struct A208, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ll> */
union  A209 { l m0; l m1; };
void f_cpA209(union  A209 *x, const union  A209 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA209(const union  A209 *x, const union  A209 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA209() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A209), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A209, m0), 1);
		dcStructField(at, 'l', offsetof(union  A209, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <l{lifj}s<ll>fcsj> */
union  A210 { l m0; struct A208 m1; s m2; union  A209 m3; f m4; c m5; s m6; j m7; };
void f_cpA210(union  A210 *x, const union  A210 *y) { x->m0 = y->m0; f_cpA208(&x->m1, &y->m1); x->m2 = y->m2; f_cpA209(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA210(const union  A210 *x, const union  A210 *y) { return x->m0 == y->m0 && f_cmpA208(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA209(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA210() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A210), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A210, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A210, m1), 1, f_touchdcstA208());
		dcStructField(at, 's', offsetof(union  A210, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A210, m3), 1, f_touchdcstA209());
		dcStructField(at, 'f', offsetof(union  A210, m4), 1);
		dcStructField(at, 'c', offsetof(union  A210, m5), 1);
		dcStructField(at, 's', offsetof(union  A210, m6), 1);
		dcStructField(at, 'j', offsetof(union  A210, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ldid> */
union  A211 { l m0; d m1; i m2; d m3; };
void f_cpA211(union  A211 *x, const union  A211 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA211(const union  A211 *x, const union  A211 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA211() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A211), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A211, m0), 1);
		dcStructField(at, 'd', offsetof(union  A211, m1), 1);
		dcStructField(at, 'i', offsetof(union  A211, m2), 1);
		dcStructField(at, 'd', offsetof(union  A211, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {c} */
struct A212 { c m0; };
void f_cpA212(struct A212 *x, const struct A212 *y) { x->m0 = y->m0; };
int f_cmpA212(const struct A212 *x, const struct A212 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA212() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A212), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A212, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fsipdpppj[12]c} */
struct A213 { f m0; s m1; i m2; p m3; d m4; p m5; p m6; p m7; j m8[12]; c m9; };
void f_cpA213(struct A213 *x, const struct A213 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m8[8] = y->m8[8]; x->m8[9] = y->m8[9]; x->m8[10] = y->m8[10]; x->m8[11] = y->m8[11]; x->m9 = y->m9; };
int f_cmpA213(const struct A213 *x, const struct A213 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m8[8] == y->m8[8] && x->m8[9] == y->m8[9] && x->m8[10] == y->m8[10] && x->m8[11] == y->m8[11] && x->m9 == y->m9; };
DCstruct* f_touchdcstA213() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A213), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A213, m0), 1);
		dcStructField(at, 's', offsetof(struct A213, m1), 1);
		dcStructField(at, 'i', offsetof(struct A213, m2), 1);
		dcStructField(at, 'p', offsetof(struct A213, m3), 1);
		dcStructField(at, 'd', offsetof(struct A213, m4), 1);
		dcStructField(at, 'p', offsetof(struct A213, m5), 1);
		dcStructField(at, 'p', offsetof(struct A213, m6), 1);
		dcStructField(at, 'p', offsetof(struct A213, m7), 1);
		dcStructField(at, 'j', offsetof(struct A213, m8), 12);
		dcStructField(at, 'c', offsetof(struct A213, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <l<ldid>{c}{fsipdpppj[12]c}dfipljf> */
union  A214 { l m0; union  A211 m1; struct A212 m2; struct A213 m3; d m4; f m5; i m6; p m7; l m8; j m9; f m10; };
void f_cpA214(union  A214 *x, const union  A214 *y) { x->m0 = y->m0; f_cpA211(&x->m1, &y->m1); f_cpA212(&x->m2, &y->m2); f_cpA213(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA214(const union  A214 *x, const union  A214 *y) { return x->m0 == y->m0 && f_cmpA211(&x->m1, &y->m1) && f_cmpA212(&x->m2, &y->m2) && f_cmpA213(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA214() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A214), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A214, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A214, m1), 1, f_touchdcstA211());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A214, m2), 1, f_touchdcstA212());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A214, m3), 1, f_touchdcstA213());
		dcStructField(at, 'd', offsetof(union  A214, m4), 1);
		dcStructField(at, 'f', offsetof(union  A214, m5), 1);
		dcStructField(at, 'i', offsetof(union  A214, m6), 1);
		dcStructField(at, 'p', offsetof(union  A214, m7), 1);
		dcStructField(at, 'l', offsetof(union  A214, m8), 1);
		dcStructField(at, 'j', offsetof(union  A214, m9), 1);
		dcStructField(at, 'f', offsetof(union  A214, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <idssccldj[4]cdc> */
union  A215 { i m0; d m1; s m2; s m3; c m4; c m5; l m6; d m7; j m8[4]; c m9; d m10; c m11; };
void f_cpA215(union  A215 *x, const union  A215 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA215(const union  A215 *x, const union  A215 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA215() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A215), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A215, m0), 1);
		dcStructField(at, 'd', offsetof(union  A215, m1), 1);
		dcStructField(at, 's', offsetof(union  A215, m2), 1);
		dcStructField(at, 's', offsetof(union  A215, m3), 1);
		dcStructField(at, 'c', offsetof(union  A215, m4), 1);
		dcStructField(at, 'c', offsetof(union  A215, m5), 1);
		dcStructField(at, 'l', offsetof(union  A215, m6), 1);
		dcStructField(at, 'd', offsetof(union  A215, m7), 1);
		dcStructField(at, 'j', offsetof(union  A215, m8), 4);
		dcStructField(at, 'c', offsetof(union  A215, m9), 1);
		dcStructField(at, 'd', offsetof(union  A215, m10), 1);
		dcStructField(at, 'c', offsetof(union  A215, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<idssccldj[4]cdc>sflsjjp> */
union  A216 { union  A215 m0; s m1; f m2; l m3; s m4; j m5; j m6; p m7; };
void f_cpA216(union  A216 *x, const union  A216 *y) { f_cpA215(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA216(const union  A216 *x, const union  A216 *y) { return f_cmpA215(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA216() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A216), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A216, m0), 1, f_touchdcstA215());
		dcStructField(at, 's', offsetof(union  A216, m1), 1);
		dcStructField(at, 'f', offsetof(union  A216, m2), 1);
		dcStructField(at, 'l', offsetof(union  A216, m3), 1);
		dcStructField(at, 's', offsetof(union  A216, m4), 1);
		dcStructField(at, 'j', offsetof(union  A216, m5), 1);
		dcStructField(at, 'j', offsetof(union  A216, m6), 1);
		dcStructField(at, 'p', offsetof(union  A216, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cdisdf[11]<<idssccldj[4]cdc>sflsjjp>} */
struct A217 { c m0; d m1; i m2; s m3; d m4; f m5[11]; union  A216 m6; };
void f_cpA217(struct A217 *x, const struct A217 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; f_cpA216(&x->m6, &y->m6); };
int f_cmpA217(const struct A217 *x, const struct A217 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && f_cmpA216(&x->m6, &y->m6); };
DCstruct* f_touchdcstA217() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A217), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A217, m0), 1);
		dcStructField(at, 'd', offsetof(struct A217, m1), 1);
		dcStructField(at, 'i', offsetof(struct A217, m2), 1);
		dcStructField(at, 's', offsetof(struct A217, m3), 1);
		dcStructField(at, 'd', offsetof(struct A217, m4), 1);
		dcStructField(at, 'f', offsetof(struct A217, m5), 11);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A217, m6), 1, f_touchdcstA216());
		dcCloseStruct(at);
	}
	return at;
};
/* <pcc[12]d> */
union  A218 { p m0; c m1; c m2[12]; d m3; };
void f_cpA218(union  A218 *x, const union  A218 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m3 = y->m3; };
int f_cmpA218(const union  A218 *x, const union  A218 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m3 == y->m3; };
DCstruct* f_touchdcstA218() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A218), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A218, m0), 1);
		dcStructField(at, 'c', offsetof(union  A218, m1), 1);
		dcStructField(at, 'c', offsetof(union  A218, m2), 12);
		dcStructField(at, 'd', offsetof(union  A218, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pdjfc> */
union  A219 { p m0; d m1; j m2; f m3; c m4; };
void f_cpA219(union  A219 *x, const union  A219 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA219(const union  A219 *x, const union  A219 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA219() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A219), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A219, m0), 1);
		dcStructField(at, 'd', offsetof(union  A219, m1), 1);
		dcStructField(at, 'j', offsetof(union  A219, m2), 1);
		dcStructField(at, 'f', offsetof(union  A219, m3), 1);
		dcStructField(at, 'c', offsetof(union  A219, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<pdjfc>jdl} */
struct A220 { union  A219 m0; j m1; d m2; l m3; };
void f_cpA220(struct A220 *x, const struct A220 *y) { f_cpA219(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA220(const struct A220 *x, const struct A220 *y) { return f_cmpA219(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA220() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A220), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A220, m0), 1, f_touchdcstA219());
		dcStructField(at, 'j', offsetof(struct A220, m1), 1);
		dcStructField(at, 'd', offsetof(struct A220, m2), 1);
		dcStructField(at, 'l', offsetof(struct A220, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jd[2]l} */
struct A221 { j m0; d m1[2]; l m2; };
void f_cpA221(struct A221 *x, const struct A221 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m2 = y->m2; };
int f_cmpA221(const struct A221 *x, const struct A221 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m2 == y->m2; };
DCstruct* f_touchdcstA221() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A221), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A221, m0), 1);
		dcStructField(at, 'd', offsetof(struct A221, m1), 2);
		dcStructField(at, 'l', offsetof(struct A221, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ijdii> */
union  A222 { i m0; j m1; d m2; i m3; i m4; };
void f_cpA222(union  A222 *x, const union  A222 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA222(const union  A222 *x, const union  A222 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA222() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A222), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A222, m0), 1);
		dcStructField(at, 'j', offsetof(union  A222, m1), 1);
		dcStructField(at, 'd', offsetof(union  A222, m2), 1);
		dcStructField(at, 'i', offsetof(union  A222, m3), 1);
		dcStructField(at, 'i', offsetof(union  A222, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djfj} */
struct A223 { d m0; j m1; f m2; j m3; };
void f_cpA223(struct A223 *x, const struct A223 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA223(const struct A223 *x, const struct A223 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA223() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A223), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A223, m0), 1);
		dcStructField(at, 'j', offsetof(struct A223, m1), 1);
		dcStructField(at, 'f', offsetof(struct A223, m2), 1);
		dcStructField(at, 'j', offsetof(struct A223, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jj{jd[2]l}ldc<ijdii>c{djfj}l[7]dc} */
struct A224 { j m0; j m1; struct A221 m2; l m3; d m4; c m5; union  A222 m6; c m7; struct A223 m8; l m9[7]; d m10; c m11; };
void f_cpA224(struct A224 *x, const struct A224 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA221(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA222(&x->m6, &y->m6); x->m7 = y->m7; f_cpA223(&x->m8, &y->m8); x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA224(const struct A224 *x, const struct A224 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA221(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA222(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA223(&x->m8, &y->m8) && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA224() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A224), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A224, m0), 1);
		dcStructField(at, 'j', offsetof(struct A224, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A224, m2), 1, f_touchdcstA221());
		dcStructField(at, 'l', offsetof(struct A224, m3), 1);
		dcStructField(at, 'd', offsetof(struct A224, m4), 1);
		dcStructField(at, 'c', offsetof(struct A224, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A224, m6), 1, f_touchdcstA222());
		dcStructField(at, 'c', offsetof(struct A224, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A224, m8), 1, f_touchdcstA223());
		dcStructField(at, 'l', offsetof(struct A224, m9), 7);
		dcStructField(at, 'd', offsetof(struct A224, m10), 1);
		dcStructField(at, 'c', offsetof(struct A224, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <s{<pdjfc>jdl}islc{jj{jd[2]l}ldc<ijdii>c{djfj}l[7]dc}ccids> */
union  A225 { s m0; struct A220 m1; i m2; s m3; l m4; c m5; struct A224 m6; c m7; c m8; i m9; d m10; s m11; };
void f_cpA225(union  A225 *x, const union  A225 *y) { x->m0 = y->m0; f_cpA220(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA224(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA225(const union  A225 *x, const union  A225 *y) { return x->m0 == y->m0 && f_cmpA220(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA224(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA225() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A225), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A225, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A225, m1), 1, f_touchdcstA220());
		dcStructField(at, 'i', offsetof(union  A225, m2), 1);
		dcStructField(at, 's', offsetof(union  A225, m3), 1);
		dcStructField(at, 'l', offsetof(union  A225, m4), 1);
		dcStructField(at, 'c', offsetof(union  A225, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A225, m6), 1, f_touchdcstA224());
		dcStructField(at, 'c', offsetof(union  A225, m7), 1);
		dcStructField(at, 'c', offsetof(union  A225, m8), 1);
		dcStructField(at, 'i', offsetof(union  A225, m9), 1);
		dcStructField(at, 'd', offsetof(union  A225, m10), 1);
		dcStructField(at, 's', offsetof(union  A225, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jjl> */
union  A226 { j m0; j m1; l m2; };
void f_cpA226(union  A226 *x, const union  A226 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA226(const union  A226 *x, const union  A226 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA226() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A226), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A226, m0), 1);
		dcStructField(at, 'j', offsetof(union  A226, m1), 1);
		dcStructField(at, 'l', offsetof(union  A226, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {islfi} */
struct A227 { i m0; s m1; l m2; f m3; i m4; };
void f_cpA227(struct A227 *x, const struct A227 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA227(const struct A227 *x, const struct A227 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA227() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A227), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A227, m0), 1);
		dcStructField(at, 's', offsetof(struct A227, m1), 1);
		dcStructField(at, 'l', offsetof(struct A227, m2), 1);
		dcStructField(at, 'f', offsetof(struct A227, m3), 1);
		dcStructField(at, 'i', offsetof(struct A227, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <icccijsli[4]sip> */
union  A228 { i m0; c m1; c m2; c m3; i m4; j m5; s m6; l m7; i m8[4]; s m9; i m10; p m11; };
void f_cpA228(union  A228 *x, const union  A228 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA228(const union  A228 *x, const union  A228 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA228() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A228), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A228, m0), 1);
		dcStructField(at, 'c', offsetof(union  A228, m1), 1);
		dcStructField(at, 'c', offsetof(union  A228, m2), 1);
		dcStructField(at, 'c', offsetof(union  A228, m3), 1);
		dcStructField(at, 'i', offsetof(union  A228, m4), 1);
		dcStructField(at, 'j', offsetof(union  A228, m5), 1);
		dcStructField(at, 's', offsetof(union  A228, m6), 1);
		dcStructField(at, 'l', offsetof(union  A228, m7), 1);
		dcStructField(at, 'i', offsetof(union  A228, m8), 4);
		dcStructField(at, 's', offsetof(union  A228, m9), 1);
		dcStructField(at, 'i', offsetof(union  A228, m10), 1);
		dcStructField(at, 'p', offsetof(union  A228, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <li> */
union  A229 { l m0; i m1; };
void f_cpA229(union  A229 *x, const union  A229 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA229(const union  A229 *x, const union  A229 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA229() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A229), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A229, m0), 1);
		dcStructField(at, 'i', offsetof(union  A229, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f<jjl>llc{islfi}<icccijsli[4]sip>fpps<li>} */
struct A230 { f m0; union  A226 m1; l m2; l m3; c m4; struct A227 m5; union  A228 m6; f m7; p m8; p m9; s m10; union  A229 m11; };
void f_cpA230(struct A230 *x, const struct A230 *y) { x->m0 = y->m0; f_cpA226(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA227(&x->m5, &y->m5); f_cpA228(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA229(&x->m11, &y->m11); };
int f_cmpA230(const struct A230 *x, const struct A230 *y) { return x->m0 == y->m0 && f_cmpA226(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA227(&x->m5, &y->m5) && f_cmpA228(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA229(&x->m11, &y->m11); };
DCstruct* f_touchdcstA230() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A230), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A230, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A230, m1), 1, f_touchdcstA226());
		dcStructField(at, 'l', offsetof(struct A230, m2), 1);
		dcStructField(at, 'l', offsetof(struct A230, m3), 1);
		dcStructField(at, 'c', offsetof(struct A230, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A230, m5), 1, f_touchdcstA227());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A230, m6), 1, f_touchdcstA228());
		dcStructField(at, 'f', offsetof(struct A230, m7), 1);
		dcStructField(at, 'p', offsetof(struct A230, m8), 1);
		dcStructField(at, 'p', offsetof(struct A230, m9), 1);
		dcStructField(at, 's', offsetof(struct A230, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A230, m11), 1, f_touchdcstA229());
		dcCloseStruct(at);
	}
	return at;
};
/* <cscljjcl> */
union  A231 { c m0; s m1; c m2; l m3; j m4; j m5; c m6; l m7; };
void f_cpA231(union  A231 *x, const union  A231 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA231(const union  A231 *x, const union  A231 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA231() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A231), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A231, m0), 1);
		dcStructField(at, 's', offsetof(union  A231, m1), 1);
		dcStructField(at, 'c', offsetof(union  A231, m2), 1);
		dcStructField(at, 'l', offsetof(union  A231, m3), 1);
		dcStructField(at, 'j', offsetof(union  A231, m4), 1);
		dcStructField(at, 'j', offsetof(union  A231, m5), 1);
		dcStructField(at, 'c', offsetof(union  A231, m6), 1);
		dcStructField(at, 'l', offsetof(union  A231, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <id> */
union  A232 { i m0; d m1; };
void f_cpA232(union  A232 *x, const union  A232 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA232(const union  A232 *x, const union  A232 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA232() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A232), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A232, m0), 1);
		dcStructField(at, 'd', offsetof(union  A232, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {liljci} */
struct A233 { l m0; i m1; l m2; j m3; c m4; i m5; };
void f_cpA233(struct A233 *x, const struct A233 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA233(const struct A233 *x, const struct A233 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA233() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A233), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A233, m0), 1);
		dcStructField(at, 'i', offsetof(struct A233, m1), 1);
		dcStructField(at, 'l', offsetof(struct A233, m2), 1);
		dcStructField(at, 'j', offsetof(struct A233, m3), 1);
		dcStructField(at, 'c', offsetof(struct A233, m4), 1);
		dcStructField(at, 'i', offsetof(struct A233, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fll<id>ddcdpf{liljci}d> */
union  A234 { f m0; l m1; l m2; union  A232 m3; d m4; d m5; c m6; d m7; p m8; f m9; struct A233 m10; d m11; };
void f_cpA234(union  A234 *x, const union  A234 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA232(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA233(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA234(const union  A234 *x, const union  A234 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA232(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA233(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA234() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A234), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A234, m0), 1);
		dcStructField(at, 'l', offsetof(union  A234, m1), 1);
		dcStructField(at, 'l', offsetof(union  A234, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A234, m3), 1, f_touchdcstA232());
		dcStructField(at, 'd', offsetof(union  A234, m4), 1);
		dcStructField(at, 'd', offsetof(union  A234, m5), 1);
		dcStructField(at, 'c', offsetof(union  A234, m6), 1);
		dcStructField(at, 'd', offsetof(union  A234, m7), 1);
		dcStructField(at, 'p', offsetof(union  A234, m8), 1);
		dcStructField(at, 'f', offsetof(union  A234, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A234, m10), 1, f_touchdcstA233());
		dcStructField(at, 'd', offsetof(union  A234, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dfplcdjjcfd} */
struct A235 { d m0; f m1; p m2; l m3; c m4; d m5; j m6; j m7; c m8; f m9; d m10; };
void f_cpA235(struct A235 *x, const struct A235 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA235(const struct A235 *x, const struct A235 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA235() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A235), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A235, m0), 1);
		dcStructField(at, 'f', offsetof(struct A235, m1), 1);
		dcStructField(at, 'p', offsetof(struct A235, m2), 1);
		dcStructField(at, 'l', offsetof(struct A235, m3), 1);
		dcStructField(at, 'c', offsetof(struct A235, m4), 1);
		dcStructField(at, 'd', offsetof(struct A235, m5), 1);
		dcStructField(at, 'j', offsetof(struct A235, m6), 1);
		dcStructField(at, 'j', offsetof(struct A235, m7), 1);
		dcStructField(at, 'c', offsetof(struct A235, m8), 1);
		dcStructField(at, 'f', offsetof(struct A235, m9), 1);
		dcStructField(at, 'd', offsetof(struct A235, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cifpddljdij> */
union  A236 { c m0; i m1; f m2; p m3; d m4; d m5; l m6; j m7; d m8; i m9; j m10; };
void f_cpA236(union  A236 *x, const union  A236 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA236(const union  A236 *x, const union  A236 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA236() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A236), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A236, m0), 1);
		dcStructField(at, 'i', offsetof(union  A236, m1), 1);
		dcStructField(at, 'f', offsetof(union  A236, m2), 1);
		dcStructField(at, 'p', offsetof(union  A236, m3), 1);
		dcStructField(at, 'd', offsetof(union  A236, m4), 1);
		dcStructField(at, 'd', offsetof(union  A236, m5), 1);
		dcStructField(at, 'l', offsetof(union  A236, m6), 1);
		dcStructField(at, 'j', offsetof(union  A236, m7), 1);
		dcStructField(at, 'd', offsetof(union  A236, m8), 1);
		dcStructField(at, 'i', offsetof(union  A236, m9), 1);
		dcStructField(at, 'j', offsetof(union  A236, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cid[2]cfjpllipc> */
union  A237 { c m0; i m1; d m2[2]; c m3; f m4; j m5; p m6; l m7; l m8; i m9; p m10; c m11; };
void f_cpA237(union  A237 *x, const union  A237 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA237(const union  A237 *x, const union  A237 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA237() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A237), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A237, m0), 1);
		dcStructField(at, 'i', offsetof(union  A237, m1), 1);
		dcStructField(at, 'd', offsetof(union  A237, m2), 2);
		dcStructField(at, 'c', offsetof(union  A237, m3), 1);
		dcStructField(at, 'f', offsetof(union  A237, m4), 1);
		dcStructField(at, 'j', offsetof(union  A237, m5), 1);
		dcStructField(at, 'p', offsetof(union  A237, m6), 1);
		dcStructField(at, 'l', offsetof(union  A237, m7), 1);
		dcStructField(at, 'l', offsetof(union  A237, m8), 1);
		dcStructField(at, 'i', offsetof(union  A237, m9), 1);
		dcStructField(at, 'p', offsetof(union  A237, m10), 1);
		dcStructField(at, 'c', offsetof(union  A237, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jicfcdiil} */
struct A238 { j m0; i m1; c m2; f m3; c m4; d m5; i m6; i m7; l m8; };
void f_cpA238(struct A238 *x, const struct A238 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA238(const struct A238 *x, const struct A238 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA238() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A238), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A238, m0), 1);
		dcStructField(at, 'i', offsetof(struct A238, m1), 1);
		dcStructField(at, 'c', offsetof(struct A238, m2), 1);
		dcStructField(at, 'f', offsetof(struct A238, m3), 1);
		dcStructField(at, 'c', offsetof(struct A238, m4), 1);
		dcStructField(at, 'd', offsetof(struct A238, m5), 1);
		dcStructField(at, 'i', offsetof(struct A238, m6), 1);
		dcStructField(at, 'i', offsetof(struct A238, m7), 1);
		dcStructField(at, 'l', offsetof(struct A238, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cfjp<cid[2]cfjpllipc>c{jicfcdiil}pildp> */
union  A239 { c m0; f m1; j m2; p m3; union  A237 m4; c m5; struct A238 m6; p m7; i m8; l m9; d m10; p m11; };
void f_cpA239(union  A239 *x, const union  A239 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA237(&x->m4, &y->m4); x->m5 = y->m5; f_cpA238(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA239(const union  A239 *x, const union  A239 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA237(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA238(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA239() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A239), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A239, m0), 1);
		dcStructField(at, 'f', offsetof(union  A239, m1), 1);
		dcStructField(at, 'j', offsetof(union  A239, m2), 1);
		dcStructField(at, 'p', offsetof(union  A239, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A239, m4), 1, f_touchdcstA237());
		dcStructField(at, 'c', offsetof(union  A239, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A239, m6), 1, f_touchdcstA238());
		dcStructField(at, 'p', offsetof(union  A239, m7), 1);
		dcStructField(at, 'i', offsetof(union  A239, m8), 1);
		dcStructField(at, 'l', offsetof(union  A239, m9), 1);
		dcStructField(at, 'd', offsetof(union  A239, m10), 1);
		dcStructField(at, 'p', offsetof(union  A239, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cdiscjpiscpj} */
struct A240 { c m0; d m1; i m2; s m3; c m4; j m5; p m6; i m7; s m8; c m9; p m10; j m11; };
void f_cpA240(struct A240 *x, const struct A240 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA240(const struct A240 *x, const struct A240 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA240() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A240), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A240, m0), 1);
		dcStructField(at, 'd', offsetof(struct A240, m1), 1);
		dcStructField(at, 'i', offsetof(struct A240, m2), 1);
		dcStructField(at, 's', offsetof(struct A240, m3), 1);
		dcStructField(at, 'c', offsetof(struct A240, m4), 1);
		dcStructField(at, 'j', offsetof(struct A240, m5), 1);
		dcStructField(at, 'p', offsetof(struct A240, m6), 1);
		dcStructField(at, 'i', offsetof(struct A240, m7), 1);
		dcStructField(at, 's', offsetof(struct A240, m8), 1);
		dcStructField(at, 'c', offsetof(struct A240, m9), 1);
		dcStructField(at, 'p', offsetof(struct A240, m10), 1);
		dcStructField(at, 'j', offsetof(struct A240, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <s{cdiscjpiscpj}jplfic> */
union  A241 { s m0; struct A240 m1; j m2; p m3; l m4; f m5; i m6; c m7; };
void f_cpA241(union  A241 *x, const union  A241 *y) { x->m0 = y->m0; f_cpA240(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA241(const union  A241 *x, const union  A241 *y) { return x->m0 == y->m0 && f_cmpA240(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA241() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A241), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A241, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A241, m1), 1, f_touchdcstA240());
		dcStructField(at, 'j', offsetof(union  A241, m2), 1);
		dcStructField(at, 'p', offsetof(union  A241, m3), 1);
		dcStructField(at, 'l', offsetof(union  A241, m4), 1);
		dcStructField(at, 'f', offsetof(union  A241, m5), 1);
		dcStructField(at, 'i', offsetof(union  A241, m6), 1);
		dcStructField(at, 'c', offsetof(union  A241, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iicidppi> */
union  A242 { i m0; i m1; c m2; i m3; d m4; p m5; p m6; i m7; };
void f_cpA242(union  A242 *x, const union  A242 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA242(const union  A242 *x, const union  A242 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA242() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A242), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A242, m0), 1);
		dcStructField(at, 'i', offsetof(union  A242, m1), 1);
		dcStructField(at, 'c', offsetof(union  A242, m2), 1);
		dcStructField(at, 'i', offsetof(union  A242, m3), 1);
		dcStructField(at, 'd', offsetof(union  A242, m4), 1);
		dcStructField(at, 'p', offsetof(union  A242, m5), 1);
		dcStructField(at, 'p', offsetof(union  A242, m6), 1);
		dcStructField(at, 'i', offsetof(union  A242, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lcf} */
struct A243 { l m0; c m1; f m2; };
void f_cpA243(struct A243 *x, const struct A243 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA243(const struct A243 *x, const struct A243 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA243() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A243), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A243, m0), 1);
		dcStructField(at, 'c', offsetof(struct A243, m1), 1);
		dcStructField(at, 'f', offsetof(struct A243, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fsllflllccjj} */
struct A244 { f m0; s m1; l m2; l m3; f m4; l m5; l m6; l m7; c m8; c m9; j m10; j m11; };
void f_cpA244(struct A244 *x, const struct A244 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA244(const struct A244 *x, const struct A244 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA244() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A244), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A244, m0), 1);
		dcStructField(at, 's', offsetof(struct A244, m1), 1);
		dcStructField(at, 'l', offsetof(struct A244, m2), 1);
		dcStructField(at, 'l', offsetof(struct A244, m3), 1);
		dcStructField(at, 'f', offsetof(struct A244, m4), 1);
		dcStructField(at, 'l', offsetof(struct A244, m5), 1);
		dcStructField(at, 'l', offsetof(struct A244, m6), 1);
		dcStructField(at, 'l', offsetof(struct A244, m7), 1);
		dcStructField(at, 'c', offsetof(struct A244, m8), 1);
		dcStructField(at, 'c', offsetof(struct A244, m9), 1);
		dcStructField(at, 'j', offsetof(struct A244, m10), 1);
		dcStructField(at, 'j', offsetof(struct A244, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ljcf> */
union  A245 { l m0; j m1; c m2; f m3; };
void f_cpA245(union  A245 *x, const union  A245 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA245(const union  A245 *x, const union  A245 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA245() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A245), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A245, m0), 1);
		dcStructField(at, 'j', offsetof(union  A245, m1), 1);
		dcStructField(at, 'c', offsetof(union  A245, m2), 1);
		dcStructField(at, 'f', offsetof(union  A245, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cflljdsccjdf} */
struct A246 { c m0; f m1; l m2; l m3; j m4; d m5; s m6; c m7; c m8; j m9; d m10; f m11; };
void f_cpA246(struct A246 *x, const struct A246 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA246(const struct A246 *x, const struct A246 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA246() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A246), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A246, m0), 1);
		dcStructField(at, 'f', offsetof(struct A246, m1), 1);
		dcStructField(at, 'l', offsetof(struct A246, m2), 1);
		dcStructField(at, 'l', offsetof(struct A246, m3), 1);
		dcStructField(at, 'j', offsetof(struct A246, m4), 1);
		dcStructField(at, 'd', offsetof(struct A246, m5), 1);
		dcStructField(at, 's', offsetof(struct A246, m6), 1);
		dcStructField(at, 'c', offsetof(struct A246, m7), 1);
		dcStructField(at, 'c', offsetof(struct A246, m8), 1);
		dcStructField(at, 'j', offsetof(struct A246, m9), 1);
		dcStructField(at, 'd', offsetof(struct A246, m10), 1);
		dcStructField(at, 'f', offsetof(struct A246, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jppii{lcf}d{fsllflllccjj}f[11]<ljcf>{cflljdsccjdf}p> */
union  A247 { j m0; p m1; p m2; i m3; i m4; struct A243 m5; d m6; struct A244 m7; f m8[11]; union  A245 m9; struct A246 m10; p m11; };
void f_cpA247(union  A247 *x, const union  A247 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA243(&x->m5, &y->m5); x->m6 = y->m6; f_cpA244(&x->m7, &y->m7); x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m8[8] = y->m8[8]; x->m8[9] = y->m8[9]; x->m8[10] = y->m8[10]; f_cpA245(&x->m9, &y->m9); f_cpA246(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA247(const union  A247 *x, const union  A247 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA243(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA244(&x->m7, &y->m7) && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m8[8] == y->m8[8] && x->m8[9] == y->m8[9] && x->m8[10] == y->m8[10] && f_cmpA245(&x->m9, &y->m9) && f_cmpA246(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA247() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A247), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A247, m0), 1);
		dcStructField(at, 'p', offsetof(union  A247, m1), 1);
		dcStructField(at, 'p', offsetof(union  A247, m2), 1);
		dcStructField(at, 'i', offsetof(union  A247, m3), 1);
		dcStructField(at, 'i', offsetof(union  A247, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A247, m5), 1, f_touchdcstA243());
		dcStructField(at, 'd', offsetof(union  A247, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A247, m7), 1, f_touchdcstA244());
		dcStructField(at, 'f', offsetof(union  A247, m8), 11);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A247, m9), 1, f_touchdcstA245());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A247, m10), 1, f_touchdcstA246());
		dcStructField(at, 'p', offsetof(union  A247, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djffjjjsi} */
struct A248 { d m0; j m1; f m2; f m3; j m4; j m5; j m6; s m7; i m8; };
void f_cpA248(struct A248 *x, const struct A248 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA248(const struct A248 *x, const struct A248 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA248() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A248), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A248, m0), 1);
		dcStructField(at, 'j', offsetof(struct A248, m1), 1);
		dcStructField(at, 'f', offsetof(struct A248, m2), 1);
		dcStructField(at, 'f', offsetof(struct A248, m3), 1);
		dcStructField(at, 'j', offsetof(struct A248, m4), 1);
		dcStructField(at, 'j', offsetof(struct A248, m5), 1);
		dcStructField(at, 'j', offsetof(struct A248, m6), 1);
		dcStructField(at, 's', offsetof(struct A248, m7), 1);
		dcStructField(at, 'i', offsetof(struct A248, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ilccdpslisjj> */
union  A249 { i m0; l m1; c m2; c m3; d m4; p m5; s m6; l m7; i m8; s m9; j m10; j m11; };
void f_cpA249(union  A249 *x, const union  A249 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA249(const union  A249 *x, const union  A249 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA249() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A249), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A249, m0), 1);
		dcStructField(at, 'l', offsetof(union  A249, m1), 1);
		dcStructField(at, 'c', offsetof(union  A249, m2), 1);
		dcStructField(at, 'c', offsetof(union  A249, m3), 1);
		dcStructField(at, 'd', offsetof(union  A249, m4), 1);
		dcStructField(at, 'p', offsetof(union  A249, m5), 1);
		dcStructField(at, 's', offsetof(union  A249, m6), 1);
		dcStructField(at, 'l', offsetof(union  A249, m7), 1);
		dcStructField(at, 'i', offsetof(union  A249, m8), 1);
		dcStructField(at, 's', offsetof(union  A249, m9), 1);
		dcStructField(at, 'j', offsetof(union  A249, m10), 1);
		dcStructField(at, 'j', offsetof(union  A249, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sjfjijsslsif> */
union  A250 { s m0; j m1; f m2; j m3; i m4; j m5; s m6; s m7; l m8; s m9; i m10; f m11; };
void f_cpA250(union  A250 *x, const union  A250 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA250(const union  A250 *x, const union  A250 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA250() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A250), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A250, m0), 1);
		dcStructField(at, 'j', offsetof(union  A250, m1), 1);
		dcStructField(at, 'f', offsetof(union  A250, m2), 1);
		dcStructField(at, 'j', offsetof(union  A250, m3), 1);
		dcStructField(at, 'i', offsetof(union  A250, m4), 1);
		dcStructField(at, 'j', offsetof(union  A250, m5), 1);
		dcStructField(at, 's', offsetof(union  A250, m6), 1);
		dcStructField(at, 's', offsetof(union  A250, m7), 1);
		dcStructField(at, 'l', offsetof(union  A250, m8), 1);
		dcStructField(at, 's', offsetof(union  A250, m9), 1);
		dcStructField(at, 'i', offsetof(union  A250, m10), 1);
		dcStructField(at, 'f', offsetof(union  A250, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sijjpciddclj> */
union  A251 { s m0; i m1; j m2; j m3; p m4; c m5; i m6; d m7; d m8; c m9; l m10; j m11; };
void f_cpA251(union  A251 *x, const union  A251 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA251(const union  A251 *x, const union  A251 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA251() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A251), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A251, m0), 1);
		dcStructField(at, 'i', offsetof(union  A251, m1), 1);
		dcStructField(at, 'j', offsetof(union  A251, m2), 1);
		dcStructField(at, 'j', offsetof(union  A251, m3), 1);
		dcStructField(at, 'p', offsetof(union  A251, m4), 1);
		dcStructField(at, 'c', offsetof(union  A251, m5), 1);
		dcStructField(at, 'i', offsetof(union  A251, m6), 1);
		dcStructField(at, 'd', offsetof(union  A251, m7), 1);
		dcStructField(at, 'd', offsetof(union  A251, m8), 1);
		dcStructField(at, 'c', offsetof(union  A251, m9), 1);
		dcStructField(at, 'l', offsetof(union  A251, m10), 1);
		dcStructField(at, 'j', offsetof(union  A251, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fc> */
union  A252 { f m0; c m1; };
void f_cpA252(union  A252 *x, const union  A252 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA252(const union  A252 *x, const union  A252 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA252() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A252), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A252, m0), 1);
		dcStructField(at, 'c', offsetof(union  A252, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pc<sjfjijsslsif>si<sijjpciddclj><fc>jlc> */
union  A253 { p m0; c m1; union  A250 m2; s m3; i m4; union  A251 m5; union  A252 m6; j m7; l m8; c m9; };
void f_cpA253(union  A253 *x, const union  A253 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA250(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; f_cpA251(&x->m5, &y->m5); f_cpA252(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA253(const union  A253 *x, const union  A253 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA250(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA251(&x->m5, &y->m5) && f_cmpA252(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA253() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A253), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A253, m0), 1);
		dcStructField(at, 'c', offsetof(union  A253, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A253, m2), 1, f_touchdcstA250());
		dcStructField(at, 's', offsetof(union  A253, m3), 1);
		dcStructField(at, 'i', offsetof(union  A253, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A253, m5), 1, f_touchdcstA251());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A253, m6), 1, f_touchdcstA252());
		dcStructField(at, 'j', offsetof(union  A253, m7), 1);
		dcStructField(at, 'l', offsetof(union  A253, m8), 1);
		dcStructField(at, 'c', offsetof(union  A253, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <isflpipf> */
union  A254 { i m0; s m1; f m2; l m3; p m4; i m5; p m6; f m7; };
void f_cpA254(union  A254 *x, const union  A254 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA254(const union  A254 *x, const union  A254 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA254() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A254), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A254, m0), 1);
		dcStructField(at, 's', offsetof(union  A254, m1), 1);
		dcStructField(at, 'f', offsetof(union  A254, m2), 1);
		dcStructField(at, 'l', offsetof(union  A254, m3), 1);
		dcStructField(at, 'p', offsetof(union  A254, m4), 1);
		dcStructField(at, 'i', offsetof(union  A254, m5), 1);
		dcStructField(at, 'p', offsetof(union  A254, m6), 1);
		dcStructField(at, 'f', offsetof(union  A254, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<isflpipf>js{p}j> */
union  A255 { union  A254 m0; j m1; s m2; struct A33 m3; j m4; };
void f_cpA255(union  A255 *x, const union  A255 *y) { f_cpA254(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA33(&x->m3, &y->m3); x->m4 = y->m4; };
int f_cmpA255(const union  A255 *x, const union  A255 *y) { return f_cmpA254(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA33(&x->m3, &y->m3) && x->m4 == y->m4; };
DCstruct* f_touchdcstA255() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A255), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A255, m0), 1, f_touchdcstA254());
		dcStructField(at, 'j', offsetof(union  A255, m1), 1);
		dcStructField(at, 's', offsetof(union  A255, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A255, m3), 1, f_touchdcstA33());
		dcStructField(at, 'j', offsetof(union  A255, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <f[1]j> */
union  A256 { f m0[1]; j m1; };
void f_cpA256(union  A256 *x, const union  A256 *y) { x->m0[0] = y->m0[0]; x->m1 = y->m1; };
int f_cmpA256(const union  A256 *x, const union  A256 *y) { return x->m0[0] == y->m0[0] && x->m1 == y->m1; };
DCstruct* f_touchdcstA256() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A256), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A256, m0), 1);
		dcStructField(at, 'j', offsetof(union  A256, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ss} */
struct A257 { s m0; s m1; };
void f_cpA257(struct A257 *x, const struct A257 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA257(const struct A257 *x, const struct A257 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA257() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A257), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A257, m0), 1);
		dcStructField(at, 's', offsetof(struct A257, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p<f[1]j>cdpipfp[15]fl{ss}} */
struct A258 { p m0; union  A256 m1; c m2; d m3; p m4; i m5; p m6; f m7; p m8[15]; f m9; l m10; struct A257 m11; };
void f_cpA258(struct A258 *x, const struct A258 *y) { x->m0 = y->m0; f_cpA256(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m8[8] = y->m8[8]; x->m8[9] = y->m8[9]; x->m8[10] = y->m8[10]; x->m8[11] = y->m8[11]; x->m8[12] = y->m8[12]; x->m8[13] = y->m8[13]; x->m8[14] = y->m8[14]; x->m9 = y->m9; x->m10 = y->m10; f_cpA257(&x->m11, &y->m11); };
int f_cmpA258(const struct A258 *x, const struct A258 *y) { return x->m0 == y->m0 && f_cmpA256(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m8[8] == y->m8[8] && x->m8[9] == y->m8[9] && x->m8[10] == y->m8[10] && x->m8[11] == y->m8[11] && x->m8[12] == y->m8[12] && x->m8[13] == y->m8[13] && x->m8[14] == y->m8[14] && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA257(&x->m11, &y->m11); };
DCstruct* f_touchdcstA258() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A258), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A258, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A258, m1), 1, f_touchdcstA256());
		dcStructField(at, 'c', offsetof(struct A258, m2), 1);
		dcStructField(at, 'd', offsetof(struct A258, m3), 1);
		dcStructField(at, 'p', offsetof(struct A258, m4), 1);
		dcStructField(at, 'i', offsetof(struct A258, m5), 1);
		dcStructField(at, 'p', offsetof(struct A258, m6), 1);
		dcStructField(at, 'f', offsetof(struct A258, m7), 1);
		dcStructField(at, 'p', offsetof(struct A258, m8), 15);
		dcStructField(at, 'f', offsetof(struct A258, m9), 1);
		dcStructField(at, 'l', offsetof(struct A258, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A258, m11), 1, f_touchdcstA257());
		dcCloseStruct(at);
	}
	return at;
};
/* {dds[11]} */
struct A259 { d m0; d m1; s m2[11]; };
void f_cpA259(struct A259 *x, const struct A259 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; };
int f_cmpA259(const struct A259 *x, const struct A259 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10]; };
DCstruct* f_touchdcstA259() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A259), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A259, m0), 1);
		dcStructField(at, 'd', offsetof(struct A259, m1), 1);
		dcStructField(at, 's', offsetof(struct A259, m2), 11);
		dcCloseStruct(at);
	}
	return at;
};
/* <s<<isflpipf>js{p}j>c{p<f[1]j>cdpipfp[15]fl{ss}}jjpi{dds[11]}> */
union  A260 { s m0; union  A255 m1; c m2; struct A258 m3; j m4; j m5; p m6; i m7; struct A259 m8; };
void f_cpA260(union  A260 *x, const union  A260 *y) { x->m0 = y->m0; f_cpA255(&x->m1, &y->m1); x->m2 = y->m2; f_cpA258(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA259(&x->m8, &y->m8); };
int f_cmpA260(const union  A260 *x, const union  A260 *y) { return x->m0 == y->m0 && f_cmpA255(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA258(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA259(&x->m8, &y->m8); };
DCstruct* f_touchdcstA260() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A260), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A260, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A260, m1), 1, f_touchdcstA255());
		dcStructField(at, 'c', offsetof(union  A260, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A260, m3), 1, f_touchdcstA258());
		dcStructField(at, 'j', offsetof(union  A260, m4), 1);
		dcStructField(at, 'j', offsetof(union  A260, m5), 1);
		dcStructField(at, 'p', offsetof(union  A260, m6), 1);
		dcStructField(at, 'i', offsetof(union  A260, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A260, m8), 1, f_touchdcstA259());
		dcCloseStruct(at);
	}
	return at;
};
/* <lcjjccpifjlp> */
union  A261 { l m0; c m1; j m2; j m3; c m4; c m5; p m6; i m7; f m8; j m9; l m10; p m11; };
void f_cpA261(union  A261 *x, const union  A261 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA261(const union  A261 *x, const union  A261 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA261() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A261), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A261, m0), 1);
		dcStructField(at, 'c', offsetof(union  A261, m1), 1);
		dcStructField(at, 'j', offsetof(union  A261, m2), 1);
		dcStructField(at, 'j', offsetof(union  A261, m3), 1);
		dcStructField(at, 'c', offsetof(union  A261, m4), 1);
		dcStructField(at, 'c', offsetof(union  A261, m5), 1);
		dcStructField(at, 'p', offsetof(union  A261, m6), 1);
		dcStructField(at, 'i', offsetof(union  A261, m7), 1);
		dcStructField(at, 'f', offsetof(union  A261, m8), 1);
		dcStructField(at, 'j', offsetof(union  A261, m9), 1);
		dcStructField(at, 'l', offsetof(union  A261, m10), 1);
		dcStructField(at, 'p', offsetof(union  A261, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {icpfcicldpcd} */
struct A262 { i m0; c m1; p m2; f m3; c m4; i m5; c m6; l m7; d m8; p m9; c m10; d m11; };
void f_cpA262(struct A262 *x, const struct A262 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA262(const struct A262 *x, const struct A262 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA262() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A262), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A262, m0), 1);
		dcStructField(at, 'c', offsetof(struct A262, m1), 1);
		dcStructField(at, 'p', offsetof(struct A262, m2), 1);
		dcStructField(at, 'f', offsetof(struct A262, m3), 1);
		dcStructField(at, 'c', offsetof(struct A262, m4), 1);
		dcStructField(at, 'i', offsetof(struct A262, m5), 1);
		dcStructField(at, 'c', offsetof(struct A262, m6), 1);
		dcStructField(at, 'l', offsetof(struct A262, m7), 1);
		dcStructField(at, 'd', offsetof(struct A262, m8), 1);
		dcStructField(at, 'p', offsetof(struct A262, m9), 1);
		dcStructField(at, 'c', offsetof(struct A262, m10), 1);
		dcStructField(at, 'd', offsetof(struct A262, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sllfij} */
struct A263 { s m0; l m1; l m2; f m3; i m4; j m5; };
void f_cpA263(struct A263 *x, const struct A263 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA263(const struct A263 *x, const struct A263 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA263() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A263), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A263, m0), 1);
		dcStructField(at, 'l', offsetof(struct A263, m1), 1);
		dcStructField(at, 'l', offsetof(struct A263, m2), 1);
		dcStructField(at, 'f', offsetof(struct A263, m3), 1);
		dcStructField(at, 'i', offsetof(struct A263, m4), 1);
		dcStructField(at, 'j', offsetof(struct A263, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sf<lcjjccpifjlp>ildip{icpfcicldpcd}ld{sllfij}> */
union  A264 { s m0; f m1; union  A261 m2; i m3; l m4; d m5; i m6; p m7; struct A262 m8; l m9; d m10; struct A263 m11; };
void f_cpA264(union  A264 *x, const union  A264 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA261(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA262(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; f_cpA263(&x->m11, &y->m11); };
int f_cmpA264(const union  A264 *x, const union  A264 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA261(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA262(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA263(&x->m11, &y->m11); };
DCstruct* f_touchdcstA264() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A264), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A264, m0), 1);
		dcStructField(at, 'f', offsetof(union  A264, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A264, m2), 1, f_touchdcstA261());
		dcStructField(at, 'i', offsetof(union  A264, m3), 1);
		dcStructField(at, 'l', offsetof(union  A264, m4), 1);
		dcStructField(at, 'd', offsetof(union  A264, m5), 1);
		dcStructField(at, 'i', offsetof(union  A264, m6), 1);
		dcStructField(at, 'p', offsetof(union  A264, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A264, m8), 1, f_touchdcstA262());
		dcStructField(at, 'l', offsetof(union  A264, m9), 1);
		dcStructField(at, 'd', offsetof(union  A264, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A264, m11), 1, f_touchdcstA263());
		dcCloseStruct(at);
	}
	return at;
};
/* {<sf<lcjjccpifjlp>ildip{icpfcicldpcd}ld{sllfij}>ilpfsljj} */
struct A265 { union  A264 m0; i m1; l m2; p m3; f m4; s m5; l m6; j m7; j m8; };
void f_cpA265(struct A265 *x, const struct A265 *y) { f_cpA264(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA265(const struct A265 *x, const struct A265 *y) { return f_cmpA264(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA265() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A265), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A265, m0), 1, f_touchdcstA264());
		dcStructField(at, 'i', offsetof(struct A265, m1), 1);
		dcStructField(at, 'l', offsetof(struct A265, m2), 1);
		dcStructField(at, 'p', offsetof(struct A265, m3), 1);
		dcStructField(at, 'f', offsetof(struct A265, m4), 1);
		dcStructField(at, 's', offsetof(struct A265, m5), 1);
		dcStructField(at, 'l', offsetof(struct A265, m6), 1);
		dcStructField(at, 'j', offsetof(struct A265, m7), 1);
		dcStructField(at, 'j', offsetof(struct A265, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sljp[9]dpcfcpsf> */
union  A266 { s m0; l m1; j m2; p m3[9]; d m4; p m5; c m6; f m7; c m8; p m9; s m10; f m11; };
void f_cpA266(union  A266 *x, const union  A266 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA266(const union  A266 *x, const union  A266 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA266() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A266), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A266, m0), 1);
		dcStructField(at, 'l', offsetof(union  A266, m1), 1);
		dcStructField(at, 'j', offsetof(union  A266, m2), 1);
		dcStructField(at, 'p', offsetof(union  A266, m3), 9);
		dcStructField(at, 'd', offsetof(union  A266, m4), 1);
		dcStructField(at, 'p', offsetof(union  A266, m5), 1);
		dcStructField(at, 'c', offsetof(union  A266, m6), 1);
		dcStructField(at, 'f', offsetof(union  A266, m7), 1);
		dcStructField(at, 'c', offsetof(union  A266, m8), 1);
		dcStructField(at, 'p', offsetof(union  A266, m9), 1);
		dcStructField(at, 's', offsetof(union  A266, m10), 1);
		dcStructField(at, 'f', offsetof(union  A266, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pjfj<sljp[9]dpcfcpsf>} */
struct A267 { p m0; j m1; f m2; j m3; union  A266 m4; };
void f_cpA267(struct A267 *x, const struct A267 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA266(&x->m4, &y->m4); };
int f_cmpA267(const struct A267 *x, const struct A267 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA266(&x->m4, &y->m4); };
DCstruct* f_touchdcstA267() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A267), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A267, m0), 1);
		dcStructField(at, 'j', offsetof(struct A267, m1), 1);
		dcStructField(at, 'f', offsetof(struct A267, m2), 1);
		dcStructField(at, 'j', offsetof(struct A267, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A267, m4), 1, f_touchdcstA266());
		dcCloseStruct(at);
	}
	return at;
};
/* {fciil[3]ficijfi} */
struct A268 { f m0; c m1; i m2; i m3; l m4[3]; f m5; i m6; c m7; i m8; j m9; f m10; i m11; };
void f_cpA268(struct A268 *x, const struct A268 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA268(const struct A268 *x, const struct A268 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA268() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A268), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A268, m0), 1);
		dcStructField(at, 'c', offsetof(struct A268, m1), 1);
		dcStructField(at, 'i', offsetof(struct A268, m2), 1);
		dcStructField(at, 'i', offsetof(struct A268, m3), 1);
		dcStructField(at, 'l', offsetof(struct A268, m4), 3);
		dcStructField(at, 'f', offsetof(struct A268, m5), 1);
		dcStructField(at, 'i', offsetof(struct A268, m6), 1);
		dcStructField(at, 'c', offsetof(struct A268, m7), 1);
		dcStructField(at, 'i', offsetof(struct A268, m8), 1);
		dcStructField(at, 'j', offsetof(struct A268, m9), 1);
		dcStructField(at, 'f', offsetof(struct A268, m10), 1);
		dcStructField(at, 'i', offsetof(struct A268, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dfp{fciil[3]ficijfi}pdj} */
struct A269 { d m0; f m1; p m2; struct A268 m3; p m4; d m5; j m6; };
void f_cpA269(struct A269 *x, const struct A269 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA268(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA269(const struct A269 *x, const struct A269 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA268(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA269() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A269), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A269, m0), 1);
		dcStructField(at, 'f', offsetof(struct A269, m1), 1);
		dcStructField(at, 'p', offsetof(struct A269, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A269, m3), 1, f_touchdcstA268());
		dcStructField(at, 'p', offsetof(struct A269, m4), 1);
		dcStructField(at, 'd', offsetof(struct A269, m5), 1);
		dcStructField(at, 'j', offsetof(struct A269, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pidfjlc{dfp{fciil[3]ficijfi}pdj}{d}ssi> */
union  A270 { p m0; i m1; d m2; f m3; j m4; l m5; c m6; struct A269 m7; struct A47 m8; s m9; s m10; i m11; };
void f_cpA270(union  A270 *x, const union  A270 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA269(&x->m7, &y->m7); f_cpA47(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA270(const union  A270 *x, const union  A270 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA269(&x->m7, &y->m7) && f_cmpA47(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA270() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A270), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A270, m0), 1);
		dcStructField(at, 'i', offsetof(union  A270, m1), 1);
		dcStructField(at, 'd', offsetof(union  A270, m2), 1);
		dcStructField(at, 'f', offsetof(union  A270, m3), 1);
		dcStructField(at, 'j', offsetof(union  A270, m4), 1);
		dcStructField(at, 'l', offsetof(union  A270, m5), 1);
		dcStructField(at, 'c', offsetof(union  A270, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A270, m7), 1, f_touchdcstA269());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A270, m8), 1, f_touchdcstA47());
		dcStructField(at, 's', offsetof(union  A270, m9), 1);
		dcStructField(at, 's', offsetof(union  A270, m10), 1);
		dcStructField(at, 'i', offsetof(union  A270, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ildlssjsi} */
struct A271 { i m0; l m1; d m2; l m3; s m4; s m5; j m6; s m7; i m8; };
void f_cpA271(struct A271 *x, const struct A271 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA271(const struct A271 *x, const struct A271 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA271() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A271), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A271, m0), 1);
		dcStructField(at, 'l', offsetof(struct A271, m1), 1);
		dcStructField(at, 'd', offsetof(struct A271, m2), 1);
		dcStructField(at, 'l', offsetof(struct A271, m3), 1);
		dcStructField(at, 's', offsetof(struct A271, m4), 1);
		dcStructField(at, 's', offsetof(struct A271, m5), 1);
		dcStructField(at, 'j', offsetof(struct A271, m6), 1);
		dcStructField(at, 's', offsetof(struct A271, m7), 1);
		dcStructField(at, 'i', offsetof(struct A271, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ddfi} */
struct A272 { d m0; d m1; f m2; i m3; };
void f_cpA272(struct A272 *x, const struct A272 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA272(const struct A272 *x, const struct A272 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA272() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A272), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A272, m0), 1);
		dcStructField(at, 'd', offsetof(struct A272, m1), 1);
		dcStructField(at, 'f', offsetof(struct A272, m2), 1);
		dcStructField(at, 'i', offsetof(struct A272, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cp{ildlssjsi}ispdp{ddfi}lfj> */
union  A273 { c m0; p m1; struct A271 m2; i m3; s m4; p m5; d m6; p m7; struct A272 m8; l m9; f m10; j m11; };
void f_cpA273(union  A273 *x, const union  A273 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA271(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA272(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA273(const union  A273 *x, const union  A273 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA271(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA272(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA273() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A273), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A273, m0), 1);
		dcStructField(at, 'p', offsetof(union  A273, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A273, m2), 1, f_touchdcstA271());
		dcStructField(at, 'i', offsetof(union  A273, m3), 1);
		dcStructField(at, 's', offsetof(union  A273, m4), 1);
		dcStructField(at, 'p', offsetof(union  A273, m5), 1);
		dcStructField(at, 'd', offsetof(union  A273, m6), 1);
		dcStructField(at, 'p', offsetof(union  A273, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A273, m8), 1, f_touchdcstA272());
		dcStructField(at, 'l', offsetof(union  A273, m9), 1);
		dcStructField(at, 'f', offsetof(union  A273, m10), 1);
		dcStructField(at, 'j', offsetof(union  A273, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<cp{ildlssjsi}ispdp{ddfi}lfj>> */
union  A274 { union  A273 m0; };
void f_cpA274(union  A274 *x, const union  A274 *y) { f_cpA273(&x->m0, &y->m0); };
int f_cmpA274(const union  A274 *x, const union  A274 *y) { return f_cmpA273(&x->m0, &y->m0); };
DCstruct* f_touchdcstA274() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A274), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A274, m0), 1, f_touchdcstA273());
		dcCloseStruct(at);
	}
	return at;
};
/* <djpdjpflcslf> */
union  A275 { d m0; j m1; p m2; d m3; j m4; p m5; f m6; l m7; c m8; s m9; l m10; f m11; };
void f_cpA275(union  A275 *x, const union  A275 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA275(const union  A275 *x, const union  A275 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA275() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A275), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A275, m0), 1);
		dcStructField(at, 'j', offsetof(union  A275, m1), 1);
		dcStructField(at, 'p', offsetof(union  A275, m2), 1);
		dcStructField(at, 'd', offsetof(union  A275, m3), 1);
		dcStructField(at, 'j', offsetof(union  A275, m4), 1);
		dcStructField(at, 'p', offsetof(union  A275, m5), 1);
		dcStructField(at, 'f', offsetof(union  A275, m6), 1);
		dcStructField(at, 'l', offsetof(union  A275, m7), 1);
		dcStructField(at, 'c', offsetof(union  A275, m8), 1);
		dcStructField(at, 's', offsetof(union  A275, m9), 1);
		dcStructField(at, 'l', offsetof(union  A275, m10), 1);
		dcStructField(at, 'f', offsetof(union  A275, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jppjldiss[9]ic[12]j> */
union  A276 { j m0; p m1; p m2; j m3; l m4; d m5; i m6; s m7; s m8[9]; i m9; c m10[12]; j m11; };
void f_cpA276(union  A276 *x, const union  A276 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m8[8] = y->m8[8]; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m10[8] = y->m10[8]; x->m10[9] = y->m10[9]; x->m10[10] = y->m10[10]; x->m10[11] = y->m10[11]; x->m11 = y->m11; };
int f_cmpA276(const union  A276 *x, const union  A276 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m8[8] == y->m8[8] && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m10[8] == y->m10[8] && x->m10[9] == y->m10[9] && x->m10[10] == y->m10[10] && x->m10[11] == y->m10[11] && x->m11 == y->m11; };
DCstruct* f_touchdcstA276() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A276), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A276, m0), 1);
		dcStructField(at, 'p', offsetof(union  A276, m1), 1);
		dcStructField(at, 'p', offsetof(union  A276, m2), 1);
		dcStructField(at, 'j', offsetof(union  A276, m3), 1);
		dcStructField(at, 'l', offsetof(union  A276, m4), 1);
		dcStructField(at, 'd', offsetof(union  A276, m5), 1);
		dcStructField(at, 'i', offsetof(union  A276, m6), 1);
		dcStructField(at, 's', offsetof(union  A276, m7), 1);
		dcStructField(at, 's', offsetof(union  A276, m8), 9);
		dcStructField(at, 'i', offsetof(union  A276, m9), 1);
		dcStructField(at, 'c', offsetof(union  A276, m10), 12);
		dcStructField(at, 'j', offsetof(union  A276, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lcjif<jppjldiss[9]ic[12]j>psf> */
union  A277 { l m0; c m1; j m2; i m3; f m4; union  A276 m5; p m6; s m7; f m8; };
void f_cpA277(union  A277 *x, const union  A277 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA276(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA277(const union  A277 *x, const union  A277 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA276(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA277() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A277), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A277, m0), 1);
		dcStructField(at, 'c', offsetof(union  A277, m1), 1);
		dcStructField(at, 'j', offsetof(union  A277, m2), 1);
		dcStructField(at, 'i', offsetof(union  A277, m3), 1);
		dcStructField(at, 'f', offsetof(union  A277, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A277, m5), 1, f_touchdcstA276());
		dcStructField(at, 'p', offsetof(union  A277, m6), 1);
		dcStructField(at, 's', offsetof(union  A277, m7), 1);
		dcStructField(at, 'f', offsetof(union  A277, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pc> */
union  A278 { p m0; c m1; };
void f_cpA278(union  A278 *x, const union  A278 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA278(const union  A278 *x, const union  A278 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA278() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A278), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A278, m0), 1);
		dcStructField(at, 'c', offsetof(union  A278, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iflplciiciif} */
struct A279 { i m0; f m1; l m2; p m3; l m4; c m5; i m6; i m7; c m8; i m9; i m10; f m11; };
void f_cpA279(struct A279 *x, const struct A279 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA279(const struct A279 *x, const struct A279 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA279() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A279), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A279, m0), 1);
		dcStructField(at, 'f', offsetof(struct A279, m1), 1);
		dcStructField(at, 'l', offsetof(struct A279, m2), 1);
		dcStructField(at, 'p', offsetof(struct A279, m3), 1);
		dcStructField(at, 'l', offsetof(struct A279, m4), 1);
		dcStructField(at, 'c', offsetof(struct A279, m5), 1);
		dcStructField(at, 'i', offsetof(struct A279, m6), 1);
		dcStructField(at, 'i', offsetof(struct A279, m7), 1);
		dcStructField(at, 'c', offsetof(struct A279, m8), 1);
		dcStructField(at, 'i', offsetof(struct A279, m9), 1);
		dcStructField(at, 'i', offsetof(struct A279, m10), 1);
		dcStructField(at, 'f', offsetof(struct A279, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pjlipfsc> */
union  A280 { p m0; j m1; l m2; i m3; p m4; f m5; s m6; c m7; };
void f_cpA280(union  A280 *x, const union  A280 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA280(const union  A280 *x, const union  A280 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA280() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A280), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A280, m0), 1);
		dcStructField(at, 'j', offsetof(union  A280, m1), 1);
		dcStructField(at, 'l', offsetof(union  A280, m2), 1);
		dcStructField(at, 'i', offsetof(union  A280, m3), 1);
		dcStructField(at, 'p', offsetof(union  A280, m4), 1);
		dcStructField(at, 'f', offsetof(union  A280, m5), 1);
		dcStructField(at, 's', offsetof(union  A280, m6), 1);
		dcStructField(at, 'c', offsetof(union  A280, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ii> */
union  A281 { i m0; i m1; };
void f_cpA281(union  A281 *x, const union  A281 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA281(const union  A281 *x, const union  A281 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA281() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A281), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A281, m0), 1);
		dcStructField(at, 'i', offsetof(union  A281, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pddsssif} */
struct A282 { p m0; d m1; d m2; s m3; s m4; s m5; i m6; f m7; };
void f_cpA282(struct A282 *x, const struct A282 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA282(const struct A282 *x, const struct A282 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA282() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A282), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A282, m0), 1);
		dcStructField(at, 'd', offsetof(struct A282, m1), 1);
		dcStructField(at, 'd', offsetof(struct A282, m2), 1);
		dcStructField(at, 's', offsetof(struct A282, m3), 1);
		dcStructField(at, 's', offsetof(struct A282, m4), 1);
		dcStructField(at, 's', offsetof(struct A282, m5), 1);
		dcStructField(at, 'i', offsetof(struct A282, m6), 1);
		dcStructField(at, 'f', offsetof(struct A282, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<pjlipfsc>sffdi<ii>c{pddsssif}lf[14]p> */
union  A283 { union  A280 m0; s m1; f m2; f m3; d m4; i m5; union  A281 m6; c m7; struct A282 m8; l m9; f m10[14]; p m11; };
void f_cpA283(union  A283 *x, const union  A283 *y) { f_cpA280(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA281(&x->m6, &y->m6); x->m7 = y->m7; f_cpA282(&x->m8, &y->m8); x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m10[8] = y->m10[8]; x->m10[9] = y->m10[9]; x->m10[10] = y->m10[10]; x->m10[11] = y->m10[11]; x->m10[12] = y->m10[12]; x->m10[13] = y->m10[13]; x->m11 = y->m11; };
int f_cmpA283(const union  A283 *x, const union  A283 *y) { return f_cmpA280(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA281(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA282(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m10[8] == y->m10[8] && x->m10[9] == y->m10[9] && x->m10[10] == y->m10[10] && x->m10[11] == y->m10[11] && x->m10[12] == y->m10[12] && x->m10[13] == y->m10[13] && x->m11 == y->m11; };
DCstruct* f_touchdcstA283() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A283), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A283, m0), 1, f_touchdcstA280());
		dcStructField(at, 's', offsetof(union  A283, m1), 1);
		dcStructField(at, 'f', offsetof(union  A283, m2), 1);
		dcStructField(at, 'f', offsetof(union  A283, m3), 1);
		dcStructField(at, 'd', offsetof(union  A283, m4), 1);
		dcStructField(at, 'i', offsetof(union  A283, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A283, m6), 1, f_touchdcstA281());
		dcStructField(at, 'c', offsetof(union  A283, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A283, m8), 1, f_touchdcstA282());
		dcStructField(at, 'l', offsetof(union  A283, m9), 1);
		dcStructField(at, 'f', offsetof(union  A283, m10), 14);
		dcStructField(at, 'p', offsetof(union  A283, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {idccsld<<pjlipfsc>sffdi<ii>c{pddsssif}lf[14]p>f} */
struct A284 { i m0; d m1; c m2; c m3; s m4; l m5; d m6; union  A283 m7; f m8; };
void f_cpA284(struct A284 *x, const struct A284 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA283(&x->m7, &y->m7); x->m8 = y->m8; };
int f_cmpA284(const struct A284 *x, const struct A284 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA283(&x->m7, &y->m7) && x->m8 == y->m8; };
DCstruct* f_touchdcstA284() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A284), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A284, m0), 1);
		dcStructField(at, 'd', offsetof(struct A284, m1), 1);
		dcStructField(at, 'c', offsetof(struct A284, m2), 1);
		dcStructField(at, 'c', offsetof(struct A284, m3), 1);
		dcStructField(at, 's', offsetof(struct A284, m4), 1);
		dcStructField(at, 'l', offsetof(struct A284, m5), 1);
		dcStructField(at, 'd', offsetof(struct A284, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A284, m7), 1, f_touchdcstA283());
		dcStructField(at, 'f', offsetof(struct A284, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {plffipd} */
struct A285 { p m0; l m1; f m2; f m3; i m4; p m5; d m6; };
void f_cpA285(struct A285 *x, const struct A285 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA285(const struct A285 *x, const struct A285 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA285() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A285), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A285, m0), 1);
		dcStructField(at, 'l', offsetof(struct A285, m1), 1);
		dcStructField(at, 'f', offsetof(struct A285, m2), 1);
		dcStructField(at, 'f', offsetof(struct A285, m3), 1);
		dcStructField(at, 'i', offsetof(struct A285, m4), 1);
		dcStructField(at, 'p', offsetof(struct A285, m5), 1);
		dcStructField(at, 'd', offsetof(struct A285, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pilpfcs[13]pislc> */
union  A286 { p m0; i m1; l m2; p m3; f m4; c m5; s m6[13]; p m7; i m8; s m9; l m10; c m11; };
void f_cpA286(union  A286 *x, const union  A286 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m6[11] = y->m6[11]; x->m6[12] = y->m6[12]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA286(const union  A286 *x, const union  A286 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m6[11] == y->m6[11] && x->m6[12] == y->m6[12] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA286() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A286), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A286, m0), 1);
		dcStructField(at, 'i', offsetof(union  A286, m1), 1);
		dcStructField(at, 'l', offsetof(union  A286, m2), 1);
		dcStructField(at, 'p', offsetof(union  A286, m3), 1);
		dcStructField(at, 'f', offsetof(union  A286, m4), 1);
		dcStructField(at, 'c', offsetof(union  A286, m5), 1);
		dcStructField(at, 's', offsetof(union  A286, m6), 13);
		dcStructField(at, 'p', offsetof(union  A286, m7), 1);
		dcStructField(at, 'i', offsetof(union  A286, m8), 1);
		dcStructField(at, 's', offsetof(union  A286, m9), 1);
		dcStructField(at, 'l', offsetof(union  A286, m10), 1);
		dcStructField(at, 'c', offsetof(union  A286, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iiisfdspl{plffipd}<pilpfcs[13]pislc>f} */
struct A287 { i m0; i m1; i m2; s m3; f m4; d m5; s m6; p m7; l m8; struct A285 m9; union  A286 m10; f m11; };
void f_cpA287(struct A287 *x, const struct A287 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA285(&x->m9, &y->m9); f_cpA286(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA287(const struct A287 *x, const struct A287 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA285(&x->m9, &y->m9) && f_cmpA286(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA287() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A287), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A287, m0), 1);
		dcStructField(at, 'i', offsetof(struct A287, m1), 1);
		dcStructField(at, 'i', offsetof(struct A287, m2), 1);
		dcStructField(at, 's', offsetof(struct A287, m3), 1);
		dcStructField(at, 'f', offsetof(struct A287, m4), 1);
		dcStructField(at, 'd', offsetof(struct A287, m5), 1);
		dcStructField(at, 's', offsetof(struct A287, m6), 1);
		dcStructField(at, 'p', offsetof(struct A287, m7), 1);
		dcStructField(at, 'l', offsetof(struct A287, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A287, m9), 1, f_touchdcstA285());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A287, m10), 1, f_touchdcstA286());
		dcStructField(at, 'f', offsetof(struct A287, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lp[13]djsilfscj[4]c} */
struct A288 { l m0; p m1[13]; d m2; j m3; s m4; i m5; l m6; f m7; s m8; c m9; j m10[4]; c m11; };
void f_cpA288(struct A288 *x, const struct A288 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m1[10] = y->m1[10]; x->m1[11] = y->m1[11]; x->m1[12] = y->m1[12]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m11 = y->m11; };
int f_cmpA288(const struct A288 *x, const struct A288 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m1[10] == y->m1[10] && x->m1[11] == y->m1[11] && x->m1[12] == y->m1[12] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m11 == y->m11; };
DCstruct* f_touchdcstA288() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A288), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A288, m0), 1);
		dcStructField(at, 'p', offsetof(struct A288, m1), 13);
		dcStructField(at, 'd', offsetof(struct A288, m2), 1);
		dcStructField(at, 'j', offsetof(struct A288, m3), 1);
		dcStructField(at, 's', offsetof(struct A288, m4), 1);
		dcStructField(at, 'i', offsetof(struct A288, m5), 1);
		dcStructField(at, 'l', offsetof(struct A288, m6), 1);
		dcStructField(at, 'f', offsetof(struct A288, m7), 1);
		dcStructField(at, 's', offsetof(struct A288, m8), 1);
		dcStructField(at, 'c', offsetof(struct A288, m9), 1);
		dcStructField(at, 'j', offsetof(struct A288, m10), 4);
		dcStructField(at, 'c', offsetof(struct A288, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {diljflj{lp[13]djsilfscj[4]c}pjpp} */
struct A289 { d m0; i m1; l m2; j m3; f m4; l m5; j m6; struct A288 m7; p m8; j m9; p m10; p m11; };
void f_cpA289(struct A289 *x, const struct A289 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA288(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA289(const struct A289 *x, const struct A289 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA288(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA289() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A289), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A289, m0), 1);
		dcStructField(at, 'i', offsetof(struct A289, m1), 1);
		dcStructField(at, 'l', offsetof(struct A289, m2), 1);
		dcStructField(at, 'j', offsetof(struct A289, m3), 1);
		dcStructField(at, 'f', offsetof(struct A289, m4), 1);
		dcStructField(at, 'l', offsetof(struct A289, m5), 1);
		dcStructField(at, 'j', offsetof(struct A289, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A289, m7), 1, f_touchdcstA288());
		dcStructField(at, 'p', offsetof(struct A289, m8), 1);
		dcStructField(at, 'j', offsetof(struct A289, m9), 1);
		dcStructField(at, 'p', offsetof(struct A289, m10), 1);
		dcStructField(at, 'p', offsetof(struct A289, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fsd> */
union  A290 { f m0; s m1; d m2; };
void f_cpA290(union  A290 *x, const union  A290 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA290(const union  A290 *x, const union  A290 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA290() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A290), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A290, m0), 1);
		dcStructField(at, 's', offsetof(union  A290, m1), 1);
		dcStructField(at, 'd', offsetof(union  A290, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djp} */
struct A291 { d m0; j m1; p m2; };
void f_cpA291(struct A291 *x, const struct A291 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA291(const struct A291 *x, const struct A291 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA291() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A291), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A291, m0), 1);
		dcStructField(at, 'j', offsetof(struct A291, m1), 1);
		dcStructField(at, 'p', offsetof(struct A291, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <siljlc{djp}lpjpp> */
union  A292 { s m0; i m1; l m2; j m3; l m4; c m5; struct A291 m6; l m7; p m8; j m9; p m10; p m11; };
void f_cpA292(union  A292 *x, const union  A292 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA291(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA292(const union  A292 *x, const union  A292 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA291(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA292() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A292), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A292, m0), 1);
		dcStructField(at, 'i', offsetof(union  A292, m1), 1);
		dcStructField(at, 'l', offsetof(union  A292, m2), 1);
		dcStructField(at, 'j', offsetof(union  A292, m3), 1);
		dcStructField(at, 'l', offsetof(union  A292, m4), 1);
		dcStructField(at, 'c', offsetof(union  A292, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A292, m6), 1, f_touchdcstA291());
		dcStructField(at, 'l', offsetof(union  A292, m7), 1);
		dcStructField(at, 'p', offsetof(union  A292, m8), 1);
		dcStructField(at, 'j', offsetof(union  A292, m9), 1);
		dcStructField(at, 'p', offsetof(union  A292, m10), 1);
		dcStructField(at, 'p', offsetof(union  A292, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ps{diljflj{lp[13]djsilfscj[4]c}pjpp}dfs<fsd><siljlc{djp}lpjpp>jlld} */
struct A293 { p m0; s m1; struct A289 m2; d m3; f m4; s m5; union  A290 m6; union  A292 m7; j m8; l m9; l m10; d m11; };
void f_cpA293(struct A293 *x, const struct A293 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA289(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA290(&x->m6, &y->m6); f_cpA292(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA293(const struct A293 *x, const struct A293 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA289(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA290(&x->m6, &y->m6) && f_cmpA292(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA293() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A293), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A293, m0), 1);
		dcStructField(at, 's', offsetof(struct A293, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A293, m2), 1, f_touchdcstA289());
		dcStructField(at, 'd', offsetof(struct A293, m3), 1);
		dcStructField(at, 'f', offsetof(struct A293, m4), 1);
		dcStructField(at, 's', offsetof(struct A293, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A293, m6), 1, f_touchdcstA290());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A293, m7), 1, f_touchdcstA292());
		dcStructField(at, 'j', offsetof(struct A293, m8), 1);
		dcStructField(at, 'l', offsetof(struct A293, m9), 1);
		dcStructField(at, 'l', offsetof(struct A293, m10), 1);
		dcStructField(at, 'd', offsetof(struct A293, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <scj[12]sp> */
union  A294 { s m0; c m1; j m2[12]; s m3; p m4; };
void f_cpA294(union  A294 *x, const union  A294 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA294(const union  A294 *x, const union  A294 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA294() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A294), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A294, m0), 1);
		dcStructField(at, 'c', offsetof(union  A294, m1), 1);
		dcStructField(at, 'j', offsetof(union  A294, m2), 12);
		dcStructField(at, 's', offsetof(union  A294, m3), 1);
		dcStructField(at, 'p', offsetof(union  A294, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cspdlp> */
union  A295 { c m0; s m1; p m2; d m3; l m4; p m5; };
void f_cpA295(union  A295 *x, const union  A295 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA295(const union  A295 *x, const union  A295 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA295() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A295), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A295, m0), 1);
		dcStructField(at, 's', offsetof(union  A295, m1), 1);
		dcStructField(at, 'p', offsetof(union  A295, m2), 1);
		dcStructField(at, 'd', offsetof(union  A295, m3), 1);
		dcStructField(at, 'l', offsetof(union  A295, m4), 1);
		dcStructField(at, 'p', offsetof(union  A295, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ldjss> */
union  A296 { l m0; d m1; j m2; s m3; s m4; };
void f_cpA296(union  A296 *x, const union  A296 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA296(const union  A296 *x, const union  A296 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA296() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A296), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A296, m0), 1);
		dcStructField(at, 'd', offsetof(union  A296, m1), 1);
		dcStructField(at, 'j', offsetof(union  A296, m2), 1);
		dcStructField(at, 's', offsetof(union  A296, m3), 1);
		dcStructField(at, 's', offsetof(union  A296, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ll[13]jlpfff[3]dfsf> */
union  A297 { l m0; l m1[13]; j m2; l m3; p m4; f m5; f m6; f m7[3]; d m8; f m9; s m10; f m11; };
void f_cpA297(union  A297 *x, const union  A297 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m1[10] = y->m1[10]; x->m1[11] = y->m1[11]; x->m1[12] = y->m1[12]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA297(const union  A297 *x, const union  A297 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m1[10] == y->m1[10] && x->m1[11] == y->m1[11] && x->m1[12] == y->m1[12] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA297() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A297), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A297, m0), 1);
		dcStructField(at, 'l', offsetof(union  A297, m1), 13);
		dcStructField(at, 'j', offsetof(union  A297, m2), 1);
		dcStructField(at, 'l', offsetof(union  A297, m3), 1);
		dcStructField(at, 'p', offsetof(union  A297, m4), 1);
		dcStructField(at, 'f', offsetof(union  A297, m5), 1);
		dcStructField(at, 'f', offsetof(union  A297, m6), 1);
		dcStructField(at, 'f', offsetof(union  A297, m7), 3);
		dcStructField(at, 'd', offsetof(union  A297, m8), 1);
		dcStructField(at, 'f', offsetof(union  A297, m9), 1);
		dcStructField(at, 's', offsetof(union  A297, m10), 1);
		dcStructField(at, 'f', offsetof(union  A297, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cspjsi> */
union  A298 { c m0; s m1; p m2; j m3; s m4; i m5; };
void f_cpA298(union  A298 *x, const union  A298 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA298(const union  A298 *x, const union  A298 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA298() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A298), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A298, m0), 1);
		dcStructField(at, 's', offsetof(union  A298, m1), 1);
		dcStructField(at, 'p', offsetof(union  A298, m2), 1);
		dcStructField(at, 'j', offsetof(union  A298, m3), 1);
		dcStructField(at, 's', offsetof(union  A298, m4), 1);
		dcStructField(at, 'i', offsetof(union  A298, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cci[14]spj> */
union  A299 { c m0; c m1; i m2[14]; s m3; p m4; j m5; };
void f_cpA299(union  A299 *x, const union  A299 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m2[13] = y->m2[13]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA299(const union  A299 *x, const union  A299 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m2[13] == y->m2[13] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA299() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A299), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A299, m0), 1);
		dcStructField(at, 'c', offsetof(union  A299, m1), 1);
		dcStructField(at, 'i', offsetof(union  A299, m2), 14);
		dcStructField(at, 's', offsetof(union  A299, m3), 1);
		dcStructField(at, 'p', offsetof(union  A299, m4), 1);
		dcStructField(at, 'j', offsetof(union  A299, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <psi[1]ifdcjdcif> */
union  A300 { p m0; s m1; i m2[1]; i m3; f m4; d m5; c m6; j m7; d m8; c m9; i m10; f m11; };
void f_cpA300(union  A300 *x, const union  A300 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA300(const union  A300 *x, const union  A300 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA300() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A300), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A300, m0), 1);
		dcStructField(at, 's', offsetof(union  A300, m1), 1);
		dcStructField(at, 'i', offsetof(union  A300, m2), 1);
		dcStructField(at, 'i', offsetof(union  A300, m3), 1);
		dcStructField(at, 'f', offsetof(union  A300, m4), 1);
		dcStructField(at, 'd', offsetof(union  A300, m5), 1);
		dcStructField(at, 'c', offsetof(union  A300, m6), 1);
		dcStructField(at, 'j', offsetof(union  A300, m7), 1);
		dcStructField(at, 'd', offsetof(union  A300, m8), 1);
		dcStructField(at, 'c', offsetof(union  A300, m9), 1);
		dcStructField(at, 'i', offsetof(union  A300, m10), 1);
		dcStructField(at, 'f', offsetof(union  A300, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fl<ll[13]jlpfff[3]dfsf><cspjsi>f<cci[14]spj>is<psi[1]ifdcjdcif>idi} */
struct A301 { f m0; l m1; union  A297 m2; union  A298 m3; f m4; union  A299 m5; i m6; s m7; union  A300 m8; i m9; d m10; i m11; };
void f_cpA301(struct A301 *x, const struct A301 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA297(&x->m2, &y->m2); f_cpA298(&x->m3, &y->m3); x->m4 = y->m4; f_cpA299(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; f_cpA300(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA301(const struct A301 *x, const struct A301 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA297(&x->m2, &y->m2) && f_cmpA298(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA299(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA300(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA301() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A301), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A301, m0), 1);
		dcStructField(at, 'l', offsetof(struct A301, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A301, m2), 1, f_touchdcstA297());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A301, m3), 1, f_touchdcstA298());
		dcStructField(at, 'f', offsetof(struct A301, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A301, m5), 1, f_touchdcstA299());
		dcStructField(at, 'i', offsetof(struct A301, m6), 1);
		dcStructField(at, 's', offsetof(struct A301, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A301, m8), 1, f_touchdcstA300());
		dcStructField(at, 'i', offsetof(struct A301, m9), 1);
		dcStructField(at, 'd', offsetof(struct A301, m10), 1);
		dcStructField(at, 'i', offsetof(struct A301, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sjpd{fl<ll[13]jlpfff[3]dfsf><cspjsi>f<cci[14]spj>is<psi[1]ifdcjdcif>idi}ils[3]> */
union  A302 { s m0; j m1; p m2; d m3; struct A301 m4; i m5; l m6; s m7[3]; };
void f_cpA302(union  A302 *x, const union  A302 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA301(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; };
int f_cmpA302(const union  A302 *x, const union  A302 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA301(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2]; };
DCstruct* f_touchdcstA302() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A302), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A302, m0), 1);
		dcStructField(at, 'j', offsetof(union  A302, m1), 1);
		dcStructField(at, 'p', offsetof(union  A302, m2), 1);
		dcStructField(at, 'd', offsetof(union  A302, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A302, m4), 1, f_touchdcstA301());
		dcStructField(at, 'i', offsetof(union  A302, m5), 1);
		dcStructField(at, 'l', offsetof(union  A302, m6), 1);
		dcStructField(at, 's', offsetof(union  A302, m7), 3);
		dcCloseStruct(at);
	}
	return at;
};
/* <f[13]> */
union  A303 { f m0[13]; };
void f_cpA303(union  A303 *x, const union  A303 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m0[12] = y->m0[12]; };
int f_cmpA303(const union  A303 *x, const union  A303 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m0[12] == y->m0[12]; };
DCstruct* f_touchdcstA303() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A303), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A303, m0), 13);
		dcCloseStruct(at);
	}
	return at;
};
/* {<f[13]>} */
struct A304 { union  A303 m0; };
void f_cpA304(struct A304 *x, const struct A304 *y) { f_cpA303(&x->m0, &y->m0); };
int f_cmpA304(const struct A304 *x, const struct A304 *y) { return f_cmpA303(&x->m0, &y->m0); };
DCstruct* f_touchdcstA304() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A304), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A304, m0), 1, f_touchdcstA303());
		dcCloseStruct(at);
	}
	return at;
};
/* {ccjlpj} */
struct A305 { c m0; c m1; j m2; l m3; p m4; j m5; };
void f_cpA305(struct A305 *x, const struct A305 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA305(const struct A305 *x, const struct A305 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA305() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A305), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A305, m0), 1);
		dcStructField(at, 'c', offsetof(struct A305, m1), 1);
		dcStructField(at, 'j', offsetof(struct A305, m2), 1);
		dcStructField(at, 'l', offsetof(struct A305, m3), 1);
		dcStructField(at, 'p', offsetof(struct A305, m4), 1);
		dcStructField(at, 'j', offsetof(struct A305, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pssj[14]ilccd} */
struct A306 { p m0; s m1; s m2; j m3[14]; i m4; l m5; c m6; c m7; d m8; };
void f_cpA306(struct A306 *x, const struct A306 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m3[12] = y->m3[12]; x->m3[13] = y->m3[13]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA306(const struct A306 *x, const struct A306 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m3[12] == y->m3[12] && x->m3[13] == y->m3[13] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA306() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A306), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A306, m0), 1);
		dcStructField(at, 's', offsetof(struct A306, m1), 1);
		dcStructField(at, 's', offsetof(struct A306, m2), 1);
		dcStructField(at, 'j', offsetof(struct A306, m3), 14);
		dcStructField(at, 'i', offsetof(struct A306, m4), 1);
		dcStructField(at, 'l', offsetof(struct A306, m5), 1);
		dcStructField(at, 'c', offsetof(struct A306, m6), 1);
		dcStructField(at, 'c', offsetof(struct A306, m7), 1);
		dcStructField(at, 'd', offsetof(struct A306, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <djsfdjsc> */
union  A307 { d m0; j m1; s m2; f m3; d m4; j m5; s m6; c m7; };
void f_cpA307(union  A307 *x, const union  A307 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA307(const union  A307 *x, const union  A307 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA307() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A307), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A307, m0), 1);
		dcStructField(at, 'j', offsetof(union  A307, m1), 1);
		dcStructField(at, 's', offsetof(union  A307, m2), 1);
		dcStructField(at, 'f', offsetof(union  A307, m3), 1);
		dcStructField(at, 'd', offsetof(union  A307, m4), 1);
		dcStructField(at, 'j', offsetof(union  A307, m5), 1);
		dcStructField(at, 's', offsetof(union  A307, m6), 1);
		dcStructField(at, 'c', offsetof(union  A307, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iifdldpid{pssj[14]ilccd}p<djsfdjsc>> */
union  A308 { i m0; i m1; f m2; d m3; l m4; d m5; p m6; i m7; d m8; struct A306 m9; p m10; union  A307 m11; };
void f_cpA308(union  A308 *x, const union  A308 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA306(&x->m9, &y->m9); x->m10 = y->m10; f_cpA307(&x->m11, &y->m11); };
int f_cmpA308(const union  A308 *x, const union  A308 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA306(&x->m9, &y->m9) && x->m10 == y->m10 && f_cmpA307(&x->m11, &y->m11); };
DCstruct* f_touchdcstA308() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A308), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A308, m0), 1);
		dcStructField(at, 'i', offsetof(union  A308, m1), 1);
		dcStructField(at, 'f', offsetof(union  A308, m2), 1);
		dcStructField(at, 'd', offsetof(union  A308, m3), 1);
		dcStructField(at, 'l', offsetof(union  A308, m4), 1);
		dcStructField(at, 'd', offsetof(union  A308, m5), 1);
		dcStructField(at, 'p', offsetof(union  A308, m6), 1);
		dcStructField(at, 'i', offsetof(union  A308, m7), 1);
		dcStructField(at, 'd', offsetof(union  A308, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A308, m9), 1, f_touchdcstA306());
		dcStructField(at, 'p', offsetof(union  A308, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A308, m11), 1, f_touchdcstA307());
		dcCloseStruct(at);
	}
	return at;
};
/* {cpiicjjjdsjd} */
struct A309 { c m0; p m1; i m2; i m3; c m4; j m5; j m6; j m7; d m8; s m9; j m10; d m11; };
void f_cpA309(struct A309 *x, const struct A309 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA309(const struct A309 *x, const struct A309 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA309() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A309), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A309, m0), 1);
		dcStructField(at, 'p', offsetof(struct A309, m1), 1);
		dcStructField(at, 'i', offsetof(struct A309, m2), 1);
		dcStructField(at, 'i', offsetof(struct A309, m3), 1);
		dcStructField(at, 'c', offsetof(struct A309, m4), 1);
		dcStructField(at, 'j', offsetof(struct A309, m5), 1);
		dcStructField(at, 'j', offsetof(struct A309, m6), 1);
		dcStructField(at, 'j', offsetof(struct A309, m7), 1);
		dcStructField(at, 'd', offsetof(struct A309, m8), 1);
		dcStructField(at, 's', offsetof(struct A309, m9), 1);
		dcStructField(at, 'j', offsetof(struct A309, m10), 1);
		dcStructField(at, 'd', offsetof(struct A309, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pddcp} */
struct A310 { p m0; d m1; d m2; c m3; p m4; };
void f_cpA310(struct A310 *x, const struct A310 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA310(const struct A310 *x, const struct A310 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA310() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A310), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A310, m0), 1);
		dcStructField(at, 'd', offsetof(struct A310, m1), 1);
		dcStructField(at, 'd', offsetof(struct A310, m2), 1);
		dcStructField(at, 'c', offsetof(struct A310, m3), 1);
		dcStructField(at, 'p', offsetof(struct A310, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cijpip{cpiicjjjdsjd}dd{pddcp}> */
union  A311 { c m0; i m1; j m2; p m3; i m4; p m5; struct A309 m6; d m7; d m8; struct A310 m9; };
void f_cpA311(union  A311 *x, const union  A311 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA309(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; f_cpA310(&x->m9, &y->m9); };
int f_cmpA311(const union  A311 *x, const union  A311 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA309(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA310(&x->m9, &y->m9); };
DCstruct* f_touchdcstA311() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A311), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A311, m0), 1);
		dcStructField(at, 'i', offsetof(union  A311, m1), 1);
		dcStructField(at, 'j', offsetof(union  A311, m2), 1);
		dcStructField(at, 'p', offsetof(union  A311, m3), 1);
		dcStructField(at, 'i', offsetof(union  A311, m4), 1);
		dcStructField(at, 'p', offsetof(union  A311, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A311, m6), 1, f_touchdcstA309());
		dcStructField(at, 'd', offsetof(union  A311, m7), 1);
		dcStructField(at, 'd', offsetof(union  A311, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A311, m9), 1, f_touchdcstA310());
		dcCloseStruct(at);
	}
	return at;
};
/* <fcfd<iifdldpid{pssj[14]ilccd}p<djsfdjsc>>sj<cijpip{cpiicjjjdsjd}dd{pddcp}>p[4]> */
union  A312 { f m0; c m1; f m2; d m3; union  A308 m4; s m5; j m6; union  A311 m7; p m8[4]; };
void f_cpA312(union  A312 *x, const union  A312 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA308(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA311(&x->m7, &y->m7); x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; };
int f_cmpA312(const union  A312 *x, const union  A312 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA308(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA311(&x->m7, &y->m7) && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3]; };
DCstruct* f_touchdcstA312() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A312), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A312, m0), 1);
		dcStructField(at, 'c', offsetof(union  A312, m1), 1);
		dcStructField(at, 'f', offsetof(union  A312, m2), 1);
		dcStructField(at, 'd', offsetof(union  A312, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A312, m4), 1, f_touchdcstA308());
		dcStructField(at, 's', offsetof(union  A312, m5), 1);
		dcStructField(at, 'j', offsetof(union  A312, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A312, m7), 1, f_touchdcstA311());
		dcStructField(at, 'p', offsetof(union  A312, m8), 4);
		dcCloseStruct(at);
	}
	return at;
};
/* {slcss[8]lpc<i>psl} */
struct A313 { s m0; l m1; c m2; s m3; s m4[8]; l m5; p m6; c m7; union  A62 m8; p m9; s m10; l m11; };
void f_cpA313(struct A313 *x, const struct A313 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA62(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA313(const struct A313 *x, const struct A313 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA62(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA313() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A313), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A313, m0), 1);
		dcStructField(at, 'l', offsetof(struct A313, m1), 1);
		dcStructField(at, 'c', offsetof(struct A313, m2), 1);
		dcStructField(at, 's', offsetof(struct A313, m3), 1);
		dcStructField(at, 's', offsetof(struct A313, m4), 8);
		dcStructField(at, 'l', offsetof(struct A313, m5), 1);
		dcStructField(at, 'p', offsetof(struct A313, m6), 1);
		dcStructField(at, 'c', offsetof(struct A313, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A313, m8), 1, f_touchdcstA62());
		dcStructField(at, 'p', offsetof(struct A313, m9), 1);
		dcStructField(at, 's', offsetof(struct A313, m10), 1);
		dcStructField(at, 'l', offsetof(struct A313, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{slcss[8]lpc<i>psl}c<l>d} */
struct A314 { struct A313 m0; c m1; union  A20 m2; d m3; };
void f_cpA314(struct A314 *x, const struct A314 *y) { f_cpA313(&x->m0, &y->m0); x->m1 = y->m1; f_cpA20(&x->m2, &y->m2); x->m3 = y->m3; };
int f_cmpA314(const struct A314 *x, const struct A314 *y) { return f_cmpA313(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA20(&x->m2, &y->m2) && x->m3 == y->m3; };
DCstruct* f_touchdcstA314() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A314), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A314, m0), 1, f_touchdcstA313());
		dcStructField(at, 'c', offsetof(struct A314, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A314, m2), 1, f_touchdcstA20());
		dcStructField(at, 'd', offsetof(struct A314, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ddj> */
union  A315 { d m0; d m1; j m2; };
void f_cpA315(union  A315 *x, const union  A315 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA315(const union  A315 *x, const union  A315 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA315() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A315), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A315, m0), 1);
		dcStructField(at, 'd', offsetof(union  A315, m1), 1);
		dcStructField(at, 'j', offsetof(union  A315, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<ddj>} */
struct A316 { union  A315 m0; };
void f_cpA316(struct A316 *x, const struct A316 *y) { f_cpA315(&x->m0, &y->m0); };
int f_cmpA316(const struct A316 *x, const struct A316 *y) { return f_cmpA315(&x->m0, &y->m0); };
DCstruct* f_touchdcstA316() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A316), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A316, m0), 1, f_touchdcstA315());
		dcCloseStruct(at);
	}
	return at;
};
/* <d> */
union  A317 { d m0; };
void f_cpA317(union  A317 *x, const union  A317 *y) { x->m0 = y->m0; };
int f_cmpA317(const union  A317 *x, const union  A317 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA317() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A317), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A317, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dc> */
union  A318 { d m0; c m1; };
void f_cpA318(union  A318 *x, const union  A318 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA318(const union  A318 *x, const union  A318 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA318() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A318), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A318, m0), 1);
		dcStructField(at, 'c', offsetof(union  A318, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sdijl> */
union  A319 { s m0; d m1; i m2; j m3; l m4; };
void f_cpA319(union  A319 *x, const union  A319 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA319(const union  A319 *x, const union  A319 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA319() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A319), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A319, m0), 1);
		dcStructField(at, 'd', offsetof(union  A319, m1), 1);
		dcStructField(at, 'i', offsetof(union  A319, m2), 1);
		dcStructField(at, 'j', offsetof(union  A319, m3), 1);
		dcStructField(at, 'l', offsetof(union  A319, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fpdiipddpipi} */
struct A320 { f m0; p m1; d m2; i m3; i m4; p m5; d m6; d m7; p m8; i m9; p m10; i m11; };
void f_cpA320(struct A320 *x, const struct A320 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA320(const struct A320 *x, const struct A320 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA320() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A320), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A320, m0), 1);
		dcStructField(at, 'p', offsetof(struct A320, m1), 1);
		dcStructField(at, 'd', offsetof(struct A320, m2), 1);
		dcStructField(at, 'i', offsetof(struct A320, m3), 1);
		dcStructField(at, 'i', offsetof(struct A320, m4), 1);
		dcStructField(at, 'p', offsetof(struct A320, m5), 1);
		dcStructField(at, 'd', offsetof(struct A320, m6), 1);
		dcStructField(at, 'd', offsetof(struct A320, m7), 1);
		dcStructField(at, 'p', offsetof(struct A320, m8), 1);
		dcStructField(at, 'i', offsetof(struct A320, m9), 1);
		dcStructField(at, 'p', offsetof(struct A320, m10), 1);
		dcStructField(at, 'i', offsetof(struct A320, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jipddfcl} */
struct A321 { j m0; i m1; p m2; d m3; d m4; f m5; c m6; l m7; };
void f_cpA321(struct A321 *x, const struct A321 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA321(const struct A321 *x, const struct A321 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA321() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A321), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A321, m0), 1);
		dcStructField(at, 'i', offsetof(struct A321, m1), 1);
		dcStructField(at, 'p', offsetof(struct A321, m2), 1);
		dcStructField(at, 'd', offsetof(struct A321, m3), 1);
		dcStructField(at, 'd', offsetof(struct A321, m4), 1);
		dcStructField(at, 'f', offsetof(struct A321, m5), 1);
		dcStructField(at, 'c', offsetof(struct A321, m6), 1);
		dcStructField(at, 'l', offsetof(struct A321, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jpclcciicfds> */
union  A322 { j m0; p m1; c m2; l m3; c m4; c m5; i m6; i m7; c m8; f m9; d m10; s m11; };
void f_cpA322(union  A322 *x, const union  A322 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA322(const union  A322 *x, const union  A322 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA322() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A322), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A322, m0), 1);
		dcStructField(at, 'p', offsetof(union  A322, m1), 1);
		dcStructField(at, 'c', offsetof(union  A322, m2), 1);
		dcStructField(at, 'l', offsetof(union  A322, m3), 1);
		dcStructField(at, 'c', offsetof(union  A322, m4), 1);
		dcStructField(at, 'c', offsetof(union  A322, m5), 1);
		dcStructField(at, 'i', offsetof(union  A322, m6), 1);
		dcStructField(at, 'i', offsetof(union  A322, m7), 1);
		dcStructField(at, 'c', offsetof(union  A322, m8), 1);
		dcStructField(at, 'f', offsetof(union  A322, m9), 1);
		dcStructField(at, 'd', offsetof(union  A322, m10), 1);
		dcStructField(at, 's', offsetof(union  A322, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pidplpfsd> */
union  A323 { p m0; i m1; d m2; p m3; l m4; p m5; f m6; s m7; d m8; };
void f_cpA323(union  A323 *x, const union  A323 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA323(const union  A323 *x, const union  A323 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA323() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A323), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A323, m0), 1);
		dcStructField(at, 'i', offsetof(union  A323, m1), 1);
		dcStructField(at, 'd', offsetof(union  A323, m2), 1);
		dcStructField(at, 'p', offsetof(union  A323, m3), 1);
		dcStructField(at, 'l', offsetof(union  A323, m4), 1);
		dcStructField(at, 'p', offsetof(union  A323, m5), 1);
		dcStructField(at, 'f', offsetof(union  A323, m6), 1);
		dcStructField(at, 's', offsetof(union  A323, m7), 1);
		dcStructField(at, 'd', offsetof(union  A323, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {si[5]is<pidplpfsd>fil} */
struct A324 { s m0; i m1[5]; i m2; s m3; union  A323 m4; f m5; i m6; l m7; };
void f_cpA324(struct A324 *x, const struct A324 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m2 = y->m2; x->m3 = y->m3; f_cpA323(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA324(const struct A324 *x, const struct A324 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA323(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA324() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A324), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A324, m0), 1);
		dcStructField(at, 'i', offsetof(struct A324, m1), 5);
		dcStructField(at, 'i', offsetof(struct A324, m2), 1);
		dcStructField(at, 's', offsetof(struct A324, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A324, m4), 1, f_touchdcstA323());
		dcStructField(at, 'f', offsetof(struct A324, m5), 1);
		dcStructField(at, 'i', offsetof(struct A324, m6), 1);
		dcStructField(at, 'l', offsetof(struct A324, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cjlcdijljccl> */
union  A325 { c m0; j m1; l m2; c m3; d m4; i m5; j m6; l m7; j m8; c m9; c m10; l m11; };
void f_cpA325(union  A325 *x, const union  A325 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA325(const union  A325 *x, const union  A325 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA325() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A325), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A325, m0), 1);
		dcStructField(at, 'j', offsetof(union  A325, m1), 1);
		dcStructField(at, 'l', offsetof(union  A325, m2), 1);
		dcStructField(at, 'c', offsetof(union  A325, m3), 1);
		dcStructField(at, 'd', offsetof(union  A325, m4), 1);
		dcStructField(at, 'i', offsetof(union  A325, m5), 1);
		dcStructField(at, 'j', offsetof(union  A325, m6), 1);
		dcStructField(at, 'l', offsetof(union  A325, m7), 1);
		dcStructField(at, 'j', offsetof(union  A325, m8), 1);
		dcStructField(at, 'c', offsetof(union  A325, m9), 1);
		dcStructField(at, 'c', offsetof(union  A325, m10), 1);
		dcStructField(at, 'l', offsetof(union  A325, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lj} */
struct A326 { l m0; j m1; };
void f_cpA326(struct A326 *x, const struct A326 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA326(const struct A326 *x, const struct A326 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA326() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A326), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A326, m0), 1);
		dcStructField(at, 'j', offsetof(struct A326, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dpiicljfdccf> */
union  A327 { d m0; p m1; i m2; i m3; c m4; l m5; j m6; f m7; d m8; c m9; c m10; f m11; };
void f_cpA327(union  A327 *x, const union  A327 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA327(const union  A327 *x, const union  A327 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA327() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A327), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A327, m0), 1);
		dcStructField(at, 'p', offsetof(union  A327, m1), 1);
		dcStructField(at, 'i', offsetof(union  A327, m2), 1);
		dcStructField(at, 'i', offsetof(union  A327, m3), 1);
		dcStructField(at, 'c', offsetof(union  A327, m4), 1);
		dcStructField(at, 'l', offsetof(union  A327, m5), 1);
		dcStructField(at, 'j', offsetof(union  A327, m6), 1);
		dcStructField(at, 'f', offsetof(union  A327, m7), 1);
		dcStructField(at, 'd', offsetof(union  A327, m8), 1);
		dcStructField(at, 'c', offsetof(union  A327, m9), 1);
		dcStructField(at, 'c', offsetof(union  A327, m10), 1);
		dcStructField(at, 'f', offsetof(union  A327, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pj<l>jfj[5]ljd<dpiicljfdccf>ip} */
struct A328 { p m0; j m1; union  A20 m2; j m3; f m4; j m5[5]; l m6; j m7; d m8; union  A327 m9; i m10; p m11; };
void f_cpA328(struct A328 *x, const struct A328 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA20(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA327(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA328(const struct A328 *x, const struct A328 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA20(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA327(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA328() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A328), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A328, m0), 1);
		dcStructField(at, 'j', offsetof(struct A328, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A328, m2), 1, f_touchdcstA20());
		dcStructField(at, 'j', offsetof(struct A328, m3), 1);
		dcStructField(at, 'f', offsetof(struct A328, m4), 1);
		dcStructField(at, 'j', offsetof(struct A328, m5), 5);
		dcStructField(at, 'l', offsetof(struct A328, m6), 1);
		dcStructField(at, 'j', offsetof(struct A328, m7), 1);
		dcStructField(at, 'd', offsetof(struct A328, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A328, m9), 1, f_touchdcstA327());
		dcStructField(at, 'i', offsetof(struct A328, m10), 1);
		dcStructField(at, 'p', offsetof(struct A328, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{p}ss} */
struct A329 { struct A33 m0; s m1; s m2; };
void f_cpA329(struct A329 *x, const struct A329 *y) { f_cpA33(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA329(const struct A329 *x, const struct A329 *y) { return f_cmpA33(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA329() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A329), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A329, m0), 1, f_touchdcstA33());
		dcStructField(at, 's', offsetof(struct A329, m1), 1);
		dcStructField(at, 's', offsetof(struct A329, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{si[5]is<pidplpfsd>fil}fid<cjlcdijljccl>f{lj}{pj<l>jfj[5]ljd<dpiicljfdccf>ip}p{{p}ss}dc> */
union  A330 { struct A324 m0; f m1; i m2; d m3; union  A325 m4; f m5; struct A326 m6; struct A328 m7; p m8; struct A329 m9; d m10; c m11; };
void f_cpA330(union  A330 *x, const union  A330 *y) { f_cpA324(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA325(&x->m4, &y->m4); x->m5 = y->m5; f_cpA326(&x->m6, &y->m6); f_cpA328(&x->m7, &y->m7); x->m8 = y->m8; f_cpA329(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA330(const union  A330 *x, const union  A330 *y) { return f_cmpA324(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA325(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA326(&x->m6, &y->m6) && f_cmpA328(&x->m7, &y->m7) && x->m8 == y->m8 && f_cmpA329(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA330() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A330), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A330, m0), 1, f_touchdcstA324());
		dcStructField(at, 'f', offsetof(union  A330, m1), 1);
		dcStructField(at, 'i', offsetof(union  A330, m2), 1);
		dcStructField(at, 'd', offsetof(union  A330, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A330, m4), 1, f_touchdcstA325());
		dcStructField(at, 'f', offsetof(union  A330, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A330, m6), 1, f_touchdcstA326());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A330, m7), 1, f_touchdcstA328());
		dcStructField(at, 'p', offsetof(union  A330, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A330, m9), 1, f_touchdcstA329());
		dcStructField(at, 'd', offsetof(union  A330, m10), 1);
		dcStructField(at, 'c', offsetof(union  A330, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fsjdjfds> */
union  A331 { f m0; s m1; j m2; d m3; j m4; f m5; d m6; s m7; };
void f_cpA331(union  A331 *x, const union  A331 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA331(const union  A331 *x, const union  A331 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA331() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A331), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A331, m0), 1);
		dcStructField(at, 's', offsetof(union  A331, m1), 1);
		dcStructField(at, 'j', offsetof(union  A331, m2), 1);
		dcStructField(at, 'd', offsetof(union  A331, m3), 1);
		dcStructField(at, 'j', offsetof(union  A331, m4), 1);
		dcStructField(at, 'f', offsetof(union  A331, m5), 1);
		dcStructField(at, 'd', offsetof(union  A331, m6), 1);
		dcStructField(at, 's', offsetof(union  A331, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<fsjdjfds>pflijppis> */
union  A332 { union  A331 m0; p m1; f m2; l m3; i m4; j m5; p m6; p m7; i m8; s m9; };
void f_cpA332(union  A332 *x, const union  A332 *y) { f_cpA331(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA332(const union  A332 *x, const union  A332 *y) { return f_cmpA331(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA332() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A332), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A332, m0), 1, f_touchdcstA331());
		dcStructField(at, 'p', offsetof(union  A332, m1), 1);
		dcStructField(at, 'f', offsetof(union  A332, m2), 1);
		dcStructField(at, 'l', offsetof(union  A332, m3), 1);
		dcStructField(at, 'i', offsetof(union  A332, m4), 1);
		dcStructField(at, 'j', offsetof(union  A332, m5), 1);
		dcStructField(at, 'p', offsetof(union  A332, m6), 1);
		dcStructField(at, 'p', offsetof(union  A332, m7), 1);
		dcStructField(at, 'i', offsetof(union  A332, m8), 1);
		dcStructField(at, 's', offsetof(union  A332, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jdfp} */
struct A333 { j m0; d m1; f m2; p m3; };
void f_cpA333(struct A333 *x, const struct A333 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA333(const struct A333 *x, const struct A333 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA333() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A333), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A333, m0), 1);
		dcStructField(at, 'd', offsetof(struct A333, m1), 1);
		dcStructField(at, 'f', offsetof(struct A333, m2), 1);
		dcStructField(at, 'p', offsetof(struct A333, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cddfsliljldi} */
struct A334 { c m0; d m1; d m2; f m3; s m4; l m5; i m6; l m7; j m8; l m9; d m10; i m11; };
void f_cpA334(struct A334 *x, const struct A334 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA334(const struct A334 *x, const struct A334 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA334() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A334), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A334, m0), 1);
		dcStructField(at, 'd', offsetof(struct A334, m1), 1);
		dcStructField(at, 'd', offsetof(struct A334, m2), 1);
		dcStructField(at, 'f', offsetof(struct A334, m3), 1);
		dcStructField(at, 's', offsetof(struct A334, m4), 1);
		dcStructField(at, 'l', offsetof(struct A334, m5), 1);
		dcStructField(at, 'i', offsetof(struct A334, m6), 1);
		dcStructField(at, 'l', offsetof(struct A334, m7), 1);
		dcStructField(at, 'j', offsetof(struct A334, m8), 1);
		dcStructField(at, 'l', offsetof(struct A334, m9), 1);
		dcStructField(at, 'd', offsetof(struct A334, m10), 1);
		dcStructField(at, 'i', offsetof(struct A334, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lff{cddfsliljldi}j} */
struct A335 { l m0; f m1; f m2; struct A334 m3; j m4; };
void f_cpA335(struct A335 *x, const struct A335 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA334(&x->m3, &y->m3); x->m4 = y->m4; };
int f_cmpA335(const struct A335 *x, const struct A335 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA334(&x->m3, &y->m3) && x->m4 == y->m4; };
DCstruct* f_touchdcstA335() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A335), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A335, m0), 1);
		dcStructField(at, 'f', offsetof(struct A335, m1), 1);
		dcStructField(at, 'f', offsetof(struct A335, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A335, m3), 1, f_touchdcstA334());
		dcStructField(at, 'j', offsetof(struct A335, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fpf} */
struct A336 { f m0; p m1; f m2; };
void f_cpA336(struct A336 *x, const struct A336 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA336(const struct A336 *x, const struct A336 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA336() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A336), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A336, m0), 1);
		dcStructField(at, 'p', offsetof(struct A336, m1), 1);
		dcStructField(at, 'f', offsetof(struct A336, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fpds<<fsjdjfds>pflijppis>ci{jdfp}{lff{cddfsliljldi}j}si{fpf}> */
union  A337 { f m0; p m1; d m2; s m3; union  A332 m4; c m5; i m6; struct A333 m7; struct A335 m8; s m9; i m10; struct A336 m11; };
void f_cpA337(union  A337 *x, const union  A337 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA332(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA333(&x->m7, &y->m7); f_cpA335(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; f_cpA336(&x->m11, &y->m11); };
int f_cmpA337(const union  A337 *x, const union  A337 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA332(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA333(&x->m7, &y->m7) && f_cmpA335(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA336(&x->m11, &y->m11); };
DCstruct* f_touchdcstA337() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A337), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A337, m0), 1);
		dcStructField(at, 'p', offsetof(union  A337, m1), 1);
		dcStructField(at, 'd', offsetof(union  A337, m2), 1);
		dcStructField(at, 's', offsetof(union  A337, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A337, m4), 1, f_touchdcstA332());
		dcStructField(at, 'c', offsetof(union  A337, m5), 1);
		dcStructField(at, 'i', offsetof(union  A337, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A337, m7), 1, f_touchdcstA333());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A337, m8), 1, f_touchdcstA335());
		dcStructField(at, 's', offsetof(union  A337, m9), 1);
		dcStructField(at, 'i', offsetof(union  A337, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A337, m11), 1, f_touchdcstA336());
		dcCloseStruct(at);
	}
	return at;
};
/* {jjjpf} */
struct A338 { j m0; j m1; j m2; p m3; f m4; };
void f_cpA338(struct A338 *x, const struct A338 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA338(const struct A338 *x, const struct A338 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA338() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A338), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A338, m0), 1);
		dcStructField(at, 'j', offsetof(struct A338, m1), 1);
		dcStructField(at, 'j', offsetof(struct A338, m2), 1);
		dcStructField(at, 'p', offsetof(struct A338, m3), 1);
		dcStructField(at, 'f', offsetof(struct A338, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pi} */
struct A339 { p m0; i m1; };
void f_cpA339(struct A339 *x, const struct A339 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA339(const struct A339 *x, const struct A339 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA339() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A339), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A339, m0), 1);
		dcStructField(at, 'i', offsetof(struct A339, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jjsiss} */
struct A340 { j m0; j m1; s m2; i m3; s m4; s m5; };
void f_cpA340(struct A340 *x, const struct A340 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA340(const struct A340 *x, const struct A340 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA340() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A340), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A340, m0), 1);
		dcStructField(at, 'j', offsetof(struct A340, m1), 1);
		dcStructField(at, 's', offsetof(struct A340, m2), 1);
		dcStructField(at, 'i', offsetof(struct A340, m3), 1);
		dcStructField(at, 's', offsetof(struct A340, m4), 1);
		dcStructField(at, 's', offsetof(struct A340, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ssssllfssfij} */
struct A341 { s m0; s m1; s m2; s m3; l m4; l m5; f m6; s m7; s m8; f m9; i m10; j m11; };
void f_cpA341(struct A341 *x, const struct A341 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA341(const struct A341 *x, const struct A341 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA341() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A341), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A341, m0), 1);
		dcStructField(at, 's', offsetof(struct A341, m1), 1);
		dcStructField(at, 's', offsetof(struct A341, m2), 1);
		dcStructField(at, 's', offsetof(struct A341, m3), 1);
		dcStructField(at, 'l', offsetof(struct A341, m4), 1);
		dcStructField(at, 'l', offsetof(struct A341, m5), 1);
		dcStructField(at, 'f', offsetof(struct A341, m6), 1);
		dcStructField(at, 's', offsetof(struct A341, m7), 1);
		dcStructField(at, 's', offsetof(struct A341, m8), 1);
		dcStructField(at, 'f', offsetof(struct A341, m9), 1);
		dcStructField(at, 'i', offsetof(struct A341, m10), 1);
		dcStructField(at, 'j', offsetof(struct A341, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pfjlccd[8]lscjs> */
union  A342 { p m0; f m1; j m2; l m3; c m4; c m5; d m6[8]; l m7; s m8; c m9; j m10; s m11; };
void f_cpA342(union  A342 *x, const union  A342 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA342(const union  A342 *x, const union  A342 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA342() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A342), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A342, m0), 1);
		dcStructField(at, 'f', offsetof(union  A342, m1), 1);
		dcStructField(at, 'j', offsetof(union  A342, m2), 1);
		dcStructField(at, 'l', offsetof(union  A342, m3), 1);
		dcStructField(at, 'c', offsetof(union  A342, m4), 1);
		dcStructField(at, 'c', offsetof(union  A342, m5), 1);
		dcStructField(at, 'd', offsetof(union  A342, m6), 8);
		dcStructField(at, 'l', offsetof(union  A342, m7), 1);
		dcStructField(at, 's', offsetof(union  A342, m8), 1);
		dcStructField(at, 'c', offsetof(union  A342, m9), 1);
		dcStructField(at, 'j', offsetof(union  A342, m10), 1);
		dcStructField(at, 's', offsetof(union  A342, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{ssssllfssfij}lcd<pfjlccd[8]lscjs>pfiffdd} */
struct A343 { struct A341 m0; l m1; c m2; d m3; union  A342 m4; p m5; f m6; i m7; f m8; f m9; d m10; d m11; };
void f_cpA343(struct A343 *x, const struct A343 *y) { f_cpA341(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA342(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA343(const struct A343 *x, const struct A343 *y) { return f_cmpA341(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA342(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA343() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A343), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A343, m0), 1, f_touchdcstA341());
		dcStructField(at, 'l', offsetof(struct A343, m1), 1);
		dcStructField(at, 'c', offsetof(struct A343, m2), 1);
		dcStructField(at, 'd', offsetof(struct A343, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A343, m4), 1, f_touchdcstA342());
		dcStructField(at, 'p', offsetof(struct A343, m5), 1);
		dcStructField(at, 'f', offsetof(struct A343, m6), 1);
		dcStructField(at, 'i', offsetof(struct A343, m7), 1);
		dcStructField(at, 'f', offsetof(struct A343, m8), 1);
		dcStructField(at, 'f', offsetof(struct A343, m9), 1);
		dcStructField(at, 'd', offsetof(struct A343, m10), 1);
		dcStructField(at, 'd', offsetof(struct A343, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pdflsfcjsci} */
struct A344 { p m0; d m1; f m2; l m3; s m4; f m5; c m6; j m7; s m8; c m9; i m10; };
void f_cpA344(struct A344 *x, const struct A344 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA344(const struct A344 *x, const struct A344 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA344() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A344), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A344, m0), 1);
		dcStructField(at, 'd', offsetof(struct A344, m1), 1);
		dcStructField(at, 'f', offsetof(struct A344, m2), 1);
		dcStructField(at, 'l', offsetof(struct A344, m3), 1);
		dcStructField(at, 's', offsetof(struct A344, m4), 1);
		dcStructField(at, 'f', offsetof(struct A344, m5), 1);
		dcStructField(at, 'c', offsetof(struct A344, m6), 1);
		dcStructField(at, 'j', offsetof(struct A344, m7), 1);
		dcStructField(at, 's', offsetof(struct A344, m8), 1);
		dcStructField(at, 'c', offsetof(struct A344, m9), 1);
		dcStructField(at, 'i', offsetof(struct A344, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lcicffdcddld} */
struct A345 { l m0; c m1; i m2; c m3; f m4; f m5; d m6; c m7; d m8; d m9; l m10; d m11; };
void f_cpA345(struct A345 *x, const struct A345 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA345(const struct A345 *x, const struct A345 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA345() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A345), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A345, m0), 1);
		dcStructField(at, 'c', offsetof(struct A345, m1), 1);
		dcStructField(at, 'i', offsetof(struct A345, m2), 1);
		dcStructField(at, 'c', offsetof(struct A345, m3), 1);
		dcStructField(at, 'f', offsetof(struct A345, m4), 1);
		dcStructField(at, 'f', offsetof(struct A345, m5), 1);
		dcStructField(at, 'd', offsetof(struct A345, m6), 1);
		dcStructField(at, 'c', offsetof(struct A345, m7), 1);
		dcStructField(at, 'd', offsetof(struct A345, m8), 1);
		dcStructField(at, 'd', offsetof(struct A345, m9), 1);
		dcStructField(at, 'l', offsetof(struct A345, m10), 1);
		dcStructField(at, 'd', offsetof(struct A345, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lfpjd> */
union  A346 { l m0; f m1; p m2; j m3; d m4; };
void f_cpA346(union  A346 *x, const union  A346 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA346(const union  A346 *x, const union  A346 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA346() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A346), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A346, m0), 1);
		dcStructField(at, 'f', offsetof(union  A346, m1), 1);
		dcStructField(at, 'p', offsetof(union  A346, m2), 1);
		dcStructField(at, 'j', offsetof(union  A346, m3), 1);
		dcStructField(at, 'd', offsetof(union  A346, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fdp[3]cfdps{pdflsfcjsci}{lcicffdcddld}d<lfpjd>} */
struct A347 { f m0; d m1; p m2[3]; c m3; f m4; d m5; p m6; s m7; struct A344 m8; struct A345 m9; d m10; union  A346 m11; };
void f_cpA347(struct A347 *x, const struct A347 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA344(&x->m8, &y->m8); f_cpA345(&x->m9, &y->m9); x->m10 = y->m10; f_cpA346(&x->m11, &y->m11); };
int f_cmpA347(const struct A347 *x, const struct A347 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA344(&x->m8, &y->m8) && f_cmpA345(&x->m9, &y->m9) && x->m10 == y->m10 && f_cmpA346(&x->m11, &y->m11); };
DCstruct* f_touchdcstA347() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A347), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A347, m0), 1);
		dcStructField(at, 'd', offsetof(struct A347, m1), 1);
		dcStructField(at, 'p', offsetof(struct A347, m2), 3);
		dcStructField(at, 'c', offsetof(struct A347, m3), 1);
		dcStructField(at, 'f', offsetof(struct A347, m4), 1);
		dcStructField(at, 'd', offsetof(struct A347, m5), 1);
		dcStructField(at, 'p', offsetof(struct A347, m6), 1);
		dcStructField(at, 's', offsetof(struct A347, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A347, m8), 1, f_touchdcstA344());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A347, m9), 1, f_touchdcstA345());
		dcStructField(at, 'd', offsetof(struct A347, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A347, m11), 1, f_touchdcstA346());
		dcCloseStruct(at);
	}
	return at;
};
/* {p{fdp[3]cfdps{pdflsfcjsci}{lcicffdcddld}d<lfpjd>}} */
struct A348 { p m0; struct A347 m1; };
void f_cpA348(struct A348 *x, const struct A348 *y) { x->m0 = y->m0; f_cpA347(&x->m1, &y->m1); };
int f_cmpA348(const struct A348 *x, const struct A348 *y) { return x->m0 == y->m0 && f_cmpA347(&x->m1, &y->m1); };
DCstruct* f_touchdcstA348() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A348), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A348, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A348, m1), 1, f_touchdcstA347());
		dcCloseStruct(at);
	}
	return at;
};
/* <{d}> */
union  A349 { struct A47 m0; };
void f_cpA349(union  A349 *x, const union  A349 *y) { f_cpA47(&x->m0, &y->m0); };
int f_cmpA349(const union  A349 *x, const union  A349 *y) { return f_cmpA47(&x->m0, &y->m0); };
DCstruct* f_touchdcstA349() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A349), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A349, m0), 1, f_touchdcstA47());
		dcCloseStruct(at);
	}
	return at;
};
/* <jjilfccjdifj> */
union  A350 { j m0; j m1; i m2; l m3; f m4; c m5; c m6; j m7; d m8; i m9; f m10; j m11; };
void f_cpA350(union  A350 *x, const union  A350 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA350(const union  A350 *x, const union  A350 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA350() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A350), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A350, m0), 1);
		dcStructField(at, 'j', offsetof(union  A350, m1), 1);
		dcStructField(at, 'i', offsetof(union  A350, m2), 1);
		dcStructField(at, 'l', offsetof(union  A350, m3), 1);
		dcStructField(at, 'f', offsetof(union  A350, m4), 1);
		dcStructField(at, 'c', offsetof(union  A350, m5), 1);
		dcStructField(at, 'c', offsetof(union  A350, m6), 1);
		dcStructField(at, 'j', offsetof(union  A350, m7), 1);
		dcStructField(at, 'd', offsetof(union  A350, m8), 1);
		dcStructField(at, 'i', offsetof(union  A350, m9), 1);
		dcStructField(at, 'f', offsetof(union  A350, m10), 1);
		dcStructField(at, 'j', offsetof(union  A350, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dfpjpcd} */
struct A351 { d m0; f m1; p m2; j m3; p m4; c m5; d m6; };
void f_cpA351(struct A351 *x, const struct A351 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA351(const struct A351 *x, const struct A351 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA351() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A351), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A351, m0), 1);
		dcStructField(at, 'f', offsetof(struct A351, m1), 1);
		dcStructField(at, 'p', offsetof(struct A351, m2), 1);
		dcStructField(at, 'j', offsetof(struct A351, m3), 1);
		dcStructField(at, 'p', offsetof(struct A351, m4), 1);
		dcStructField(at, 'c', offsetof(struct A351, m5), 1);
		dcStructField(at, 'd', offsetof(struct A351, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jjlsfffpidjs> */
union  A352 { j m0; j m1; l m2; s m3; f m4; f m5; f m6; p m7; i m8; d m9; j m10; s m11; };
void f_cpA352(union  A352 *x, const union  A352 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA352(const union  A352 *x, const union  A352 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA352() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A352), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A352, m0), 1);
		dcStructField(at, 'j', offsetof(union  A352, m1), 1);
		dcStructField(at, 'l', offsetof(union  A352, m2), 1);
		dcStructField(at, 's', offsetof(union  A352, m3), 1);
		dcStructField(at, 'f', offsetof(union  A352, m4), 1);
		dcStructField(at, 'f', offsetof(union  A352, m5), 1);
		dcStructField(at, 'f', offsetof(union  A352, m6), 1);
		dcStructField(at, 'p', offsetof(union  A352, m7), 1);
		dcStructField(at, 'i', offsetof(union  A352, m8), 1);
		dcStructField(at, 'd', offsetof(union  A352, m9), 1);
		dcStructField(at, 'j', offsetof(union  A352, m10), 1);
		dcStructField(at, 's', offsetof(union  A352, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<jjlsfffpidjs>ppf} */
struct A353 { union  A352 m0; p m1; p m2; f m3; };
void f_cpA353(struct A353 *x, const struct A353 *y) { f_cpA352(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA353(const struct A353 *x, const struct A353 *y) { return f_cmpA352(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA353() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A353), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A353, m0), 1, f_touchdcstA352());
		dcStructField(at, 'p', offsetof(struct A353, m1), 1);
		dcStructField(at, 'p', offsetof(struct A353, m2), 1);
		dcStructField(at, 'f', offsetof(struct A353, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{<jjlsfffpidjs>ppf}d> */
union  A354 { struct A353 m0; d m1; };
void f_cpA354(union  A354 *x, const union  A354 *y) { f_cpA353(&x->m0, &y->m0); x->m1 = y->m1; };
int f_cmpA354(const union  A354 *x, const union  A354 *y) { return f_cmpA353(&x->m0, &y->m0) && x->m1 == y->m1; };
DCstruct* f_touchdcstA354() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A354), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A354, m0), 1, f_touchdcstA353());
		dcStructField(at, 'd', offsetof(union  A354, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dsllcjlfjpcp> */
union  A355 { d m0; s m1; l m2; l m3; c m4; j m5; l m6; f m7; j m8; p m9; c m10; p m11; };
void f_cpA355(union  A355 *x, const union  A355 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA355(const union  A355 *x, const union  A355 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA355() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A355), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A355, m0), 1);
		dcStructField(at, 's', offsetof(union  A355, m1), 1);
		dcStructField(at, 'l', offsetof(union  A355, m2), 1);
		dcStructField(at, 'l', offsetof(union  A355, m3), 1);
		dcStructField(at, 'c', offsetof(union  A355, m4), 1);
		dcStructField(at, 'j', offsetof(union  A355, m5), 1);
		dcStructField(at, 'l', offsetof(union  A355, m6), 1);
		dcStructField(at, 'f', offsetof(union  A355, m7), 1);
		dcStructField(at, 'j', offsetof(union  A355, m8), 1);
		dcStructField(at, 'p', offsetof(union  A355, m9), 1);
		dcStructField(at, 'c', offsetof(union  A355, m10), 1);
		dcStructField(at, 'p', offsetof(union  A355, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ss> */
union  A356 { s m0; s m1; };
void f_cpA356(union  A356 *x, const union  A356 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA356(const union  A356 *x, const union  A356 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA356() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A356), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A356, m0), 1);
		dcStructField(at, 's', offsetof(union  A356, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <liidcsp> */
union  A357 { l m0; i m1; i m2; d m3; c m4; s m5; p m6; };
void f_cpA357(union  A357 *x, const union  A357 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA357(const union  A357 *x, const union  A357 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA357() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A357), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A357, m0), 1);
		dcStructField(at, 'i', offsetof(union  A357, m1), 1);
		dcStructField(at, 'i', offsetof(union  A357, m2), 1);
		dcStructField(at, 'd', offsetof(union  A357, m3), 1);
		dcStructField(at, 'c', offsetof(union  A357, m4), 1);
		dcStructField(at, 's', offsetof(union  A357, m5), 1);
		dcStructField(at, 'p', offsetof(union  A357, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <spldp> */
union  A358 { s m0; p m1; l m2; d m3; p m4; };
void f_cpA358(union  A358 *x, const union  A358 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA358(const union  A358 *x, const union  A358 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA358() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A358), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A358, m0), 1);
		dcStructField(at, 'p', offsetof(union  A358, m1), 1);
		dcStructField(at, 'l', offsetof(union  A358, m2), 1);
		dcStructField(at, 'd', offsetof(union  A358, m3), 1);
		dcStructField(at, 'p', offsetof(union  A358, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jifipjcf<spldp>dpd} */
struct A359 { j m0; i m1; f m2; i m3; p m4; j m5; c m6; f m7; union  A358 m8; d m9; p m10; d m11; };
void f_cpA359(struct A359 *x, const struct A359 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA358(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA359(const struct A359 *x, const struct A359 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA358(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA359() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A359), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A359, m0), 1);
		dcStructField(at, 'i', offsetof(struct A359, m1), 1);
		dcStructField(at, 'f', offsetof(struct A359, m2), 1);
		dcStructField(at, 'i', offsetof(struct A359, m3), 1);
		dcStructField(at, 'p', offsetof(struct A359, m4), 1);
		dcStructField(at, 'j', offsetof(struct A359, m5), 1);
		dcStructField(at, 'c', offsetof(struct A359, m6), 1);
		dcStructField(at, 'f', offsetof(struct A359, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A359, m8), 1, f_touchdcstA358());
		dcStructField(at, 'd', offsetof(struct A359, m9), 1);
		dcStructField(at, 'p', offsetof(struct A359, m10), 1);
		dcStructField(at, 'd', offsetof(struct A359, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p{jifipjcf<spldp>dpd}ss> */
union  A360 { p m0; struct A359 m1; s m2; s m3; };
void f_cpA360(union  A360 *x, const union  A360 *y) { x->m0 = y->m0; f_cpA359(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA360(const union  A360 *x, const union  A360 *y) { return x->m0 == y->m0 && f_cmpA359(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA360() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A360), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A360, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A360, m1), 1, f_touchdcstA359());
		dcStructField(at, 's', offsetof(union  A360, m2), 1);
		dcStructField(at, 's', offsetof(union  A360, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dffsfi[3]jpcijj} */
struct A361 { d m0; f m1; f m2; s m3; f m4; i m5[3]; j m6; p m7; c m8; i m9; j m10; j m11; };
void f_cpA361(struct A361 *x, const struct A361 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA361(const struct A361 *x, const struct A361 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA361() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A361), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A361, m0), 1);
		dcStructField(at, 'f', offsetof(struct A361, m1), 1);
		dcStructField(at, 'f', offsetof(struct A361, m2), 1);
		dcStructField(at, 's', offsetof(struct A361, m3), 1);
		dcStructField(at, 'f', offsetof(struct A361, m4), 1);
		dcStructField(at, 'i', offsetof(struct A361, m5), 3);
		dcStructField(at, 'j', offsetof(struct A361, m6), 1);
		dcStructField(at, 'p', offsetof(struct A361, m7), 1);
		dcStructField(at, 'c', offsetof(struct A361, m8), 1);
		dcStructField(at, 'i', offsetof(struct A361, m9), 1);
		dcStructField(at, 'j', offsetof(struct A361, m10), 1);
		dcStructField(at, 'j', offsetof(struct A361, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpflcc> */
union  A362 { c m0; p m1; f m2; l m3; c m4; c m5; };
void f_cpA362(union  A362 *x, const union  A362 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA362(const union  A362 *x, const union  A362 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA362() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A362), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A362, m0), 1);
		dcStructField(at, 'p', offsetof(union  A362, m1), 1);
		dcStructField(at, 'f', offsetof(union  A362, m2), 1);
		dcStructField(at, 'l', offsetof(union  A362, m3), 1);
		dcStructField(at, 'c', offsetof(union  A362, m4), 1);
		dcStructField(at, 'c', offsetof(union  A362, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ldl> */
union  A363 { l m0; d m1; l m2; };
void f_cpA363(union  A363 *x, const union  A363 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA363(const union  A363 *x, const union  A363 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA363() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A363), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A363, m0), 1);
		dcStructField(at, 'd', offsetof(union  A363, m1), 1);
		dcStructField(at, 'l', offsetof(union  A363, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ifpljcdjisff} */
struct A364 { i m0; f m1; p m2; l m3; j m4; c m5; d m6; j m7; i m8; s m9; f m10; f m11; };
void f_cpA364(struct A364 *x, const struct A364 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA364(const struct A364 *x, const struct A364 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA364() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A364), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A364, m0), 1);
		dcStructField(at, 'f', offsetof(struct A364, m1), 1);
		dcStructField(at, 'p', offsetof(struct A364, m2), 1);
		dcStructField(at, 'l', offsetof(struct A364, m3), 1);
		dcStructField(at, 'j', offsetof(struct A364, m4), 1);
		dcStructField(at, 'c', offsetof(struct A364, m5), 1);
		dcStructField(at, 'd', offsetof(struct A364, m6), 1);
		dcStructField(at, 'j', offsetof(struct A364, m7), 1);
		dcStructField(at, 'i', offsetof(struct A364, m8), 1);
		dcStructField(at, 's', offsetof(struct A364, m9), 1);
		dcStructField(at, 'f', offsetof(struct A364, m10), 1);
		dcStructField(at, 'f', offsetof(struct A364, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {i<ldl>{ifpljcdjisff}cc} */
struct A365 { i m0; union  A363 m1; struct A364 m2; c m3; c m4; };
void f_cpA365(struct A365 *x, const struct A365 *y) { x->m0 = y->m0; f_cpA363(&x->m1, &y->m1); f_cpA364(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA365(const struct A365 *x, const struct A365 *y) { return x->m0 == y->m0 && f_cmpA363(&x->m1, &y->m1) && f_cmpA364(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA365() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A365), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A365, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A365, m1), 1, f_touchdcstA363());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A365, m2), 1, f_touchdcstA364());
		dcStructField(at, 'c', offsetof(struct A365, m3), 1);
		dcStructField(at, 'c', offsetof(struct A365, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iidjcpcscfid} */
struct A366 { i m0; i m1; d m2; j m3; c m4; p m5; c m6; s m7; c m8; f m9; i m10; d m11; };
void f_cpA366(struct A366 *x, const struct A366 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA366(const struct A366 *x, const struct A366 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA366() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A366), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A366, m0), 1);
		dcStructField(at, 'i', offsetof(struct A366, m1), 1);
		dcStructField(at, 'd', offsetof(struct A366, m2), 1);
		dcStructField(at, 'j', offsetof(struct A366, m3), 1);
		dcStructField(at, 'c', offsetof(struct A366, m4), 1);
		dcStructField(at, 'p', offsetof(struct A366, m5), 1);
		dcStructField(at, 'c', offsetof(struct A366, m6), 1);
		dcStructField(at, 's', offsetof(struct A366, m7), 1);
		dcStructField(at, 'c', offsetof(struct A366, m8), 1);
		dcStructField(at, 'f', offsetof(struct A366, m9), 1);
		dcStructField(at, 'i', offsetof(struct A366, m10), 1);
		dcStructField(at, 'd', offsetof(struct A366, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fjs} */
struct A367 { f m0; j m1; s m2; };
void f_cpA367(struct A367 *x, const struct A367 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA367(const struct A367 *x, const struct A367 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA367() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A367), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A367, m0), 1);
		dcStructField(at, 'j', offsetof(struct A367, m1), 1);
		dcStructField(at, 's', offsetof(struct A367, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ppidj} */
struct A368 { p m0; p m1; i m2; d m3; j m4; };
void f_cpA368(struct A368 *x, const struct A368 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA368(const struct A368 *x, const struct A368 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA368() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A368), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A368, m0), 1);
		dcStructField(at, 'p', offsetof(struct A368, m1), 1);
		dcStructField(at, 'i', offsetof(struct A368, m2), 1);
		dcStructField(at, 'd', offsetof(struct A368, m3), 1);
		dcStructField(at, 'j', offsetof(struct A368, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ldjj> */
union  A369 { l m0; d m1; j m2; j m3; };
void f_cpA369(union  A369 *x, const union  A369 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA369(const union  A369 *x, const union  A369 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA369() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A369), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A369, m0), 1);
		dcStructField(at, 'd', offsetof(union  A369, m1), 1);
		dcStructField(at, 'j', offsetof(union  A369, m2), 1);
		dcStructField(at, 'j', offsetof(union  A369, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lisdc[5]ld} */
struct A370 { l m0; i m1; s m2; d m3; c m4[5]; l m5; d m6; };
void f_cpA370(struct A370 *x, const struct A370 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA370(const struct A370 *x, const struct A370 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA370() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A370), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A370, m0), 1);
		dcStructField(at, 'i', offsetof(struct A370, m1), 1);
		dcStructField(at, 's', offsetof(struct A370, m2), 1);
		dcStructField(at, 'd', offsetof(struct A370, m3), 1);
		dcStructField(at, 'c', offsetof(struct A370, m4), 5);
		dcStructField(at, 'l', offsetof(struct A370, m5), 1);
		dcStructField(at, 'd', offsetof(struct A370, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cdslssjfl<ldjj>{lisdc[5]ld}l} */
struct A371 { c m0; d m1; s m2; l m3; s m4; s m5; j m6; f m7; l m8; union  A369 m9; struct A370 m10; l m11; };
void f_cpA371(struct A371 *x, const struct A371 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA369(&x->m9, &y->m9); f_cpA370(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA371(const struct A371 *x, const struct A371 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA369(&x->m9, &y->m9) && f_cmpA370(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA371() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A371), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A371, m0), 1);
		dcStructField(at, 'd', offsetof(struct A371, m1), 1);
		dcStructField(at, 's', offsetof(struct A371, m2), 1);
		dcStructField(at, 'l', offsetof(struct A371, m3), 1);
		dcStructField(at, 's', offsetof(struct A371, m4), 1);
		dcStructField(at, 's', offsetof(struct A371, m5), 1);
		dcStructField(at, 'j', offsetof(struct A371, m6), 1);
		dcStructField(at, 'f', offsetof(struct A371, m7), 1);
		dcStructField(at, 'l', offsetof(struct A371, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A371, m9), 1, f_touchdcstA369());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A371, m10), 1, f_touchdcstA370());
		dcStructField(at, 'l', offsetof(struct A371, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <scj> */
union  A372 { s m0; c m1; j m2; };
void f_cpA372(union  A372 *x, const union  A372 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA372(const union  A372 *x, const union  A372 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA372() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A372), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A372, m0), 1);
		dcStructField(at, 'c', offsetof(union  A372, m1), 1);
		dcStructField(at, 'j', offsetof(union  A372, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ssdcfdfldclc> */
union  A373 { s m0; s m1; d m2; c m3; f m4; d m5; f m6; l m7; d m8; c m9; l m10; c m11; };
void f_cpA373(union  A373 *x, const union  A373 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA373(const union  A373 *x, const union  A373 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA373() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A373), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A373, m0), 1);
		dcStructField(at, 's', offsetof(union  A373, m1), 1);
		dcStructField(at, 'd', offsetof(union  A373, m2), 1);
		dcStructField(at, 'c', offsetof(union  A373, m3), 1);
		dcStructField(at, 'f', offsetof(union  A373, m4), 1);
		dcStructField(at, 'd', offsetof(union  A373, m5), 1);
		dcStructField(at, 'f', offsetof(union  A373, m6), 1);
		dcStructField(at, 'l', offsetof(union  A373, m7), 1);
		dcStructField(at, 'd', offsetof(union  A373, m8), 1);
		dcStructField(at, 'c', offsetof(union  A373, m9), 1);
		dcStructField(at, 'l', offsetof(union  A373, m10), 1);
		dcStructField(at, 'c', offsetof(union  A373, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p[5]<ssdcfdfldclc>} */
struct A374 { p m0[5]; union  A373 m1; };
void f_cpA374(struct A374 *x, const struct A374 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; f_cpA373(&x->m1, &y->m1); };
int f_cmpA374(const struct A374 *x, const struct A374 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && f_cmpA373(&x->m1, &y->m1); };
DCstruct* f_touchdcstA374() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A374), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A374, m0), 5);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A374, m1), 1, f_touchdcstA373());
		dcCloseStruct(at);
	}
	return at;
};
/* {ffsjfsdfdjf[8]s} */
struct A375 { f m0; f m1; s m2; j m3; f m4; s m5; d m6; f m7; d m8; j m9; f m10[8]; s m11; };
void f_cpA375(struct A375 *x, const struct A375 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m11 = y->m11; };
int f_cmpA375(const struct A375 *x, const struct A375 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m11 == y->m11; };
DCstruct* f_touchdcstA375() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A375), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A375, m0), 1);
		dcStructField(at, 'f', offsetof(struct A375, m1), 1);
		dcStructField(at, 's', offsetof(struct A375, m2), 1);
		dcStructField(at, 'j', offsetof(struct A375, m3), 1);
		dcStructField(at, 'f', offsetof(struct A375, m4), 1);
		dcStructField(at, 's', offsetof(struct A375, m5), 1);
		dcStructField(at, 'd', offsetof(struct A375, m6), 1);
		dcStructField(at, 'f', offsetof(struct A375, m7), 1);
		dcStructField(at, 'd', offsetof(struct A375, m8), 1);
		dcStructField(at, 'j', offsetof(struct A375, m9), 1);
		dcStructField(at, 'f', offsetof(struct A375, m10), 8);
		dcStructField(at, 's', offsetof(struct A375, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lppdpsfdsdip> */
union  A376 { l m0; p m1; p m2; d m3; p m4; s m5; f m6; d m7; s m8; d m9; i m10; p m11; };
void f_cpA376(union  A376 *x, const union  A376 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA376(const union  A376 *x, const union  A376 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA376() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A376), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A376, m0), 1);
		dcStructField(at, 'p', offsetof(union  A376, m1), 1);
		dcStructField(at, 'p', offsetof(union  A376, m2), 1);
		dcStructField(at, 'd', offsetof(union  A376, m3), 1);
		dcStructField(at, 'p', offsetof(union  A376, m4), 1);
		dcStructField(at, 's', offsetof(union  A376, m5), 1);
		dcStructField(at, 'f', offsetof(union  A376, m6), 1);
		dcStructField(at, 'd', offsetof(union  A376, m7), 1);
		dcStructField(at, 's', offsetof(union  A376, m8), 1);
		dcStructField(at, 'd', offsetof(union  A376, m9), 1);
		dcStructField(at, 'i', offsetof(union  A376, m10), 1);
		dcStructField(at, 'p', offsetof(union  A376, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <is> */
union  A377 { i m0; s m1; };
void f_cpA377(union  A377 *x, const union  A377 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA377(const union  A377 *x, const union  A377 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA377() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A377), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A377, m0), 1);
		dcStructField(at, 's', offsetof(union  A377, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fcsc{ffsjfsdfdjf[8]s}lj<lppdpsfdsdip><is>jld} */
struct A378 { f m0; c m1; s m2; c m3; struct A375 m4; l m5; j m6; union  A376 m7; union  A377 m8; j m9; l m10; d m11; };
void f_cpA378(struct A378 *x, const struct A378 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA375(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA376(&x->m7, &y->m7); f_cpA377(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA378(const struct A378 *x, const struct A378 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA375(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA376(&x->m7, &y->m7) && f_cmpA377(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA378() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A378), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A378, m0), 1);
		dcStructField(at, 'c', offsetof(struct A378, m1), 1);
		dcStructField(at, 's', offsetof(struct A378, m2), 1);
		dcStructField(at, 'c', offsetof(struct A378, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A378, m4), 1, f_touchdcstA375());
		dcStructField(at, 'l', offsetof(struct A378, m5), 1);
		dcStructField(at, 'j', offsetof(struct A378, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A378, m7), 1, f_touchdcstA376());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A378, m8), 1, f_touchdcstA377());
		dcStructField(at, 'j', offsetof(struct A378, m9), 1);
		dcStructField(at, 'l', offsetof(struct A378, m10), 1);
		dcStructField(at, 'd', offsetof(struct A378, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jsj{cdslssjfl<ldjj>{lisdc[5]ld}l}<scj>f{p[5]<ssdcfdfldclc>}ji{fcsc{ffsjfsdfdjf[8]s}lj<lppdpsfdsdip><is>jld}js} */
struct A379 { j m0; s m1; j m2; struct A371 m3; union  A372 m4; f m5; struct A374 m6; j m7; i m8; struct A378 m9; j m10; s m11; };
void f_cpA379(struct A379 *x, const struct A379 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA371(&x->m3, &y->m3); f_cpA372(&x->m4, &y->m4); x->m5 = y->m5; f_cpA374(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; f_cpA378(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA379(const struct A379 *x, const struct A379 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA371(&x->m3, &y->m3) && f_cmpA372(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA374(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA378(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA379() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A379), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A379, m0), 1);
		dcStructField(at, 's', offsetof(struct A379, m1), 1);
		dcStructField(at, 'j', offsetof(struct A379, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A379, m3), 1, f_touchdcstA371());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A379, m4), 1, f_touchdcstA372());
		dcStructField(at, 'f', offsetof(struct A379, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A379, m6), 1, f_touchdcstA374());
		dcStructField(at, 'j', offsetof(struct A379, m7), 1);
		dcStructField(at, 'i', offsetof(struct A379, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A379, m9), 1, f_touchdcstA378());
		dcStructField(at, 'j', offsetof(struct A379, m10), 1);
		dcStructField(at, 's', offsetof(struct A379, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dpldiicsffdc} */
struct A380 { d m0; p m1; l m2; d m3; i m4; i m5; c m6; s m7; f m8; f m9; d m10; c m11; };
void f_cpA380(struct A380 *x, const struct A380 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA380(const struct A380 *x, const struct A380 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA380() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A380), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A380, m0), 1);
		dcStructField(at, 'p', offsetof(struct A380, m1), 1);
		dcStructField(at, 'l', offsetof(struct A380, m2), 1);
		dcStructField(at, 'd', offsetof(struct A380, m3), 1);
		dcStructField(at, 'i', offsetof(struct A380, m4), 1);
		dcStructField(at, 'i', offsetof(struct A380, m5), 1);
		dcStructField(at, 'c', offsetof(struct A380, m6), 1);
		dcStructField(at, 's', offsetof(struct A380, m7), 1);
		dcStructField(at, 'f', offsetof(struct A380, m8), 1);
		dcStructField(at, 'f', offsetof(struct A380, m9), 1);
		dcStructField(at, 'd', offsetof(struct A380, m10), 1);
		dcStructField(at, 'c', offsetof(struct A380, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {flsclcijjjip} */
struct A381 { f m0; l m1; s m2; c m3; l m4; c m5; i m6; j m7; j m8; j m9; i m10; p m11; };
void f_cpA381(struct A381 *x, const struct A381 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA381(const struct A381 *x, const struct A381 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA381() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A381), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A381, m0), 1);
		dcStructField(at, 'l', offsetof(struct A381, m1), 1);
		dcStructField(at, 's', offsetof(struct A381, m2), 1);
		dcStructField(at, 'c', offsetof(struct A381, m3), 1);
		dcStructField(at, 'l', offsetof(struct A381, m4), 1);
		dcStructField(at, 'c', offsetof(struct A381, m5), 1);
		dcStructField(at, 'i', offsetof(struct A381, m6), 1);
		dcStructField(at, 'j', offsetof(struct A381, m7), 1);
		dcStructField(at, 'j', offsetof(struct A381, m8), 1);
		dcStructField(at, 'j', offsetof(struct A381, m9), 1);
		dcStructField(at, 'i', offsetof(struct A381, m10), 1);
		dcStructField(at, 'p', offsetof(struct A381, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<ss>> */
union  A382 { union  A356 m0; };
void f_cpA382(union  A382 *x, const union  A382 *y) { f_cpA356(&x->m0, &y->m0); };
int f_cmpA382(const union  A382 *x, const union  A382 *y) { return f_cmpA356(&x->m0, &y->m0); };
DCstruct* f_touchdcstA382() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A382), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A382, m0), 1, f_touchdcstA356());
		dcCloseStruct(at);
	}
	return at;
};
/* <idij> */
union  A383 { i m0; d m1; i m2; j m3; };
void f_cpA383(union  A383 *x, const union  A383 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA383(const union  A383 *x, const union  A383 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA383() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A383), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A383, m0), 1);
		dcStructField(at, 'd', offsetof(union  A383, m1), 1);
		dcStructField(at, 'i', offsetof(union  A383, m2), 1);
		dcStructField(at, 'j', offsetof(union  A383, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <li<idij>jdscijfsl> */
union  A384 { l m0; i m1; union  A383 m2; j m3; d m4; s m5; c m6; i m7; j m8; f m9; s m10; l m11; };
void f_cpA384(union  A384 *x, const union  A384 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA383(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA384(const union  A384 *x, const union  A384 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA383(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA384() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A384), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A384, m0), 1);
		dcStructField(at, 'i', offsetof(union  A384, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A384, m2), 1, f_touchdcstA383());
		dcStructField(at, 'j', offsetof(union  A384, m3), 1);
		dcStructField(at, 'd', offsetof(union  A384, m4), 1);
		dcStructField(at, 's', offsetof(union  A384, m5), 1);
		dcStructField(at, 'c', offsetof(union  A384, m6), 1);
		dcStructField(at, 'i', offsetof(union  A384, m7), 1);
		dcStructField(at, 'j', offsetof(union  A384, m8), 1);
		dcStructField(at, 'f', offsetof(union  A384, m9), 1);
		dcStructField(at, 's', offsetof(union  A384, m10), 1);
		dcStructField(at, 'l', offsetof(union  A384, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lfpdpsjif[2]> */
union  A385 { l m0; f m1; p m2; d m3; p m4; s m5; j m6; i m7; f m8[2]; };
void f_cpA385(union  A385 *x, const union  A385 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; };
int f_cmpA385(const union  A385 *x, const union  A385 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1]; };
DCstruct* f_touchdcstA385() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A385), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A385, m0), 1);
		dcStructField(at, 'f', offsetof(union  A385, m1), 1);
		dcStructField(at, 'p', offsetof(union  A385, m2), 1);
		dcStructField(at, 'd', offsetof(union  A385, m3), 1);
		dcStructField(at, 'p', offsetof(union  A385, m4), 1);
		dcStructField(at, 's', offsetof(union  A385, m5), 1);
		dcStructField(at, 'j', offsetof(union  A385, m6), 1);
		dcStructField(at, 'i', offsetof(union  A385, m7), 1);
		dcStructField(at, 'f', offsetof(union  A385, m8), 2);
		dcCloseStruct(at);
	}
	return at;
};
/* {fj} */
struct A386 { f m0; j m1; };
void f_cpA386(struct A386 *x, const struct A386 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA386(const struct A386 *x, const struct A386 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA386() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A386), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A386, m0), 1);
		dcStructField(at, 'j', offsetof(struct A386, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {psfc<lfpdpsjif[2]>d[16]pljd{fj}s} */
struct A387 { p m0; s m1; f m2; c m3; union  A385 m4; d m5[16]; p m6; l m7; j m8; d m9; struct A386 m10; s m11; };
void f_cpA387(struct A387 *x, const struct A387 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA385(&x->m4, &y->m4); x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m5[11] = y->m5[11]; x->m5[12] = y->m5[12]; x->m5[13] = y->m5[13]; x->m5[14] = y->m5[14]; x->m5[15] = y->m5[15]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA386(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA387(const struct A387 *x, const struct A387 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA385(&x->m4, &y->m4) && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m5[11] == y->m5[11] && x->m5[12] == y->m5[12] && x->m5[13] == y->m5[13] && x->m5[14] == y->m5[14] && x->m5[15] == y->m5[15] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA386(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA387() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A387), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A387, m0), 1);
		dcStructField(at, 's', offsetof(struct A387, m1), 1);
		dcStructField(at, 'f', offsetof(struct A387, m2), 1);
		dcStructField(at, 'c', offsetof(struct A387, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A387, m4), 1, f_touchdcstA385());
		dcStructField(at, 'd', offsetof(struct A387, m5), 16);
		dcStructField(at, 'p', offsetof(struct A387, m6), 1);
		dcStructField(at, 'l', offsetof(struct A387, m7), 1);
		dcStructField(at, 'j', offsetof(struct A387, m8), 1);
		dcStructField(at, 'd', offsetof(struct A387, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A387, m10), 1, f_touchdcstA386());
		dcStructField(at, 's', offsetof(struct A387, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<<ss>>sjdf<li<idij>jdscijfsl>d{psfc<lfpdpsjif[2]>d[16]pljd{fj}s}sdpd} */
struct A388 { union  A382 m0; s m1; j m2; d m3; f m4; union  A384 m5; d m6; struct A387 m7; s m8; d m9; p m10; d m11; };
void f_cpA388(struct A388 *x, const struct A388 *y) { f_cpA382(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA384(&x->m5, &y->m5); x->m6 = y->m6; f_cpA387(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA388(const struct A388 *x, const struct A388 *y) { return f_cmpA382(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA384(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA387(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA388() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A388), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A388, m0), 1, f_touchdcstA382());
		dcStructField(at, 's', offsetof(struct A388, m1), 1);
		dcStructField(at, 'j', offsetof(struct A388, m2), 1);
		dcStructField(at, 'd', offsetof(struct A388, m3), 1);
		dcStructField(at, 'f', offsetof(struct A388, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A388, m5), 1, f_touchdcstA384());
		dcStructField(at, 'd', offsetof(struct A388, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A388, m7), 1, f_touchdcstA387());
		dcStructField(at, 's', offsetof(struct A388, m8), 1);
		dcStructField(at, 'd', offsetof(struct A388, m9), 1);
		dcStructField(at, 'p', offsetof(struct A388, m10), 1);
		dcStructField(at, 'd', offsetof(struct A388, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jsc{i}} */
struct A389 { j m0; s m1; c m2; struct A5 m3; };
void f_cpA389(struct A389 *x, const struct A389 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA5(&x->m3, &y->m3); };
int f_cmpA389(const struct A389 *x, const struct A389 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA5(&x->m3, &y->m3); };
DCstruct* f_touchdcstA389() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A389), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A389, m0), 1);
		dcStructField(at, 's', offsetof(struct A389, m1), 1);
		dcStructField(at, 'c', offsetof(struct A389, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A389, m3), 1, f_touchdcstA5());
		dcCloseStruct(at);
	}
	return at;
};
/* {cfilpppsici} */
struct A390 { c m0; f m1; i m2; l m3; p m4; p m5; p m6; s m7; i m8; c m9; i m10; };
void f_cpA390(struct A390 *x, const struct A390 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA390(const struct A390 *x, const struct A390 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA390() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A390), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A390, m0), 1);
		dcStructField(at, 'f', offsetof(struct A390, m1), 1);
		dcStructField(at, 'i', offsetof(struct A390, m2), 1);
		dcStructField(at, 'l', offsetof(struct A390, m3), 1);
		dcStructField(at, 'p', offsetof(struct A390, m4), 1);
		dcStructField(at, 'p', offsetof(struct A390, m5), 1);
		dcStructField(at, 'p', offsetof(struct A390, m6), 1);
		dcStructField(at, 's', offsetof(struct A390, m7), 1);
		dcStructField(at, 'i', offsetof(struct A390, m8), 1);
		dcStructField(at, 'c', offsetof(struct A390, m9), 1);
		dcStructField(at, 'i', offsetof(struct A390, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{cfilpppsici}fs> */
union  A391 { struct A390 m0; f m1; s m2; };
void f_cpA391(union  A391 *x, const union  A391 *y) { f_cpA390(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA391(const union  A391 *x, const union  A391 *y) { return f_cmpA390(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA391() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A391), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A391, m0), 1, f_touchdcstA390());
		dcStructField(at, 'f', offsetof(union  A391, m1), 1);
		dcStructField(at, 's', offsetof(union  A391, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{f}> */
union  A392 { struct A195 m0; };
void f_cpA392(union  A392 *x, const union  A392 *y) { f_cpA195(&x->m0, &y->m0); };
int f_cmpA392(const union  A392 *x, const union  A392 *y) { return f_cmpA195(&x->m0, &y->m0); };
DCstruct* f_touchdcstA392() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A392), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A392, m0), 1, f_touchdcstA195());
		dcCloseStruct(at);
	}
	return at;
};
/* {ciffllslscpj} */
struct A393 { c m0; i m1; f m2; f m3; l m4; l m5; s m6; l m7; s m8; c m9; p m10; j m11; };
void f_cpA393(struct A393 *x, const struct A393 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA393(const struct A393 *x, const struct A393 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA393() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A393), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A393, m0), 1);
		dcStructField(at, 'i', offsetof(struct A393, m1), 1);
		dcStructField(at, 'f', offsetof(struct A393, m2), 1);
		dcStructField(at, 'f', offsetof(struct A393, m3), 1);
		dcStructField(at, 'l', offsetof(struct A393, m4), 1);
		dcStructField(at, 'l', offsetof(struct A393, m5), 1);
		dcStructField(at, 's', offsetof(struct A393, m6), 1);
		dcStructField(at, 'l', offsetof(struct A393, m7), 1);
		dcStructField(at, 's', offsetof(struct A393, m8), 1);
		dcStructField(at, 'c', offsetof(struct A393, m9), 1);
		dcStructField(at, 'p', offsetof(struct A393, m10), 1);
		dcStructField(at, 'j', offsetof(struct A393, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dlf<{cfilpppsici}fs>ipj<{f}>{ciffllslscpj}jcp[3]> */
union  A394 { d m0; l m1; f m2; union  A391 m3; i m4; p m5; j m6; union  A392 m7; struct A393 m8; j m9; c m10; p m11[3]; };
void f_cpA394(union  A394 *x, const union  A394 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA391(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA392(&x->m7, &y->m7); f_cpA393(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11[0] = y->m11[0]; x->m11[1] = y->m11[1]; x->m11[2] = y->m11[2]; };
int f_cmpA394(const union  A394 *x, const union  A394 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA391(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA392(&x->m7, &y->m7) && f_cmpA393(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11[0] == y->m11[0] && x->m11[1] == y->m11[1] && x->m11[2] == y->m11[2]; };
DCstruct* f_touchdcstA394() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A394), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A394, m0), 1);
		dcStructField(at, 'l', offsetof(union  A394, m1), 1);
		dcStructField(at, 'f', offsetof(union  A394, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A394, m3), 1, f_touchdcstA391());
		dcStructField(at, 'i', offsetof(union  A394, m4), 1);
		dcStructField(at, 'p', offsetof(union  A394, m5), 1);
		dcStructField(at, 'j', offsetof(union  A394, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A394, m7), 1, f_touchdcstA392());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A394, m8), 1, f_touchdcstA393());
		dcStructField(at, 'j', offsetof(union  A394, m9), 1);
		dcStructField(at, 'c', offsetof(union  A394, m10), 1);
		dcStructField(at, 'p', offsetof(union  A394, m11), 3);
		dcCloseStruct(at);
	}
	return at;
};
/* {cc} */
struct A395 { c m0; c m1; };
void f_cpA395(struct A395 *x, const struct A395 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA395(const struct A395 *x, const struct A395 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA395() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A395), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A395, m0), 1);
		dcStructField(at, 'c', offsetof(struct A395, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jij} */
struct A396 { j m0; i m1; j m2; };
void f_cpA396(struct A396 *x, const struct A396 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA396(const struct A396 *x, const struct A396 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA396() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A396), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A396, m0), 1);
		dcStructField(at, 'i', offsetof(struct A396, m1), 1);
		dcStructField(at, 'j', offsetof(struct A396, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cf{jij}dppdcsj[7]dl} */
struct A397 { c m0; f m1; struct A396 m2; d m3; p m4; p m5; d m6; c m7; s m8; j m9[7]; d m10; l m11; };
void f_cpA397(struct A397 *x, const struct A397 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA396(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA397(const struct A397 *x, const struct A397 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA396(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA397() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A397), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A397, m0), 1);
		dcStructField(at, 'f', offsetof(struct A397, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A397, m2), 1, f_touchdcstA396());
		dcStructField(at, 'd', offsetof(struct A397, m3), 1);
		dcStructField(at, 'p', offsetof(struct A397, m4), 1);
		dcStructField(at, 'p', offsetof(struct A397, m5), 1);
		dcStructField(at, 'd', offsetof(struct A397, m6), 1);
		dcStructField(at, 'c', offsetof(struct A397, m7), 1);
		dcStructField(at, 's', offsetof(struct A397, m8), 1);
		dcStructField(at, 'j', offsetof(struct A397, m9), 7);
		dcStructField(at, 'd', offsetof(struct A397, m10), 1);
		dcStructField(at, 'l', offsetof(struct A397, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{cc}p{cf{jij}dppdcsj[7]dl}j> */
union  A398 { struct A395 m0; p m1; struct A397 m2; j m3; };
void f_cpA398(union  A398 *x, const union  A398 *y) { f_cpA395(&x->m0, &y->m0); x->m1 = y->m1; f_cpA397(&x->m2, &y->m2); x->m3 = y->m3; };
int f_cmpA398(const union  A398 *x, const union  A398 *y) { return f_cmpA395(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA397(&x->m2, &y->m2) && x->m3 == y->m3; };
DCstruct* f_touchdcstA398() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A398), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A398, m0), 1, f_touchdcstA395());
		dcStructField(at, 'p', offsetof(union  A398, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A398, m2), 1, f_touchdcstA397());
		dcStructField(at, 'j', offsetof(union  A398, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ij[6]dcd> */
union  A399 { i m0; j m1[6]; d m2; c m3; d m4; };
void f_cpA399(union  A399 *x, const union  A399 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA399(const union  A399 *x, const union  A399 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA399() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A399), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A399, m0), 1);
		dcStructField(at, 'j', offsetof(union  A399, m1), 6);
		dcStructField(at, 'd', offsetof(union  A399, m2), 1);
		dcStructField(at, 'c', offsetof(union  A399, m3), 1);
		dcStructField(at, 'd', offsetof(union  A399, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cisdlcccjdcj> */
union  A400 { c m0; i m1; s m2; d m3; l m4; c m5; c m6; c m7; j m8; d m9; c m10; j m11; };
void f_cpA400(union  A400 *x, const union  A400 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA400(const union  A400 *x, const union  A400 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA400() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A400), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A400, m0), 1);
		dcStructField(at, 'i', offsetof(union  A400, m1), 1);
		dcStructField(at, 's', offsetof(union  A400, m2), 1);
		dcStructField(at, 'd', offsetof(union  A400, m3), 1);
		dcStructField(at, 'l', offsetof(union  A400, m4), 1);
		dcStructField(at, 'c', offsetof(union  A400, m5), 1);
		dcStructField(at, 'c', offsetof(union  A400, m6), 1);
		dcStructField(at, 'c', offsetof(union  A400, m7), 1);
		dcStructField(at, 'j', offsetof(union  A400, m8), 1);
		dcStructField(at, 'd', offsetof(union  A400, m9), 1);
		dcStructField(at, 'c', offsetof(union  A400, m10), 1);
		dcStructField(at, 'j', offsetof(union  A400, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ddfs} */
struct A401 { d m0; d m1; f m2; s m3; };
void f_cpA401(struct A401 *x, const struct A401 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA401(const struct A401 *x, const struct A401 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA401() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A401), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A401, m0), 1);
		dcStructField(at, 'd', offsetof(struct A401, m1), 1);
		dcStructField(at, 'f', offsetof(struct A401, m2), 1);
		dcStructField(at, 's', offsetof(struct A401, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ddlfsclfdppf> */
union  A402 { d m0; d m1; l m2; f m3; s m4; c m5; l m6; f m7; d m8; p m9; p m10; f m11; };
void f_cpA402(union  A402 *x, const union  A402 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA402(const union  A402 *x, const union  A402 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA402() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A402), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A402, m0), 1);
		dcStructField(at, 'd', offsetof(union  A402, m1), 1);
		dcStructField(at, 'l', offsetof(union  A402, m2), 1);
		dcStructField(at, 'f', offsetof(union  A402, m3), 1);
		dcStructField(at, 's', offsetof(union  A402, m4), 1);
		dcStructField(at, 'c', offsetof(union  A402, m5), 1);
		dcStructField(at, 'l', offsetof(union  A402, m6), 1);
		dcStructField(at, 'f', offsetof(union  A402, m7), 1);
		dcStructField(at, 'd', offsetof(union  A402, m8), 1);
		dcStructField(at, 'p', offsetof(union  A402, m9), 1);
		dcStructField(at, 'p', offsetof(union  A402, m10), 1);
		dcStructField(at, 'f', offsetof(union  A402, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ccpi} */
struct A403 { c m0; c m1; p m2; i m3; };
void f_cpA403(struct A403 *x, const struct A403 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA403(const struct A403 *x, const struct A403 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA403() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A403), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A403, m0), 1);
		dcStructField(at, 'c', offsetof(struct A403, m1), 1);
		dcStructField(at, 'p', offsetof(struct A403, m2), 1);
		dcStructField(at, 'i', offsetof(struct A403, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jpcp} */
struct A404 { j m0; p m1; c m2; p m3; };
void f_cpA404(struct A404 *x, const struct A404 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA404(const struct A404 *x, const struct A404 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA404() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A404), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A404, m0), 1);
		dcStructField(at, 'p', offsetof(struct A404, m1), 1);
		dcStructField(at, 'c', offsetof(struct A404, m2), 1);
		dcStructField(at, 'p', offsetof(struct A404, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jlfpfjisss} */
struct A405 { j m0; l m1; f m2; p m3; f m4; j m5; i m6; s m7; s m8; s m9; };
void f_cpA405(struct A405 *x, const struct A405 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA405(const struct A405 *x, const struct A405 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA405() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A405), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A405, m0), 1);
		dcStructField(at, 'l', offsetof(struct A405, m1), 1);
		dcStructField(at, 'f', offsetof(struct A405, m2), 1);
		dcStructField(at, 'p', offsetof(struct A405, m3), 1);
		dcStructField(at, 'f', offsetof(struct A405, m4), 1);
		dcStructField(at, 'j', offsetof(struct A405, m5), 1);
		dcStructField(at, 'i', offsetof(struct A405, m6), 1);
		dcStructField(at, 's', offsetof(struct A405, m7), 1);
		dcStructField(at, 's', offsetof(struct A405, m8), 1);
		dcStructField(at, 's', offsetof(struct A405, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{ccpi}l{jpcp}icf{jlfpfjisss}dlsip> */
union  A406 { struct A403 m0; l m1; struct A404 m2; i m3; c m4; f m5; struct A405 m6; d m7; l m8; s m9; i m10; p m11; };
void f_cpA406(union  A406 *x, const union  A406 *y) { f_cpA403(&x->m0, &y->m0); x->m1 = y->m1; f_cpA404(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA405(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA406(const union  A406 *x, const union  A406 *y) { return f_cmpA403(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA404(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA405(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA406() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A406), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A406, m0), 1, f_touchdcstA403());
		dcStructField(at, 'l', offsetof(union  A406, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A406, m2), 1, f_touchdcstA404());
		dcStructField(at, 'i', offsetof(union  A406, m3), 1);
		dcStructField(at, 'c', offsetof(union  A406, m4), 1);
		dcStructField(at, 'f', offsetof(union  A406, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A406, m6), 1, f_touchdcstA405());
		dcStructField(at, 'd', offsetof(union  A406, m7), 1);
		dcStructField(at, 'l', offsetof(union  A406, m8), 1);
		dcStructField(at, 's', offsetof(union  A406, m9), 1);
		dcStructField(at, 'i', offsetof(union  A406, m10), 1);
		dcStructField(at, 'p', offsetof(union  A406, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jjjd} */
struct A407 { j m0; j m1; j m2; d m3; };
void f_cpA407(struct A407 *x, const struct A407 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA407(const struct A407 *x, const struct A407 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA407() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A407), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A407, m0), 1);
		dcStructField(at, 'j', offsetof(struct A407, m1), 1);
		dcStructField(at, 'j', offsetof(struct A407, m2), 1);
		dcStructField(at, 'd', offsetof(struct A407, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ffpjcfjpi} */
struct A408 { f m0; f m1; p m2; j m3; c m4; f m5; j m6; p m7; i m8; };
void f_cpA408(struct A408 *x, const struct A408 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA408(const struct A408 *x, const struct A408 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA408() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A408), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A408, m0), 1);
		dcStructField(at, 'f', offsetof(struct A408, m1), 1);
		dcStructField(at, 'p', offsetof(struct A408, m2), 1);
		dcStructField(at, 'j', offsetof(struct A408, m3), 1);
		dcStructField(at, 'c', offsetof(struct A408, m4), 1);
		dcStructField(at, 'f', offsetof(struct A408, m5), 1);
		dcStructField(at, 'j', offsetof(struct A408, m6), 1);
		dcStructField(at, 'p', offsetof(struct A408, m7), 1);
		dcStructField(at, 'i', offsetof(struct A408, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djpjfipc} */
struct A409 { d m0; j m1; p m2; j m3; f m4; i m5; p m6; c m7; };
void f_cpA409(struct A409 *x, const struct A409 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA409(const struct A409 *x, const struct A409 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA409() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A409), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A409, m0), 1);
		dcStructField(at, 'j', offsetof(struct A409, m1), 1);
		dcStructField(at, 'p', offsetof(struct A409, m2), 1);
		dcStructField(at, 'j', offsetof(struct A409, m3), 1);
		dcStructField(at, 'f', offsetof(struct A409, m4), 1);
		dcStructField(at, 'i', offsetof(struct A409, m5), 1);
		dcStructField(at, 'p', offsetof(struct A409, m6), 1);
		dcStructField(at, 'c', offsetof(struct A409, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ddscs} */
struct A410 { d m0; d m1; s m2; c m3; s m4; };
void f_cpA410(struct A410 *x, const struct A410 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA410(const struct A410 *x, const struct A410 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA410() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A410), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A410, m0), 1);
		dcStructField(at, 'd', offsetof(struct A410, m1), 1);
		dcStructField(at, 's', offsetof(struct A410, m2), 1);
		dcStructField(at, 'c', offsetof(struct A410, m3), 1);
		dcStructField(at, 's', offsetof(struct A410, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fij<p>{jjjd}fcd{ffpjcfjpi}{djpjfipc}{ddscs}> */
union  A411 { f m0; i m1; j m2; union  A36 m3; struct A407 m4; f m5; c m6; d m7; struct A408 m8; struct A409 m9; struct A410 m10; };
void f_cpA411(union  A411 *x, const union  A411 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA36(&x->m3, &y->m3); f_cpA407(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA408(&x->m8, &y->m8); f_cpA409(&x->m9, &y->m9); f_cpA410(&x->m10, &y->m10); };
int f_cmpA411(const union  A411 *x, const union  A411 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA36(&x->m3, &y->m3) && f_cmpA407(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA408(&x->m8, &y->m8) && f_cmpA409(&x->m9, &y->m9) && f_cmpA410(&x->m10, &y->m10); };
DCstruct* f_touchdcstA411() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A411), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A411, m0), 1);
		dcStructField(at, 'i', offsetof(union  A411, m1), 1);
		dcStructField(at, 'j', offsetof(union  A411, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A411, m3), 1, f_touchdcstA36());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A411, m4), 1, f_touchdcstA407());
		dcStructField(at, 'f', offsetof(union  A411, m5), 1);
		dcStructField(at, 'c', offsetof(union  A411, m6), 1);
		dcStructField(at, 'd', offsetof(union  A411, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A411, m8), 1, f_touchdcstA408());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A411, m9), 1, f_touchdcstA409());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A411, m10), 1, f_touchdcstA410());
		dcCloseStruct(at);
	}
	return at;
};
/* {ipidfsjiis} */
struct A412 { i m0; p m1; i m2; d m3; f m4; s m5; j m6; i m7; i m8; s m9; };
void f_cpA412(struct A412 *x, const struct A412 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA412(const struct A412 *x, const struct A412 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA412() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A412), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A412, m0), 1);
		dcStructField(at, 'p', offsetof(struct A412, m1), 1);
		dcStructField(at, 'i', offsetof(struct A412, m2), 1);
		dcStructField(at, 'd', offsetof(struct A412, m3), 1);
		dcStructField(at, 'f', offsetof(struct A412, m4), 1);
		dcStructField(at, 's', offsetof(struct A412, m5), 1);
		dcStructField(at, 'j', offsetof(struct A412, m6), 1);
		dcStructField(at, 'i', offsetof(struct A412, m7), 1);
		dcStructField(at, 'i', offsetof(struct A412, m8), 1);
		dcStructField(at, 's', offsetof(struct A412, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cld[4]lp> */
union  A413 { c m0; l m1; d m2[4]; l m3; p m4; };
void f_cpA413(union  A413 *x, const union  A413 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA413(const union  A413 *x, const union  A413 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA413() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A413), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A413, m0), 1);
		dcStructField(at, 'l', offsetof(union  A413, m1), 1);
		dcStructField(at, 'd', offsetof(union  A413, m2), 4);
		dcStructField(at, 'l', offsetof(union  A413, m3), 1);
		dcStructField(at, 'p', offsetof(union  A413, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {clip{ipidfsjiis}jdljsp<cld[4]lp>} */
struct A414 { c m0; l m1; i m2; p m3; struct A412 m4; j m5; d m6; l m7; j m8; s m9; p m10; union  A413 m11; };
void f_cpA414(struct A414 *x, const struct A414 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA412(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA413(&x->m11, &y->m11); };
int f_cmpA414(const struct A414 *x, const struct A414 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA412(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA413(&x->m11, &y->m11); };
DCstruct* f_touchdcstA414() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A414), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A414, m0), 1);
		dcStructField(at, 'l', offsetof(struct A414, m1), 1);
		dcStructField(at, 'i', offsetof(struct A414, m2), 1);
		dcStructField(at, 'p', offsetof(struct A414, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A414, m4), 1, f_touchdcstA412());
		dcStructField(at, 'j', offsetof(struct A414, m5), 1);
		dcStructField(at, 'd', offsetof(struct A414, m6), 1);
		dcStructField(at, 'l', offsetof(struct A414, m7), 1);
		dcStructField(at, 'j', offsetof(struct A414, m8), 1);
		dcStructField(at, 's', offsetof(struct A414, m9), 1);
		dcStructField(at, 'p', offsetof(struct A414, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A414, m11), 1, f_touchdcstA413());
		dcCloseStruct(at);
	}
	return at;
};
/* {jfll<{ccpi}l{jpcp}icf{jlfpfjisss}dlsip>i<fij<p>{jjjd}fcd{ffpjcfjpi}{djpjfipc}{ddscs}>f{clip{ipidfsjiis}jdljsp<cld[4]lp>}} */
struct A415 { j m0; f m1; l m2; l m3; union  A406 m4; i m5; union  A411 m6; f m7; struct A414 m8; };
void f_cpA415(struct A415 *x, const struct A415 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA406(&x->m4, &y->m4); x->m5 = y->m5; f_cpA411(&x->m6, &y->m6); x->m7 = y->m7; f_cpA414(&x->m8, &y->m8); };
int f_cmpA415(const struct A415 *x, const struct A415 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA406(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA411(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA414(&x->m8, &y->m8); };
DCstruct* f_touchdcstA415() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A415), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A415, m0), 1);
		dcStructField(at, 'f', offsetof(struct A415, m1), 1);
		dcStructField(at, 'l', offsetof(struct A415, m2), 1);
		dcStructField(at, 'l', offsetof(struct A415, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A415, m4), 1, f_touchdcstA406());
		dcStructField(at, 'i', offsetof(struct A415, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A415, m6), 1, f_touchdcstA411());
		dcStructField(at, 'f', offsetof(struct A415, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A415, m8), 1, f_touchdcstA414());
		dcCloseStruct(at);
	}
	return at;
};
/* <ip> */
union  A416 { i m0; p m1; };
void f_cpA416(union  A416 *x, const union  A416 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA416(const union  A416 *x, const union  A416 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA416() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A416), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A416, m0), 1);
		dcStructField(at, 'p', offsetof(union  A416, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pcsjcd> */
union  A417 { p m0; c m1; s m2; j m3; c m4; d m5; };
void f_cpA417(union  A417 *x, const union  A417 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA417(const union  A417 *x, const union  A417 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA417() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A417), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A417, m0), 1);
		dcStructField(at, 'c', offsetof(union  A417, m1), 1);
		dcStructField(at, 's', offsetof(union  A417, m2), 1);
		dcStructField(at, 'j', offsetof(union  A417, m3), 1);
		dcStructField(at, 'c', offsetof(union  A417, m4), 1);
		dcStructField(at, 'd', offsetof(union  A417, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <c<pcsjcd>fcj<i>ijc<i>dj> */
union  A418 { c m0; union  A417 m1; f m2; c m3; j m4; union  A62 m5; i m6; j m7; c m8; union  A62 m9; d m10; j m11; };
void f_cpA418(union  A418 *x, const union  A418 *y) { x->m0 = y->m0; f_cpA417(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA62(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA62(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA418(const union  A418 *x, const union  A418 *y) { return x->m0 == y->m0 && f_cmpA417(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA62(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA62(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA418() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A418), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A418, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A418, m1), 1, f_touchdcstA417());
		dcStructField(at, 'f', offsetof(union  A418, m2), 1);
		dcStructField(at, 'c', offsetof(union  A418, m3), 1);
		dcStructField(at, 'j', offsetof(union  A418, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A418, m5), 1, f_touchdcstA62());
		dcStructField(at, 'i', offsetof(union  A418, m6), 1);
		dcStructField(at, 'j', offsetof(union  A418, m7), 1);
		dcStructField(at, 'c', offsetof(union  A418, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A418, m9), 1, f_touchdcstA62());
		dcStructField(at, 'd', offsetof(union  A418, m10), 1);
		dcStructField(at, 'j', offsetof(union  A418, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dsfslp<ip>pp<c<pcsjcd>fcj<i>ijc<i>dj>fd> */
union  A419 { d m0; s m1; f m2; s m3; l m4; p m5; union  A416 m6; p m7; p m8; union  A418 m9; f m10; d m11; };
void f_cpA419(union  A419 *x, const union  A419 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA416(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; f_cpA418(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA419(const union  A419 *x, const union  A419 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA416(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA418(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA419() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A419), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A419, m0), 1);
		dcStructField(at, 's', offsetof(union  A419, m1), 1);
		dcStructField(at, 'f', offsetof(union  A419, m2), 1);
		dcStructField(at, 's', offsetof(union  A419, m3), 1);
		dcStructField(at, 'l', offsetof(union  A419, m4), 1);
		dcStructField(at, 'p', offsetof(union  A419, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A419, m6), 1, f_touchdcstA416());
		dcStructField(at, 'p', offsetof(union  A419, m7), 1);
		dcStructField(at, 'p', offsetof(union  A419, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A419, m9), 1, f_touchdcstA418());
		dcStructField(at, 'f', offsetof(union  A419, m10), 1);
		dcStructField(at, 'd', offsetof(union  A419, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {issfjpcsfiji} */
struct A420 { i m0; s m1; s m2; f m3; j m4; p m5; c m6; s m7; f m8; i m9; j m10; i m11; };
void f_cpA420(struct A420 *x, const struct A420 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA420(const struct A420 *x, const struct A420 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA420() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A420), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A420, m0), 1);
		dcStructField(at, 's', offsetof(struct A420, m1), 1);
		dcStructField(at, 's', offsetof(struct A420, m2), 1);
		dcStructField(at, 'f', offsetof(struct A420, m3), 1);
		dcStructField(at, 'j', offsetof(struct A420, m4), 1);
		dcStructField(at, 'p', offsetof(struct A420, m5), 1);
		dcStructField(at, 'c', offsetof(struct A420, m6), 1);
		dcStructField(at, 's', offsetof(struct A420, m7), 1);
		dcStructField(at, 'f', offsetof(struct A420, m8), 1);
		dcStructField(at, 'i', offsetof(struct A420, m9), 1);
		dcStructField(at, 'j', offsetof(struct A420, m10), 1);
		dcStructField(at, 'i', offsetof(struct A420, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{s}lc{issfjpcsfiji}> */
union  A421 { struct A162 m0; l m1; c m2; struct A420 m3; };
void f_cpA421(union  A421 *x, const union  A421 *y) { f_cpA162(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA420(&x->m3, &y->m3); };
int f_cmpA421(const union  A421 *x, const union  A421 *y) { return f_cmpA162(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA420(&x->m3, &y->m3); };
DCstruct* f_touchdcstA421() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A421), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A421, m0), 1, f_touchdcstA162());
		dcStructField(at, 'l', offsetof(union  A421, m1), 1);
		dcStructField(at, 'c', offsetof(union  A421, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A421, m3), 1, f_touchdcstA420());
		dcCloseStruct(at);
	}
	return at;
};
/* {cpiplsciccdf} */
struct A422 { c m0; p m1; i m2; p m3; l m4; s m5; c m6; i m7; c m8; c m9; d m10; f m11; };
void f_cpA422(struct A422 *x, const struct A422 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA422(const struct A422 *x, const struct A422 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA422() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A422), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A422, m0), 1);
		dcStructField(at, 'p', offsetof(struct A422, m1), 1);
		dcStructField(at, 'i', offsetof(struct A422, m2), 1);
		dcStructField(at, 'p', offsetof(struct A422, m3), 1);
		dcStructField(at, 'l', offsetof(struct A422, m4), 1);
		dcStructField(at, 's', offsetof(struct A422, m5), 1);
		dcStructField(at, 'c', offsetof(struct A422, m6), 1);
		dcStructField(at, 'i', offsetof(struct A422, m7), 1);
		dcStructField(at, 'c', offsetof(struct A422, m8), 1);
		dcStructField(at, 'c', offsetof(struct A422, m9), 1);
		dcStructField(at, 'd', offsetof(struct A422, m10), 1);
		dcStructField(at, 'f', offsetof(struct A422, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dcldccfdj[11]l[16]ds> */
union  A423 { d m0; c m1; l m2; d m3; c m4; c m5; f m6; d m7; j m8[11]; l m9[16]; d m10; s m11; };
void f_cpA423(union  A423 *x, const union  A423 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m8[8] = y->m8[8]; x->m8[9] = y->m8[9]; x->m8[10] = y->m8[10]; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m9[8] = y->m9[8]; x->m9[9] = y->m9[9]; x->m9[10] = y->m9[10]; x->m9[11] = y->m9[11]; x->m9[12] = y->m9[12]; x->m9[13] = y->m9[13]; x->m9[14] = y->m9[14]; x->m9[15] = y->m9[15]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA423(const union  A423 *x, const union  A423 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m8[8] == y->m8[8] && x->m8[9] == y->m8[9] && x->m8[10] == y->m8[10] && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m9[8] == y->m9[8] && x->m9[9] == y->m9[9] && x->m9[10] == y->m9[10] && x->m9[11] == y->m9[11] && x->m9[12] == y->m9[12] && x->m9[13] == y->m9[13] && x->m9[14] == y->m9[14] && x->m9[15] == y->m9[15] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA423() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A423), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A423, m0), 1);
		dcStructField(at, 'c', offsetof(union  A423, m1), 1);
		dcStructField(at, 'l', offsetof(union  A423, m2), 1);
		dcStructField(at, 'd', offsetof(union  A423, m3), 1);
		dcStructField(at, 'c', offsetof(union  A423, m4), 1);
		dcStructField(at, 'c', offsetof(union  A423, m5), 1);
		dcStructField(at, 'f', offsetof(union  A423, m6), 1);
		dcStructField(at, 'd', offsetof(union  A423, m7), 1);
		dcStructField(at, 'j', offsetof(union  A423, m8), 11);
		dcStructField(at, 'l', offsetof(union  A423, m9), 16);
		dcStructField(at, 'd', offsetof(union  A423, m10), 1);
		dcStructField(at, 's', offsetof(union  A423, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jpccsdlfplsl} */
struct A424 { j m0; p m1; c m2; c m3; s m4; d m5; l m6; f m7; p m8; l m9; s m10; l m11; };
void f_cpA424(struct A424 *x, const struct A424 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA424(const struct A424 *x, const struct A424 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA424() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A424), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A424, m0), 1);
		dcStructField(at, 'p', offsetof(struct A424, m1), 1);
		dcStructField(at, 'c', offsetof(struct A424, m2), 1);
		dcStructField(at, 'c', offsetof(struct A424, m3), 1);
		dcStructField(at, 's', offsetof(struct A424, m4), 1);
		dcStructField(at, 'd', offsetof(struct A424, m5), 1);
		dcStructField(at, 'l', offsetof(struct A424, m6), 1);
		dcStructField(at, 'f', offsetof(struct A424, m7), 1);
		dcStructField(at, 'p', offsetof(struct A424, m8), 1);
		dcStructField(at, 'l', offsetof(struct A424, m9), 1);
		dcStructField(at, 's', offsetof(struct A424, m10), 1);
		dcStructField(at, 'l', offsetof(struct A424, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fllpjps[3]fflcd} */
struct A425 { f m0; l m1; l m2; p m3; j m4; p m5; s m6[3]; f m7; f m8; l m9; c m10; d m11; };
void f_cpA425(struct A425 *x, const struct A425 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA425(const struct A425 *x, const struct A425 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA425() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A425), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A425, m0), 1);
		dcStructField(at, 'l', offsetof(struct A425, m1), 1);
		dcStructField(at, 'l', offsetof(struct A425, m2), 1);
		dcStructField(at, 'p', offsetof(struct A425, m3), 1);
		dcStructField(at, 'j', offsetof(struct A425, m4), 1);
		dcStructField(at, 'p', offsetof(struct A425, m5), 1);
		dcStructField(at, 's', offsetof(struct A425, m6), 3);
		dcStructField(at, 'f', offsetof(struct A425, m7), 1);
		dcStructField(at, 'f', offsetof(struct A425, m8), 1);
		dcStructField(at, 'l', offsetof(struct A425, m9), 1);
		dcStructField(at, 'c', offsetof(struct A425, m10), 1);
		dcStructField(at, 'd', offsetof(struct A425, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sjflfsfpjsdl> */
union  A426 { s m0; j m1; f m2; l m3; f m4; s m5; f m6; p m7; j m8; s m9; d m10; l m11; };
void f_cpA426(union  A426 *x, const union  A426 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA426(const union  A426 *x, const union  A426 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA426() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A426), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A426, m0), 1);
		dcStructField(at, 'j', offsetof(union  A426, m1), 1);
		dcStructField(at, 'f', offsetof(union  A426, m2), 1);
		dcStructField(at, 'l', offsetof(union  A426, m3), 1);
		dcStructField(at, 'f', offsetof(union  A426, m4), 1);
		dcStructField(at, 's', offsetof(union  A426, m5), 1);
		dcStructField(at, 'f', offsetof(union  A426, m6), 1);
		dcStructField(at, 'p', offsetof(union  A426, m7), 1);
		dcStructField(at, 'j', offsetof(union  A426, m8), 1);
		dcStructField(at, 's', offsetof(union  A426, m9), 1);
		dcStructField(at, 'd', offsetof(union  A426, m10), 1);
		dcStructField(at, 'l', offsetof(union  A426, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dij{jpccsdlfplsl}{fllpjps[3]fflcd}jls<sjflfsfpjsdl>pdi} */
struct A427 { d m0; i m1; j m2; struct A424 m3; struct A425 m4; j m5; l m6; s m7; union  A426 m8; p m9; d m10; i m11; };
void f_cpA427(struct A427 *x, const struct A427 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA424(&x->m3, &y->m3); f_cpA425(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA426(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA427(const struct A427 *x, const struct A427 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA424(&x->m3, &y->m3) && f_cmpA425(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA426(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA427() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A427), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A427, m0), 1);
		dcStructField(at, 'i', offsetof(struct A427, m1), 1);
		dcStructField(at, 'j', offsetof(struct A427, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A427, m3), 1, f_touchdcstA424());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A427, m4), 1, f_touchdcstA425());
		dcStructField(at, 'j', offsetof(struct A427, m5), 1);
		dcStructField(at, 'l', offsetof(struct A427, m6), 1);
		dcStructField(at, 's', offsetof(struct A427, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A427, m8), 1, f_touchdcstA426());
		dcStructField(at, 'p', offsetof(struct A427, m9), 1);
		dcStructField(at, 'd', offsetof(struct A427, m10), 1);
		dcStructField(at, 'i', offsetof(struct A427, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {spifdildcfc} */
struct A428 { s m0; p m1; i m2; f m3; d m4; i m5; l m6; d m7; c m8; f m9; c m10; };
void f_cpA428(struct A428 *x, const struct A428 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA428(const struct A428 *x, const struct A428 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA428() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A428), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A428, m0), 1);
		dcStructField(at, 'p', offsetof(struct A428, m1), 1);
		dcStructField(at, 'i', offsetof(struct A428, m2), 1);
		dcStructField(at, 'f', offsetof(struct A428, m3), 1);
		dcStructField(at, 'd', offsetof(struct A428, m4), 1);
		dcStructField(at, 'i', offsetof(struct A428, m5), 1);
		dcStructField(at, 'l', offsetof(struct A428, m6), 1);
		dcStructField(at, 'd', offsetof(struct A428, m7), 1);
		dcStructField(at, 'c', offsetof(struct A428, m8), 1);
		dcStructField(at, 'f', offsetof(struct A428, m9), 1);
		dcStructField(at, 'c', offsetof(struct A428, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sf{spifdildcfc}p[3]d> */
union  A429 { s m0; f m1; struct A428 m2; p m3[3]; d m4; };
void f_cpA429(union  A429 *x, const union  A429 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA428(&x->m2, &y->m2); x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m4 = y->m4; };
int f_cmpA429(const union  A429 *x, const union  A429 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA428(&x->m2, &y->m2) && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m4 == y->m4; };
DCstruct* f_touchdcstA429() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A429), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A429, m0), 1);
		dcStructField(at, 'f', offsetof(union  A429, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A429, m2), 1, f_touchdcstA428());
		dcStructField(at, 'p', offsetof(union  A429, m3), 3);
		dcStructField(at, 'd', offsetof(union  A429, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ppj> */
union  A430 { p m0; p m1; j m2; };
void f_cpA430(union  A430 *x, const union  A430 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA430(const union  A430 *x, const union  A430 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA430() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A430), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A430, m0), 1);
		dcStructField(at, 'p', offsetof(union  A430, m1), 1);
		dcStructField(at, 'j', offsetof(union  A430, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p<ppj>s[7]ll> */
union  A431 { p m0; union  A430 m1; s m2[7]; l m3; l m4; };
void f_cpA431(union  A431 *x, const union  A431 *y) { x->m0 = y->m0; f_cpA430(&x->m1, &y->m1); x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA431(const union  A431 *x, const union  A431 *y) { return x->m0 == y->m0 && f_cmpA430(&x->m1, &y->m1) && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA431() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A431), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A431, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A431, m1), 1, f_touchdcstA430());
		dcStructField(at, 's', offsetof(union  A431, m2), 7);
		dcStructField(at, 'l', offsetof(union  A431, m3), 1);
		dcStructField(at, 'l', offsetof(union  A431, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jl} */
struct A432 { j m0; l m1; };
void f_cpA432(struct A432 *x, const struct A432 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA432(const struct A432 *x, const struct A432 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA432() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A432), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A432, m0), 1);
		dcStructField(at, 'l', offsetof(struct A432, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lssjscl[11]dd} */
struct A433 { l m0; s m1; s m2; j m3; s m4; c m5; l m6[11]; d m7; d m8; };
void f_cpA433(struct A433 *x, const struct A433 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA433(const struct A433 *x, const struct A433 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA433() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A433), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A433, m0), 1);
		dcStructField(at, 's', offsetof(struct A433, m1), 1);
		dcStructField(at, 's', offsetof(struct A433, m2), 1);
		dcStructField(at, 'j', offsetof(struct A433, m3), 1);
		dcStructField(at, 's', offsetof(struct A433, m4), 1);
		dcStructField(at, 'c', offsetof(struct A433, m5), 1);
		dcStructField(at, 'l', offsetof(struct A433, m6), 11);
		dcStructField(at, 'd', offsetof(struct A433, m7), 1);
		dcStructField(at, 'd', offsetof(struct A433, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dpipdldf{lssjscl[11]dd}[9]lsc} */
struct A434 { d m0; p m1; i m2; p m3; d m4; l m5; d m6; f m7; struct A433 m8[9]; l m9; s m10; c m11; };
void f_cpA434(struct A434 *x, const struct A434 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA433(&x->m8[0], &y->m8[0]); f_cpA433(&x->m8[1], &y->m8[1]); f_cpA433(&x->m8[2], &y->m8[2]); f_cpA433(&x->m8[3], &y->m8[3]); f_cpA433(&x->m8[4], &y->m8[4]); f_cpA433(&x->m8[5], &y->m8[5]); f_cpA433(&x->m8[6], &y->m8[6]); f_cpA433(&x->m8[7], &y->m8[7]); f_cpA433(&x->m8[8], &y->m8[8]); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA434(const struct A434 *x, const struct A434 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA433(&x->m8[0], &y->m8[0]) && f_cmpA433(&x->m8[1], &y->m8[1]) && f_cmpA433(&x->m8[2], &y->m8[2]) && f_cmpA433(&x->m8[3], &y->m8[3]) && f_cmpA433(&x->m8[4], &y->m8[4]) && f_cmpA433(&x->m8[5], &y->m8[5]) && f_cmpA433(&x->m8[6], &y->m8[6]) && f_cmpA433(&x->m8[7], &y->m8[7]) && f_cmpA433(&x->m8[8], &y->m8[8]) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA434() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A434), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A434, m0), 1);
		dcStructField(at, 'p', offsetof(struct A434, m1), 1);
		dcStructField(at, 'i', offsetof(struct A434, m2), 1);
		dcStructField(at, 'p', offsetof(struct A434, m3), 1);
		dcStructField(at, 'd', offsetof(struct A434, m4), 1);
		dcStructField(at, 'l', offsetof(struct A434, m5), 1);
		dcStructField(at, 'd', offsetof(struct A434, m6), 1);
		dcStructField(at, 'f', offsetof(struct A434, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A434, m8), 9, f_touchdcstA433());
		dcStructField(at, 'l', offsetof(struct A434, m9), 1);
		dcStructField(at, 's', offsetof(struct A434, m10), 1);
		dcStructField(at, 'c', offsetof(struct A434, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lslcssddj> */
union  A435 { l m0; s m1; l m2; c m3; s m4; s m5; d m6; d m7; j m8; };
void f_cpA435(union  A435 *x, const union  A435 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA435(const union  A435 *x, const union  A435 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA435() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A435), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A435, m0), 1);
		dcStructField(at, 's', offsetof(union  A435, m1), 1);
		dcStructField(at, 'l', offsetof(union  A435, m2), 1);
		dcStructField(at, 'c', offsetof(union  A435, m3), 1);
		dcStructField(at, 's', offsetof(union  A435, m4), 1);
		dcStructField(at, 's', offsetof(union  A435, m5), 1);
		dcStructField(at, 'd', offsetof(union  A435, m6), 1);
		dcStructField(at, 'd', offsetof(union  A435, m7), 1);
		dcStructField(at, 'j', offsetof(union  A435, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <di[6]fcd> */
union  A436 { d m0; i m1[6]; f m2; c m3; d m4; };
void f_cpA436(union  A436 *x, const union  A436 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA436(const union  A436 *x, const union  A436 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA436() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A436), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A436, m0), 1);
		dcStructField(at, 'i', offsetof(union  A436, m1), 6);
		dcStructField(at, 'f', offsetof(union  A436, m2), 1);
		dcStructField(at, 'c', offsetof(union  A436, m3), 1);
		dcStructField(at, 'd', offsetof(union  A436, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ljd> */
union  A437 { l m0; j m1; d m2; };
void f_cpA437(union  A437 *x, const union  A437 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA437(const union  A437 *x, const union  A437 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA437() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A437), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A437, m0), 1);
		dcStructField(at, 'j', offsetof(union  A437, m1), 1);
		dcStructField(at, 'd', offsetof(union  A437, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <f> */
union  A438 { f m0; };
void f_cpA438(union  A438 *x, const union  A438 *y) { x->m0 = y->m0; };
int f_cmpA438(const union  A438 *x, const union  A438 *y) { return x->m0 == y->m0; };
DCstruct* f_touchdcstA438() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A438), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A438, m0), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<f>s<i>} */
struct A439 { union  A438 m0; s m1; union  A62 m2; };
void f_cpA439(struct A439 *x, const struct A439 *y) { f_cpA438(&x->m0, &y->m0); x->m1 = y->m1; f_cpA62(&x->m2, &y->m2); };
int f_cmpA439(const struct A439 *x, const struct A439 *y) { return f_cmpA438(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA62(&x->m2, &y->m2); };
DCstruct* f_touchdcstA439() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A439), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A439, m0), 1, f_touchdcstA438());
		dcStructField(at, 's', offsetof(struct A439, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A439, m2), 1, f_touchdcstA62());
		dcCloseStruct(at);
	}
	return at;
};
/* <iifi> */
union  A440 { i m0; i m1; f m2; i m3; };
void f_cpA440(union  A440 *x, const union  A440 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA440(const union  A440 *x, const union  A440 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA440() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A440), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A440, m0), 1);
		dcStructField(at, 'i', offsetof(union  A440, m1), 1);
		dcStructField(at, 'f', offsetof(union  A440, m2), 1);
		dcStructField(at, 'i', offsetof(union  A440, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jfssdfddcs[9]s> */
union  A441 { j m0; f m1; s m2; s m3; d m4; f m5; d m6; d m7; c m8; s m9[9]; s m10; };
void f_cpA441(union  A441 *x, const union  A441 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m9[8] = y->m9[8]; x->m10 = y->m10; };
int f_cmpA441(const union  A441 *x, const union  A441 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m9[8] == y->m9[8] && x->m10 == y->m10; };
DCstruct* f_touchdcstA441() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A441), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A441, m0), 1);
		dcStructField(at, 'f', offsetof(union  A441, m1), 1);
		dcStructField(at, 's', offsetof(union  A441, m2), 1);
		dcStructField(at, 's', offsetof(union  A441, m3), 1);
		dcStructField(at, 'd', offsetof(union  A441, m4), 1);
		dcStructField(at, 'f', offsetof(union  A441, m5), 1);
		dcStructField(at, 'd', offsetof(union  A441, m6), 1);
		dcStructField(at, 'd', offsetof(union  A441, m7), 1);
		dcStructField(at, 'c', offsetof(union  A441, m8), 1);
		dcStructField(at, 's', offsetof(union  A441, m9), 9);
		dcStructField(at, 's', offsetof(union  A441, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ldjljp} */
struct A442 { l m0; d m1; j m2; l m3; j m4; p m5; };
void f_cpA442(struct A442 *x, const struct A442 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA442(const struct A442 *x, const struct A442 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA442() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A442), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A442, m0), 1);
		dcStructField(at, 'd', offsetof(struct A442, m1), 1);
		dcStructField(at, 'j', offsetof(struct A442, m2), 1);
		dcStructField(at, 'l', offsetof(struct A442, m3), 1);
		dcStructField(at, 'j', offsetof(struct A442, m4), 1);
		dcStructField(at, 'p', offsetof(struct A442, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <icsllfji> */
union  A443 { i m0; c m1; s m2; l m3; l m4; f m5; j m6; i m7; };
void f_cpA443(union  A443 *x, const union  A443 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA443(const union  A443 *x, const union  A443 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA443() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A443), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A443, m0), 1);
		dcStructField(at, 'c', offsetof(union  A443, m1), 1);
		dcStructField(at, 's', offsetof(union  A443, m2), 1);
		dcStructField(at, 'l', offsetof(union  A443, m3), 1);
		dcStructField(at, 'l', offsetof(union  A443, m4), 1);
		dcStructField(at, 'f', offsetof(union  A443, m5), 1);
		dcStructField(at, 'j', offsetof(union  A443, m6), 1);
		dcStructField(at, 'i', offsetof(union  A443, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jjpcfc} */
struct A444 { j m0; j m1; p m2; c m3; f m4; c m5; };
void f_cpA444(struct A444 *x, const struct A444 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA444(const struct A444 *x, const struct A444 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA444() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A444), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A444, m0), 1);
		dcStructField(at, 'j', offsetof(struct A444, m1), 1);
		dcStructField(at, 'p', offsetof(struct A444, m2), 1);
		dcStructField(at, 'c', offsetof(struct A444, m3), 1);
		dcStructField(at, 'f', offsetof(struct A444, m4), 1);
		dcStructField(at, 'c', offsetof(struct A444, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lil> */
union  A445 { l m0; i m1; l m2; };
void f_cpA445(union  A445 *x, const union  A445 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA445(const union  A445 *x, const union  A445 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA445() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A445), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A445, m0), 1);
		dcStructField(at, 'i', offsetof(union  A445, m1), 1);
		dcStructField(at, 'l', offsetof(union  A445, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cijdic} */
struct A446 { c m0; i m1; j m2; d m3; i m4; c m5; };
void f_cpA446(struct A446 *x, const struct A446 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA446(const struct A446 *x, const struct A446 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA446() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A446), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A446, m0), 1);
		dcStructField(at, 'i', offsetof(struct A446, m1), 1);
		dcStructField(at, 'j', offsetof(struct A446, m2), 1);
		dcStructField(at, 'd', offsetof(struct A446, m3), 1);
		dcStructField(at, 'i', offsetof(struct A446, m4), 1);
		dcStructField(at, 'c', offsetof(struct A446, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dj{jjpcfc}iii<lil>ic{cijdic}cd} */
struct A447 { d m0; j m1; struct A444 m2; i m3; i m4; i m5; union  A445 m6; i m7; c m8; struct A446 m9; c m10; d m11; };
void f_cpA447(struct A447 *x, const struct A447 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA444(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA445(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; f_cpA446(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA447(const struct A447 *x, const struct A447 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA444(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA445(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA446(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA447() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A447), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A447, m0), 1);
		dcStructField(at, 'j', offsetof(struct A447, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A447, m2), 1, f_touchdcstA444());
		dcStructField(at, 'i', offsetof(struct A447, m3), 1);
		dcStructField(at, 'i', offsetof(struct A447, m4), 1);
		dcStructField(at, 'i', offsetof(struct A447, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A447, m6), 1, f_touchdcstA445());
		dcStructField(at, 'i', offsetof(struct A447, m7), 1);
		dcStructField(at, 'c', offsetof(struct A447, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A447, m9), 1, f_touchdcstA446());
		dcStructField(at, 'c', offsetof(struct A447, m10), 1);
		dcStructField(at, 'd', offsetof(struct A447, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {j{dj{jjpcfc}iii<lil>ic{cijdic}cd}j} */
struct A448 { j m0; struct A447 m1; j m2; };
void f_cpA448(struct A448 *x, const struct A448 *y) { x->m0 = y->m0; f_cpA447(&x->m1, &y->m1); x->m2 = y->m2; };
int f_cmpA448(const struct A448 *x, const struct A448 *y) { return x->m0 == y->m0 && f_cmpA447(&x->m1, &y->m1) && x->m2 == y->m2; };
DCstruct* f_touchdcstA448() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A448), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A448, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A448, m1), 1, f_touchdcstA447());
		dcStructField(at, 'j', offsetof(struct A448, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sff} */
struct A449 { s m0; f m1; f m2; };
void f_cpA449(struct A449 *x, const struct A449 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA449(const struct A449 *x, const struct A449 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA449() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A449), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A449, m0), 1);
		dcStructField(at, 'f', offsetof(struct A449, m1), 1);
		dcStructField(at, 'f', offsetof(struct A449, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dlisjjjfli} */
struct A450 { d m0; l m1; i m2; s m3; j m4; j m5; j m6; f m7; l m8; i m9; };
void f_cpA450(struct A450 *x, const struct A450 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA450(const struct A450 *x, const struct A450 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA450() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A450), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A450, m0), 1);
		dcStructField(at, 'l', offsetof(struct A450, m1), 1);
		dcStructField(at, 'i', offsetof(struct A450, m2), 1);
		dcStructField(at, 's', offsetof(struct A450, m3), 1);
		dcStructField(at, 'j', offsetof(struct A450, m4), 1);
		dcStructField(at, 'j', offsetof(struct A450, m5), 1);
		dcStructField(at, 'j', offsetof(struct A450, m6), 1);
		dcStructField(at, 'f', offsetof(struct A450, m7), 1);
		dcStructField(at, 'l', offsetof(struct A450, m8), 1);
		dcStructField(at, 'i', offsetof(struct A450, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {slijpfpplip[13]d} */
struct A451 { s m0; l m1; i m2; j m3; p m4; f m5; p m6; p m7; l m8; i m9; p m10[13]; d m11; };
void f_cpA451(struct A451 *x, const struct A451 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m10[8] = y->m10[8]; x->m10[9] = y->m10[9]; x->m10[10] = y->m10[10]; x->m10[11] = y->m10[11]; x->m10[12] = y->m10[12]; x->m11 = y->m11; };
int f_cmpA451(const struct A451 *x, const struct A451 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m10[8] == y->m10[8] && x->m10[9] == y->m10[9] && x->m10[10] == y->m10[10] && x->m10[11] == y->m10[11] && x->m10[12] == y->m10[12] && x->m11 == y->m11; };
DCstruct* f_touchdcstA451() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A451), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A451, m0), 1);
		dcStructField(at, 'l', offsetof(struct A451, m1), 1);
		dcStructField(at, 'i', offsetof(struct A451, m2), 1);
		dcStructField(at, 'j', offsetof(struct A451, m3), 1);
		dcStructField(at, 'p', offsetof(struct A451, m4), 1);
		dcStructField(at, 'f', offsetof(struct A451, m5), 1);
		dcStructField(at, 'p', offsetof(struct A451, m6), 1);
		dcStructField(at, 'p', offsetof(struct A451, m7), 1);
		dcStructField(at, 'l', offsetof(struct A451, m8), 1);
		dcStructField(at, 'i', offsetof(struct A451, m9), 1);
		dcStructField(at, 'p', offsetof(struct A451, m10), 13);
		dcStructField(at, 'd', offsetof(struct A451, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p{sff}d{dlisjjjfli}ii{slijpfpplip[13]d}} */
struct A452 { p m0; struct A449 m1; d m2; struct A450 m3; i m4; i m5; struct A451 m6; };
void f_cpA452(struct A452 *x, const struct A452 *y) { x->m0 = y->m0; f_cpA449(&x->m1, &y->m1); x->m2 = y->m2; f_cpA450(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; f_cpA451(&x->m6, &y->m6); };
int f_cmpA452(const struct A452 *x, const struct A452 *y) { return x->m0 == y->m0 && f_cmpA449(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA450(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA451(&x->m6, &y->m6); };
DCstruct* f_touchdcstA452() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A452), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A452, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A452, m1), 1, f_touchdcstA449());
		dcStructField(at, 'd', offsetof(struct A452, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A452, m3), 1, f_touchdcstA450());
		dcStructField(at, 'i', offsetof(struct A452, m4), 1);
		dcStructField(at, 'i', offsetof(struct A452, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A452, m6), 1, f_touchdcstA451());
		dcCloseStruct(at);
	}
	return at;
};
/* <fslld{p{sff}d{dlisjjjfli}ii{slijpfpplip[13]d}}ld> */
union  A453 { f m0; s m1; l m2; l m3; d m4; struct A452 m5; l m6; d m7; };
void f_cpA453(union  A453 *x, const union  A453 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA452(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA453(const union  A453 *x, const union  A453 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA452(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA453() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A453), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A453, m0), 1);
		dcStructField(at, 's', offsetof(union  A453, m1), 1);
		dcStructField(at, 'l', offsetof(union  A453, m2), 1);
		dcStructField(at, 'l', offsetof(union  A453, m3), 1);
		dcStructField(at, 'd', offsetof(union  A453, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A453, m5), 1, f_touchdcstA452());
		dcStructField(at, 'l', offsetof(union  A453, m6), 1);
		dcStructField(at, 'd', offsetof(union  A453, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ifpi> */
union  A454 { i m0; f m1; p m2; i m3; };
void f_cpA454(union  A454 *x, const union  A454 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA454(const union  A454 *x, const union  A454 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA454() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A454), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A454, m0), 1);
		dcStructField(at, 'f', offsetof(union  A454, m1), 1);
		dcStructField(at, 'p', offsetof(union  A454, m2), 1);
		dcStructField(at, 'i', offsetof(union  A454, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cifldfplsll} */
struct A455 { c m0; i m1; f m2; l m3; d m4; f m5; p m6; l m7; s m8; l m9; l m10; };
void f_cpA455(struct A455 *x, const struct A455 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA455(const struct A455 *x, const struct A455 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA455() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A455), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A455, m0), 1);
		dcStructField(at, 'i', offsetof(struct A455, m1), 1);
		dcStructField(at, 'f', offsetof(struct A455, m2), 1);
		dcStructField(at, 'l', offsetof(struct A455, m3), 1);
		dcStructField(at, 'd', offsetof(struct A455, m4), 1);
		dcStructField(at, 'f', offsetof(struct A455, m5), 1);
		dcStructField(at, 'p', offsetof(struct A455, m6), 1);
		dcStructField(at, 'l', offsetof(struct A455, m7), 1);
		dcStructField(at, 's', offsetof(struct A455, m8), 1);
		dcStructField(at, 'l', offsetof(struct A455, m9), 1);
		dcStructField(at, 'l', offsetof(struct A455, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dps> */
union  A456 { d m0; p m1; s m2; };
void f_cpA456(union  A456 *x, const union  A456 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA456(const union  A456 *x, const union  A456 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA456() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A456), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A456, m0), 1);
		dcStructField(at, 'p', offsetof(union  A456, m1), 1);
		dcStructField(at, 's', offsetof(union  A456, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pdc<ifpi>c{cifldfplsll}sfcjc<dps>> */
union  A457 { p m0; d m1; c m2; union  A454 m3; c m4; struct A455 m5; s m6; f m7; c m8; j m9; c m10; union  A456 m11; };
void f_cpA457(union  A457 *x, const union  A457 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA454(&x->m3, &y->m3); x->m4 = y->m4; f_cpA455(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA456(&x->m11, &y->m11); };
int f_cmpA457(const union  A457 *x, const union  A457 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA454(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA455(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA456(&x->m11, &y->m11); };
DCstruct* f_touchdcstA457() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A457), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A457, m0), 1);
		dcStructField(at, 'd', offsetof(union  A457, m1), 1);
		dcStructField(at, 'c', offsetof(union  A457, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A457, m3), 1, f_touchdcstA454());
		dcStructField(at, 'c', offsetof(union  A457, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A457, m5), 1, f_touchdcstA455());
		dcStructField(at, 's', offsetof(union  A457, m6), 1);
		dcStructField(at, 'f', offsetof(union  A457, m7), 1);
		dcStructField(at, 'c', offsetof(union  A457, m8), 1);
		dcStructField(at, 'j', offsetof(union  A457, m9), 1);
		dcStructField(at, 'c', offsetof(union  A457, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A457, m11), 1, f_touchdcstA456());
		dcCloseStruct(at);
	}
	return at;
};
/* {plfjpjs} */
struct A458 { p m0; l m1; f m2; j m3; p m4; j m5; s m6; };
void f_cpA458(struct A458 *x, const struct A458 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA458(const struct A458 *x, const struct A458 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA458() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A458), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A458, m0), 1);
		dcStructField(at, 'l', offsetof(struct A458, m1), 1);
		dcStructField(at, 'f', offsetof(struct A458, m2), 1);
		dcStructField(at, 'j', offsetof(struct A458, m3), 1);
		dcStructField(at, 'p', offsetof(struct A458, m4), 1);
		dcStructField(at, 'j', offsetof(struct A458, m5), 1);
		dcStructField(at, 's', offsetof(struct A458, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jppsiipf> */
union  A459 { j m0; p m1; p m2; s m3; i m4; i m5; p m6; f m7; };
void f_cpA459(union  A459 *x, const union  A459 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA459(const union  A459 *x, const union  A459 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA459() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A459), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A459, m0), 1);
		dcStructField(at, 'p', offsetof(union  A459, m1), 1);
		dcStructField(at, 'p', offsetof(union  A459, m2), 1);
		dcStructField(at, 's', offsetof(union  A459, m3), 1);
		dcStructField(at, 'i', offsetof(union  A459, m4), 1);
		dcStructField(at, 'i', offsetof(union  A459, m5), 1);
		dcStructField(at, 'p', offsetof(union  A459, m6), 1);
		dcStructField(at, 'f', offsetof(union  A459, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jlfdp} */
struct A460 { j m0; l m1; f m2; d m3; p m4; };
void f_cpA460(struct A460 *x, const struct A460 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA460(const struct A460 *x, const struct A460 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA460() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A460), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A460, m0), 1);
		dcStructField(at, 'l', offsetof(struct A460, m1), 1);
		dcStructField(at, 'f', offsetof(struct A460, m2), 1);
		dcStructField(at, 'd', offsetof(struct A460, m3), 1);
		dcStructField(at, 'p', offsetof(struct A460, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <llccfj> */
union  A461 { l m0; l m1; c m2; c m3; f m4; j m5; };
void f_cpA461(union  A461 *x, const union  A461 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA461(const union  A461 *x, const union  A461 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA461() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A461), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A461, m0), 1);
		dcStructField(at, 'l', offsetof(union  A461, m1), 1);
		dcStructField(at, 'c', offsetof(union  A461, m2), 1);
		dcStructField(at, 'c', offsetof(union  A461, m3), 1);
		dcStructField(at, 'f', offsetof(union  A461, m4), 1);
		dcStructField(at, 'j', offsetof(union  A461, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ccjljpjccffi> */
union  A462 { c m0; c m1; j m2; l m3; j m4; p m5; j m6; c m7; c m8; f m9; f m10; i m11; };
void f_cpA462(union  A462 *x, const union  A462 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA462(const union  A462 *x, const union  A462 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA462() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A462), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A462, m0), 1);
		dcStructField(at, 'c', offsetof(union  A462, m1), 1);
		dcStructField(at, 'j', offsetof(union  A462, m2), 1);
		dcStructField(at, 'l', offsetof(union  A462, m3), 1);
		dcStructField(at, 'j', offsetof(union  A462, m4), 1);
		dcStructField(at, 'p', offsetof(union  A462, m5), 1);
		dcStructField(at, 'j', offsetof(union  A462, m6), 1);
		dcStructField(at, 'c', offsetof(union  A462, m7), 1);
		dcStructField(at, 'c', offsetof(union  A462, m8), 1);
		dcStructField(at, 'f', offsetof(union  A462, m9), 1);
		dcStructField(at, 'f', offsetof(union  A462, m10), 1);
		dcStructField(at, 'i', offsetof(union  A462, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <j{plfjpjs}<jppsiipf>{jlfdp}fd<llccfj>lppp<ccjljpjccffi>> */
union  A463 { j m0; struct A458 m1; union  A459 m2; struct A460 m3; f m4; d m5; union  A461 m6; l m7; p m8; p m9; p m10; union  A462 m11; };
void f_cpA463(union  A463 *x, const union  A463 *y) { x->m0 = y->m0; f_cpA458(&x->m1, &y->m1); f_cpA459(&x->m2, &y->m2); f_cpA460(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; f_cpA461(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA462(&x->m11, &y->m11); };
int f_cmpA463(const union  A463 *x, const union  A463 *y) { return x->m0 == y->m0 && f_cmpA458(&x->m1, &y->m1) && f_cmpA459(&x->m2, &y->m2) && f_cmpA460(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA461(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA462(&x->m11, &y->m11); };
DCstruct* f_touchdcstA463() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A463), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A463, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A463, m1), 1, f_touchdcstA458());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A463, m2), 1, f_touchdcstA459());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A463, m3), 1, f_touchdcstA460());
		dcStructField(at, 'f', offsetof(union  A463, m4), 1);
		dcStructField(at, 'd', offsetof(union  A463, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A463, m6), 1, f_touchdcstA461());
		dcStructField(at, 'l', offsetof(union  A463, m7), 1);
		dcStructField(at, 'p', offsetof(union  A463, m8), 1);
		dcStructField(at, 'p', offsetof(union  A463, m9), 1);
		dcStructField(at, 'p', offsetof(union  A463, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A463, m11), 1, f_touchdcstA462());
		dcCloseStruct(at);
	}
	return at;
};
/* {cjidslfddlcc} */
struct A464 { c m0; j m1; i m2; d m3; s m4; l m5; f m6; d m7; d m8; l m9; c m10; c m11; };
void f_cpA464(struct A464 *x, const struct A464 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA464(const struct A464 *x, const struct A464 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA464() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A464), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A464, m0), 1);
		dcStructField(at, 'j', offsetof(struct A464, m1), 1);
		dcStructField(at, 'i', offsetof(struct A464, m2), 1);
		dcStructField(at, 'd', offsetof(struct A464, m3), 1);
		dcStructField(at, 's', offsetof(struct A464, m4), 1);
		dcStructField(at, 'l', offsetof(struct A464, m5), 1);
		dcStructField(at, 'f', offsetof(struct A464, m6), 1);
		dcStructField(at, 'd', offsetof(struct A464, m7), 1);
		dcStructField(at, 'd', offsetof(struct A464, m8), 1);
		dcStructField(at, 'l', offsetof(struct A464, m9), 1);
		dcStructField(at, 'c', offsetof(struct A464, m10), 1);
		dcStructField(at, 'c', offsetof(struct A464, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <djdcccc> */
union  A465 { d m0; j m1; d m2; c m3; c m4; c m5; c m6; };
void f_cpA465(union  A465 *x, const union  A465 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA465(const union  A465 *x, const union  A465 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA465() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A465), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A465, m0), 1);
		dcStructField(at, 'j', offsetof(union  A465, m1), 1);
		dcStructField(at, 'd', offsetof(union  A465, m2), 1);
		dcStructField(at, 'c', offsetof(union  A465, m3), 1);
		dcStructField(at, 'c', offsetof(union  A465, m4), 1);
		dcStructField(at, 'c', offsetof(union  A465, m5), 1);
		dcStructField(at, 'c', offsetof(union  A465, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sl{cjidslfddlcc}lpjjcl<djdcccc>l> */
union  A466 { s m0; l m1; struct A464 m2; l m3; p m4; j m5; j m6; c m7; l m8; union  A465 m9; l m10; };
void f_cpA466(union  A466 *x, const union  A466 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA464(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA465(&x->m9, &y->m9); x->m10 = y->m10; };
int f_cmpA466(const union  A466 *x, const union  A466 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA464(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA465(&x->m9, &y->m9) && x->m10 == y->m10; };
DCstruct* f_touchdcstA466() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A466), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A466, m0), 1);
		dcStructField(at, 'l', offsetof(union  A466, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A466, m2), 1, f_touchdcstA464());
		dcStructField(at, 'l', offsetof(union  A466, m3), 1);
		dcStructField(at, 'p', offsetof(union  A466, m4), 1);
		dcStructField(at, 'j', offsetof(union  A466, m5), 1);
		dcStructField(at, 'j', offsetof(union  A466, m6), 1);
		dcStructField(at, 'c', offsetof(union  A466, m7), 1);
		dcStructField(at, 'l', offsetof(union  A466, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A466, m9), 1, f_touchdcstA465());
		dcStructField(at, 'l', offsetof(union  A466, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iij[7]<pdc<ifpi>c{cifldfplsll}sfcjc<dps>>d<j{plfjpjs}<jppsiipf>{jlfdp}fd<llccfj>lppp<ccjljpjccffi>>fjiil<sl{cjidslfddlcc}lpjjcl<djdcccc>l>} */
struct A467 { i m0; i m1; j m2[7]; union  A457 m3; d m4; union  A463 m5; f m6; j m7; i m8; i m9; l m10; union  A466 m11; };
void f_cpA467(struct A467 *x, const struct A467 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; f_cpA457(&x->m3, &y->m3); x->m4 = y->m4; f_cpA463(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA466(&x->m11, &y->m11); };
int f_cmpA467(const struct A467 *x, const struct A467 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && f_cmpA457(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA463(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA466(&x->m11, &y->m11); };
DCstruct* f_touchdcstA467() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A467), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A467, m0), 1);
		dcStructField(at, 'i', offsetof(struct A467, m1), 1);
		dcStructField(at, 'j', offsetof(struct A467, m2), 7);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A467, m3), 1, f_touchdcstA457());
		dcStructField(at, 'd', offsetof(struct A467, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A467, m5), 1, f_touchdcstA463());
		dcStructField(at, 'f', offsetof(struct A467, m6), 1);
		dcStructField(at, 'j', offsetof(struct A467, m7), 1);
		dcStructField(at, 'i', offsetof(struct A467, m8), 1);
		dcStructField(at, 'i', offsetof(struct A467, m9), 1);
		dcStructField(at, 'l', offsetof(struct A467, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A467, m11), 1, f_touchdcstA466());
		dcCloseStruct(at);
	}
	return at;
};
/* {iffpdijfjlis} */
struct A468 { i m0; f m1; f m2; p m3; d m4; i m5; j m6; f m7; j m8; l m9; i m10; s m11; };
void f_cpA468(struct A468 *x, const struct A468 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA468(const struct A468 *x, const struct A468 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA468() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A468), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A468, m0), 1);
		dcStructField(at, 'f', offsetof(struct A468, m1), 1);
		dcStructField(at, 'f', offsetof(struct A468, m2), 1);
		dcStructField(at, 'p', offsetof(struct A468, m3), 1);
		dcStructField(at, 'd', offsetof(struct A468, m4), 1);
		dcStructField(at, 'i', offsetof(struct A468, m5), 1);
		dcStructField(at, 'j', offsetof(struct A468, m6), 1);
		dcStructField(at, 'f', offsetof(struct A468, m7), 1);
		dcStructField(at, 'j', offsetof(struct A468, m8), 1);
		dcStructField(at, 'l', offsetof(struct A468, m9), 1);
		dcStructField(at, 'i', offsetof(struct A468, m10), 1);
		dcStructField(at, 's', offsetof(struct A468, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pjdjffs{iffpdijfjlis}> */
union  A469 { p m0; j m1; d m2; j m3; f m4; f m5; s m6; struct A468 m7; };
void f_cpA469(union  A469 *x, const union  A469 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA468(&x->m7, &y->m7); };
int f_cmpA469(const union  A469 *x, const union  A469 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA468(&x->m7, &y->m7); };
DCstruct* f_touchdcstA469() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A469), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A469, m0), 1);
		dcStructField(at, 'j', offsetof(union  A469, m1), 1);
		dcStructField(at, 'd', offsetof(union  A469, m2), 1);
		dcStructField(at, 'j', offsetof(union  A469, m3), 1);
		dcStructField(at, 'f', offsetof(union  A469, m4), 1);
		dcStructField(at, 'f', offsetof(union  A469, m5), 1);
		dcStructField(at, 's', offsetof(union  A469, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A469, m7), 1, f_touchdcstA468());
		dcCloseStruct(at);
	}
	return at;
};
/* <cc> */
union  A470 { c m0; c m1; };
void f_cpA470(union  A470 *x, const union  A470 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA470(const union  A470 *x, const union  A470 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA470() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A470), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A470, m0), 1);
		dcStructField(at, 'c', offsetof(union  A470, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sj[9]j[16]d> */
union  A471 { s m0; j m1[9]; j m2[16]; d m3; };
void f_cpA471(union  A471 *x, const union  A471 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m2[13] = y->m2[13]; x->m2[14] = y->m2[14]; x->m2[15] = y->m2[15]; x->m3 = y->m3; };
int f_cmpA471(const union  A471 *x, const union  A471 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m2[13] == y->m2[13] && x->m2[14] == y->m2[14] && x->m2[15] == y->m2[15] && x->m3 == y->m3; };
DCstruct* f_touchdcstA471() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A471), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A471, m0), 1);
		dcStructField(at, 'j', offsetof(union  A471, m1), 9);
		dcStructField(at, 'j', offsetof(union  A471, m2), 16);
		dcStructField(at, 'd', offsetof(union  A471, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jcdf} */
struct A472 { j m0; c m1; d m2; f m3; };
void f_cpA472(struct A472 *x, const struct A472 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA472(const struct A472 *x, const struct A472 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA472() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A472), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A472, m0), 1);
		dcStructField(at, 'c', offsetof(struct A472, m1), 1);
		dcStructField(at, 'd', offsetof(struct A472, m2), 1);
		dcStructField(at, 'f', offsetof(struct A472, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ji<sj[9]j[16]d>sl[12]jjffij{jcdf}} */
struct A473 { j m0; i m1; union  A471 m2; s m3; l m4[12]; j m5; j m6; f m7; f m8; i m9; j m10; struct A472 m11; };
void f_cpA473(struct A473 *x, const struct A473 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA471(&x->m2, &y->m2); x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA472(&x->m11, &y->m11); };
int f_cmpA473(const struct A473 *x, const struct A473 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA471(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA472(&x->m11, &y->m11); };
DCstruct* f_touchdcstA473() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A473), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A473, m0), 1);
		dcStructField(at, 'i', offsetof(struct A473, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A473, m2), 1, f_touchdcstA471());
		dcStructField(at, 's', offsetof(struct A473, m3), 1);
		dcStructField(at, 'l', offsetof(struct A473, m4), 12);
		dcStructField(at, 'j', offsetof(struct A473, m5), 1);
		dcStructField(at, 'j', offsetof(struct A473, m6), 1);
		dcStructField(at, 'f', offsetof(struct A473, m7), 1);
		dcStructField(at, 'f', offsetof(struct A473, m8), 1);
		dcStructField(at, 'i', offsetof(struct A473, m9), 1);
		dcStructField(at, 'j', offsetof(struct A473, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A473, m11), 1, f_touchdcstA472());
		dcCloseStruct(at);
	}
	return at;
};
/* <dl> */
union  A474 { d m0; l m1; };
void f_cpA474(union  A474 *x, const union  A474 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA474(const union  A474 *x, const union  A474 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA474() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A474), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A474, m0), 1);
		dcStructField(at, 'l', offsetof(union  A474, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ps} */
struct A475 { p m0; s m1; };
void f_cpA475(struct A475 *x, const struct A475 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA475(const struct A475 *x, const struct A475 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA475() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A475), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A475, m0), 1);
		dcStructField(at, 's', offsetof(struct A475, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fl} */
struct A476 { f m0; l m1; };
void f_cpA476(struct A476 *x, const struct A476 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA476(const struct A476 *x, const struct A476 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA476() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A476), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A476, m0), 1);
		dcStructField(at, 'l', offsetof(struct A476, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cslss[4]lsjp{fl}cp> */
union  A477 { c m0; s m1; l m2; s m3; s m4[4]; l m5; s m6; j m7; p m8; struct A476 m9; c m10; p m11; };
void f_cpA477(union  A477 *x, const union  A477 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA476(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA477(const union  A477 *x, const union  A477 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA476(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA477() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A477), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A477, m0), 1);
		dcStructField(at, 's', offsetof(union  A477, m1), 1);
		dcStructField(at, 'l', offsetof(union  A477, m2), 1);
		dcStructField(at, 's', offsetof(union  A477, m3), 1);
		dcStructField(at, 's', offsetof(union  A477, m4), 4);
		dcStructField(at, 'l', offsetof(union  A477, m5), 1);
		dcStructField(at, 's', offsetof(union  A477, m6), 1);
		dcStructField(at, 'j', offsetof(union  A477, m7), 1);
		dcStructField(at, 'p', offsetof(union  A477, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A477, m9), 1, f_touchdcstA476());
		dcStructField(at, 'c', offsetof(union  A477, m10), 1);
		dcStructField(at, 'p', offsetof(union  A477, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jpp{ps}pjsjij<cslss[4]lsjp{fl}cp>f} */
struct A478 { j m0; p m1; p m2; struct A475 m3; p m4; j m5; s m6; j m7; i m8; j m9; union  A477 m10; f m11; };
void f_cpA478(struct A478 *x, const struct A478 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA475(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA477(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA478(const struct A478 *x, const struct A478 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA475(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA477(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA478() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A478), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A478, m0), 1);
		dcStructField(at, 'p', offsetof(struct A478, m1), 1);
		dcStructField(at, 'p', offsetof(struct A478, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A478, m3), 1, f_touchdcstA475());
		dcStructField(at, 'p', offsetof(struct A478, m4), 1);
		dcStructField(at, 'j', offsetof(struct A478, m5), 1);
		dcStructField(at, 's', offsetof(struct A478, m6), 1);
		dcStructField(at, 'j', offsetof(struct A478, m7), 1);
		dcStructField(at, 'i', offsetof(struct A478, m8), 1);
		dcStructField(at, 'j', offsetof(struct A478, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A478, m10), 1, f_touchdcstA477());
		dcStructField(at, 'f', offsetof(struct A478, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ciffpdpljipc} */
struct A479 { c m0; i m1; f m2; f m3; p m4; d m5; p m6; l m7; j m8; i m9; p m10; c m11; };
void f_cpA479(struct A479 *x, const struct A479 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA479(const struct A479 *x, const struct A479 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA479() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A479), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A479, m0), 1);
		dcStructField(at, 'i', offsetof(struct A479, m1), 1);
		dcStructField(at, 'f', offsetof(struct A479, m2), 1);
		dcStructField(at, 'f', offsetof(struct A479, m3), 1);
		dcStructField(at, 'p', offsetof(struct A479, m4), 1);
		dcStructField(at, 'd', offsetof(struct A479, m5), 1);
		dcStructField(at, 'p', offsetof(struct A479, m6), 1);
		dcStructField(at, 'l', offsetof(struct A479, m7), 1);
		dcStructField(at, 'j', offsetof(struct A479, m8), 1);
		dcStructField(at, 'i', offsetof(struct A479, m9), 1);
		dcStructField(at, 'p', offsetof(struct A479, m10), 1);
		dcStructField(at, 'c', offsetof(struct A479, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dijidsfifiic} */
struct A480 { d m0; i m1; j m2; i m3; d m4; s m5; f m6; i m7; f m8; i m9; i m10; c m11; };
void f_cpA480(struct A480 *x, const struct A480 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA480(const struct A480 *x, const struct A480 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA480() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A480), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A480, m0), 1);
		dcStructField(at, 'i', offsetof(struct A480, m1), 1);
		dcStructField(at, 'j', offsetof(struct A480, m2), 1);
		dcStructField(at, 'i', offsetof(struct A480, m3), 1);
		dcStructField(at, 'd', offsetof(struct A480, m4), 1);
		dcStructField(at, 's', offsetof(struct A480, m5), 1);
		dcStructField(at, 'f', offsetof(struct A480, m6), 1);
		dcStructField(at, 'i', offsetof(struct A480, m7), 1);
		dcStructField(at, 'f', offsetof(struct A480, m8), 1);
		dcStructField(at, 'i', offsetof(struct A480, m9), 1);
		dcStructField(at, 'i', offsetof(struct A480, m10), 1);
		dcStructField(at, 'c', offsetof(struct A480, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jsj[7]ii> */
union  A481 { j m0; s m1; j m2[7]; i m3; i m4; };
void f_cpA481(union  A481 *x, const union  A481 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA481(const union  A481 *x, const union  A481 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA481() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A481), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A481, m0), 1);
		dcStructField(at, 's', offsetof(union  A481, m1), 1);
		dcStructField(at, 'j', offsetof(union  A481, m2), 7);
		dcStructField(at, 'i', offsetof(union  A481, m3), 1);
		dcStructField(at, 'i', offsetof(union  A481, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lpf[13]s<jsj[7]ii>dp[10]s} */
struct A482 { l m0; p m1; f m2[13]; s m3; union  A481 m4; d m5; p m6[10]; s m7; };
void f_cpA482(struct A482 *x, const struct A482 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m3 = y->m3; f_cpA481(&x->m4, &y->m4); x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m7 = y->m7; };
int f_cmpA482(const struct A482 *x, const struct A482 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m3 == y->m3 && f_cmpA481(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m7 == y->m7; };
DCstruct* f_touchdcstA482() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A482), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A482, m0), 1);
		dcStructField(at, 'p', offsetof(struct A482, m1), 1);
		dcStructField(at, 'f', offsetof(struct A482, m2), 13);
		dcStructField(at, 's', offsetof(struct A482, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A482, m4), 1, f_touchdcstA481());
		dcStructField(at, 'd', offsetof(struct A482, m5), 1);
		dcStructField(at, 'p', offsetof(struct A482, m6), 10);
		dcStructField(at, 's', offsetof(struct A482, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pcl[6]cldpispi[10]j} */
struct A483 { p m0; c m1; l m2[6]; c m3; l m4; d m5; p m6; i m7; s m8; p m9; i m10[10]; j m11; };
void f_cpA483(struct A483 *x, const struct A483 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m10[8] = y->m10[8]; x->m10[9] = y->m10[9]; x->m11 = y->m11; };
int f_cmpA483(const struct A483 *x, const struct A483 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m10[8] == y->m10[8] && x->m10[9] == y->m10[9] && x->m11 == y->m11; };
DCstruct* f_touchdcstA483() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A483), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A483, m0), 1);
		dcStructField(at, 'c', offsetof(struct A483, m1), 1);
		dcStructField(at, 'l', offsetof(struct A483, m2), 6);
		dcStructField(at, 'c', offsetof(struct A483, m3), 1);
		dcStructField(at, 'l', offsetof(struct A483, m4), 1);
		dcStructField(at, 'd', offsetof(struct A483, m5), 1);
		dcStructField(at, 'p', offsetof(struct A483, m6), 1);
		dcStructField(at, 'i', offsetof(struct A483, m7), 1);
		dcStructField(at, 's', offsetof(struct A483, m8), 1);
		dcStructField(at, 'p', offsetof(struct A483, m9), 1);
		dcStructField(at, 'i', offsetof(struct A483, m10), 10);
		dcStructField(at, 'j', offsetof(struct A483, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{pcl[6]cldpispi[10]j}jj<c>scslfpip> */
union  A484 { struct A483 m0; j m1; j m2; union  A116 m3; s m4; c m5; s m6; l m7; f m8; p m9; i m10; p m11; };
void f_cpA484(union  A484 *x, const union  A484 *y) { f_cpA483(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA116(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA484(const union  A484 *x, const union  A484 *y) { return f_cmpA483(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA116(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA484() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A484), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A484, m0), 1, f_touchdcstA483());
		dcStructField(at, 'j', offsetof(union  A484, m1), 1);
		dcStructField(at, 'j', offsetof(union  A484, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A484, m3), 1, f_touchdcstA116());
		dcStructField(at, 's', offsetof(union  A484, m4), 1);
		dcStructField(at, 'c', offsetof(union  A484, m5), 1);
		dcStructField(at, 's', offsetof(union  A484, m6), 1);
		dcStructField(at, 'l', offsetof(union  A484, m7), 1);
		dcStructField(at, 'f', offsetof(union  A484, m8), 1);
		dcStructField(at, 'p', offsetof(union  A484, m9), 1);
		dcStructField(at, 'i', offsetof(union  A484, m10), 1);
		dcStructField(at, 'p', offsetof(union  A484, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fp} */
struct A485 { f m0; p m1; };
void f_cpA485(struct A485 *x, const struct A485 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA485(const struct A485 *x, const struct A485 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA485() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A485), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A485, m0), 1);
		dcStructField(at, 'p', offsetof(struct A485, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ijlcjpspd} */
struct A486 { i m0; j m1; l m2; c m3; j m4; p m5; s m6; p m7; d m8; };
void f_cpA486(struct A486 *x, const struct A486 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA486(const struct A486 *x, const struct A486 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA486() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A486), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A486, m0), 1);
		dcStructField(at, 'j', offsetof(struct A486, m1), 1);
		dcStructField(at, 'l', offsetof(struct A486, m2), 1);
		dcStructField(at, 'c', offsetof(struct A486, m3), 1);
		dcStructField(at, 'j', offsetof(struct A486, m4), 1);
		dcStructField(at, 'p', offsetof(struct A486, m5), 1);
		dcStructField(at, 's', offsetof(struct A486, m6), 1);
		dcStructField(at, 'p', offsetof(struct A486, m7), 1);
		dcStructField(at, 'd', offsetof(struct A486, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jfss{fp}{ijlcjpspd}s} */
struct A487 { j m0; f m1; s m2; s m3; struct A485 m4; struct A486 m5; s m6; };
void f_cpA487(struct A487 *x, const struct A487 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA485(&x->m4, &y->m4); f_cpA486(&x->m5, &y->m5); x->m6 = y->m6; };
int f_cmpA487(const struct A487 *x, const struct A487 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA485(&x->m4, &y->m4) && f_cmpA486(&x->m5, &y->m5) && x->m6 == y->m6; };
DCstruct* f_touchdcstA487() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A487), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A487, m0), 1);
		dcStructField(at, 'f', offsetof(struct A487, m1), 1);
		dcStructField(at, 's', offsetof(struct A487, m2), 1);
		dcStructField(at, 's', offsetof(struct A487, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A487, m4), 1, f_touchdcstA485());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A487, m5), 1, f_touchdcstA486());
		dcStructField(at, 's', offsetof(struct A487, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lsfffddii{p}fd[10]} */
struct A488 { l m0; s m1; f m2; f m3; f m4; d m5; d m6; i m7; i m8; struct A33 m9; f m10; d m11[10]; };
void f_cpA488(struct A488 *x, const struct A488 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA33(&x->m9, &y->m9); x->m10 = y->m10; x->m11[0] = y->m11[0]; x->m11[1] = y->m11[1]; x->m11[2] = y->m11[2]; x->m11[3] = y->m11[3]; x->m11[4] = y->m11[4]; x->m11[5] = y->m11[5]; x->m11[6] = y->m11[6]; x->m11[7] = y->m11[7]; x->m11[8] = y->m11[8]; x->m11[9] = y->m11[9]; };
int f_cmpA488(const struct A488 *x, const struct A488 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA33(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11[0] == y->m11[0] && x->m11[1] == y->m11[1] && x->m11[2] == y->m11[2] && x->m11[3] == y->m11[3] && x->m11[4] == y->m11[4] && x->m11[5] == y->m11[5] && x->m11[6] == y->m11[6] && x->m11[7] == y->m11[7] && x->m11[8] == y->m11[8] && x->m11[9] == y->m11[9]; };
DCstruct* f_touchdcstA488() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A488), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A488, m0), 1);
		dcStructField(at, 's', offsetof(struct A488, m1), 1);
		dcStructField(at, 'f', offsetof(struct A488, m2), 1);
		dcStructField(at, 'f', offsetof(struct A488, m3), 1);
		dcStructField(at, 'f', offsetof(struct A488, m4), 1);
		dcStructField(at, 'd', offsetof(struct A488, m5), 1);
		dcStructField(at, 'd', offsetof(struct A488, m6), 1);
		dcStructField(at, 'i', offsetof(struct A488, m7), 1);
		dcStructField(at, 'i', offsetof(struct A488, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A488, m9), 1, f_touchdcstA33());
		dcStructField(at, 'f', offsetof(struct A488, m10), 1);
		dcStructField(at, 'd', offsetof(struct A488, m11), 10);
		dcCloseStruct(at);
	}
	return at;
};
/* {jijcll[2]djdjcj} */
struct A489 { j m0; i m1; j m2; c m3; l m4; l m5[2]; d m6; j m7; d m8; j m9; c m10; j m11; };
void f_cpA489(struct A489 *x, const struct A489 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA489(const struct A489 *x, const struct A489 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA489() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A489), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A489, m0), 1);
		dcStructField(at, 'i', offsetof(struct A489, m1), 1);
		dcStructField(at, 'j', offsetof(struct A489, m2), 1);
		dcStructField(at, 'c', offsetof(struct A489, m3), 1);
		dcStructField(at, 'l', offsetof(struct A489, m4), 1);
		dcStructField(at, 'l', offsetof(struct A489, m5), 2);
		dcStructField(at, 'd', offsetof(struct A489, m6), 1);
		dcStructField(at, 'j', offsetof(struct A489, m7), 1);
		dcStructField(at, 'd', offsetof(struct A489, m8), 1);
		dcStructField(at, 'j', offsetof(struct A489, m9), 1);
		dcStructField(at, 'c', offsetof(struct A489, m10), 1);
		dcStructField(at, 'j', offsetof(struct A489, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ps{fp}s> */
union  A490 { p m0; s m1; struct A485 m2; s m3; };
void f_cpA490(union  A490 *x, const union  A490 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA485(&x->m2, &y->m2); x->m3 = y->m3; };
int f_cmpA490(const union  A490 *x, const union  A490 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA485(&x->m2, &y->m2) && x->m3 == y->m3; };
DCstruct* f_touchdcstA490() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A490), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A490, m0), 1);
		dcStructField(at, 's', offsetof(union  A490, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A490, m2), 1, f_touchdcstA485());
		dcStructField(at, 's', offsetof(union  A490, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{lpf[13]s<jsj[7]ii>dp[10]s}ppl<{pcl[6]cldpispi[10]j}jj<c>scslfpip>{jfss{fp}{ijlcjpspd}s}cps{lsfffddii{p}fd[10]}{jijcll[2]djdjcj}<ps{fp}s>> */
union  A491 { struct A482 m0; p m1; p m2; l m3; union  A484 m4; struct A487 m5; c m6; p m7; s m8; struct A488 m9; struct A489 m10; union  A490 m11; };
void f_cpA491(union  A491 *x, const union  A491 *y) { f_cpA482(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA484(&x->m4, &y->m4); f_cpA487(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA488(&x->m9, &y->m9); f_cpA489(&x->m10, &y->m10); f_cpA490(&x->m11, &y->m11); };
int f_cmpA491(const union  A491 *x, const union  A491 *y) { return f_cmpA482(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA484(&x->m4, &y->m4) && f_cmpA487(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA488(&x->m9, &y->m9) && f_cmpA489(&x->m10, &y->m10) && f_cmpA490(&x->m11, &y->m11); };
DCstruct* f_touchdcstA491() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A491), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A491, m0), 1, f_touchdcstA482());
		dcStructField(at, 'p', offsetof(union  A491, m1), 1);
		dcStructField(at, 'p', offsetof(union  A491, m2), 1);
		dcStructField(at, 'l', offsetof(union  A491, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A491, m4), 1, f_touchdcstA484());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A491, m5), 1, f_touchdcstA487());
		dcStructField(at, 'c', offsetof(union  A491, m6), 1);
		dcStructField(at, 'p', offsetof(union  A491, m7), 1);
		dcStructField(at, 's', offsetof(union  A491, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A491, m9), 1, f_touchdcstA488());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A491, m10), 1, f_touchdcstA489());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A491, m11), 1, f_touchdcstA490());
		dcCloseStruct(at);
	}
	return at;
};
/* <fjlpiidps[4]pf> */
union  A492 { f m0; j m1; l m2; p m3; i m4; i m5; d m6; p m7; s m8[4]; p m9; f m10; };
void f_cpA492(union  A492 *x, const union  A492 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA492(const union  A492 *x, const union  A492 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA492() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A492), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A492, m0), 1);
		dcStructField(at, 'j', offsetof(union  A492, m1), 1);
		dcStructField(at, 'l', offsetof(union  A492, m2), 1);
		dcStructField(at, 'p', offsetof(union  A492, m3), 1);
		dcStructField(at, 'i', offsetof(union  A492, m4), 1);
		dcStructField(at, 'i', offsetof(union  A492, m5), 1);
		dcStructField(at, 'd', offsetof(union  A492, m6), 1);
		dcStructField(at, 'p', offsetof(union  A492, m7), 1);
		dcStructField(at, 's', offsetof(union  A492, m8), 4);
		dcStructField(at, 'p', offsetof(union  A492, m9), 1);
		dcStructField(at, 'f', offsetof(union  A492, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<fjlpiidps[4]pf>ssl} */
struct A493 { union  A492 m0; s m1; s m2; l m3; };
void f_cpA493(struct A493 *x, const struct A493 *y) { f_cpA492(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA493(const struct A493 *x, const struct A493 *y) { return f_cmpA492(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA493() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A493), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A493, m0), 1, f_touchdcstA492());
		dcStructField(at, 's', offsetof(struct A493, m1), 1);
		dcStructField(at, 's', offsetof(struct A493, m2), 1);
		dcStructField(at, 'l', offsetof(struct A493, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lslfiiddid[10]j[2]l} */
struct A494 { l m0; s m1; l m2; f m3; i m4; i m5; d m6; d m7; i m8; d m9[10]; j m10[2]; l m11; };
void f_cpA494(struct A494 *x, const struct A494 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m9[8] = y->m9[8]; x->m9[9] = y->m9[9]; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m11 = y->m11; };
int f_cmpA494(const struct A494 *x, const struct A494 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m9[8] == y->m9[8] && x->m9[9] == y->m9[9] && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m11 == y->m11; };
DCstruct* f_touchdcstA494() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A494), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A494, m0), 1);
		dcStructField(at, 's', offsetof(struct A494, m1), 1);
		dcStructField(at, 'l', offsetof(struct A494, m2), 1);
		dcStructField(at, 'f', offsetof(struct A494, m3), 1);
		dcStructField(at, 'i', offsetof(struct A494, m4), 1);
		dcStructField(at, 'i', offsetof(struct A494, m5), 1);
		dcStructField(at, 'd', offsetof(struct A494, m6), 1);
		dcStructField(at, 'd', offsetof(struct A494, m7), 1);
		dcStructField(at, 'i', offsetof(struct A494, m8), 1);
		dcStructField(at, 'd', offsetof(struct A494, m9), 10);
		dcStructField(at, 'j', offsetof(struct A494, m10), 2);
		dcStructField(at, 'l', offsetof(struct A494, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{lslfiiddid[10]j[2]l}} */
struct A495 { struct A494 m0; };
void f_cpA495(struct A495 *x, const struct A495 *y) { f_cpA494(&x->m0, &y->m0); };
int f_cmpA495(const struct A495 *x, const struct A495 *y) { return f_cmpA494(&x->m0, &y->m0); };
DCstruct* f_touchdcstA495() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A495), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A495, m0), 1, f_touchdcstA494());
		dcCloseStruct(at);
	}
	return at;
};
/* <spj> */
union  A496 { s m0; p m1; j m2; };
void f_cpA496(union  A496 *x, const union  A496 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA496(const union  A496 *x, const union  A496 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA496() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A496), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A496, m0), 1);
		dcStructField(at, 'p', offsetof(union  A496, m1), 1);
		dcStructField(at, 'j', offsetof(union  A496, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dlc<spj>s} */
struct A497 { d m0; l m1; c m2; union  A496 m3; s m4; };
void f_cpA497(struct A497 *x, const struct A497 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA496(&x->m3, &y->m3); x->m4 = y->m4; };
int f_cmpA497(const struct A497 *x, const struct A497 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA496(&x->m3, &y->m3) && x->m4 == y->m4; };
DCstruct* f_touchdcstA497() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A497), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A497, m0), 1);
		dcStructField(at, 'l', offsetof(struct A497, m1), 1);
		dcStructField(at, 'c', offsetof(struct A497, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A497, m3), 1, f_touchdcstA496());
		dcStructField(at, 's', offsetof(struct A497, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{{lslfiiddid[10]j[2]l}}<c>p{dlc<spj>s}[13]l[7]} */
struct A498 { struct A495 m0; union  A116 m1; p m2; struct A497 m3[13]; l m4[7]; };
void f_cpA498(struct A498 *x, const struct A498 *y) { f_cpA495(&x->m0, &y->m0); f_cpA116(&x->m1, &y->m1); x->m2 = y->m2; f_cpA497(&x->m3[0], &y->m3[0]); f_cpA497(&x->m3[1], &y->m3[1]); f_cpA497(&x->m3[2], &y->m3[2]); f_cpA497(&x->m3[3], &y->m3[3]); f_cpA497(&x->m3[4], &y->m3[4]); f_cpA497(&x->m3[5], &y->m3[5]); f_cpA497(&x->m3[6], &y->m3[6]); f_cpA497(&x->m3[7], &y->m3[7]); f_cpA497(&x->m3[8], &y->m3[8]); f_cpA497(&x->m3[9], &y->m3[9]); f_cpA497(&x->m3[10], &y->m3[10]); f_cpA497(&x->m3[11], &y->m3[11]); f_cpA497(&x->m3[12], &y->m3[12]); x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; };
int f_cmpA498(const struct A498 *x, const struct A498 *y) { return f_cmpA495(&x->m0, &y->m0) && f_cmpA116(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA497(&x->m3[0], &y->m3[0]) && f_cmpA497(&x->m3[1], &y->m3[1]) && f_cmpA497(&x->m3[2], &y->m3[2]) && f_cmpA497(&x->m3[3], &y->m3[3]) && f_cmpA497(&x->m3[4], &y->m3[4]) && f_cmpA497(&x->m3[5], &y->m3[5]) && f_cmpA497(&x->m3[6], &y->m3[6]) && f_cmpA497(&x->m3[7], &y->m3[7]) && f_cmpA497(&x->m3[8], &y->m3[8]) && f_cmpA497(&x->m3[9], &y->m3[9]) && f_cmpA497(&x->m3[10], &y->m3[10]) && f_cmpA497(&x->m3[11], &y->m3[11]) && f_cmpA497(&x->m3[12], &y->m3[12]) && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6]; };
DCstruct* f_touchdcstA498() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A498), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A498, m0), 1, f_touchdcstA495());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A498, m1), 1, f_touchdcstA116());
		dcStructField(at, 'p', offsetof(struct A498, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A498, m3), 13, f_touchdcstA497());
		dcStructField(at, 'l', offsetof(struct A498, m4), 7);
		dcCloseStruct(at);
	}
	return at;
};
/* {cl[9]ffi} */
struct A499 { c m0; l m1[9]; f m2; f m3; i m4; };
void f_cpA499(struct A499 *x, const struct A499 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA499(const struct A499 *x, const struct A499 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA499() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A499), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A499, m0), 1);
		dcStructField(at, 'l', offsetof(struct A499, m1), 9);
		dcStructField(at, 'f', offsetof(struct A499, m2), 1);
		dcStructField(at, 'f', offsetof(struct A499, m3), 1);
		dcStructField(at, 'i', offsetof(struct A499, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <icp> */
union  A500 { i m0; c m1; p m2; };
void f_cpA500(union  A500 *x, const union  A500 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA500(const union  A500 *x, const union  A500 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA500() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A500), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A500, m0), 1);
		dcStructField(at, 'c', offsetof(union  A500, m1), 1);
		dcStructField(at, 'p', offsetof(union  A500, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {i[8]dpslpdscjcc} */
struct A501 { i m0[8]; d m1; p m2; s m3; l m4; p m5; d m6; s m7; c m8; j m9; c m10; c m11; };
void f_cpA501(struct A501 *x, const struct A501 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA501(const struct A501 *x, const struct A501 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA501() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A501), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A501, m0), 8);
		dcStructField(at, 'd', offsetof(struct A501, m1), 1);
		dcStructField(at, 'p', offsetof(struct A501, m2), 1);
		dcStructField(at, 's', offsetof(struct A501, m3), 1);
		dcStructField(at, 'l', offsetof(struct A501, m4), 1);
		dcStructField(at, 'p', offsetof(struct A501, m5), 1);
		dcStructField(at, 'd', offsetof(struct A501, m6), 1);
		dcStructField(at, 's', offsetof(struct A501, m7), 1);
		dcStructField(at, 'c', offsetof(struct A501, m8), 1);
		dcStructField(at, 'j', offsetof(struct A501, m9), 1);
		dcStructField(at, 'c', offsetof(struct A501, m10), 1);
		dcStructField(at, 'c', offsetof(struct A501, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cdls> */
union  A502 { c m0; d m1; l m2; s m3; };
void f_cpA502(union  A502 *x, const union  A502 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA502(const union  A502 *x, const union  A502 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA502() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A502), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A502, m0), 1);
		dcStructField(at, 'd', offsetof(union  A502, m1), 1);
		dcStructField(at, 'l', offsetof(union  A502, m2), 1);
		dcStructField(at, 's', offsetof(union  A502, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cii} */
struct A503 { c m0; i m1; i m2; };
void f_cpA503(struct A503 *x, const struct A503 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA503(const struct A503 *x, const struct A503 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA503() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A503), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A503, m0), 1);
		dcStructField(at, 'i', offsetof(struct A503, m1), 1);
		dcStructField(at, 'i', offsetof(struct A503, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lj<icp>{i[8]dpslpdscjcc}dfif<cdls>{cii}pd> */
union  A504 { l m0; j m1; union  A500 m2; struct A501 m3; d m4; f m5; i m6; f m7; union  A502 m8; struct A503 m9; p m10; d m11; };
void f_cpA504(union  A504 *x, const union  A504 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA500(&x->m2, &y->m2); f_cpA501(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA502(&x->m8, &y->m8); f_cpA503(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA504(const union  A504 *x, const union  A504 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA500(&x->m2, &y->m2) && f_cmpA501(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA502(&x->m8, &y->m8) && f_cmpA503(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA504() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A504), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A504, m0), 1);
		dcStructField(at, 'j', offsetof(union  A504, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A504, m2), 1, f_touchdcstA500());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A504, m3), 1, f_touchdcstA501());
		dcStructField(at, 'd', offsetof(union  A504, m4), 1);
		dcStructField(at, 'f', offsetof(union  A504, m5), 1);
		dcStructField(at, 'i', offsetof(union  A504, m6), 1);
		dcStructField(at, 'f', offsetof(union  A504, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A504, m8), 1, f_touchdcstA502());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A504, m9), 1, f_touchdcstA503());
		dcStructField(at, 'p', offsetof(union  A504, m10), 1);
		dcStructField(at, 'd', offsetof(union  A504, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ij> */
union  A505 { i m0; j m1; };
void f_cpA505(union  A505 *x, const union  A505 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA505(const union  A505 *x, const union  A505 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA505() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A505), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A505, m0), 1);
		dcStructField(at, 'j', offsetof(union  A505, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cdjspdsfjdll> */
union  A506 { c m0; d m1; j m2; s m3; p m4; d m5; s m6; f m7; j m8; d m9; l m10; l m11; };
void f_cpA506(union  A506 *x, const union  A506 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA506(const union  A506 *x, const union  A506 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA506() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A506), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A506, m0), 1);
		dcStructField(at, 'd', offsetof(union  A506, m1), 1);
		dcStructField(at, 'j', offsetof(union  A506, m2), 1);
		dcStructField(at, 's', offsetof(union  A506, m3), 1);
		dcStructField(at, 'p', offsetof(union  A506, m4), 1);
		dcStructField(at, 'd', offsetof(union  A506, m5), 1);
		dcStructField(at, 's', offsetof(union  A506, m6), 1);
		dcStructField(at, 'f', offsetof(union  A506, m7), 1);
		dcStructField(at, 'j', offsetof(union  A506, m8), 1);
		dcStructField(at, 'd', offsetof(union  A506, m9), 1);
		dcStructField(at, 'l', offsetof(union  A506, m10), 1);
		dcStructField(at, 'l', offsetof(union  A506, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ilcj<ij>j<cdjspdsfjdll>cpjdc} */
struct A507 { i m0; l m1; c m2; j m3; union  A505 m4; j m5; union  A506 m6; c m7; p m8; j m9; d m10; c m11; };
void f_cpA507(struct A507 *x, const struct A507 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA505(&x->m4, &y->m4); x->m5 = y->m5; f_cpA506(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA507(const struct A507 *x, const struct A507 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA505(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA506(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA507() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A507), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A507, m0), 1);
		dcStructField(at, 'l', offsetof(struct A507, m1), 1);
		dcStructField(at, 'c', offsetof(struct A507, m2), 1);
		dcStructField(at, 'j', offsetof(struct A507, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A507, m4), 1, f_touchdcstA505());
		dcStructField(at, 'j', offsetof(struct A507, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A507, m6), 1, f_touchdcstA506());
		dcStructField(at, 'c', offsetof(struct A507, m7), 1);
		dcStructField(at, 'p', offsetof(struct A507, m8), 1);
		dcStructField(at, 'j', offsetof(struct A507, m9), 1);
		dcStructField(at, 'd', offsetof(struct A507, m10), 1);
		dcStructField(at, 'c', offsetof(struct A507, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cjcpfsij[8]ffji> */
union  A508 { c m0; j m1; c m2; p m3; f m4; s m5; i m6; j m7[8]; f m8; f m9; j m10; i m11; };
void f_cpA508(union  A508 *x, const union  A508 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; x->m7[7] = y->m7[7]; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA508(const union  A508 *x, const union  A508 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6] && x->m7[7] == y->m7[7] && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA508() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A508), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A508, m0), 1);
		dcStructField(at, 'j', offsetof(union  A508, m1), 1);
		dcStructField(at, 'c', offsetof(union  A508, m2), 1);
		dcStructField(at, 'p', offsetof(union  A508, m3), 1);
		dcStructField(at, 'f', offsetof(union  A508, m4), 1);
		dcStructField(at, 's', offsetof(union  A508, m5), 1);
		dcStructField(at, 'i', offsetof(union  A508, m6), 1);
		dcStructField(at, 'j', offsetof(union  A508, m7), 8);
		dcStructField(at, 'f', offsetof(union  A508, m8), 1);
		dcStructField(at, 'f', offsetof(union  A508, m9), 1);
		dcStructField(at, 'j', offsetof(union  A508, m10), 1);
		dcStructField(at, 'i', offsetof(union  A508, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<cjcpfsij[8]ffji>cpic<f>> */
union  A509 { union  A508 m0; c m1; p m2; i m3; c m4; union  A438 m5; };
void f_cpA509(union  A509 *x, const union  A509 *y) { f_cpA508(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA438(&x->m5, &y->m5); };
int f_cmpA509(const union  A509 *x, const union  A509 *y) { return f_cmpA508(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA438(&x->m5, &y->m5); };
DCstruct* f_touchdcstA509() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A509), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A509, m0), 1, f_touchdcstA508());
		dcStructField(at, 'c', offsetof(union  A509, m1), 1);
		dcStructField(at, 'p', offsetof(union  A509, m2), 1);
		dcStructField(at, 'i', offsetof(union  A509, m3), 1);
		dcStructField(at, 'c', offsetof(union  A509, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A509, m5), 1, f_touchdcstA438());
		dcCloseStruct(at);
	}
	return at;
};
/* <sp> */
union  A510 { s m0; p m1; };
void f_cpA510(union  A510 *x, const union  A510 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA510(const union  A510 *x, const union  A510 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA510() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A510), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A510, m0), 1);
		dcStructField(at, 'p', offsetof(union  A510, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ijc<lj<icp>{i[8]dpslpdscjcc}dfif<cdls>{cii}pd>{ilcj<ij>j<cdjspdsfjdll>cpjdc}cf<<cjcpfsij[8]ffji>cpic<f>>f<sp>> */
union  A511 { i m0; j m1; c m2; union  A504 m3; struct A507 m4; c m5; f m6; union  A509 m7; f m8; union  A510 m9; };
void f_cpA511(union  A511 *x, const union  A511 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA504(&x->m3, &y->m3); f_cpA507(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA509(&x->m7, &y->m7); x->m8 = y->m8; f_cpA510(&x->m9, &y->m9); };
int f_cmpA511(const union  A511 *x, const union  A511 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA504(&x->m3, &y->m3) && f_cmpA507(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA509(&x->m7, &y->m7) && x->m8 == y->m8 && f_cmpA510(&x->m9, &y->m9); };
DCstruct* f_touchdcstA511() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A511), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A511, m0), 1);
		dcStructField(at, 'j', offsetof(union  A511, m1), 1);
		dcStructField(at, 'c', offsetof(union  A511, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A511, m3), 1, f_touchdcstA504());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A511, m4), 1, f_touchdcstA507());
		dcStructField(at, 'c', offsetof(union  A511, m5), 1);
		dcStructField(at, 'f', offsetof(union  A511, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A511, m7), 1, f_touchdcstA509());
		dcStructField(at, 'f', offsetof(union  A511, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A511, m9), 1, f_touchdcstA510());
		dcCloseStruct(at);
	}
	return at;
};
/* <lc> */
union  A512 { l m0; c m1; };
void f_cpA512(union  A512 *x, const union  A512 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA512(const union  A512 *x, const union  A512 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA512() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A512), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A512, m0), 1);
		dcStructField(at, 'c', offsetof(union  A512, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {idlfipi} */
struct A513 { i m0; d m1; l m2; f m3; i m4; p m5; i m6; };
void f_cpA513(struct A513 *x, const struct A513 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA513(const struct A513 *x, const struct A513 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA513() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A513), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A513, m0), 1);
		dcStructField(at, 'd', offsetof(struct A513, m1), 1);
		dcStructField(at, 'l', offsetof(struct A513, m2), 1);
		dcStructField(at, 'f', offsetof(struct A513, m3), 1);
		dcStructField(at, 'i', offsetof(struct A513, m4), 1);
		dcStructField(at, 'p', offsetof(struct A513, m5), 1);
		dcStructField(at, 'i', offsetof(struct A513, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ic} */
struct A514 { i m0; c m1; };
void f_cpA514(struct A514 *x, const struct A514 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA514(const struct A514 *x, const struct A514 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA514() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A514), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A514, m0), 1);
		dcStructField(at, 'c', offsetof(struct A514, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iidscj{ic}sll<i>> */
union  A515 { i m0; i m1; d m2; s m3; c m4; j m5; struct A514 m6; s m7; l m8; l m9; union  A62 m10; };
void f_cpA515(union  A515 *x, const union  A515 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA514(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA62(&x->m10, &y->m10); };
int f_cmpA515(const union  A515 *x, const union  A515 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA514(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA62(&x->m10, &y->m10); };
DCstruct* f_touchdcstA515() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A515), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A515, m0), 1);
		dcStructField(at, 'i', offsetof(union  A515, m1), 1);
		dcStructField(at, 'd', offsetof(union  A515, m2), 1);
		dcStructField(at, 's', offsetof(union  A515, m3), 1);
		dcStructField(at, 'c', offsetof(union  A515, m4), 1);
		dcStructField(at, 'j', offsetof(union  A515, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A515, m6), 1, f_touchdcstA514());
		dcStructField(at, 's', offsetof(union  A515, m7), 1);
		dcStructField(at, 'l', offsetof(union  A515, m8), 1);
		dcStructField(at, 'l', offsetof(union  A515, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A515, m10), 1, f_touchdcstA62());
		dcCloseStruct(at);
	}
	return at;
};
/* {c[16]jcpcpljdipl} */
struct A516 { c m0[16]; j m1; c m2; p m3; c m4; p m5; l m6; j m7; d m8; i m9; p m10; l m11; };
void f_cpA516(struct A516 *x, const struct A516 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m0[12] = y->m0[12]; x->m0[13] = y->m0[13]; x->m0[14] = y->m0[14]; x->m0[15] = y->m0[15]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA516(const struct A516 *x, const struct A516 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m0[12] == y->m0[12] && x->m0[13] == y->m0[13] && x->m0[14] == y->m0[14] && x->m0[15] == y->m0[15] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA516() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A516), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A516, m0), 16);
		dcStructField(at, 'j', offsetof(struct A516, m1), 1);
		dcStructField(at, 'c', offsetof(struct A516, m2), 1);
		dcStructField(at, 'p', offsetof(struct A516, m3), 1);
		dcStructField(at, 'c', offsetof(struct A516, m4), 1);
		dcStructField(at, 'p', offsetof(struct A516, m5), 1);
		dcStructField(at, 'l', offsetof(struct A516, m6), 1);
		dcStructField(at, 'j', offsetof(struct A516, m7), 1);
		dcStructField(at, 'd', offsetof(struct A516, m8), 1);
		dcStructField(at, 'i', offsetof(struct A516, m9), 1);
		dcStructField(at, 'p', offsetof(struct A516, m10), 1);
		dcStructField(at, 'l', offsetof(struct A516, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dfd} */
struct A517 { d m0; f m1; d m2; };
void f_cpA517(struct A517 *x, const struct A517 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA517(const struct A517 *x, const struct A517 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA517() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A517), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A517, m0), 1);
		dcStructField(at, 'f', offsetof(struct A517, m1), 1);
		dcStructField(at, 'd', offsetof(struct A517, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{dfd}c> */
union  A518 { struct A517 m0; c m1; };
void f_cpA518(union  A518 *x, const union  A518 *y) { f_cpA517(&x->m0, &y->m0); x->m1 = y->m1; };
int f_cmpA518(const union  A518 *x, const union  A518 *y) { return f_cmpA517(&x->m0, &y->m0) && x->m1 == y->m1; };
DCstruct* f_touchdcstA518() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A518), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A518, m0), 1, f_touchdcstA517());
		dcStructField(at, 'c', offsetof(union  A518, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{idlfipi}{d}ffp<iidscj{ic}sll<i>>jf{c[16]jcpcpljdipl}<{dfd}c>j} */
struct A519 { struct A513 m0; struct A47 m1; f m2; f m3; p m4; union  A515 m5; j m6; f m7; struct A516 m8; union  A518 m9; j m10; };
void f_cpA519(struct A519 *x, const struct A519 *y) { f_cpA513(&x->m0, &y->m0); f_cpA47(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA515(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; f_cpA516(&x->m8, &y->m8); f_cpA518(&x->m9, &y->m9); x->m10 = y->m10; };
int f_cmpA519(const struct A519 *x, const struct A519 *y) { return f_cmpA513(&x->m0, &y->m0) && f_cmpA47(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA515(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA516(&x->m8, &y->m8) && f_cmpA518(&x->m9, &y->m9) && x->m10 == y->m10; };
DCstruct* f_touchdcstA519() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A519), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A519, m0), 1, f_touchdcstA513());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A519, m1), 1, f_touchdcstA47());
		dcStructField(at, 'f', offsetof(struct A519, m2), 1);
		dcStructField(at, 'f', offsetof(struct A519, m3), 1);
		dcStructField(at, 'p', offsetof(struct A519, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A519, m5), 1, f_touchdcstA515());
		dcStructField(at, 'j', offsetof(struct A519, m6), 1);
		dcStructField(at, 'f', offsetof(struct A519, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A519, m8), 1, f_touchdcstA516());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A519, m9), 1, f_touchdcstA518());
		dcStructField(at, 'j', offsetof(struct A519, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fdflp> */
union  A520 { f m0; d m1; f m2; l m3; p m4; };
void f_cpA520(union  A520 *x, const union  A520 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA520(const union  A520 *x, const union  A520 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA520() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A520), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A520, m0), 1);
		dcStructField(at, 'd', offsetof(union  A520, m1), 1);
		dcStructField(at, 'f', offsetof(union  A520, m2), 1);
		dcStructField(at, 'l', offsetof(union  A520, m3), 1);
		dcStructField(at, 'p', offsetof(union  A520, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <scjcs[12]scspipi> */
union  A521 { s m0; c m1; j m2; c m3; s m4[12]; s m5; c m6; s m7; p m8; i m9; p m10; i m11; };
void f_cpA521(union  A521 *x, const union  A521 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA521(const union  A521 *x, const union  A521 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA521() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A521), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A521, m0), 1);
		dcStructField(at, 'c', offsetof(union  A521, m1), 1);
		dcStructField(at, 'j', offsetof(union  A521, m2), 1);
		dcStructField(at, 'c', offsetof(union  A521, m3), 1);
		dcStructField(at, 's', offsetof(union  A521, m4), 12);
		dcStructField(at, 's', offsetof(union  A521, m5), 1);
		dcStructField(at, 'c', offsetof(union  A521, m6), 1);
		dcStructField(at, 's', offsetof(union  A521, m7), 1);
		dcStructField(at, 'p', offsetof(union  A521, m8), 1);
		dcStructField(at, 'i', offsetof(union  A521, m9), 1);
		dcStructField(at, 'p', offsetof(union  A521, m10), 1);
		dcStructField(at, 'i', offsetof(union  A521, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lfcpfdlpfidl} */
struct A522 { l m0; f m1; c m2; p m3; f m4; d m5; l m6; p m7; f m8; i m9; d m10; l m11; };
void f_cpA522(struct A522 *x, const struct A522 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA522(const struct A522 *x, const struct A522 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA522() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A522), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A522, m0), 1);
		dcStructField(at, 'f', offsetof(struct A522, m1), 1);
		dcStructField(at, 'c', offsetof(struct A522, m2), 1);
		dcStructField(at, 'p', offsetof(struct A522, m3), 1);
		dcStructField(at, 'f', offsetof(struct A522, m4), 1);
		dcStructField(at, 'd', offsetof(struct A522, m5), 1);
		dcStructField(at, 'l', offsetof(struct A522, m6), 1);
		dcStructField(at, 'p', offsetof(struct A522, m7), 1);
		dcStructField(at, 'f', offsetof(struct A522, m8), 1);
		dcStructField(at, 'i', offsetof(struct A522, m9), 1);
		dcStructField(at, 'd', offsetof(struct A522, m10), 1);
		dcStructField(at, 'l', offsetof(struct A522, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dsscifslddfj} */
struct A523 { d m0; s m1; s m2; c m3; i m4; f m5; s m6; l m7; d m8; d m9; f m10; j m11; };
void f_cpA523(struct A523 *x, const struct A523 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA523(const struct A523 *x, const struct A523 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA523() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A523), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A523, m0), 1);
		dcStructField(at, 's', offsetof(struct A523, m1), 1);
		dcStructField(at, 's', offsetof(struct A523, m2), 1);
		dcStructField(at, 'c', offsetof(struct A523, m3), 1);
		dcStructField(at, 'i', offsetof(struct A523, m4), 1);
		dcStructField(at, 'f', offsetof(struct A523, m5), 1);
		dcStructField(at, 's', offsetof(struct A523, m6), 1);
		dcStructField(at, 'l', offsetof(struct A523, m7), 1);
		dcStructField(at, 'd', offsetof(struct A523, m8), 1);
		dcStructField(at, 'd', offsetof(struct A523, m9), 1);
		dcStructField(at, 'f', offsetof(struct A523, m10), 1);
		dcStructField(at, 'j', offsetof(struct A523, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <djdi> */
union  A524 { d m0; j m1; d m2; i m3; };
void f_cpA524(union  A524 *x, const union  A524 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA524(const union  A524 *x, const union  A524 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA524() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A524), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A524, m0), 1);
		dcStructField(at, 'j', offsetof(union  A524, m1), 1);
		dcStructField(at, 'd', offsetof(union  A524, m2), 1);
		dcStructField(at, 'i', offsetof(union  A524, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pfj<fdflp><scjcs[12]scspipi>{lfcpfdlpfidl}jl{dsscifslddfj}i<djdi>j} */
struct A525 { p m0; f m1; j m2; union  A520 m3; union  A521 m4; struct A522 m5; j m6; l m7; struct A523 m8; i m9; union  A524 m10; j m11; };
void f_cpA525(struct A525 *x, const struct A525 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA520(&x->m3, &y->m3); f_cpA521(&x->m4, &y->m4); f_cpA522(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; f_cpA523(&x->m8, &y->m8); x->m9 = y->m9; f_cpA524(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA525(const struct A525 *x, const struct A525 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA520(&x->m3, &y->m3) && f_cmpA521(&x->m4, &y->m4) && f_cmpA522(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA523(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA524(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA525() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A525), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A525, m0), 1);
		dcStructField(at, 'f', offsetof(struct A525, m1), 1);
		dcStructField(at, 'j', offsetof(struct A525, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A525, m3), 1, f_touchdcstA520());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A525, m4), 1, f_touchdcstA521());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A525, m5), 1, f_touchdcstA522());
		dcStructField(at, 'j', offsetof(struct A525, m6), 1);
		dcStructField(at, 'l', offsetof(struct A525, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A525, m8), 1, f_touchdcstA523());
		dcStructField(at, 'i', offsetof(struct A525, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A525, m10), 1, f_touchdcstA524());
		dcStructField(at, 'j', offsetof(struct A525, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dd} */
struct A526 { d m0; d m1; };
void f_cpA526(struct A526 *x, const struct A526 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA526(const struct A526 *x, const struct A526 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA526() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A526), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A526, m0), 1);
		dcStructField(at, 'd', offsetof(struct A526, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fjil{dd}di> */
union  A527 { f m0; j m1; i m2; l m3; struct A526 m4; d m5; i m6; };
void f_cpA527(union  A527 *x, const union  A527 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA526(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA527(const union  A527 *x, const union  A527 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA526(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA527() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A527), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A527, m0), 1);
		dcStructField(at, 'j', offsetof(union  A527, m1), 1);
		dcStructField(at, 'i', offsetof(union  A527, m2), 1);
		dcStructField(at, 'l', offsetof(union  A527, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A527, m4), 1, f_touchdcstA526());
		dcStructField(at, 'd', offsetof(union  A527, m5), 1);
		dcStructField(at, 'i', offsetof(union  A527, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lcl[10]iildll> */
union  A528 { l m0; c m1; l m2[10]; i m3; i m4; l m5; d m6; l m7; l m8; };
void f_cpA528(union  A528 *x, const union  A528 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA528(const union  A528 *x, const union  A528 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA528() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A528), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A528, m0), 1);
		dcStructField(at, 'c', offsetof(union  A528, m1), 1);
		dcStructField(at, 'l', offsetof(union  A528, m2), 10);
		dcStructField(at, 'i', offsetof(union  A528, m3), 1);
		dcStructField(at, 'i', offsetof(union  A528, m4), 1);
		dcStructField(at, 'l', offsetof(union  A528, m5), 1);
		dcStructField(at, 'd', offsetof(union  A528, m6), 1);
		dcStructField(at, 'l', offsetof(union  A528, m7), 1);
		dcStructField(at, 'l', offsetof(union  A528, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <djijlfff<lcl[10]iildll>pjs> */
union  A529 { d m0; j m1; i m2; j m3; l m4; f m5; f m6; f m7; union  A528 m8; p m9; j m10; s m11; };
void f_cpA529(union  A529 *x, const union  A529 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA528(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA529(const union  A529 *x, const union  A529 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA528(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA529() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A529), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A529, m0), 1);
		dcStructField(at, 'j', offsetof(union  A529, m1), 1);
		dcStructField(at, 'i', offsetof(union  A529, m2), 1);
		dcStructField(at, 'j', offsetof(union  A529, m3), 1);
		dcStructField(at, 'l', offsetof(union  A529, m4), 1);
		dcStructField(at, 'f', offsetof(union  A529, m5), 1);
		dcStructField(at, 'f', offsetof(union  A529, m6), 1);
		dcStructField(at, 'f', offsetof(union  A529, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A529, m8), 1, f_touchdcstA528());
		dcStructField(at, 'p', offsetof(union  A529, m9), 1);
		dcStructField(at, 'j', offsetof(union  A529, m10), 1);
		dcStructField(at, 's', offsetof(union  A529, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {df} */
struct A530 { d m0; f m1; };
void f_cpA530(struct A530 *x, const struct A530 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA530(const struct A530 *x, const struct A530 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA530() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A530), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A530, m0), 1);
		dcStructField(at, 'f', offsetof(struct A530, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {isjpf[6]ifdlp{df}c} */
struct A531 { i m0; s m1; j m2; p m3; f m4[6]; i m5; f m6; d m7; l m8; p m9; struct A530 m10; c m11; };
void f_cpA531(struct A531 *x, const struct A531 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA530(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA531(const struct A531 *x, const struct A531 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA530(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA531() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A531), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A531, m0), 1);
		dcStructField(at, 's', offsetof(struct A531, m1), 1);
		dcStructField(at, 'j', offsetof(struct A531, m2), 1);
		dcStructField(at, 'p', offsetof(struct A531, m3), 1);
		dcStructField(at, 'f', offsetof(struct A531, m4), 6);
		dcStructField(at, 'i', offsetof(struct A531, m5), 1);
		dcStructField(at, 'f', offsetof(struct A531, m6), 1);
		dcStructField(at, 'd', offsetof(struct A531, m7), 1);
		dcStructField(at, 'l', offsetof(struct A531, m8), 1);
		dcStructField(at, 'p', offsetof(struct A531, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A531, m10), 1, f_touchdcstA530());
		dcStructField(at, 'c', offsetof(struct A531, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dscllfdpsjcd} */
struct A532 { d m0; s m1; c m2; l m3; l m4; f m5; d m6; p m7; s m8; j m9; c m10; d m11; };
void f_cpA532(struct A532 *x, const struct A532 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA532(const struct A532 *x, const struct A532 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA532() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A532), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A532, m0), 1);
		dcStructField(at, 's', offsetof(struct A532, m1), 1);
		dcStructField(at, 'c', offsetof(struct A532, m2), 1);
		dcStructField(at, 'l', offsetof(struct A532, m3), 1);
		dcStructField(at, 'l', offsetof(struct A532, m4), 1);
		dcStructField(at, 'f', offsetof(struct A532, m5), 1);
		dcStructField(at, 'd', offsetof(struct A532, m6), 1);
		dcStructField(at, 'p', offsetof(struct A532, m7), 1);
		dcStructField(at, 's', offsetof(struct A532, m8), 1);
		dcStructField(at, 'j', offsetof(struct A532, m9), 1);
		dcStructField(at, 'c', offsetof(struct A532, m10), 1);
		dcStructField(at, 'd', offsetof(struct A532, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fcs} */
struct A533 { f m0; c m1; s m2; };
void f_cpA533(struct A533 *x, const struct A533 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA533(const struct A533 *x, const struct A533 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA533() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A533), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A533, m0), 1);
		dcStructField(at, 'c', offsetof(struct A533, m1), 1);
		dcStructField(at, 's', offsetof(struct A533, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lcslpsjffcsj> */
union  A534 { l m0; c m1; s m2; l m3; p m4; s m5; j m6; f m7; f m8; c m9; s m10; j m11; };
void f_cpA534(union  A534 *x, const union  A534 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA534(const union  A534 *x, const union  A534 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA534() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A534), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A534, m0), 1);
		dcStructField(at, 'c', offsetof(union  A534, m1), 1);
		dcStructField(at, 's', offsetof(union  A534, m2), 1);
		dcStructField(at, 'l', offsetof(union  A534, m3), 1);
		dcStructField(at, 'p', offsetof(union  A534, m4), 1);
		dcStructField(at, 's', offsetof(union  A534, m5), 1);
		dcStructField(at, 'j', offsetof(union  A534, m6), 1);
		dcStructField(at, 'f', offsetof(union  A534, m7), 1);
		dcStructField(at, 'f', offsetof(union  A534, m8), 1);
		dcStructField(at, 'c', offsetof(union  A534, m9), 1);
		dcStructField(at, 's', offsetof(union  A534, m10), 1);
		dcStructField(at, 'j', offsetof(union  A534, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <spifllfjiidp> */
union  A535 { s m0; p m1; i m2; f m3; l m4; l m5; f m6; j m7; i m8; i m9; d m10; p m11; };
void f_cpA535(union  A535 *x, const union  A535 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA535(const union  A535 *x, const union  A535 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA535() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A535), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A535, m0), 1);
		dcStructField(at, 'p', offsetof(union  A535, m1), 1);
		dcStructField(at, 'i', offsetof(union  A535, m2), 1);
		dcStructField(at, 'f', offsetof(union  A535, m3), 1);
		dcStructField(at, 'l', offsetof(union  A535, m4), 1);
		dcStructField(at, 'l', offsetof(union  A535, m5), 1);
		dcStructField(at, 'f', offsetof(union  A535, m6), 1);
		dcStructField(at, 'j', offsetof(union  A535, m7), 1);
		dcStructField(at, 'i', offsetof(union  A535, m8), 1);
		dcStructField(at, 'i', offsetof(union  A535, m9), 1);
		dcStructField(at, 'd', offsetof(union  A535, m10), 1);
		dcStructField(at, 'p', offsetof(union  A535, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<lcslpsjffcsj>j<spifllfjiidp>djj> */
union  A536 { union  A534 m0; j m1; union  A535 m2; d m3; j m4; j m5; };
void f_cpA536(union  A536 *x, const union  A536 *y) { f_cpA534(&x->m0, &y->m0); x->m1 = y->m1; f_cpA535(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA536(const union  A536 *x, const union  A536 *y) { return f_cmpA534(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA535(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA536() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A536), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A536, m0), 1, f_touchdcstA534());
		dcStructField(at, 'j', offsetof(union  A536, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A536, m2), 1, f_touchdcstA535());
		dcStructField(at, 'd', offsetof(union  A536, m3), 1);
		dcStructField(at, 'j', offsetof(union  A536, m4), 1);
		dcStructField(at, 'j', offsetof(union  A536, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lfc} */
struct A537 { l m0; f m1; c m2; };
void f_cpA537(struct A537 *x, const struct A537 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA537(const struct A537 *x, const struct A537 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA537() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A537), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A537, m0), 1);
		dcStructField(at, 'f', offsetof(struct A537, m1), 1);
		dcStructField(at, 'c', offsetof(struct A537, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <spcs{lfc}> */
union  A538 { s m0; p m1; c m2; s m3; struct A537 m4; };
void f_cpA538(union  A538 *x, const union  A538 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA537(&x->m4, &y->m4); };
int f_cmpA538(const union  A538 *x, const union  A538 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA537(&x->m4, &y->m4); };
DCstruct* f_touchdcstA538() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A538), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A538, m0), 1);
		dcStructField(at, 'p', offsetof(union  A538, m1), 1);
		dcStructField(at, 'c', offsetof(union  A538, m2), 1);
		dcStructField(at, 's', offsetof(union  A538, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A538, m4), 1, f_touchdcstA537());
		dcCloseStruct(at);
	}
	return at;
};
/* <flsi> */
union  A539 { f m0; l m1; s m2; i m3; };
void f_cpA539(union  A539 *x, const union  A539 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA539(const union  A539 *x, const union  A539 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA539() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A539), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A539, m0), 1);
		dcStructField(at, 'l', offsetof(union  A539, m1), 1);
		dcStructField(at, 's', offsetof(union  A539, m2), 1);
		dcStructField(at, 'i', offsetof(union  A539, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <s[15]i{isjpf[6]ifdlp{df}c}l{dscllfdpsjcd}{fcs}{p}i<<lcslpsjffcsj>j<spifllfjiidp>djj><spcs{lfc}>s<flsi>> */
union  A540 { s m0[15]; i m1; struct A531 m2; l m3; struct A532 m4; struct A533 m5; struct A33 m6; i m7; union  A536 m8; union  A538 m9; s m10; union  A539 m11; };
void f_cpA540(union  A540 *x, const union  A540 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m0[12] = y->m0[12]; x->m0[13] = y->m0[13]; x->m0[14] = y->m0[14]; x->m1 = y->m1; f_cpA531(&x->m2, &y->m2); x->m3 = y->m3; f_cpA532(&x->m4, &y->m4); f_cpA533(&x->m5, &y->m5); f_cpA33(&x->m6, &y->m6); x->m7 = y->m7; f_cpA536(&x->m8, &y->m8); f_cpA538(&x->m9, &y->m9); x->m10 = y->m10; f_cpA539(&x->m11, &y->m11); };
int f_cmpA540(const union  A540 *x, const union  A540 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m0[12] == y->m0[12] && x->m0[13] == y->m0[13] && x->m0[14] == y->m0[14] && x->m1 == y->m1 && f_cmpA531(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA532(&x->m4, &y->m4) && f_cmpA533(&x->m5, &y->m5) && f_cmpA33(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA536(&x->m8, &y->m8) && f_cmpA538(&x->m9, &y->m9) && x->m10 == y->m10 && f_cmpA539(&x->m11, &y->m11); };
DCstruct* f_touchdcstA540() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A540), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A540, m0), 15);
		dcStructField(at, 'i', offsetof(union  A540, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A540, m2), 1, f_touchdcstA531());
		dcStructField(at, 'l', offsetof(union  A540, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A540, m4), 1, f_touchdcstA532());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A540, m5), 1, f_touchdcstA533());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A540, m6), 1, f_touchdcstA33());
		dcStructField(at, 'i', offsetof(union  A540, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A540, m8), 1, f_touchdcstA536());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A540, m9), 1, f_touchdcstA538());
		dcStructField(at, 's', offsetof(union  A540, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A540, m11), 1, f_touchdcstA539());
		dcCloseStruct(at);
	}
	return at;
};
/* {pd} */
struct A541 { p m0; d m1; };
void f_cpA541(struct A541 *x, const struct A541 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA541(const struct A541 *x, const struct A541 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA541() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A541), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A541, m0), 1);
		dcStructField(at, 'd', offsetof(struct A541, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jjppijcpcs} */
struct A542 { j m0; j m1; p m2; p m3; i m4; j m5; c m6; p m7; c m8; s m9; };
void f_cpA542(struct A542 *x, const struct A542 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA542(const struct A542 *x, const struct A542 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA542() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A542), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A542, m0), 1);
		dcStructField(at, 'j', offsetof(struct A542, m1), 1);
		dcStructField(at, 'p', offsetof(struct A542, m2), 1);
		dcStructField(at, 'p', offsetof(struct A542, m3), 1);
		dcStructField(at, 'i', offsetof(struct A542, m4), 1);
		dcStructField(at, 'j', offsetof(struct A542, m5), 1);
		dcStructField(at, 'c', offsetof(struct A542, m6), 1);
		dcStructField(at, 'p', offsetof(struct A542, m7), 1);
		dcStructField(at, 'c', offsetof(struct A542, m8), 1);
		dcStructField(at, 's', offsetof(struct A542, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jspscclpps> */
union  A543 { j m0; s m1; p m2; s m3; c m4; c m5; l m6; p m7; p m8; s m9; };
void f_cpA543(union  A543 *x, const union  A543 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA543(const union  A543 *x, const union  A543 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA543() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A543), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A543, m0), 1);
		dcStructField(at, 's', offsetof(union  A543, m1), 1);
		dcStructField(at, 'p', offsetof(union  A543, m2), 1);
		dcStructField(at, 's', offsetof(union  A543, m3), 1);
		dcStructField(at, 'c', offsetof(union  A543, m4), 1);
		dcStructField(at, 'c', offsetof(union  A543, m5), 1);
		dcStructField(at, 'l', offsetof(union  A543, m6), 1);
		dcStructField(at, 'p', offsetof(union  A543, m7), 1);
		dcStructField(at, 'p', offsetof(union  A543, m8), 1);
		dcStructField(at, 's', offsetof(union  A543, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fd> */
union  A544 { f m0; d m1; };
void f_cpA544(union  A544 *x, const union  A544 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA544(const union  A544 *x, const union  A544 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA544() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A544), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A544, m0), 1);
		dcStructField(at, 'd', offsetof(union  A544, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cicls} */
struct A545 { c m0; i m1; c m2; l m3; s m4; };
void f_cpA545(struct A545 *x, const struct A545 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA545(const struct A545 *x, const struct A545 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA545() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A545), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A545, m0), 1);
		dcStructField(at, 'i', offsetof(struct A545, m1), 1);
		dcStructField(at, 'c', offsetof(struct A545, m2), 1);
		dcStructField(at, 'l', offsetof(struct A545, m3), 1);
		dcStructField(at, 's', offsetof(struct A545, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sl{cicls}slscclsds} */
struct A546 { s m0; l m1; struct A545 m2; s m3; l m4; s m5; c m6; c m7; l m8; s m9; d m10; s m11; };
void f_cpA546(struct A546 *x, const struct A546 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA545(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA546(const struct A546 *x, const struct A546 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA545(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA546() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A546), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A546, m0), 1);
		dcStructField(at, 'l', offsetof(struct A546, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A546, m2), 1, f_touchdcstA545());
		dcStructField(at, 's', offsetof(struct A546, m3), 1);
		dcStructField(at, 'l', offsetof(struct A546, m4), 1);
		dcStructField(at, 's', offsetof(struct A546, m5), 1);
		dcStructField(at, 'c', offsetof(struct A546, m6), 1);
		dcStructField(at, 'c', offsetof(struct A546, m7), 1);
		dcStructField(at, 'l', offsetof(struct A546, m8), 1);
		dcStructField(at, 's', offsetof(struct A546, m9), 1);
		dcStructField(at, 'd', offsetof(struct A546, m10), 1);
		dcStructField(at, 's', offsetof(struct A546, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {flpp<fd>jis{sl{cicls}slscclsds}} */
struct A547 { f m0; l m1; p m2; p m3; union  A544 m4; j m5; i m6; s m7; struct A546 m8; };
void f_cpA547(struct A547 *x, const struct A547 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA544(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA546(&x->m8, &y->m8); };
int f_cmpA547(const struct A547 *x, const struct A547 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA544(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA546(&x->m8, &y->m8); };
DCstruct* f_touchdcstA547() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A547), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A547, m0), 1);
		dcStructField(at, 'l', offsetof(struct A547, m1), 1);
		dcStructField(at, 'p', offsetof(struct A547, m2), 1);
		dcStructField(at, 'p', offsetof(struct A547, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A547, m4), 1, f_touchdcstA544());
		dcStructField(at, 'j', offsetof(struct A547, m5), 1);
		dcStructField(at, 'i', offsetof(struct A547, m6), 1);
		dcStructField(at, 's', offsetof(struct A547, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A547, m8), 1, f_touchdcstA546());
		dcCloseStruct(at);
	}
	return at;
};
/* <lf[4]d> */
union  A548 { l m0; f m1[4]; d m2; };
void f_cpA548(union  A548 *x, const union  A548 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m2 = y->m2; };
int f_cmpA548(const union  A548 *x, const union  A548 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m2 == y->m2; };
DCstruct* f_touchdcstA548() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A548), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A548, m0), 1);
		dcStructField(at, 'f', offsetof(union  A548, m1), 4);
		dcStructField(at, 'd', offsetof(union  A548, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpf> */
union  A549 { c m0; p m1; f m2; };
void f_cpA549(union  A549 *x, const union  A549 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA549(const union  A549 *x, const union  A549 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA549() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A549), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A549, m0), 1);
		dcStructField(at, 'p', offsetof(union  A549, m1), 1);
		dcStructField(at, 'f', offsetof(union  A549, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cccc[3]<cpf>i} */
struct A550 { c m0; c m1; c m2; c m3[3]; union  A549 m4; i m5; };
void f_cpA550(struct A550 *x, const struct A550 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; f_cpA549(&x->m4, &y->m4); x->m5 = y->m5; };
int f_cmpA550(const struct A550 *x, const struct A550 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && f_cmpA549(&x->m4, &y->m4) && x->m5 == y->m5; };
DCstruct* f_touchdcstA550() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A550), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A550, m0), 1);
		dcStructField(at, 'c', offsetof(struct A550, m1), 1);
		dcStructField(at, 'c', offsetof(struct A550, m2), 1);
		dcStructField(at, 'c', offsetof(struct A550, m3), 3);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A550, m4), 1, f_touchdcstA549());
		dcStructField(at, 'i', offsetof(struct A550, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <clsifsjjd> */
union  A551 { c m0; l m1; s m2; i m3; f m4; s m5; j m6; j m7; d m8; };
void f_cpA551(union  A551 *x, const union  A551 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA551(const union  A551 *x, const union  A551 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA551() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A551), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A551, m0), 1);
		dcStructField(at, 'l', offsetof(union  A551, m1), 1);
		dcStructField(at, 's', offsetof(union  A551, m2), 1);
		dcStructField(at, 'i', offsetof(union  A551, m3), 1);
		dcStructField(at, 'f', offsetof(union  A551, m4), 1);
		dcStructField(at, 's', offsetof(union  A551, m5), 1);
		dcStructField(at, 'j', offsetof(union  A551, m6), 1);
		dcStructField(at, 'j', offsetof(union  A551, m7), 1);
		dcStructField(at, 'd', offsetof(union  A551, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fcjjss> */
union  A552 { f m0; c m1; j m2; j m3; s m4; s m5; };
void f_cpA552(union  A552 *x, const union  A552 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA552(const union  A552 *x, const union  A552 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA552() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A552), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A552, m0), 1);
		dcStructField(at, 'c', offsetof(union  A552, m1), 1);
		dcStructField(at, 'j', offsetof(union  A552, m2), 1);
		dcStructField(at, 'j', offsetof(union  A552, m3), 1);
		dcStructField(at, 's', offsetof(union  A552, m4), 1);
		dcStructField(at, 's', offsetof(union  A552, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<clsifsjjd>pisc<fcjjss>[2]si> */
union  A553 { union  A551 m0; p m1; i m2; s m3; c m4; union  A552 m5[2]; s m6; i m7; };
void f_cpA553(union  A553 *x, const union  A553 *y) { f_cpA551(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA552(&x->m5[0], &y->m5[0]); f_cpA552(&x->m5[1], &y->m5[1]); x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA553(const union  A553 *x, const union  A553 *y) { return f_cmpA551(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA552(&x->m5[0], &y->m5[0]) && f_cmpA552(&x->m5[1], &y->m5[1]) && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA553() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A553), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A553, m0), 1, f_touchdcstA551());
		dcStructField(at, 'p', offsetof(union  A553, m1), 1);
		dcStructField(at, 'i', offsetof(union  A553, m2), 1);
		dcStructField(at, 's', offsetof(union  A553, m3), 1);
		dcStructField(at, 'c', offsetof(union  A553, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A553, m5), 2, f_touchdcstA552());
		dcStructField(at, 's', offsetof(union  A553, m6), 1);
		dcStructField(at, 'i', offsetof(union  A553, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dccll<lf[4]d>{cccc[3]<cpf>i}is<<clsifsjjd>pisc<fcjjss>[2]si>lp} */
struct A554 { d m0; c m1; c m2; l m3; l m4; union  A548 m5; struct A550 m6; i m7; s m8; union  A553 m9; l m10; p m11; };
void f_cpA554(struct A554 *x, const struct A554 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA548(&x->m5, &y->m5); f_cpA550(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; f_cpA553(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA554(const struct A554 *x, const struct A554 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA548(&x->m5, &y->m5) && f_cmpA550(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA553(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA554() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A554), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A554, m0), 1);
		dcStructField(at, 'c', offsetof(struct A554, m1), 1);
		dcStructField(at, 'c', offsetof(struct A554, m2), 1);
		dcStructField(at, 'l', offsetof(struct A554, m3), 1);
		dcStructField(at, 'l', offsetof(struct A554, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A554, m5), 1, f_touchdcstA548());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A554, m6), 1, f_touchdcstA550());
		dcStructField(at, 'i', offsetof(struct A554, m7), 1);
		dcStructField(at, 's', offsetof(struct A554, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A554, m9), 1, f_touchdcstA553());
		dcStructField(at, 'l', offsetof(struct A554, m10), 1);
		dcStructField(at, 'p', offsetof(struct A554, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sjf{l}} */
struct A555 { s m0; j m1; f m2; struct A141 m3; };
void f_cpA555(struct A555 *x, const struct A555 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA141(&x->m3, &y->m3); };
int f_cmpA555(const struct A555 *x, const struct A555 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA141(&x->m3, &y->m3); };
DCstruct* f_touchdcstA555() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A555), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A555, m0), 1);
		dcStructField(at, 'j', offsetof(struct A555, m1), 1);
		dcStructField(at, 'f', offsetof(struct A555, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A555, m3), 1, f_touchdcstA141());
		dcCloseStruct(at);
	}
	return at;
};
/* {if} */
struct A556 { i m0; f m1; };
void f_cpA556(struct A556 *x, const struct A556 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA556(const struct A556 *x, const struct A556 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA556() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A556), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A556, m0), 1);
		dcStructField(at, 'f', offsetof(struct A556, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lfpjf> */
union  A557 { l m0; f m1; p m2; j m3; f m4; };
void f_cpA557(union  A557 *x, const union  A557 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA557(const union  A557 *x, const union  A557 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA557() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A557), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A557, m0), 1);
		dcStructField(at, 'f', offsetof(union  A557, m1), 1);
		dcStructField(at, 'p', offsetof(union  A557, m2), 1);
		dcStructField(at, 'j', offsetof(union  A557, m3), 1);
		dcStructField(at, 'f', offsetof(union  A557, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <isjdciffjcf> */
union  A558 { i m0; s m1; j m2; d m3; c m4; i m5; f m6; f m7; j m8; c m9; f m10; };
void f_cpA558(union  A558 *x, const union  A558 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA558(const union  A558 *x, const union  A558 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA558() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A558), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A558, m0), 1);
		dcStructField(at, 's', offsetof(union  A558, m1), 1);
		dcStructField(at, 'j', offsetof(union  A558, m2), 1);
		dcStructField(at, 'd', offsetof(union  A558, m3), 1);
		dcStructField(at, 'c', offsetof(union  A558, m4), 1);
		dcStructField(at, 'i', offsetof(union  A558, m5), 1);
		dcStructField(at, 'f', offsetof(union  A558, m6), 1);
		dcStructField(at, 'f', offsetof(union  A558, m7), 1);
		dcStructField(at, 'j', offsetof(union  A558, m8), 1);
		dcStructField(at, 'c', offsetof(union  A558, m9), 1);
		dcStructField(at, 'f', offsetof(union  A558, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cpcfifjdlfpj} */
struct A559 { c m0; p m1; c m2; f m3; i m4; f m5; j m6; d m7; l m8; f m9; p m10; j m11; };
void f_cpA559(struct A559 *x, const struct A559 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA559(const struct A559 *x, const struct A559 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA559() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A559), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A559, m0), 1);
		dcStructField(at, 'p', offsetof(struct A559, m1), 1);
		dcStructField(at, 'c', offsetof(struct A559, m2), 1);
		dcStructField(at, 'f', offsetof(struct A559, m3), 1);
		dcStructField(at, 'i', offsetof(struct A559, m4), 1);
		dcStructField(at, 'f', offsetof(struct A559, m5), 1);
		dcStructField(at, 'j', offsetof(struct A559, m6), 1);
		dcStructField(at, 'd', offsetof(struct A559, m7), 1);
		dcStructField(at, 'l', offsetof(struct A559, m8), 1);
		dcStructField(at, 'f', offsetof(struct A559, m9), 1);
		dcStructField(at, 'p', offsetof(struct A559, m10), 1);
		dcStructField(at, 'j', offsetof(struct A559, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cjjdpfcf[3]lc} */
struct A560 { c m0; j m1; j m2; d m3; p m4; f m5; c m6; f m7[3]; l m8; c m9; };
void f_cpA560(struct A560 *x, const struct A560 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA560(const struct A560 *x, const struct A560 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA560() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A560), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A560, m0), 1);
		dcStructField(at, 'j', offsetof(struct A560, m1), 1);
		dcStructField(at, 'j', offsetof(struct A560, m2), 1);
		dcStructField(at, 'd', offsetof(struct A560, m3), 1);
		dcStructField(at, 'p', offsetof(struct A560, m4), 1);
		dcStructField(at, 'f', offsetof(struct A560, m5), 1);
		dcStructField(at, 'c', offsetof(struct A560, m6), 1);
		dcStructField(at, 'f', offsetof(struct A560, m7), 3);
		dcStructField(at, 'l', offsetof(struct A560, m8), 1);
		dcStructField(at, 'c', offsetof(struct A560, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {i{if}<lfpjf><isjdciffjcf>{cpcfifjdlfpj}icis{cjjdpfcf[3]lc}jp} */
struct A561 { i m0; struct A556 m1; union  A557 m2; union  A558 m3; struct A559 m4; i m5; c m6; i m7; s m8; struct A560 m9; j m10; p m11; };
void f_cpA561(struct A561 *x, const struct A561 *y) { x->m0 = y->m0; f_cpA556(&x->m1, &y->m1); f_cpA557(&x->m2, &y->m2); f_cpA558(&x->m3, &y->m3); f_cpA559(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA560(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA561(const struct A561 *x, const struct A561 *y) { return x->m0 == y->m0 && f_cmpA556(&x->m1, &y->m1) && f_cmpA557(&x->m2, &y->m2) && f_cmpA558(&x->m3, &y->m3) && f_cmpA559(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA560(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA561() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A561), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A561, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A561, m1), 1, f_touchdcstA556());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A561, m2), 1, f_touchdcstA557());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A561, m3), 1, f_touchdcstA558());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A561, m4), 1, f_touchdcstA559());
		dcStructField(at, 'i', offsetof(struct A561, m5), 1);
		dcStructField(at, 'c', offsetof(struct A561, m6), 1);
		dcStructField(at, 'i', offsetof(struct A561, m7), 1);
		dcStructField(at, 's', offsetof(struct A561, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A561, m9), 1, f_touchdcstA560());
		dcStructField(at, 'j', offsetof(struct A561, m10), 1);
		dcStructField(at, 'p', offsetof(struct A561, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dfl[6]} */
struct A562 { d m0; f m1; l m2[6]; };
void f_cpA562(struct A562 *x, const struct A562 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; };
int f_cmpA562(const struct A562 *x, const struct A562 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5]; };
DCstruct* f_touchdcstA562() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A562), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A562, m0), 1);
		dcStructField(at, 'f', offsetof(struct A562, m1), 1);
		dcStructField(at, 'l', offsetof(struct A562, m2), 6);
		dcCloseStruct(at);
	}
	return at;
};
/* <ficcclfcdpil> */
union  A563 { f m0; i m1; c m2; c m3; c m4; l m5; f m6; c m7; d m8; p m9; i m10; l m11; };
void f_cpA563(union  A563 *x, const union  A563 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA563(const union  A563 *x, const union  A563 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA563() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A563), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A563, m0), 1);
		dcStructField(at, 'i', offsetof(union  A563, m1), 1);
		dcStructField(at, 'c', offsetof(union  A563, m2), 1);
		dcStructField(at, 'c', offsetof(union  A563, m3), 1);
		dcStructField(at, 'c', offsetof(union  A563, m4), 1);
		dcStructField(at, 'l', offsetof(union  A563, m5), 1);
		dcStructField(at, 'f', offsetof(union  A563, m6), 1);
		dcStructField(at, 'c', offsetof(union  A563, m7), 1);
		dcStructField(at, 'd', offsetof(union  A563, m8), 1);
		dcStructField(at, 'p', offsetof(union  A563, m9), 1);
		dcStructField(at, 'i', offsetof(union  A563, m10), 1);
		dcStructField(at, 'l', offsetof(union  A563, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fdp> */
union  A564 { f m0; d m1; p m2; };
void f_cpA564(union  A564 *x, const union  A564 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA564(const union  A564 *x, const union  A564 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA564() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A564), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A564, m0), 1);
		dcStructField(at, 'd', offsetof(union  A564, m1), 1);
		dcStructField(at, 'p', offsetof(union  A564, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sldicdcjlfdi} */
struct A565 { s m0; l m1; d m2; i m3; c m4; d m5; c m6; j m7; l m8; f m9; d m10; i m11; };
void f_cpA565(struct A565 *x, const struct A565 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA565(const struct A565 *x, const struct A565 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA565() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A565), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A565, m0), 1);
		dcStructField(at, 'l', offsetof(struct A565, m1), 1);
		dcStructField(at, 'd', offsetof(struct A565, m2), 1);
		dcStructField(at, 'i', offsetof(struct A565, m3), 1);
		dcStructField(at, 'c', offsetof(struct A565, m4), 1);
		dcStructField(at, 'd', offsetof(struct A565, m5), 1);
		dcStructField(at, 'c', offsetof(struct A565, m6), 1);
		dcStructField(at, 'j', offsetof(struct A565, m7), 1);
		dcStructField(at, 'l', offsetof(struct A565, m8), 1);
		dcStructField(at, 'f', offsetof(struct A565, m9), 1);
		dcStructField(at, 'd', offsetof(struct A565, m10), 1);
		dcStructField(at, 'i', offsetof(struct A565, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p[8]cfssifpdfip> */
union  A566 { p m0[8]; c m1; f m2; s m3; s m4; i m5; f m6; p m7; d m8; f m9; i m10; p m11; };
void f_cpA566(union  A566 *x, const union  A566 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA566(const union  A566 *x, const union  A566 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA566() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A566), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A566, m0), 8);
		dcStructField(at, 'c', offsetof(union  A566, m1), 1);
		dcStructField(at, 'f', offsetof(union  A566, m2), 1);
		dcStructField(at, 's', offsetof(union  A566, m3), 1);
		dcStructField(at, 's', offsetof(union  A566, m4), 1);
		dcStructField(at, 'i', offsetof(union  A566, m5), 1);
		dcStructField(at, 'f', offsetof(union  A566, m6), 1);
		dcStructField(at, 'p', offsetof(union  A566, m7), 1);
		dcStructField(at, 'd', offsetof(union  A566, m8), 1);
		dcStructField(at, 'f', offsetof(union  A566, m9), 1);
		dcStructField(at, 'i', offsetof(union  A566, m10), 1);
		dcStructField(at, 'p', offsetof(union  A566, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<ficcclfcdpil>ji<fdp>c[4]p{sldicdcjlfdi}dj<p[8]cfssifpdfip>fp> */
union  A567 { union  A563 m0; j m1; i m2; union  A564 m3; c m4[4]; p m5; struct A565 m6; d m7; j m8; union  A566 m9; f m10; p m11; };
void f_cpA567(union  A567 *x, const union  A567 *y) { f_cpA563(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA564(&x->m3, &y->m3); x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m5 = y->m5; f_cpA565(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; f_cpA566(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA567(const union  A567 *x, const union  A567 *y) { return f_cmpA563(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA564(&x->m3, &y->m3) && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m5 == y->m5 && f_cmpA565(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA566(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA567() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A567), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A567, m0), 1, f_touchdcstA563());
		dcStructField(at, 'j', offsetof(union  A567, m1), 1);
		dcStructField(at, 'i', offsetof(union  A567, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A567, m3), 1, f_touchdcstA564());
		dcStructField(at, 'c', offsetof(union  A567, m4), 4);
		dcStructField(at, 'p', offsetof(union  A567, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A567, m6), 1, f_touchdcstA565());
		dcStructField(at, 'd', offsetof(union  A567, m7), 1);
		dcStructField(at, 'j', offsetof(union  A567, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A567, m9), 1, f_touchdcstA566());
		dcStructField(at, 'f', offsetof(union  A567, m10), 1);
		dcStructField(at, 'p', offsetof(union  A567, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<<ficcclfcdpil>ji<fdp>c[4]p{sldicdcjlfdi}dj<p[8]cfssifpdfip>fp>jsfsssddcsp[1]} */
struct A568 { union  A567 m0; j m1; s m2; f m3; s m4; s m5; s m6; d m7; d m8; c m9; s m10; p m11[1]; };
void f_cpA568(struct A568 *x, const struct A568 *y) { f_cpA567(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11[0] = y->m11[0]; };
int f_cmpA568(const struct A568 *x, const struct A568 *y) { return f_cmpA567(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11[0] == y->m11[0]; };
DCstruct* f_touchdcstA568() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A568), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A568, m0), 1, f_touchdcstA567());
		dcStructField(at, 'j', offsetof(struct A568, m1), 1);
		dcStructField(at, 's', offsetof(struct A568, m2), 1);
		dcStructField(at, 'f', offsetof(struct A568, m3), 1);
		dcStructField(at, 's', offsetof(struct A568, m4), 1);
		dcStructField(at, 's', offsetof(struct A568, m5), 1);
		dcStructField(at, 's', offsetof(struct A568, m6), 1);
		dcStructField(at, 'd', offsetof(struct A568, m7), 1);
		dcStructField(at, 'd', offsetof(struct A568, m8), 1);
		dcStructField(at, 'c', offsetof(struct A568, m9), 1);
		dcStructField(at, 's', offsetof(struct A568, m10), 1);
		dcStructField(at, 'p', offsetof(struct A568, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iclflj> */
union  A569 { i m0; c m1; l m2; f m3; l m4; j m5; };
void f_cpA569(union  A569 *x, const union  A569 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA569(const union  A569 *x, const union  A569 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA569() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A569), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A569, m0), 1);
		dcStructField(at, 'c', offsetof(union  A569, m1), 1);
		dcStructField(at, 'l', offsetof(union  A569, m2), 1);
		dcStructField(at, 'f', offsetof(union  A569, m3), 1);
		dcStructField(at, 'l', offsetof(union  A569, m4), 1);
		dcStructField(at, 'j', offsetof(union  A569, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {spljfll} */
struct A570 { s m0; p m1; l m2; j m3; f m4; l m5; l m6; };
void f_cpA570(struct A570 *x, const struct A570 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA570(const struct A570 *x, const struct A570 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA570() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A570), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A570, m0), 1);
		dcStructField(at, 'p', offsetof(struct A570, m1), 1);
		dcStructField(at, 'l', offsetof(struct A570, m2), 1);
		dcStructField(at, 'j', offsetof(struct A570, m3), 1);
		dcStructField(at, 'f', offsetof(struct A570, m4), 1);
		dcStructField(at, 'l', offsetof(struct A570, m5), 1);
		dcStructField(at, 'l', offsetof(struct A570, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sciiljjpdi[11]dp> */
union  A571 { s m0; c m1; i m2; i m3; l m4; j m5; j m6; p m7; d m8; i m9[11]; d m10; p m11; };
void f_cpA571(union  A571 *x, const union  A571 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m9[8] = y->m9[8]; x->m9[9] = y->m9[9]; x->m9[10] = y->m9[10]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA571(const union  A571 *x, const union  A571 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m9[8] == y->m9[8] && x->m9[9] == y->m9[9] && x->m9[10] == y->m9[10] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA571() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A571), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A571, m0), 1);
		dcStructField(at, 'c', offsetof(union  A571, m1), 1);
		dcStructField(at, 'i', offsetof(union  A571, m2), 1);
		dcStructField(at, 'i', offsetof(union  A571, m3), 1);
		dcStructField(at, 'l', offsetof(union  A571, m4), 1);
		dcStructField(at, 'j', offsetof(union  A571, m5), 1);
		dcStructField(at, 'j', offsetof(union  A571, m6), 1);
		dcStructField(at, 'p', offsetof(union  A571, m7), 1);
		dcStructField(at, 'd', offsetof(union  A571, m8), 1);
		dcStructField(at, 'i', offsetof(union  A571, m9), 11);
		dcStructField(at, 'd', offsetof(union  A571, m10), 1);
		dcStructField(at, 'p', offsetof(union  A571, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cj> */
union  A572 { c m0; j m1; };
void f_cpA572(union  A572 *x, const union  A572 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA572(const union  A572 *x, const union  A572 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA572() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A572), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A572, m0), 1);
		dcStructField(at, 'j', offsetof(union  A572, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {i<sciiljjpdi[11]dp>jjif<cj>cj} */
struct A573 { i m0; union  A571 m1; j m2; j m3; i m4; f m5; union  A572 m6; c m7; j m8; };
void f_cpA573(struct A573 *x, const struct A573 *y) { x->m0 = y->m0; f_cpA571(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA572(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA573(const struct A573 *x, const struct A573 *y) { return x->m0 == y->m0 && f_cmpA571(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA572(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA573() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A573), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A573, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A573, m1), 1, f_touchdcstA571());
		dcStructField(at, 'j', offsetof(struct A573, m2), 1);
		dcStructField(at, 'j', offsetof(struct A573, m3), 1);
		dcStructField(at, 'i', offsetof(struct A573, m4), 1);
		dcStructField(at, 'f', offsetof(struct A573, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A573, m6), 1, f_touchdcstA572());
		dcStructField(at, 'c', offsetof(struct A573, m7), 1);
		dcStructField(at, 'j', offsetof(struct A573, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <icssf{j}jsddid> */
union  A574 { i m0; c m1; s m2; s m3; f m4; struct A117 m5; j m6; s m7; d m8; d m9; i m10; d m11; };
void f_cpA574(union  A574 *x, const union  A574 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA117(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA574(const union  A574 *x, const union  A574 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA117(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA574() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A574), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A574, m0), 1);
		dcStructField(at, 'c', offsetof(union  A574, m1), 1);
		dcStructField(at, 's', offsetof(union  A574, m2), 1);
		dcStructField(at, 's', offsetof(union  A574, m3), 1);
		dcStructField(at, 'f', offsetof(union  A574, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A574, m5), 1, f_touchdcstA117());
		dcStructField(at, 'j', offsetof(union  A574, m6), 1);
		dcStructField(at, 's', offsetof(union  A574, m7), 1);
		dcStructField(at, 'd', offsetof(union  A574, m8), 1);
		dcStructField(at, 'd', offsetof(union  A574, m9), 1);
		dcStructField(at, 'i', offsetof(union  A574, m10), 1);
		dcStructField(at, 'd', offsetof(union  A574, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pjpddsfjsdjj> */
union  A575 { p m0; j m1; p m2; d m3; d m4; s m5; f m6; j m7; s m8; d m9; j m10; j m11; };
void f_cpA575(union  A575 *x, const union  A575 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA575(const union  A575 *x, const union  A575 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA575() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A575), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A575, m0), 1);
		dcStructField(at, 'j', offsetof(union  A575, m1), 1);
		dcStructField(at, 'p', offsetof(union  A575, m2), 1);
		dcStructField(at, 'd', offsetof(union  A575, m3), 1);
		dcStructField(at, 'd', offsetof(union  A575, m4), 1);
		dcStructField(at, 's', offsetof(union  A575, m5), 1);
		dcStructField(at, 'f', offsetof(union  A575, m6), 1);
		dcStructField(at, 'j', offsetof(union  A575, m7), 1);
		dcStructField(at, 's', offsetof(union  A575, m8), 1);
		dcStructField(at, 'd', offsetof(union  A575, m9), 1);
		dcStructField(at, 'j', offsetof(union  A575, m10), 1);
		dcStructField(at, 'j', offsetof(union  A575, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ppp<pjpddsfjsdjj>} */
struct A576 { p m0; p m1; p m2; union  A575 m3; };
void f_cpA576(struct A576 *x, const struct A576 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA575(&x->m3, &y->m3); };
int f_cmpA576(const struct A576 *x, const struct A576 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA575(&x->m3, &y->m3); };
DCstruct* f_touchdcstA576() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A576), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A576, m0), 1);
		dcStructField(at, 'p', offsetof(struct A576, m1), 1);
		dcStructField(at, 'p', offsetof(struct A576, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A576, m3), 1, f_touchdcstA575());
		dcCloseStruct(at);
	}
	return at;
};
/* <jfdpp> */
union  A577 { j m0; f m1; d m2; p m3; p m4; };
void f_cpA577(union  A577 *x, const union  A577 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA577(const union  A577 *x, const union  A577 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA577() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A577), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A577, m0), 1);
		dcStructField(at, 'f', offsetof(union  A577, m1), 1);
		dcStructField(at, 'd', offsetof(union  A577, m2), 1);
		dcStructField(at, 'p', offsetof(union  A577, m3), 1);
		dcStructField(at, 'p', offsetof(union  A577, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ipjdcispfsji> */
union  A578 { i m0; p m1; j m2; d m3; c m4; i m5; s m6; p m7; f m8; s m9; j m10; i m11; };
void f_cpA578(union  A578 *x, const union  A578 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA578(const union  A578 *x, const union  A578 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA578() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A578), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A578, m0), 1);
		dcStructField(at, 'p', offsetof(union  A578, m1), 1);
		dcStructField(at, 'j', offsetof(union  A578, m2), 1);
		dcStructField(at, 'd', offsetof(union  A578, m3), 1);
		dcStructField(at, 'c', offsetof(union  A578, m4), 1);
		dcStructField(at, 'i', offsetof(union  A578, m5), 1);
		dcStructField(at, 's', offsetof(union  A578, m6), 1);
		dcStructField(at, 'p', offsetof(union  A578, m7), 1);
		dcStructField(at, 'f', offsetof(union  A578, m8), 1);
		dcStructField(at, 's', offsetof(union  A578, m9), 1);
		dcStructField(at, 'j', offsetof(union  A578, m10), 1);
		dcStructField(at, 'i', offsetof(union  A578, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sdisf> */
union  A579 { s m0; d m1; i m2; s m3; f m4; };
void f_cpA579(union  A579 *x, const union  A579 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA579(const union  A579 *x, const union  A579 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA579() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A579), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A579, m0), 1);
		dcStructField(at, 'd', offsetof(union  A579, m1), 1);
		dcStructField(at, 'i', offsetof(union  A579, m2), 1);
		dcStructField(at, 's', offsetof(union  A579, m3), 1);
		dcStructField(at, 'f', offsetof(union  A579, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sijlpli> */
union  A580 { s m0; i m1; j m2; l m3; p m4; l m5; i m6; };
void f_cpA580(union  A580 *x, const union  A580 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA580(const union  A580 *x, const union  A580 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA580() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A580), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A580, m0), 1);
		dcStructField(at, 'i', offsetof(union  A580, m1), 1);
		dcStructField(at, 'j', offsetof(union  A580, m2), 1);
		dcStructField(at, 'l', offsetof(union  A580, m3), 1);
		dcStructField(at, 'p', offsetof(union  A580, m4), 1);
		dcStructField(at, 'l', offsetof(union  A580, m5), 1);
		dcStructField(at, 'i', offsetof(union  A580, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ssllcscjcsjf} */
struct A581 { s m0; s m1; l m2; l m3; c m4; s m5; c m6; j m7; c m8; s m9; j m10; f m11; };
void f_cpA581(struct A581 *x, const struct A581 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA581(const struct A581 *x, const struct A581 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA581() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A581), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A581, m0), 1);
		dcStructField(at, 's', offsetof(struct A581, m1), 1);
		dcStructField(at, 'l', offsetof(struct A581, m2), 1);
		dcStructField(at, 'l', offsetof(struct A581, m3), 1);
		dcStructField(at, 'c', offsetof(struct A581, m4), 1);
		dcStructField(at, 's', offsetof(struct A581, m5), 1);
		dcStructField(at, 'c', offsetof(struct A581, m6), 1);
		dcStructField(at, 'j', offsetof(struct A581, m7), 1);
		dcStructField(at, 'c', offsetof(struct A581, m8), 1);
		dcStructField(at, 's', offsetof(struct A581, m9), 1);
		dcStructField(at, 'j', offsetof(struct A581, m10), 1);
		dcStructField(at, 'f', offsetof(struct A581, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cdf[9]ffcpipiii} */
struct A582 { c m0; d m1; f m2[9]; f m3; f m4; c m5; p m6; i m7; p m8; i m9; i m10; i m11; };
void f_cpA582(struct A582 *x, const struct A582 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA582(const struct A582 *x, const struct A582 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA582() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A582), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A582, m0), 1);
		dcStructField(at, 'd', offsetof(struct A582, m1), 1);
		dcStructField(at, 'f', offsetof(struct A582, m2), 9);
		dcStructField(at, 'f', offsetof(struct A582, m3), 1);
		dcStructField(at, 'f', offsetof(struct A582, m4), 1);
		dcStructField(at, 'c', offsetof(struct A582, m5), 1);
		dcStructField(at, 'p', offsetof(struct A582, m6), 1);
		dcStructField(at, 'i', offsetof(struct A582, m7), 1);
		dcStructField(at, 'p', offsetof(struct A582, m8), 1);
		dcStructField(at, 'i', offsetof(struct A582, m9), 1);
		dcStructField(at, 'i', offsetof(struct A582, m10), 1);
		dcStructField(at, 'i', offsetof(struct A582, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<sdisf>f<sijlpli>ids{l}f{ssllcscjcsjf}{cdf[9]ffcpipiii}} */
struct A583 { union  A579 m0; f m1; union  A580 m2; i m3; d m4; s m5; struct A141 m6; f m7; struct A581 m8; struct A582 m9; };
void f_cpA583(struct A583 *x, const struct A583 *y) { f_cpA579(&x->m0, &y->m0); x->m1 = y->m1; f_cpA580(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA141(&x->m6, &y->m6); x->m7 = y->m7; f_cpA581(&x->m8, &y->m8); f_cpA582(&x->m9, &y->m9); };
int f_cmpA583(const struct A583 *x, const struct A583 *y) { return f_cmpA579(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA580(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA141(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA581(&x->m8, &y->m8) && f_cmpA582(&x->m9, &y->m9); };
DCstruct* f_touchdcstA583() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A583), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A583, m0), 1, f_touchdcstA579());
		dcStructField(at, 'f', offsetof(struct A583, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A583, m2), 1, f_touchdcstA580());
		dcStructField(at, 'i', offsetof(struct A583, m3), 1);
		dcStructField(at, 'd', offsetof(struct A583, m4), 1);
		dcStructField(at, 's', offsetof(struct A583, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A583, m6), 1, f_touchdcstA141());
		dcStructField(at, 'f', offsetof(struct A583, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A583, m8), 1, f_touchdcstA581());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A583, m9), 1, f_touchdcstA582());
		dcCloseStruct(at);
	}
	return at;
};
/* <jid> */
union  A584 { j m0; i m1; d m2; };
void f_cpA584(union  A584 *x, const union  A584 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA584(const union  A584 *x, const union  A584 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA584() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A584), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A584, m0), 1);
		dcStructField(at, 'i', offsetof(union  A584, m1), 1);
		dcStructField(at, 'd', offsetof(union  A584, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lfpfiispllls> */
union  A585 { l m0; f m1; p m2; f m3; i m4; i m5; s m6; p m7; l m8; l m9; l m10; s m11; };
void f_cpA585(union  A585 *x, const union  A585 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA585(const union  A585 *x, const union  A585 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA585() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A585), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A585, m0), 1);
		dcStructField(at, 'f', offsetof(union  A585, m1), 1);
		dcStructField(at, 'p', offsetof(union  A585, m2), 1);
		dcStructField(at, 'f', offsetof(union  A585, m3), 1);
		dcStructField(at, 'i', offsetof(union  A585, m4), 1);
		dcStructField(at, 'i', offsetof(union  A585, m5), 1);
		dcStructField(at, 's', offsetof(union  A585, m6), 1);
		dcStructField(at, 'p', offsetof(union  A585, m7), 1);
		dcStructField(at, 'l', offsetof(union  A585, m8), 1);
		dcStructField(at, 'l', offsetof(union  A585, m9), 1);
		dcStructField(at, 'l', offsetof(union  A585, m10), 1);
		dcStructField(at, 's', offsetof(union  A585, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cpflidcsdclf} */
struct A586 { c m0; p m1; f m2; l m3; i m4; d m5; c m6; s m7; d m8; c m9; l m10; f m11; };
void f_cpA586(struct A586 *x, const struct A586 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA586(const struct A586 *x, const struct A586 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA586() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A586), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A586, m0), 1);
		dcStructField(at, 'p', offsetof(struct A586, m1), 1);
		dcStructField(at, 'f', offsetof(struct A586, m2), 1);
		dcStructField(at, 'l', offsetof(struct A586, m3), 1);
		dcStructField(at, 'i', offsetof(struct A586, m4), 1);
		dcStructField(at, 'd', offsetof(struct A586, m5), 1);
		dcStructField(at, 'c', offsetof(struct A586, m6), 1);
		dcStructField(at, 's', offsetof(struct A586, m7), 1);
		dcStructField(at, 'd', offsetof(struct A586, m8), 1);
		dcStructField(at, 'c', offsetof(struct A586, m9), 1);
		dcStructField(at, 'l', offsetof(struct A586, m10), 1);
		dcStructField(at, 'f', offsetof(struct A586, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <csf> */
union  A587 { c m0; s m1; f m2; };
void f_cpA587(union  A587 *x, const union  A587 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA587(const union  A587 *x, const union  A587 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA587() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A587), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A587, m0), 1);
		dcStructField(at, 's', offsetof(union  A587, m1), 1);
		dcStructField(at, 'f', offsetof(union  A587, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<jid>jsc<lfpfiispllls>p{cpflidcsdclf}d<csf>dl> */
union  A588 { union  A584 m0; j m1; s m2; c m3; union  A585 m4; p m5; struct A586 m6; d m7; union  A587 m8; d m9; l m10; };
void f_cpA588(union  A588 *x, const union  A588 *y) { f_cpA584(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA585(&x->m4, &y->m4); x->m5 = y->m5; f_cpA586(&x->m6, &y->m6); x->m7 = y->m7; f_cpA587(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA588(const union  A588 *x, const union  A588 *y) { return f_cmpA584(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA585(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA586(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA587(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA588() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A588), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A588, m0), 1, f_touchdcstA584());
		dcStructField(at, 'j', offsetof(union  A588, m1), 1);
		dcStructField(at, 's', offsetof(union  A588, m2), 1);
		dcStructField(at, 'c', offsetof(union  A588, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A588, m4), 1, f_touchdcstA585());
		dcStructField(at, 'p', offsetof(union  A588, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A588, m6), 1, f_touchdcstA586());
		dcStructField(at, 'd', offsetof(union  A588, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A588, m8), 1, f_touchdcstA587());
		dcStructField(at, 'd', offsetof(union  A588, m9), 1);
		dcStructField(at, 'l', offsetof(union  A588, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <spj{<sdisf>f<sijlpli>ids{l}f{ssllcscjcsjf}{cdf[9]ffcpipiii}}f<<jid>jsc<lfpfiispllls>p{cpflidcsdclf}d<csf>dl>> */
union  A589 { s m0; p m1; j m2; struct A583 m3; f m4; union  A588 m5; };
void f_cpA589(union  A589 *x, const union  A589 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA583(&x->m3, &y->m3); x->m4 = y->m4; f_cpA588(&x->m5, &y->m5); };
int f_cmpA589(const union  A589 *x, const union  A589 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA583(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA588(&x->m5, &y->m5); };
DCstruct* f_touchdcstA589() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A589), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A589, m0), 1);
		dcStructField(at, 'p', offsetof(union  A589, m1), 1);
		dcStructField(at, 'j', offsetof(union  A589, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A589, m3), 1, f_touchdcstA583());
		dcStructField(at, 'f', offsetof(union  A589, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A589, m5), 1, f_touchdcstA588());
		dcCloseStruct(at);
	}
	return at;
};
/* {difci} */
struct A590 { d m0; i m1; f m2; c m3; i m4; };
void f_cpA590(struct A590 *x, const struct A590 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA590(const struct A590 *x, const struct A590 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA590() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A590), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A590, m0), 1);
		dcStructField(at, 'i', offsetof(struct A590, m1), 1);
		dcStructField(at, 'f', offsetof(struct A590, m2), 1);
		dcStructField(at, 'c', offsetof(struct A590, m3), 1);
		dcStructField(at, 'i', offsetof(struct A590, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djs} */
struct A591 { d m0; j m1; s m2; };
void f_cpA591(struct A591 *x, const struct A591 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA591(const struct A591 *x, const struct A591 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA591() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A591), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A591, m0), 1);
		dcStructField(at, 'j', offsetof(struct A591, m1), 1);
		dcStructField(at, 's', offsetof(struct A591, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ppdp> */
union  A592 { p m0; p m1; d m2; p m3; };
void f_cpA592(union  A592 *x, const union  A592 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA592(const union  A592 *x, const union  A592 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA592() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A592), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A592, m0), 1);
		dcStructField(at, 'p', offsetof(union  A592, m1), 1);
		dcStructField(at, 'd', offsetof(union  A592, m2), 1);
		dcStructField(at, 'p', offsetof(union  A592, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cdljfldljp[13]pj} */
struct A593 { c m0; d m1; l m2; j m3; f m4; l m5; d m6; l m7; j m8; p m9[13]; p m10; j m11; };
void f_cpA593(struct A593 *x, const struct A593 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m9[8] = y->m9[8]; x->m9[9] = y->m9[9]; x->m9[10] = y->m9[10]; x->m9[11] = y->m9[11]; x->m9[12] = y->m9[12]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA593(const struct A593 *x, const struct A593 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m9[8] == y->m9[8] && x->m9[9] == y->m9[9] && x->m9[10] == y->m9[10] && x->m9[11] == y->m9[11] && x->m9[12] == y->m9[12] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA593() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A593), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A593, m0), 1);
		dcStructField(at, 'd', offsetof(struct A593, m1), 1);
		dcStructField(at, 'l', offsetof(struct A593, m2), 1);
		dcStructField(at, 'j', offsetof(struct A593, m3), 1);
		dcStructField(at, 'f', offsetof(struct A593, m4), 1);
		dcStructField(at, 'l', offsetof(struct A593, m5), 1);
		dcStructField(at, 'd', offsetof(struct A593, m6), 1);
		dcStructField(at, 'l', offsetof(struct A593, m7), 1);
		dcStructField(at, 'j', offsetof(struct A593, m8), 1);
		dcStructField(at, 'p', offsetof(struct A593, m9), 13);
		dcStructField(at, 'p', offsetof(struct A593, m10), 1);
		dcStructField(at, 'j', offsetof(struct A593, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{cdljfldljp[13]pj}ffdp<c>} */
struct A594 { struct A593 m0; f m1; f m2; d m3; p m4; union  A116 m5; };
void f_cpA594(struct A594 *x, const struct A594 *y) { f_cpA593(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA116(&x->m5, &y->m5); };
int f_cmpA594(const struct A594 *x, const struct A594 *y) { return f_cmpA593(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA116(&x->m5, &y->m5); };
DCstruct* f_touchdcstA594() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A594), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A594, m0), 1, f_touchdcstA593());
		dcStructField(at, 'f', offsetof(struct A594, m1), 1);
		dcStructField(at, 'f', offsetof(struct A594, m2), 1);
		dcStructField(at, 'd', offsetof(struct A594, m3), 1);
		dcStructField(at, 'p', offsetof(struct A594, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A594, m5), 1, f_touchdcstA116());
		dcCloseStruct(at);
	}
	return at;
};
/* {csildlpdcjis} */
struct A595 { c m0; s m1; i m2; l m3; d m4; l m5; p m6; d m7; c m8; j m9; i m10; s m11; };
void f_cpA595(struct A595 *x, const struct A595 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA595(const struct A595 *x, const struct A595 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA595() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A595), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A595, m0), 1);
		dcStructField(at, 's', offsetof(struct A595, m1), 1);
		dcStructField(at, 'i', offsetof(struct A595, m2), 1);
		dcStructField(at, 'l', offsetof(struct A595, m3), 1);
		dcStructField(at, 'd', offsetof(struct A595, m4), 1);
		dcStructField(at, 'l', offsetof(struct A595, m5), 1);
		dcStructField(at, 'p', offsetof(struct A595, m6), 1);
		dcStructField(at, 'd', offsetof(struct A595, m7), 1);
		dcStructField(at, 'c', offsetof(struct A595, m8), 1);
		dcStructField(at, 'j', offsetof(struct A595, m9), 1);
		dcStructField(at, 'i', offsetof(struct A595, m10), 1);
		dcStructField(at, 's', offsetof(struct A595, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{csildlpdcjis}jipfipidjsc} */
struct A596 { struct A595 m0; j m1; i m2; p m3; f m4; i m5; p m6; i m7; d m8; j m9; s m10; c m11; };
void f_cpA596(struct A596 *x, const struct A596 *y) { f_cpA595(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA596(const struct A596 *x, const struct A596 *y) { return f_cmpA595(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA596() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A596), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A596, m0), 1, f_touchdcstA595());
		dcStructField(at, 'j', offsetof(struct A596, m1), 1);
		dcStructField(at, 'i', offsetof(struct A596, m2), 1);
		dcStructField(at, 'p', offsetof(struct A596, m3), 1);
		dcStructField(at, 'f', offsetof(struct A596, m4), 1);
		dcStructField(at, 'i', offsetof(struct A596, m5), 1);
		dcStructField(at, 'p', offsetof(struct A596, m6), 1);
		dcStructField(at, 'i', offsetof(struct A596, m7), 1);
		dcStructField(at, 'd', offsetof(struct A596, m8), 1);
		dcStructField(at, 'j', offsetof(struct A596, m9), 1);
		dcStructField(at, 's', offsetof(struct A596, m10), 1);
		dcStructField(at, 'c', offsetof(struct A596, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f{{cdljfldljp[13]pj}ffdp<c>}i{{csildlpdcjis}jipfipidjsc}} */
struct A597 { f m0; struct A594 m1; i m2; struct A596 m3; };
void f_cpA597(struct A597 *x, const struct A597 *y) { x->m0 = y->m0; f_cpA594(&x->m1, &y->m1); x->m2 = y->m2; f_cpA596(&x->m3, &y->m3); };
int f_cmpA597(const struct A597 *x, const struct A597 *y) { return x->m0 == y->m0 && f_cmpA594(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA596(&x->m3, &y->m3); };
DCstruct* f_touchdcstA597() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A597), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A597, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A597, m1), 1, f_touchdcstA594());
		dcStructField(at, 'i', offsetof(struct A597, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A597, m3), 1, f_touchdcstA596());
		dcCloseStruct(at);
	}
	return at;
};
/* <fp> */
union  A598 { f m0; p m1; };
void f_cpA598(union  A598 *x, const union  A598 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA598(const union  A598 *x, const union  A598 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA598() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A598), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A598, m0), 1);
		dcStructField(at, 'p', offsetof(union  A598, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pcccid} */
struct A599 { p m0; c m1; c m2; c m3; i m4; d m5; };
void f_cpA599(struct A599 *x, const struct A599 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA599(const struct A599 *x, const struct A599 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA599() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A599), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A599, m0), 1);
		dcStructField(at, 'c', offsetof(struct A599, m1), 1);
		dcStructField(at, 'c', offsetof(struct A599, m2), 1);
		dcStructField(at, 'c', offsetof(struct A599, m3), 1);
		dcStructField(at, 'i', offsetof(struct A599, m4), 1);
		dcStructField(at, 'd', offsetof(struct A599, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {d{pd}<fp>fp{pcccid}ddijsi} */
struct A600 { d m0; struct A541 m1; union  A598 m2; f m3; p m4; struct A599 m5; d m6; d m7; i m8; j m9; s m10; i m11; };
void f_cpA600(struct A600 *x, const struct A600 *y) { x->m0 = y->m0; f_cpA541(&x->m1, &y->m1); f_cpA598(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; f_cpA599(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA600(const struct A600 *x, const struct A600 *y) { return x->m0 == y->m0 && f_cmpA541(&x->m1, &y->m1) && f_cmpA598(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA599(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA600() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A600), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A600, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A600, m1), 1, f_touchdcstA541());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A600, m2), 1, f_touchdcstA598());
		dcStructField(at, 'f', offsetof(struct A600, m3), 1);
		dcStructField(at, 'p', offsetof(struct A600, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A600, m5), 1, f_touchdcstA599());
		dcStructField(at, 'd', offsetof(struct A600, m6), 1);
		dcStructField(at, 'd', offsetof(struct A600, m7), 1);
		dcStructField(at, 'i', offsetof(struct A600, m8), 1);
		dcStructField(at, 'j', offsetof(struct A600, m9), 1);
		dcStructField(at, 's', offsetof(struct A600, m10), 1);
		dcStructField(at, 'i', offsetof(struct A600, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jslpjlcc} */
struct A601 { j m0; s m1; l m2; p m3; j m4; l m5; c m6; c m7; };
void f_cpA601(struct A601 *x, const struct A601 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA601(const struct A601 *x, const struct A601 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA601() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A601), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A601, m0), 1);
		dcStructField(at, 's', offsetof(struct A601, m1), 1);
		dcStructField(at, 'l', offsetof(struct A601, m2), 1);
		dcStructField(at, 'p', offsetof(struct A601, m3), 1);
		dcStructField(at, 'j', offsetof(struct A601, m4), 1);
		dcStructField(at, 'l', offsetof(struct A601, m5), 1);
		dcStructField(at, 'c', offsetof(struct A601, m6), 1);
		dcStructField(at, 'c', offsetof(struct A601, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{jslpjlcc}cdc> */
union  A602 { struct A601 m0; c m1; d m2; c m3; };
void f_cpA602(union  A602 *x, const union  A602 *y) { f_cpA601(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA602(const union  A602 *x, const union  A602 *y) { return f_cmpA601(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA602() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A602), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A602, m0), 1, f_touchdcstA601());
		dcStructField(at, 'c', offsetof(union  A602, m1), 1);
		dcStructField(at, 'd', offsetof(union  A602, m2), 1);
		dcStructField(at, 'c', offsetof(union  A602, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fiicsjilfll> */
union  A603 { f m0; i m1; i m2; c m3; s m4; j m5; i m6; l m7; f m8; l m9; l m10; };
void f_cpA603(union  A603 *x, const union  A603 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA603(const union  A603 *x, const union  A603 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA603() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A603), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A603, m0), 1);
		dcStructField(at, 'i', offsetof(union  A603, m1), 1);
		dcStructField(at, 'i', offsetof(union  A603, m2), 1);
		dcStructField(at, 'c', offsetof(union  A603, m3), 1);
		dcStructField(at, 's', offsetof(union  A603, m4), 1);
		dcStructField(at, 'j', offsetof(union  A603, m5), 1);
		dcStructField(at, 'i', offsetof(union  A603, m6), 1);
		dcStructField(at, 'l', offsetof(union  A603, m7), 1);
		dcStructField(at, 'f', offsetof(union  A603, m8), 1);
		dcStructField(at, 'l', offsetof(union  A603, m9), 1);
		dcStructField(at, 'l', offsetof(union  A603, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <s<fiicsjilfll>sji> */
union  A604 { s m0; union  A603 m1; s m2; j m3; i m4; };
void f_cpA604(union  A604 *x, const union  A604 *y) { x->m0 = y->m0; f_cpA603(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA604(const union  A604 *x, const union  A604 *y) { return x->m0 == y->m0 && f_cmpA603(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA604() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A604), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A604, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A604, m1), 1, f_touchdcstA603());
		dcStructField(at, 's', offsetof(union  A604, m2), 1);
		dcStructField(at, 'j', offsetof(union  A604, m3), 1);
		dcStructField(at, 'i', offsetof(union  A604, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <c[1]i<s<fiicsjilfll>sji>iiiis> */
union  A605 { c m0[1]; i m1; union  A604 m2; i m3; i m4; i m5; i m6; s m7; };
void f_cpA605(union  A605 *x, const union  A605 *y) { x->m0[0] = y->m0[0]; x->m1 = y->m1; f_cpA604(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA605(const union  A605 *x, const union  A605 *y) { return x->m0[0] == y->m0[0] && x->m1 == y->m1 && f_cmpA604(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA605() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A605), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A605, m0), 1);
		dcStructField(at, 'i', offsetof(union  A605, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A605, m2), 1, f_touchdcstA604());
		dcStructField(at, 'i', offsetof(union  A605, m3), 1);
		dcStructField(at, 'i', offsetof(union  A605, m4), 1);
		dcStructField(at, 'i', offsetof(union  A605, m5), 1);
		dcStructField(at, 'i', offsetof(union  A605, m6), 1);
		dcStructField(at, 's', offsetof(union  A605, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jj> */
union  A606 { j m0; j m1; };
void f_cpA606(union  A606 *x, const union  A606 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA606(const union  A606 *x, const union  A606 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA606() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A606), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A606, m0), 1);
		dcStructField(at, 'j', offsetof(union  A606, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cdd[15]dcfpdfdf} */
struct A607 { c m0; d m1; d m2[15]; d m3; c m4; f m5; p m6; d m7; f m8; d m9; f m10; };
void f_cpA607(struct A607 *x, const struct A607 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m2[13] = y->m2[13]; x->m2[14] = y->m2[14]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA607(const struct A607 *x, const struct A607 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m2[13] == y->m2[13] && x->m2[14] == y->m2[14] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA607() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A607), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A607, m0), 1);
		dcStructField(at, 'd', offsetof(struct A607, m1), 1);
		dcStructField(at, 'd', offsetof(struct A607, m2), 15);
		dcStructField(at, 'd', offsetof(struct A607, m3), 1);
		dcStructField(at, 'c', offsetof(struct A607, m4), 1);
		dcStructField(at, 'f', offsetof(struct A607, m5), 1);
		dcStructField(at, 'p', offsetof(struct A607, m6), 1);
		dcStructField(at, 'd', offsetof(struct A607, m7), 1);
		dcStructField(at, 'f', offsetof(struct A607, m8), 1);
		dcStructField(at, 'd', offsetof(struct A607, m9), 1);
		dcStructField(at, 'f', offsetof(struct A607, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <clddf> */
union  A608 { c m0; l m1; d m2; d m3; f m4; };
void f_cpA608(union  A608 *x, const union  A608 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA608(const union  A608 *x, const union  A608 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA608() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A608), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A608, m0), 1);
		dcStructField(at, 'l', offsetof(union  A608, m1), 1);
		dcStructField(at, 'd', offsetof(union  A608, m2), 1);
		dcStructField(at, 'd', offsetof(union  A608, m3), 1);
		dcStructField(at, 'f', offsetof(union  A608, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pf} */
struct A609 { p m0; f m1; };
void f_cpA609(struct A609 *x, const struct A609 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA609(const struct A609 *x, const struct A609 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA609() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A609), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A609, m0), 1);
		dcStructField(at, 'f', offsetof(struct A609, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jp<c>fij<jj>{cdd[15]dcfpdfdf}p<clddf>{pf}i> */
union  A610 { j m0; p m1; union  A116 m2; f m3; i m4; j m5; union  A606 m6; struct A607 m7; p m8; union  A608 m9; struct A609 m10; i m11; };
void f_cpA610(union  A610 *x, const union  A610 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA116(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA606(&x->m6, &y->m6); f_cpA607(&x->m7, &y->m7); x->m8 = y->m8; f_cpA608(&x->m9, &y->m9); f_cpA609(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA610(const union  A610 *x, const union  A610 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA116(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA606(&x->m6, &y->m6) && f_cmpA607(&x->m7, &y->m7) && x->m8 == y->m8 && f_cmpA608(&x->m9, &y->m9) && f_cmpA609(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA610() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A610), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A610, m0), 1);
		dcStructField(at, 'p', offsetof(union  A610, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A610, m2), 1, f_touchdcstA116());
		dcStructField(at, 'f', offsetof(union  A610, m3), 1);
		dcStructField(at, 'i', offsetof(union  A610, m4), 1);
		dcStructField(at, 'j', offsetof(union  A610, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A610, m6), 1, f_touchdcstA606());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A610, m7), 1, f_touchdcstA607());
		dcStructField(at, 'p', offsetof(union  A610, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A610, m9), 1, f_touchdcstA608());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A610, m10), 1, f_touchdcstA609());
		dcStructField(at, 'i', offsetof(union  A610, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cdplppjlllfj} */
struct A611 { c m0; d m1; p m2; l m3; p m4; p m5; j m6; l m7; l m8; l m9; f m10; j m11; };
void f_cpA611(struct A611 *x, const struct A611 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA611(const struct A611 *x, const struct A611 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA611() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A611), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A611, m0), 1);
		dcStructField(at, 'd', offsetof(struct A611, m1), 1);
		dcStructField(at, 'p', offsetof(struct A611, m2), 1);
		dcStructField(at, 'l', offsetof(struct A611, m3), 1);
		dcStructField(at, 'p', offsetof(struct A611, m4), 1);
		dcStructField(at, 'p', offsetof(struct A611, m5), 1);
		dcStructField(at, 'j', offsetof(struct A611, m6), 1);
		dcStructField(at, 'l', offsetof(struct A611, m7), 1);
		dcStructField(at, 'l', offsetof(struct A611, m8), 1);
		dcStructField(at, 'l', offsetof(struct A611, m9), 1);
		dcStructField(at, 'f', offsetof(struct A611, m10), 1);
		dcStructField(at, 'j', offsetof(struct A611, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cs} */
struct A612 { c m0; s m1; };
void f_cpA612(struct A612 *x, const struct A612 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA612(const struct A612 *x, const struct A612 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA612() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A612), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A612, m0), 1);
		dcStructField(at, 's', offsetof(struct A612, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jffcfpiffcji> */
union  A613 { j m0; f m1; f m2; c m3; f m4; p m5; i m6; f m7; f m8; c m9; j m10; i m11; };
void f_cpA613(union  A613 *x, const union  A613 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA613(const union  A613 *x, const union  A613 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA613() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A613), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A613, m0), 1);
		dcStructField(at, 'f', offsetof(union  A613, m1), 1);
		dcStructField(at, 'f', offsetof(union  A613, m2), 1);
		dcStructField(at, 'c', offsetof(union  A613, m3), 1);
		dcStructField(at, 'f', offsetof(union  A613, m4), 1);
		dcStructField(at, 'p', offsetof(union  A613, m5), 1);
		dcStructField(at, 'i', offsetof(union  A613, m6), 1);
		dcStructField(at, 'f', offsetof(union  A613, m7), 1);
		dcStructField(at, 'f', offsetof(union  A613, m8), 1);
		dcStructField(at, 'c', offsetof(union  A613, m9), 1);
		dcStructField(at, 'j', offsetof(union  A613, m10), 1);
		dcStructField(at, 'i', offsetof(union  A613, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dpjifc} */
struct A614 { d m0; p m1; j m2; i m3; f m4; c m5; };
void f_cpA614(struct A614 *x, const struct A614 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA614(const struct A614 *x, const struct A614 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA614() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A614), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A614, m0), 1);
		dcStructField(at, 'p', offsetof(struct A614, m1), 1);
		dcStructField(at, 'j', offsetof(struct A614, m2), 1);
		dcStructField(at, 'i', offsetof(struct A614, m3), 1);
		dcStructField(at, 'f', offsetof(struct A614, m4), 1);
		dcStructField(at, 'c', offsetof(struct A614, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <islsc> */
union  A615 { i m0; s m1; l m2; s m3; c m4; };
void f_cpA615(union  A615 *x, const union  A615 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA615(const union  A615 *x, const union  A615 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA615() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A615), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A615, m0), 1);
		dcStructField(at, 's', offsetof(union  A615, m1), 1);
		dcStructField(at, 'l', offsetof(union  A615, m2), 1);
		dcStructField(at, 's', offsetof(union  A615, m3), 1);
		dcStructField(at, 'c', offsetof(union  A615, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sfp} */
struct A616 { s m0; f m1; p m2; };
void f_cpA616(struct A616 *x, const struct A616 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA616(const struct A616 *x, const struct A616 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA616() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A616), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A616, m0), 1);
		dcStructField(at, 'f', offsetof(struct A616, m1), 1);
		dcStructField(at, 'p', offsetof(struct A616, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cjpddiscs{sfp}si> */
union  A617 { c m0; j m1; p m2; d m3; d m4; i m5; s m6; c m7; s m8; struct A616 m9; s m10; i m11; };
void f_cpA617(union  A617 *x, const union  A617 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA616(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA617(const union  A617 *x, const union  A617 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA616(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA617() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A617), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A617, m0), 1);
		dcStructField(at, 'j', offsetof(union  A617, m1), 1);
		dcStructField(at, 'p', offsetof(union  A617, m2), 1);
		dcStructField(at, 'd', offsetof(union  A617, m3), 1);
		dcStructField(at, 'd', offsetof(union  A617, m4), 1);
		dcStructField(at, 'i', offsetof(union  A617, m5), 1);
		dcStructField(at, 's', offsetof(union  A617, m6), 1);
		dcStructField(at, 'c', offsetof(union  A617, m7), 1);
		dcStructField(at, 's', offsetof(union  A617, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A617, m9), 1, f_touchdcstA616());
		dcStructField(at, 's', offsetof(union  A617, m10), 1);
		dcStructField(at, 'i', offsetof(union  A617, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {slljji} */
struct A618 { s m0; l m1; l m2; j m3; j m4; i m5; };
void f_cpA618(struct A618 *x, const struct A618 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA618(const struct A618 *x, const struct A618 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA618() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A618), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A618, m0), 1);
		dcStructField(at, 'l', offsetof(struct A618, m1), 1);
		dcStructField(at, 'l', offsetof(struct A618, m2), 1);
		dcStructField(at, 'j', offsetof(struct A618, m3), 1);
		dcStructField(at, 'j', offsetof(struct A618, m4), 1);
		dcStructField(at, 'i', offsetof(struct A618, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ifj<s>{slljji}sjfc> */
union  A619 { i m0; f m1; j m2; union  A179 m3; struct A618 m4; s m5; j m6; f m7; c m8; };
void f_cpA619(union  A619 *x, const union  A619 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA179(&x->m3, &y->m3); f_cpA618(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA619(const union  A619 *x, const union  A619 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA179(&x->m3, &y->m3) && f_cmpA618(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA619() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A619), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A619, m0), 1);
		dcStructField(at, 'f', offsetof(union  A619, m1), 1);
		dcStructField(at, 'j', offsetof(union  A619, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A619, m3), 1, f_touchdcstA179());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A619, m4), 1, f_touchdcstA618());
		dcStructField(at, 's', offsetof(union  A619, m5), 1);
		dcStructField(at, 'j', offsetof(union  A619, m6), 1);
		dcStructField(at, 'f', offsetof(union  A619, m7), 1);
		dcStructField(at, 'c', offsetof(union  A619, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jccj<islsc>f<cjpddiscs{sfp}si><ifj<s>{slljji}sjfc>> */
union  A620 { j m0; c m1; c m2; j m3; union  A615 m4; f m5; union  A617 m6; union  A619 m7; };
void f_cpA620(union  A620 *x, const union  A620 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA615(&x->m4, &y->m4); x->m5 = y->m5; f_cpA617(&x->m6, &y->m6); f_cpA619(&x->m7, &y->m7); };
int f_cmpA620(const union  A620 *x, const union  A620 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA615(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA617(&x->m6, &y->m6) && f_cmpA619(&x->m7, &y->m7); };
DCstruct* f_touchdcstA620() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A620), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A620, m0), 1);
		dcStructField(at, 'c', offsetof(union  A620, m1), 1);
		dcStructField(at, 'c', offsetof(union  A620, m2), 1);
		dcStructField(at, 'j', offsetof(union  A620, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A620, m4), 1, f_touchdcstA615());
		dcStructField(at, 'f', offsetof(union  A620, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A620, m6), 1, f_touchdcstA617());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A620, m7), 1, f_touchdcstA619());
		dcCloseStruct(at);
	}
	return at;
};
/* {d[2]fi} */
struct A621 { d m0[2]; f m1; i m2; };
void f_cpA621(struct A621 *x, const struct A621 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA621(const struct A621 *x, const struct A621 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA621() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A621), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A621, m0), 2);
		dcStructField(at, 'f', offsetof(struct A621, m1), 1);
		dcStructField(at, 'i', offsetof(struct A621, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pjlilllfilis} */
struct A622 { p m0; j m1; l m2; i m3; l m4; l m5; l m6; f m7; i m8; l m9; i m10; s m11; };
void f_cpA622(struct A622 *x, const struct A622 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA622(const struct A622 *x, const struct A622 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA622() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A622), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A622, m0), 1);
		dcStructField(at, 'j', offsetof(struct A622, m1), 1);
		dcStructField(at, 'l', offsetof(struct A622, m2), 1);
		dcStructField(at, 'i', offsetof(struct A622, m3), 1);
		dcStructField(at, 'l', offsetof(struct A622, m4), 1);
		dcStructField(at, 'l', offsetof(struct A622, m5), 1);
		dcStructField(at, 'l', offsetof(struct A622, m6), 1);
		dcStructField(at, 'f', offsetof(struct A622, m7), 1);
		dcStructField(at, 'i', offsetof(struct A622, m8), 1);
		dcStructField(at, 'l', offsetof(struct A622, m9), 1);
		dcStructField(at, 'i', offsetof(struct A622, m10), 1);
		dcStructField(at, 's', offsetof(struct A622, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lcslc<jj>p} */
struct A623 { l m0; c m1; s m2; l m3; c m4; union  A606 m5; p m6; };
void f_cpA623(struct A623 *x, const struct A623 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA606(&x->m5, &y->m5); x->m6 = y->m6; };
int f_cmpA623(const struct A623 *x, const struct A623 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA606(&x->m5, &y->m5) && x->m6 == y->m6; };
DCstruct* f_touchdcstA623() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A623), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A623, m0), 1);
		dcStructField(at, 'c', offsetof(struct A623, m1), 1);
		dcStructField(at, 's', offsetof(struct A623, m2), 1);
		dcStructField(at, 'l', offsetof(struct A623, m3), 1);
		dcStructField(at, 'c', offsetof(struct A623, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A623, m5), 1, f_touchdcstA606());
		dcStructField(at, 'p', offsetof(struct A623, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ipsfjlss> */
union  A624 { i m0; p m1; s m2; f m3; j m4; l m5; s m6; s m7; };
void f_cpA624(union  A624 *x, const union  A624 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA624(const union  A624 *x, const union  A624 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA624() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A624), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A624, m0), 1);
		dcStructField(at, 'p', offsetof(union  A624, m1), 1);
		dcStructField(at, 's', offsetof(union  A624, m2), 1);
		dcStructField(at, 'f', offsetof(union  A624, m3), 1);
		dcStructField(at, 'j', offsetof(union  A624, m4), 1);
		dcStructField(at, 'l', offsetof(union  A624, m5), 1);
		dcStructField(at, 's', offsetof(union  A624, m6), 1);
		dcStructField(at, 's', offsetof(union  A624, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pdildd> */
union  A625 { p m0; d m1; i m2; l m3; d m4; d m5; };
void f_cpA625(union  A625 *x, const union  A625 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA625(const union  A625 *x, const union  A625 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA625() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A625), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A625, m0), 1);
		dcStructField(at, 'd', offsetof(union  A625, m1), 1);
		dcStructField(at, 'i', offsetof(union  A625, m2), 1);
		dcStructField(at, 'l', offsetof(union  A625, m3), 1);
		dcStructField(at, 'd', offsetof(union  A625, m4), 1);
		dcStructField(at, 'd', offsetof(union  A625, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {j<ipsfjlss>dpppfilli<pdildd>} */
struct A626 { j m0; union  A624 m1; d m2; p m3; p m4; p m5; f m6; i m7; l m8; l m9; i m10; union  A625 m11; };
void f_cpA626(struct A626 *x, const struct A626 *y) { x->m0 = y->m0; f_cpA624(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA625(&x->m11, &y->m11); };
int f_cmpA626(const struct A626 *x, const struct A626 *y) { return x->m0 == y->m0 && f_cmpA624(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA625(&x->m11, &y->m11); };
DCstruct* f_touchdcstA626() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A626), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A626, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A626, m1), 1, f_touchdcstA624());
		dcStructField(at, 'd', offsetof(struct A626, m2), 1);
		dcStructField(at, 'p', offsetof(struct A626, m3), 1);
		dcStructField(at, 'p', offsetof(struct A626, m4), 1);
		dcStructField(at, 'p', offsetof(struct A626, m5), 1);
		dcStructField(at, 'f', offsetof(struct A626, m6), 1);
		dcStructField(at, 'i', offsetof(struct A626, m7), 1);
		dcStructField(at, 'l', offsetof(struct A626, m8), 1);
		dcStructField(at, 'l', offsetof(struct A626, m9), 1);
		dcStructField(at, 'i', offsetof(struct A626, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A626, m11), 1, f_touchdcstA625());
		dcCloseStruct(at);
	}
	return at;
};
/* <{j<ipsfjlss>dpppfilli<pdildd>}> */
union  A627 { struct A626 m0; };
void f_cpA627(union  A627 *x, const union  A627 *y) { f_cpA626(&x->m0, &y->m0); };
int f_cmpA627(const union  A627 *x, const union  A627 *y) { return f_cmpA626(&x->m0, &y->m0); };
DCstruct* f_touchdcstA627() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A627), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A627, m0), 1, f_touchdcstA626());
		dcCloseStruct(at);
	}
	return at;
};
/* {ppddisp} */
struct A628 { p m0; p m1; d m2; d m3; i m4; s m5; p m6; };
void f_cpA628(struct A628 *x, const struct A628 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA628(const struct A628 *x, const struct A628 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA628() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A628), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A628, m0), 1);
		dcStructField(at, 'p', offsetof(struct A628, m1), 1);
		dcStructField(at, 'd', offsetof(struct A628, m2), 1);
		dcStructField(at, 'd', offsetof(struct A628, m3), 1);
		dcStructField(at, 'i', offsetof(struct A628, m4), 1);
		dcStructField(at, 's', offsetof(struct A628, m5), 1);
		dcStructField(at, 'p', offsetof(struct A628, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <idcjdp[15]ddfips> */
union  A629 { i m0; d m1; c m2; j m3; d m4; p m5[15]; d m6; d m7; f m8; i m9; p m10; s m11; };
void f_cpA629(union  A629 *x, const union  A629 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m5[11] = y->m5[11]; x->m5[12] = y->m5[12]; x->m5[13] = y->m5[13]; x->m5[14] = y->m5[14]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA629(const union  A629 *x, const union  A629 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m5[11] == y->m5[11] && x->m5[12] == y->m5[12] && x->m5[13] == y->m5[13] && x->m5[14] == y->m5[14] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA629() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A629), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A629, m0), 1);
		dcStructField(at, 'd', offsetof(union  A629, m1), 1);
		dcStructField(at, 'c', offsetof(union  A629, m2), 1);
		dcStructField(at, 'j', offsetof(union  A629, m3), 1);
		dcStructField(at, 'd', offsetof(union  A629, m4), 1);
		dcStructField(at, 'p', offsetof(union  A629, m5), 15);
		dcStructField(at, 'd', offsetof(union  A629, m6), 1);
		dcStructField(at, 'd', offsetof(union  A629, m7), 1);
		dcStructField(at, 'f', offsetof(union  A629, m8), 1);
		dcStructField(at, 'i', offsetof(union  A629, m9), 1);
		dcStructField(at, 'p', offsetof(union  A629, m10), 1);
		dcStructField(at, 's', offsetof(union  A629, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ill{ppddisp}l<idcjdp[15]ddfips>> */
union  A630 { i m0; l m1; l m2; struct A628 m3; l m4; union  A629 m5; };
void f_cpA630(union  A630 *x, const union  A630 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA628(&x->m3, &y->m3); x->m4 = y->m4; f_cpA629(&x->m5, &y->m5); };
int f_cmpA630(const union  A630 *x, const union  A630 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA628(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA629(&x->m5, &y->m5); };
DCstruct* f_touchdcstA630() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A630), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A630, m0), 1);
		dcStructField(at, 'l', offsetof(union  A630, m1), 1);
		dcStructField(at, 'l', offsetof(union  A630, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A630, m3), 1, f_touchdcstA628());
		dcStructField(at, 'l', offsetof(union  A630, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A630, m5), 1, f_touchdcstA629());
		dcCloseStruct(at);
	}
	return at;
};
/* <sls> */
union  A631 { s m0; l m1; s m2; };
void f_cpA631(union  A631 *x, const union  A631 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA631(const union  A631 *x, const union  A631 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA631() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A631), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A631, m0), 1);
		dcStructField(at, 'l', offsetof(union  A631, m1), 1);
		dcStructField(at, 's', offsetof(union  A631, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lcs> */
union  A632 { l m0; c m1; s m2; };
void f_cpA632(union  A632 *x, const union  A632 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA632(const union  A632 *x, const union  A632 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA632() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A632), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A632, m0), 1);
		dcStructField(at, 'c', offsetof(union  A632, m1), 1);
		dcStructField(at, 's', offsetof(union  A632, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <id<lcs>> */
union  A633 { i m0; d m1; union  A632 m2; };
void f_cpA633(union  A633 *x, const union  A633 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA632(&x->m2, &y->m2); };
int f_cmpA633(const union  A633 *x, const union  A633 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA632(&x->m2, &y->m2); };
DCstruct* f_touchdcstA633() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A633), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A633, m0), 1);
		dcStructField(at, 'd', offsetof(union  A633, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A633, m2), 1, f_touchdcstA632());
		dcCloseStruct(at);
	}
	return at;
};
/* {jc} */
struct A634 { j m0; c m1; };
void f_cpA634(struct A634 *x, const struct A634 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA634(const struct A634 *x, const struct A634 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA634() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A634), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A634, m0), 1);
		dcStructField(at, 'c', offsetof(struct A634, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cspcpldjlicj> */
union  A635 { c m0; s m1; p m2; c m3; p m4; l m5; d m6; j m7; l m8; i m9; c m10; j m11; };
void f_cpA635(union  A635 *x, const union  A635 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA635(const union  A635 *x, const union  A635 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA635() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A635), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A635, m0), 1);
		dcStructField(at, 's', offsetof(union  A635, m1), 1);
		dcStructField(at, 'p', offsetof(union  A635, m2), 1);
		dcStructField(at, 'c', offsetof(union  A635, m3), 1);
		dcStructField(at, 'p', offsetof(union  A635, m4), 1);
		dcStructField(at, 'l', offsetof(union  A635, m5), 1);
		dcStructField(at, 'd', offsetof(union  A635, m6), 1);
		dcStructField(at, 'j', offsetof(union  A635, m7), 1);
		dcStructField(at, 'l', offsetof(union  A635, m8), 1);
		dcStructField(at, 'i', offsetof(union  A635, m9), 1);
		dcStructField(at, 'c', offsetof(union  A635, m10), 1);
		dcStructField(at, 'j', offsetof(union  A635, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iscsf<sls><id<lcs>>i{jc}s<cspcpldjlicj>s} */
struct A636 { i m0; s m1; c m2; s m3; f m4; union  A631 m5; union  A633 m6; i m7; struct A634 m8; s m9; union  A635 m10; s m11; };
void f_cpA636(struct A636 *x, const struct A636 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA631(&x->m5, &y->m5); f_cpA633(&x->m6, &y->m6); x->m7 = y->m7; f_cpA634(&x->m8, &y->m8); x->m9 = y->m9; f_cpA635(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA636(const struct A636 *x, const struct A636 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA631(&x->m5, &y->m5) && f_cmpA633(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA634(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA635(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA636() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A636), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A636, m0), 1);
		dcStructField(at, 's', offsetof(struct A636, m1), 1);
		dcStructField(at, 'c', offsetof(struct A636, m2), 1);
		dcStructField(at, 's', offsetof(struct A636, m3), 1);
		dcStructField(at, 'f', offsetof(struct A636, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A636, m5), 1, f_touchdcstA631());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A636, m6), 1, f_touchdcstA633());
		dcStructField(at, 'i', offsetof(struct A636, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A636, m8), 1, f_touchdcstA634());
		dcStructField(at, 's', offsetof(struct A636, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A636, m10), 1, f_touchdcstA635());
		dcStructField(at, 's', offsetof(struct A636, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cifdl} */
struct A637 { c m0; i m1; f m2; d m3; l m4; };
void f_cpA637(struct A637 *x, const struct A637 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA637(const struct A637 *x, const struct A637 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA637() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A637), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A637, m0), 1);
		dcStructField(at, 'i', offsetof(struct A637, m1), 1);
		dcStructField(at, 'f', offsetof(struct A637, m2), 1);
		dcStructField(at, 'd', offsetof(struct A637, m3), 1);
		dcStructField(at, 'l', offsetof(struct A637, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <c{cifdl}{i}cljsidcsc> */
union  A638 { c m0; struct A637 m1; struct A5 m2; c m3; l m4; j m5; s m6; i m7; d m8; c m9; s m10; c m11; };
void f_cpA638(union  A638 *x, const union  A638 *y) { x->m0 = y->m0; f_cpA637(&x->m1, &y->m1); f_cpA5(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA638(const union  A638 *x, const union  A638 *y) { return x->m0 == y->m0 && f_cmpA637(&x->m1, &y->m1) && f_cmpA5(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA638() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A638), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A638, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A638, m1), 1, f_touchdcstA637());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A638, m2), 1, f_touchdcstA5());
		dcStructField(at, 'c', offsetof(union  A638, m3), 1);
		dcStructField(at, 'l', offsetof(union  A638, m4), 1);
		dcStructField(at, 'j', offsetof(union  A638, m5), 1);
		dcStructField(at, 's', offsetof(union  A638, m6), 1);
		dcStructField(at, 'i', offsetof(union  A638, m7), 1);
		dcStructField(at, 'd', offsetof(union  A638, m8), 1);
		dcStructField(at, 'c', offsetof(union  A638, m9), 1);
		dcStructField(at, 's', offsetof(union  A638, m10), 1);
		dcStructField(at, 'c', offsetof(union  A638, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lcj} */
struct A639 { l m0; c m1; j m2; };
void f_cpA639(struct A639 *x, const struct A639 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA639(const struct A639 *x, const struct A639 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA639() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A639), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A639, m0), 1);
		dcStructField(at, 'c', offsetof(struct A639, m1), 1);
		dcStructField(at, 'j', offsetof(struct A639, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jiflddc} */
struct A640 { j m0; i m1; f m2; l m3; d m4; d m5; c m6; };
void f_cpA640(struct A640 *x, const struct A640 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA640(const struct A640 *x, const struct A640 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA640() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A640), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A640, m0), 1);
		dcStructField(at, 'i', offsetof(struct A640, m1), 1);
		dcStructField(at, 'f', offsetof(struct A640, m2), 1);
		dcStructField(at, 'l', offsetof(struct A640, m3), 1);
		dcStructField(at, 'd', offsetof(struct A640, m4), 1);
		dcStructField(at, 'd', offsetof(struct A640, m5), 1);
		dcStructField(at, 'c', offsetof(struct A640, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ll{jiflddc}> */
union  A641 { l m0; l m1; struct A640 m2; };
void f_cpA641(union  A641 *x, const union  A641 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA640(&x->m2, &y->m2); };
int f_cmpA641(const union  A641 *x, const union  A641 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA640(&x->m2, &y->m2); };
DCstruct* f_touchdcstA641() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A641), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A641, m0), 1);
		dcStructField(at, 'l', offsetof(union  A641, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A641, m2), 1, f_touchdcstA640());
		dcCloseStruct(at);
	}
	return at;
};
/* {cpijpsdl<ll{jiflddc}>djs} */
struct A642 { c m0; p m1; i m2; j m3; p m4; s m5; d m6; l m7; union  A641 m8; d m9; j m10; s m11; };
void f_cpA642(struct A642 *x, const struct A642 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA641(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA642(const struct A642 *x, const struct A642 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA641(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA642() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A642), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A642, m0), 1);
		dcStructField(at, 'p', offsetof(struct A642, m1), 1);
		dcStructField(at, 'i', offsetof(struct A642, m2), 1);
		dcStructField(at, 'j', offsetof(struct A642, m3), 1);
		dcStructField(at, 'p', offsetof(struct A642, m4), 1);
		dcStructField(at, 's', offsetof(struct A642, m5), 1);
		dcStructField(at, 'd', offsetof(struct A642, m6), 1);
		dcStructField(at, 'l', offsetof(struct A642, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A642, m8), 1, f_touchdcstA641());
		dcStructField(at, 'd', offsetof(struct A642, m9), 1);
		dcStructField(at, 'j', offsetof(struct A642, m10), 1);
		dcStructField(at, 's', offsetof(struct A642, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jpdjdjllfcdf> */
union  A643 { j m0; p m1; d m2; j m3; d m4; j m5; l m6; l m7; f m8; c m9; d m10; f m11; };
void f_cpA643(union  A643 *x, const union  A643 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA643(const union  A643 *x, const union  A643 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA643() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A643), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A643, m0), 1);
		dcStructField(at, 'p', offsetof(union  A643, m1), 1);
		dcStructField(at, 'd', offsetof(union  A643, m2), 1);
		dcStructField(at, 'j', offsetof(union  A643, m3), 1);
		dcStructField(at, 'd', offsetof(union  A643, m4), 1);
		dcStructField(at, 'j', offsetof(union  A643, m5), 1);
		dcStructField(at, 'l', offsetof(union  A643, m6), 1);
		dcStructField(at, 'l', offsetof(union  A643, m7), 1);
		dcStructField(at, 'f', offsetof(union  A643, m8), 1);
		dcStructField(at, 'c', offsetof(union  A643, m9), 1);
		dcStructField(at, 'd', offsetof(union  A643, m10), 1);
		dcStructField(at, 'f', offsetof(union  A643, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iiipp<i>p{f}<jpdjdjllfcdf>sj[7]p} */
struct A644 { i m0; i m1; i m2; p m3; p m4; union  A62 m5; p m6; struct A195 m7; union  A643 m8; s m9; j m10[7]; p m11; };
void f_cpA644(struct A644 *x, const struct A644 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA62(&x->m5, &y->m5); x->m6 = y->m6; f_cpA195(&x->m7, &y->m7); f_cpA643(&x->m8, &y->m8); x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m11 = y->m11; };
int f_cmpA644(const struct A644 *x, const struct A644 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA62(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA195(&x->m7, &y->m7) && f_cmpA643(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m11 == y->m11; };
DCstruct* f_touchdcstA644() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A644), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A644, m0), 1);
		dcStructField(at, 'i', offsetof(struct A644, m1), 1);
		dcStructField(at, 'i', offsetof(struct A644, m2), 1);
		dcStructField(at, 'p', offsetof(struct A644, m3), 1);
		dcStructField(at, 'p', offsetof(struct A644, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A644, m5), 1, f_touchdcstA62());
		dcStructField(at, 'p', offsetof(struct A644, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A644, m7), 1, f_touchdcstA195());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A644, m8), 1, f_touchdcstA643());
		dcStructField(at, 's', offsetof(struct A644, m9), 1);
		dcStructField(at, 'j', offsetof(struct A644, m10), 7);
		dcStructField(at, 'p', offsetof(struct A644, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ilfjcfdfpi[2]> */
union  A645 { i m0; l m1; f m2; j m3; c m4; f m5; d m6; f m7; p m8; i m9[2]; };
void f_cpA645(union  A645 *x, const union  A645 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; };
int f_cmpA645(const union  A645 *x, const union  A645 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1]; };
DCstruct* f_touchdcstA645() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A645), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A645, m0), 1);
		dcStructField(at, 'l', offsetof(union  A645, m1), 1);
		dcStructField(at, 'f', offsetof(union  A645, m2), 1);
		dcStructField(at, 'j', offsetof(union  A645, m3), 1);
		dcStructField(at, 'c', offsetof(union  A645, m4), 1);
		dcStructField(at, 'f', offsetof(union  A645, m5), 1);
		dcStructField(at, 'd', offsetof(union  A645, m6), 1);
		dcStructField(at, 'f', offsetof(union  A645, m7), 1);
		dcStructField(at, 'p', offsetof(union  A645, m8), 1);
		dcStructField(at, 'i', offsetof(union  A645, m9), 2);
		dcCloseStruct(at);
	}
	return at;
};
/* {llpjd} */
struct A646 { l m0; l m1; p m2; j m3; d m4; };
void f_cpA646(struct A646 *x, const struct A646 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA646(const struct A646 *x, const struct A646 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA646() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A646), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A646, m0), 1);
		dcStructField(at, 'l', offsetof(struct A646, m1), 1);
		dcStructField(at, 'p', offsetof(struct A646, m2), 1);
		dcStructField(at, 'j', offsetof(struct A646, m3), 1);
		dcStructField(at, 'd', offsetof(struct A646, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fd<ilfjcfdfpi[2]>{llpjd}c[14]jcipfl} */
struct A647 { f m0; d m1; union  A645 m2; struct A646 m3; c m4[14]; j m5; c m6; i m7; p m8; f m9; l m10; };
void f_cpA647(struct A647 *x, const struct A647 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA645(&x->m2, &y->m2); f_cpA646(&x->m3, &y->m3); x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m4[12] = y->m4[12]; x->m4[13] = y->m4[13]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA647(const struct A647 *x, const struct A647 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA645(&x->m2, &y->m2) && f_cmpA646(&x->m3, &y->m3) && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m4[12] == y->m4[12] && x->m4[13] == y->m4[13] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA647() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A647), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A647, m0), 1);
		dcStructField(at, 'd', offsetof(struct A647, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A647, m2), 1, f_touchdcstA645());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A647, m3), 1, f_touchdcstA646());
		dcStructField(at, 'c', offsetof(struct A647, m4), 14);
		dcStructField(at, 'j', offsetof(struct A647, m5), 1);
		dcStructField(at, 'c', offsetof(struct A647, m6), 1);
		dcStructField(at, 'i', offsetof(struct A647, m7), 1);
		dcStructField(at, 'p', offsetof(struct A647, m8), 1);
		dcStructField(at, 'f', offsetof(struct A647, m9), 1);
		dcStructField(at, 'l', offsetof(struct A647, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{fd<ilfjcfdfpi[2]>{llpjd}c[14]jcipfl}jdcli} */
struct A648 { struct A647 m0; j m1; d m2; c m3; l m4; i m5; };
void f_cpA648(struct A648 *x, const struct A648 *y) { f_cpA647(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA648(const struct A648 *x, const struct A648 *y) { return f_cmpA647(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA648() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A648), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A648, m0), 1, f_touchdcstA647());
		dcStructField(at, 'j', offsetof(struct A648, m1), 1);
		dcStructField(at, 'd', offsetof(struct A648, m2), 1);
		dcStructField(at, 'c', offsetof(struct A648, m3), 1);
		dcStructField(at, 'l', offsetof(struct A648, m4), 1);
		dcStructField(at, 'i', offsetof(struct A648, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {s[5]isscd} */
struct A649 { s m0[5]; i m1; s m2; s m3; c m4; d m5; };
void f_cpA649(struct A649 *x, const struct A649 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA649(const struct A649 *x, const struct A649 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA649() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A649), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A649, m0), 5);
		dcStructField(at, 'i', offsetof(struct A649, m1), 1);
		dcStructField(at, 's', offsetof(struct A649, m2), 1);
		dcStructField(at, 's', offsetof(struct A649, m3), 1);
		dcStructField(at, 'c', offsetof(struct A649, m4), 1);
		dcStructField(at, 'd', offsetof(struct A649, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {scdpidspfjf[6]i} */
struct A650 { s m0; c m1; d m2; p m3; i m4; d m5; s m6; p m7; f m8; j m9; f m10[6]; i m11; };
void f_cpA650(struct A650 *x, const struct A650 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m11 = y->m11; };
int f_cmpA650(const struct A650 *x, const struct A650 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m11 == y->m11; };
DCstruct* f_touchdcstA650() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A650), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A650, m0), 1);
		dcStructField(at, 'c', offsetof(struct A650, m1), 1);
		dcStructField(at, 'd', offsetof(struct A650, m2), 1);
		dcStructField(at, 'p', offsetof(struct A650, m3), 1);
		dcStructField(at, 'i', offsetof(struct A650, m4), 1);
		dcStructField(at, 'd', offsetof(struct A650, m5), 1);
		dcStructField(at, 's', offsetof(struct A650, m6), 1);
		dcStructField(at, 'p', offsetof(struct A650, m7), 1);
		dcStructField(at, 'f', offsetof(struct A650, m8), 1);
		dcStructField(at, 'j', offsetof(struct A650, m9), 1);
		dcStructField(at, 'f', offsetof(struct A650, m10), 6);
		dcStructField(at, 'i', offsetof(struct A650, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{s[5]isscd}cc{scdpidspfjf[6]i}> */
union  A651 { struct A649 m0; c m1; c m2; struct A650 m3; };
void f_cpA651(union  A651 *x, const union  A651 *y) { f_cpA649(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA650(&x->m3, &y->m3); };
int f_cmpA651(const union  A651 *x, const union  A651 *y) { return f_cmpA649(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA650(&x->m3, &y->m3); };
DCstruct* f_touchdcstA651() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A651), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A651, m0), 1, f_touchdcstA649());
		dcStructField(at, 'c', offsetof(union  A651, m1), 1);
		dcStructField(at, 'c', offsetof(union  A651, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A651, m3), 1, f_touchdcstA650());
		dcCloseStruct(at);
	}
	return at;
};
/* <cdi> */
union  A652 { c m0; d m1; i m2; };
void f_cpA652(union  A652 *x, const union  A652 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA652(const union  A652 *x, const union  A652 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA652() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A652), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A652, m0), 1);
		dcStructField(at, 'd', offsetof(union  A652, m1), 1);
		dcStructField(at, 'i', offsetof(union  A652, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lji> */
union  A653 { l m0; j m1; i m2; };
void f_cpA653(union  A653 *x, const union  A653 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA653(const union  A653 *x, const union  A653 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA653() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A653), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A653, m0), 1);
		dcStructField(at, 'j', offsetof(union  A653, m1), 1);
		dcStructField(at, 'i', offsetof(union  A653, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {clci<cdi>fjsl<lji>} */
struct A654 { c m0; l m1; c m2; i m3; union  A652 m4; f m5; j m6; s m7; l m8; union  A653 m9; };
void f_cpA654(struct A654 *x, const struct A654 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA652(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA653(&x->m9, &y->m9); };
int f_cmpA654(const struct A654 *x, const struct A654 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA652(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA653(&x->m9, &y->m9); };
DCstruct* f_touchdcstA654() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A654), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A654, m0), 1);
		dcStructField(at, 'l', offsetof(struct A654, m1), 1);
		dcStructField(at, 'c', offsetof(struct A654, m2), 1);
		dcStructField(at, 'i', offsetof(struct A654, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A654, m4), 1, f_touchdcstA652());
		dcStructField(at, 'f', offsetof(struct A654, m5), 1);
		dcStructField(at, 'j', offsetof(struct A654, m6), 1);
		dcStructField(at, 's', offsetof(struct A654, m7), 1);
		dcStructField(at, 'l', offsetof(struct A654, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A654, m9), 1, f_touchdcstA653());
		dcCloseStruct(at);
	}
	return at;
};
/* <sp<{s[5]isscd}cc{scdpidspfjf[6]i}>f{clci<cdi>fjsl<lji>}> */
union  A655 { s m0; p m1; union  A651 m2; f m3; struct A654 m4; };
void f_cpA655(union  A655 *x, const union  A655 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA651(&x->m2, &y->m2); x->m3 = y->m3; f_cpA654(&x->m4, &y->m4); };
int f_cmpA655(const union  A655 *x, const union  A655 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA651(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA654(&x->m4, &y->m4); };
DCstruct* f_touchdcstA655() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A655), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A655, m0), 1);
		dcStructField(at, 'p', offsetof(union  A655, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A655, m2), 1, f_touchdcstA651());
		dcStructField(at, 'f', offsetof(union  A655, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A655, m4), 1, f_touchdcstA654());
		dcCloseStruct(at);
	}
	return at;
};
/* {fcl[4]ifidijppd[9]} */
struct A656 { f m0; c m1; l m2[4]; i m3; f m4; i m5; d m6; i m7; j m8; p m9; p m10; d m11[9]; };
void f_cpA656(struct A656 *x, const struct A656 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11[0] = y->m11[0]; x->m11[1] = y->m11[1]; x->m11[2] = y->m11[2]; x->m11[3] = y->m11[3]; x->m11[4] = y->m11[4]; x->m11[5] = y->m11[5]; x->m11[6] = y->m11[6]; x->m11[7] = y->m11[7]; x->m11[8] = y->m11[8]; };
int f_cmpA656(const struct A656 *x, const struct A656 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11[0] == y->m11[0] && x->m11[1] == y->m11[1] && x->m11[2] == y->m11[2] && x->m11[3] == y->m11[3] && x->m11[4] == y->m11[4] && x->m11[5] == y->m11[5] && x->m11[6] == y->m11[6] && x->m11[7] == y->m11[7] && x->m11[8] == y->m11[8]; };
DCstruct* f_touchdcstA656() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A656), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A656, m0), 1);
		dcStructField(at, 'c', offsetof(struct A656, m1), 1);
		dcStructField(at, 'l', offsetof(struct A656, m2), 4);
		dcStructField(at, 'i', offsetof(struct A656, m3), 1);
		dcStructField(at, 'f', offsetof(struct A656, m4), 1);
		dcStructField(at, 'i', offsetof(struct A656, m5), 1);
		dcStructField(at, 'd', offsetof(struct A656, m6), 1);
		dcStructField(at, 'i', offsetof(struct A656, m7), 1);
		dcStructField(at, 'j', offsetof(struct A656, m8), 1);
		dcStructField(at, 'p', offsetof(struct A656, m9), 1);
		dcStructField(at, 'p', offsetof(struct A656, m10), 1);
		dcStructField(at, 'd', offsetof(struct A656, m11), 9);
		dcCloseStruct(at);
	}
	return at;
};
/* <ljclcpiplfdd> */
union  A657 { l m0; j m1; c m2; l m3; c m4; p m5; i m6; p m7; l m8; f m9; d m10; d m11; };
void f_cpA657(union  A657 *x, const union  A657 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA657(const union  A657 *x, const union  A657 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA657() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A657), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A657, m0), 1);
		dcStructField(at, 'j', offsetof(union  A657, m1), 1);
		dcStructField(at, 'c', offsetof(union  A657, m2), 1);
		dcStructField(at, 'l', offsetof(union  A657, m3), 1);
		dcStructField(at, 'c', offsetof(union  A657, m4), 1);
		dcStructField(at, 'p', offsetof(union  A657, m5), 1);
		dcStructField(at, 'i', offsetof(union  A657, m6), 1);
		dcStructField(at, 'p', offsetof(union  A657, m7), 1);
		dcStructField(at, 'l', offsetof(union  A657, m8), 1);
		dcStructField(at, 'f', offsetof(union  A657, m9), 1);
		dcStructField(at, 'd', offsetof(union  A657, m10), 1);
		dcStructField(at, 'd', offsetof(union  A657, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pilfsp> */
union  A658 { p m0; i m1; l m2; f m3; s m4; p m5; };
void f_cpA658(union  A658 *x, const union  A658 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA658(const union  A658 *x, const union  A658 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA658() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A658), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A658, m0), 1);
		dcStructField(at, 'i', offsetof(union  A658, m1), 1);
		dcStructField(at, 'l', offsetof(union  A658, m2), 1);
		dcStructField(at, 'f', offsetof(union  A658, m3), 1);
		dcStructField(at, 's', offsetof(union  A658, m4), 1);
		dcStructField(at, 'p', offsetof(union  A658, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dlclffcl<ljclcpiplfdd>d<pilfsp>c} */
struct A659 { d m0; l m1; c m2; l m3; f m4; f m5; c m6; l m7; union  A657 m8; d m9; union  A658 m10; c m11; };
void f_cpA659(struct A659 *x, const struct A659 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA657(&x->m8, &y->m8); x->m9 = y->m9; f_cpA658(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA659(const struct A659 *x, const struct A659 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA657(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA658(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA659() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A659), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A659, m0), 1);
		dcStructField(at, 'l', offsetof(struct A659, m1), 1);
		dcStructField(at, 'c', offsetof(struct A659, m2), 1);
		dcStructField(at, 'l', offsetof(struct A659, m3), 1);
		dcStructField(at, 'f', offsetof(struct A659, m4), 1);
		dcStructField(at, 'f', offsetof(struct A659, m5), 1);
		dcStructField(at, 'c', offsetof(struct A659, m6), 1);
		dcStructField(at, 'l', offsetof(struct A659, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A659, m8), 1, f_touchdcstA657());
		dcStructField(at, 'd', offsetof(struct A659, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A659, m10), 1, f_touchdcstA658());
		dcStructField(at, 'c', offsetof(struct A659, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dijcscijj} */
struct A660 { d m0; i m1; j m2; c m3; s m4; c m5; i m6; j m7; j m8; };
void f_cpA660(struct A660 *x, const struct A660 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA660(const struct A660 *x, const struct A660 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA660() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A660), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A660, m0), 1);
		dcStructField(at, 'i', offsetof(struct A660, m1), 1);
		dcStructField(at, 'j', offsetof(struct A660, m2), 1);
		dcStructField(at, 'c', offsetof(struct A660, m3), 1);
		dcStructField(at, 's', offsetof(struct A660, m4), 1);
		dcStructField(at, 'c', offsetof(struct A660, m5), 1);
		dcStructField(at, 'i', offsetof(struct A660, m6), 1);
		dcStructField(at, 'j', offsetof(struct A660, m7), 1);
		dcStructField(at, 'j', offsetof(struct A660, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iflisdjjjsjp> */
union  A661 { i m0; f m1; l m2; i m3; s m4; d m5; j m6; j m7; j m8; s m9; j m10; p m11; };
void f_cpA661(union  A661 *x, const union  A661 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA661(const union  A661 *x, const union  A661 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA661() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A661), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A661, m0), 1);
		dcStructField(at, 'f', offsetof(union  A661, m1), 1);
		dcStructField(at, 'l', offsetof(union  A661, m2), 1);
		dcStructField(at, 'i', offsetof(union  A661, m3), 1);
		dcStructField(at, 's', offsetof(union  A661, m4), 1);
		dcStructField(at, 'd', offsetof(union  A661, m5), 1);
		dcStructField(at, 'j', offsetof(union  A661, m6), 1);
		dcStructField(at, 'j', offsetof(union  A661, m7), 1);
		dcStructField(at, 'j', offsetof(union  A661, m8), 1);
		dcStructField(at, 's', offsetof(union  A661, m9), 1);
		dcStructField(at, 'j', offsetof(union  A661, m10), 1);
		dcStructField(at, 'p', offsetof(union  A661, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lf} */
struct A662 { l m0; f m1; };
void f_cpA662(struct A662 *x, const struct A662 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA662(const struct A662 *x, const struct A662 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA662() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A662), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A662, m0), 1);
		dcStructField(at, 'f', offsetof(struct A662, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sc{dijcscijj}f<iflisdjjjsjp>{lf}> */
union  A663 { s m0; c m1; struct A660 m2; f m3; union  A661 m4; struct A662 m5; };
void f_cpA663(union  A663 *x, const union  A663 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA660(&x->m2, &y->m2); x->m3 = y->m3; f_cpA661(&x->m4, &y->m4); f_cpA662(&x->m5, &y->m5); };
int f_cmpA663(const union  A663 *x, const union  A663 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA660(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA661(&x->m4, &y->m4) && f_cmpA662(&x->m5, &y->m5); };
DCstruct* f_touchdcstA663() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A663), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A663, m0), 1);
		dcStructField(at, 'c', offsetof(union  A663, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A663, m2), 1, f_touchdcstA660());
		dcStructField(at, 'f', offsetof(union  A663, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A663, m4), 1, f_touchdcstA661());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A663, m5), 1, f_touchdcstA662());
		dcCloseStruct(at);
	}
	return at;
};
/* <pl> */
union  A664 { p m0; l m1; };
void f_cpA664(union  A664 *x, const union  A664 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA664(const union  A664 *x, const union  A664 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA664() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A664), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A664, m0), 1);
		dcStructField(at, 'l', offsetof(union  A664, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sljssijcpijs> */
union  A665 { s m0; l m1; j m2; s m3; s m4; i m5; j m6; c m7; p m8; i m9; j m10; s m11; };
void f_cpA665(union  A665 *x, const union  A665 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA665(const union  A665 *x, const union  A665 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA665() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A665), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A665, m0), 1);
		dcStructField(at, 'l', offsetof(union  A665, m1), 1);
		dcStructField(at, 'j', offsetof(union  A665, m2), 1);
		dcStructField(at, 's', offsetof(union  A665, m3), 1);
		dcStructField(at, 's', offsetof(union  A665, m4), 1);
		dcStructField(at, 'i', offsetof(union  A665, m5), 1);
		dcStructField(at, 'j', offsetof(union  A665, m6), 1);
		dcStructField(at, 'c', offsetof(union  A665, m7), 1);
		dcStructField(at, 'p', offsetof(union  A665, m8), 1);
		dcStructField(at, 'i', offsetof(union  A665, m9), 1);
		dcStructField(at, 'j', offsetof(union  A665, m10), 1);
		dcStructField(at, 's', offsetof(union  A665, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lsllc} */
struct A666 { l m0; s m1; l m2; l m3; c m4; };
void f_cpA666(struct A666 *x, const struct A666 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA666(const struct A666 *x, const struct A666 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA666() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A666), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A666, m0), 1);
		dcStructField(at, 's', offsetof(struct A666, m1), 1);
		dcStructField(at, 'l', offsetof(struct A666, m2), 1);
		dcStructField(at, 'l', offsetof(struct A666, m3), 1);
		dcStructField(at, 'c', offsetof(struct A666, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <d[6]<sljssijcpijs>jdisldfc{lsllc}p> */
union  A667 { d m0[6]; union  A665 m1; j m2; d m3; i m4; s m5; l m6; d m7; f m8; c m9; struct A666 m10; p m11; };
void f_cpA667(union  A667 *x, const union  A667 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; f_cpA665(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA666(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA667(const union  A667 *x, const union  A667 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && f_cmpA665(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA666(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA667() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A667), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A667, m0), 6);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A667, m1), 1, f_touchdcstA665());
		dcStructField(at, 'j', offsetof(union  A667, m2), 1);
		dcStructField(at, 'd', offsetof(union  A667, m3), 1);
		dcStructField(at, 'i', offsetof(union  A667, m4), 1);
		dcStructField(at, 's', offsetof(union  A667, m5), 1);
		dcStructField(at, 'l', offsetof(union  A667, m6), 1);
		dcStructField(at, 'd', offsetof(union  A667, m7), 1);
		dcStructField(at, 'f', offsetof(union  A667, m8), 1);
		dcStructField(at, 'c', offsetof(union  A667, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A667, m10), 1, f_touchdcstA666());
		dcStructField(at, 'p', offsetof(union  A667, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ppsdcjs> */
union  A668 { p m0; p m1; s m2; d m3; c m4; j m5; s m6; };
void f_cpA668(union  A668 *x, const union  A668 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA668(const union  A668 *x, const union  A668 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA668() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A668), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A668, m0), 1);
		dcStructField(at, 'p', offsetof(union  A668, m1), 1);
		dcStructField(at, 's', offsetof(union  A668, m2), 1);
		dcStructField(at, 'd', offsetof(union  A668, m3), 1);
		dcStructField(at, 'c', offsetof(union  A668, m4), 1);
		dcStructField(at, 'j', offsetof(union  A668, m5), 1);
		dcStructField(at, 's', offsetof(union  A668, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ljld[1]pfdjl<ppsdcjs>> */
union  A669 { l m0; j m1; l m2; d m3[1]; p m4; f m5; d m6; j m7; l m8; union  A668 m9; };
void f_cpA669(union  A669 *x, const union  A669 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA668(&x->m9, &y->m9); };
int f_cmpA669(const union  A669 *x, const union  A669 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA668(&x->m9, &y->m9); };
DCstruct* f_touchdcstA669() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A669), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A669, m0), 1);
		dcStructField(at, 'j', offsetof(union  A669, m1), 1);
		dcStructField(at, 'l', offsetof(union  A669, m2), 1);
		dcStructField(at, 'd', offsetof(union  A669, m3), 1);
		dcStructField(at, 'p', offsetof(union  A669, m4), 1);
		dcStructField(at, 'f', offsetof(union  A669, m5), 1);
		dcStructField(at, 'd', offsetof(union  A669, m6), 1);
		dcStructField(at, 'j', offsetof(union  A669, m7), 1);
		dcStructField(at, 'l', offsetof(union  A669, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A669, m9), 1, f_touchdcstA668());
		dcCloseStruct(at);
	}
	return at;
};
/* <<i>cd> */
union  A670 { union  A62 m0; c m1; d m2; };
void f_cpA670(union  A670 *x, const union  A670 *y) { f_cpA62(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA670(const union  A670 *x, const union  A670 *y) { return f_cmpA62(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA670() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A670), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A670, m0), 1, f_touchdcstA62());
		dcStructField(at, 'c', offsetof(union  A670, m1), 1);
		dcStructField(at, 'd', offsetof(union  A670, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jlp[13]i<ljld[1]pfdjl<ppsdcjs>>{p}sfd<<i>cd>dp} */
struct A671 { j m0; l m1; p m2[13]; i m3; union  A669 m4; struct A33 m5; s m6; f m7; d m8; union  A670 m9; d m10; p m11; };
void f_cpA671(struct A671 *x, const struct A671 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m3 = y->m3; f_cpA669(&x->m4, &y->m4); f_cpA33(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA670(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA671(const struct A671 *x, const struct A671 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m3 == y->m3 && f_cmpA669(&x->m4, &y->m4) && f_cmpA33(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA670(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA671() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A671), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A671, m0), 1);
		dcStructField(at, 'l', offsetof(struct A671, m1), 1);
		dcStructField(at, 'p', offsetof(struct A671, m2), 13);
		dcStructField(at, 'i', offsetof(struct A671, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A671, m4), 1, f_touchdcstA669());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A671, m5), 1, f_touchdcstA33());
		dcStructField(at, 's', offsetof(struct A671, m6), 1);
		dcStructField(at, 'f', offsetof(struct A671, m7), 1);
		dcStructField(at, 'd', offsetof(struct A671, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A671, m9), 1, f_touchdcstA670());
		dcStructField(at, 'd', offsetof(struct A671, m10), 1);
		dcStructField(at, 'p', offsetof(struct A671, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cis> */
union  A672 { c m0; i m1; s m2; };
void f_cpA672(union  A672 *x, const union  A672 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA672(const union  A672 *x, const union  A672 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA672() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A672), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A672, m0), 1);
		dcStructField(at, 'i', offsetof(union  A672, m1), 1);
		dcStructField(at, 's', offsetof(union  A672, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <i<cis>jijjiji> */
union  A673 { i m0; union  A672 m1; j m2; i m3; j m4; j m5; i m6; j m7; i m8; };
void f_cpA673(union  A673 *x, const union  A673 *y) { x->m0 = y->m0; f_cpA672(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA673(const union  A673 *x, const union  A673 *y) { return x->m0 == y->m0 && f_cmpA672(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA673() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A673), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A673, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A673, m1), 1, f_touchdcstA672());
		dcStructField(at, 'j', offsetof(union  A673, m2), 1);
		dcStructField(at, 'i', offsetof(union  A673, m3), 1);
		dcStructField(at, 'j', offsetof(union  A673, m4), 1);
		dcStructField(at, 'j', offsetof(union  A673, m5), 1);
		dcStructField(at, 'i', offsetof(union  A673, m6), 1);
		dcStructField(at, 'j', offsetof(union  A673, m7), 1);
		dcStructField(at, 'i', offsetof(union  A673, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fddffi> */
union  A674 { f m0; d m1; d m2; f m3; f m4; i m5; };
void f_cpA674(union  A674 *x, const union  A674 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA674(const union  A674 *x, const union  A674 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA674() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A674), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A674, m0), 1);
		dcStructField(at, 'd', offsetof(union  A674, m1), 1);
		dcStructField(at, 'd', offsetof(union  A674, m2), 1);
		dcStructField(at, 'f', offsetof(union  A674, m3), 1);
		dcStructField(at, 'f', offsetof(union  A674, m4), 1);
		dcStructField(at, 'i', offsetof(union  A674, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cilfcfp<fddffi>jdlc} */
struct A675 { c m0; i m1; l m2; f m3; c m4; f m5; p m6; union  A674 m7; j m8; d m9; l m10; c m11; };
void f_cpA675(struct A675 *x, const struct A675 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA674(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA675(const struct A675 *x, const struct A675 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA674(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA675() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A675), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A675, m0), 1);
		dcStructField(at, 'i', offsetof(struct A675, m1), 1);
		dcStructField(at, 'l', offsetof(struct A675, m2), 1);
		dcStructField(at, 'f', offsetof(struct A675, m3), 1);
		dcStructField(at, 'c', offsetof(struct A675, m4), 1);
		dcStructField(at, 'f', offsetof(struct A675, m5), 1);
		dcStructField(at, 'p', offsetof(struct A675, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A675, m7), 1, f_touchdcstA674());
		dcStructField(at, 'j', offsetof(struct A675, m8), 1);
		dcStructField(at, 'd', offsetof(struct A675, m9), 1);
		dcStructField(at, 'l', offsetof(struct A675, m10), 1);
		dcStructField(at, 'c', offsetof(struct A675, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{cilfcfp<fddffi>jdlc}} */
struct A676 { struct A675 m0; };
void f_cpA676(struct A676 *x, const struct A676 *y) { f_cpA675(&x->m0, &y->m0); };
int f_cmpA676(const struct A676 *x, const struct A676 *y) { return f_cmpA675(&x->m0, &y->m0); };
DCstruct* f_touchdcstA676() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A676), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A676, m0), 1, f_touchdcstA675());
		dcCloseStruct(at);
	}
	return at;
};
/* {fj[2]fcpldds} */
struct A677 { f m0; j m1[2]; f m2; c m3; p m4; l m5; d m6; d m7; s m8; };
void f_cpA677(struct A677 *x, const struct A677 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA677(const struct A677 *x, const struct A677 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA677() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A677), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A677, m0), 1);
		dcStructField(at, 'j', offsetof(struct A677, m1), 2);
		dcStructField(at, 'f', offsetof(struct A677, m2), 1);
		dcStructField(at, 'c', offsetof(struct A677, m3), 1);
		dcStructField(at, 'p', offsetof(struct A677, m4), 1);
		dcStructField(at, 'l', offsetof(struct A677, m5), 1);
		dcStructField(at, 'd', offsetof(struct A677, m6), 1);
		dcStructField(at, 'd', offsetof(struct A677, m7), 1);
		dcStructField(at, 's', offsetof(struct A677, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lspdlsj> */
union  A678 { l m0; s m1; p m2; d m3; l m4; s m5; j m6; };
void f_cpA678(union  A678 *x, const union  A678 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA678(const union  A678 *x, const union  A678 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA678() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A678), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A678, m0), 1);
		dcStructField(at, 's', offsetof(union  A678, m1), 1);
		dcStructField(at, 'p', offsetof(union  A678, m2), 1);
		dcStructField(at, 'd', offsetof(union  A678, m3), 1);
		dcStructField(at, 'l', offsetof(union  A678, m4), 1);
		dcStructField(at, 's', offsetof(union  A678, m5), 1);
		dcStructField(at, 'j', offsetof(union  A678, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jf> */
union  A679 { j m0; f m1; };
void f_cpA679(union  A679 *x, const union  A679 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA679(const union  A679 *x, const union  A679 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA679() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A679), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A679, m0), 1);
		dcStructField(at, 'f', offsetof(union  A679, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {idpdsjdcilcd} */
struct A680 { i m0; d m1; p m2; d m3; s m4; j m5; d m6; c m7; i m8; l m9; c m10; d m11; };
void f_cpA680(struct A680 *x, const struct A680 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA680(const struct A680 *x, const struct A680 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA680() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A680), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A680, m0), 1);
		dcStructField(at, 'd', offsetof(struct A680, m1), 1);
		dcStructField(at, 'p', offsetof(struct A680, m2), 1);
		dcStructField(at, 'd', offsetof(struct A680, m3), 1);
		dcStructField(at, 's', offsetof(struct A680, m4), 1);
		dcStructField(at, 'j', offsetof(struct A680, m5), 1);
		dcStructField(at, 'd', offsetof(struct A680, m6), 1);
		dcStructField(at, 'c', offsetof(struct A680, m7), 1);
		dcStructField(at, 'i', offsetof(struct A680, m8), 1);
		dcStructField(at, 'l', offsetof(struct A680, m9), 1);
		dcStructField(at, 'c', offsetof(struct A680, m10), 1);
		dcStructField(at, 'd', offsetof(struct A680, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ij{idpdsjdcilcd}l} */
struct A681 { i m0; j m1; struct A680 m2; l m3; };
void f_cpA681(struct A681 *x, const struct A681 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA680(&x->m2, &y->m2); x->m3 = y->m3; };
int f_cmpA681(const struct A681 *x, const struct A681 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA680(&x->m2, &y->m2) && x->m3 == y->m3; };
DCstruct* f_touchdcstA681() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A681), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A681, m0), 1);
		dcStructField(at, 'j', offsetof(struct A681, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A681, m2), 1, f_touchdcstA680());
		dcStructField(at, 'l', offsetof(struct A681, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cjjddp} */
struct A682 { c m0; j m1; j m2; d m3; d m4; p m5; };
void f_cpA682(struct A682 *x, const struct A682 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA682(const struct A682 *x, const struct A682 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA682() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A682), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A682, m0), 1);
		dcStructField(at, 'j', offsetof(struct A682, m1), 1);
		dcStructField(at, 'j', offsetof(struct A682, m2), 1);
		dcStructField(at, 'd', offsetof(struct A682, m3), 1);
		dcStructField(at, 'd', offsetof(struct A682, m4), 1);
		dcStructField(at, 'p', offsetof(struct A682, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<jf>i{ij{idpdsjdcilcd}l}[13]lliplsc{cjjddp}i} */
struct A683 { union  A679 m0; i m1; struct A681 m2[13]; l m3; l m4; i m5; p m6; l m7; s m8; c m9; struct A682 m10; i m11; };
void f_cpA683(struct A683 *x, const struct A683 *y) { f_cpA679(&x->m0, &y->m0); x->m1 = y->m1; f_cpA681(&x->m2[0], &y->m2[0]); f_cpA681(&x->m2[1], &y->m2[1]); f_cpA681(&x->m2[2], &y->m2[2]); f_cpA681(&x->m2[3], &y->m2[3]); f_cpA681(&x->m2[4], &y->m2[4]); f_cpA681(&x->m2[5], &y->m2[5]); f_cpA681(&x->m2[6], &y->m2[6]); f_cpA681(&x->m2[7], &y->m2[7]); f_cpA681(&x->m2[8], &y->m2[8]); f_cpA681(&x->m2[9], &y->m2[9]); f_cpA681(&x->m2[10], &y->m2[10]); f_cpA681(&x->m2[11], &y->m2[11]); f_cpA681(&x->m2[12], &y->m2[12]); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA682(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA683(const struct A683 *x, const struct A683 *y) { return f_cmpA679(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA681(&x->m2[0], &y->m2[0]) && f_cmpA681(&x->m2[1], &y->m2[1]) && f_cmpA681(&x->m2[2], &y->m2[2]) && f_cmpA681(&x->m2[3], &y->m2[3]) && f_cmpA681(&x->m2[4], &y->m2[4]) && f_cmpA681(&x->m2[5], &y->m2[5]) && f_cmpA681(&x->m2[6], &y->m2[6]) && f_cmpA681(&x->m2[7], &y->m2[7]) && f_cmpA681(&x->m2[8], &y->m2[8]) && f_cmpA681(&x->m2[9], &y->m2[9]) && f_cmpA681(&x->m2[10], &y->m2[10]) && f_cmpA681(&x->m2[11], &y->m2[11]) && f_cmpA681(&x->m2[12], &y->m2[12]) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA682(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA683() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A683), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A683, m0), 1, f_touchdcstA679());
		dcStructField(at, 'i', offsetof(struct A683, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A683, m2), 13, f_touchdcstA681());
		dcStructField(at, 'l', offsetof(struct A683, m3), 1);
		dcStructField(at, 'l', offsetof(struct A683, m4), 1);
		dcStructField(at, 'i', offsetof(struct A683, m5), 1);
		dcStructField(at, 'p', offsetof(struct A683, m6), 1);
		dcStructField(at, 'l', offsetof(struct A683, m7), 1);
		dcStructField(at, 's', offsetof(struct A683, m8), 1);
		dcStructField(at, 'c', offsetof(struct A683, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A683, m10), 1, f_touchdcstA682());
		dcStructField(at, 'i', offsetof(struct A683, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <djscds[1]jljfli> */
union  A684 { d m0; j m1; s m2; c m3; d m4; s m5[1]; j m6; l m7; j m8; f m9; l m10; i m11; };
void f_cpA684(union  A684 *x, const union  A684 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA684(const union  A684 *x, const union  A684 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA684() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A684), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A684, m0), 1);
		dcStructField(at, 'j', offsetof(union  A684, m1), 1);
		dcStructField(at, 's', offsetof(union  A684, m2), 1);
		dcStructField(at, 'c', offsetof(union  A684, m3), 1);
		dcStructField(at, 'd', offsetof(union  A684, m4), 1);
		dcStructField(at, 's', offsetof(union  A684, m5), 1);
		dcStructField(at, 'j', offsetof(union  A684, m6), 1);
		dcStructField(at, 'l', offsetof(union  A684, m7), 1);
		dcStructField(at, 'j', offsetof(union  A684, m8), 1);
		dcStructField(at, 'f', offsetof(union  A684, m9), 1);
		dcStructField(at, 'l', offsetof(union  A684, m10), 1);
		dcStructField(at, 'i', offsetof(union  A684, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lddfljpcfjlc> */
union  A685 { l m0; d m1; d m2; f m3; l m4; j m5; p m6; c m7; f m8; j m9; l m10; c m11; };
void f_cpA685(union  A685 *x, const union  A685 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA685(const union  A685 *x, const union  A685 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA685() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A685), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A685, m0), 1);
		dcStructField(at, 'd', offsetof(union  A685, m1), 1);
		dcStructField(at, 'd', offsetof(union  A685, m2), 1);
		dcStructField(at, 'f', offsetof(union  A685, m3), 1);
		dcStructField(at, 'l', offsetof(union  A685, m4), 1);
		dcStructField(at, 'j', offsetof(union  A685, m5), 1);
		dcStructField(at, 'p', offsetof(union  A685, m6), 1);
		dcStructField(at, 'c', offsetof(union  A685, m7), 1);
		dcStructField(at, 'f', offsetof(union  A685, m8), 1);
		dcStructField(at, 'j', offsetof(union  A685, m9), 1);
		dcStructField(at, 'l', offsetof(union  A685, m10), 1);
		dcStructField(at, 'c', offsetof(union  A685, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {psfidcidfjlf} */
struct A686 { p m0; s m1; f m2; i m3; d m4; c m5; i m6; d m7; f m8; j m9; l m10; f m11; };
void f_cpA686(struct A686 *x, const struct A686 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA686(const struct A686 *x, const struct A686 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA686() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A686), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A686, m0), 1);
		dcStructField(at, 's', offsetof(struct A686, m1), 1);
		dcStructField(at, 'f', offsetof(struct A686, m2), 1);
		dcStructField(at, 'i', offsetof(struct A686, m3), 1);
		dcStructField(at, 'd', offsetof(struct A686, m4), 1);
		dcStructField(at, 'c', offsetof(struct A686, m5), 1);
		dcStructField(at, 'i', offsetof(struct A686, m6), 1);
		dcStructField(at, 'd', offsetof(struct A686, m7), 1);
		dcStructField(at, 'f', offsetof(struct A686, m8), 1);
		dcStructField(at, 'j', offsetof(struct A686, m9), 1);
		dcStructField(at, 'l', offsetof(struct A686, m10), 1);
		dcStructField(at, 'f', offsetof(struct A686, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p<djscds[1]jljfli><lddfljpcfjlc>d{psfidcidfjlf}l} */
struct A687 { p m0; union  A684 m1; union  A685 m2; d m3; struct A686 m4; l m5; };
void f_cpA687(struct A687 *x, const struct A687 *y) { x->m0 = y->m0; f_cpA684(&x->m1, &y->m1); f_cpA685(&x->m2, &y->m2); x->m3 = y->m3; f_cpA686(&x->m4, &y->m4); x->m5 = y->m5; };
int f_cmpA687(const struct A687 *x, const struct A687 *y) { return x->m0 == y->m0 && f_cmpA684(&x->m1, &y->m1) && f_cmpA685(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA686(&x->m4, &y->m4) && x->m5 == y->m5; };
DCstruct* f_touchdcstA687() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A687), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A687, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A687, m1), 1, f_touchdcstA684());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A687, m2), 1, f_touchdcstA685());
		dcStructField(at, 'd', offsetof(struct A687, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A687, m4), 1, f_touchdcstA686());
		dcStructField(at, 'l', offsetof(struct A687, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sf> */
union  A688 { s m0; f m1; };
void f_cpA688(union  A688 *x, const union  A688 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA688(const union  A688 *x, const union  A688 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA688() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A688), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A688, m0), 1);
		dcStructField(at, 'f', offsetof(union  A688, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pfi} */
struct A689 { p m0; f m1; i m2; };
void f_cpA689(struct A689 *x, const struct A689 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA689(const struct A689 *x, const struct A689 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA689() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A689), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A689, m0), 1);
		dcStructField(at, 'f', offsetof(struct A689, m1), 1);
		dcStructField(at, 'i', offsetof(struct A689, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {c[2]pfddfc[1]fjsif} */
struct A690 { c m0[2]; p m1; f m2; d m3; d m4; f m5; c m6[1]; f m7; j m8; s m9; i m10; f m11; };
void f_cpA690(struct A690 *x, const struct A690 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA690(const struct A690 *x, const struct A690 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA690() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A690), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A690, m0), 2);
		dcStructField(at, 'p', offsetof(struct A690, m1), 1);
		dcStructField(at, 'f', offsetof(struct A690, m2), 1);
		dcStructField(at, 'd', offsetof(struct A690, m3), 1);
		dcStructField(at, 'd', offsetof(struct A690, m4), 1);
		dcStructField(at, 'f', offsetof(struct A690, m5), 1);
		dcStructField(at, 'c', offsetof(struct A690, m6), 1);
		dcStructField(at, 'f', offsetof(struct A690, m7), 1);
		dcStructField(at, 'j', offsetof(struct A690, m8), 1);
		dcStructField(at, 's', offsetof(struct A690, m9), 1);
		dcStructField(at, 'i', offsetof(struct A690, m10), 1);
		dcStructField(at, 'f', offsetof(struct A690, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<sf>ll<sp>cl<pc>{pfi}cd{c[2]pfddfc[1]fjsif}d> */
union  A691 { union  A688 m0; l m1; l m2; union  A510 m3; c m4; l m5; union  A278 m6; struct A689 m7; c m8; d m9; struct A690 m10; d m11; };
void f_cpA691(union  A691 *x, const union  A691 *y) { f_cpA688(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA510(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; f_cpA278(&x->m6, &y->m6); f_cpA689(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; f_cpA690(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA691(const union  A691 *x, const union  A691 *y) { return f_cmpA688(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA510(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA278(&x->m6, &y->m6) && f_cmpA689(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA690(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA691() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A691), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A691, m0), 1, f_touchdcstA688());
		dcStructField(at, 'l', offsetof(union  A691, m1), 1);
		dcStructField(at, 'l', offsetof(union  A691, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A691, m3), 1, f_touchdcstA510());
		dcStructField(at, 'c', offsetof(union  A691, m4), 1);
		dcStructField(at, 'l', offsetof(union  A691, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A691, m6), 1, f_touchdcstA278());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A691, m7), 1, f_touchdcstA689());
		dcStructField(at, 'c', offsetof(union  A691, m8), 1);
		dcStructField(at, 'd', offsetof(union  A691, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A691, m10), 1, f_touchdcstA690());
		dcStructField(at, 'd', offsetof(union  A691, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <si> */
union  A692 { s m0; i m1; };
void f_cpA692(union  A692 *x, const union  A692 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA692(const union  A692 *x, const union  A692 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA692() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A692), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A692, m0), 1);
		dcStructField(at, 'i', offsetof(union  A692, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jcpjc> */
union  A693 { j m0; c m1; p m2; j m3; c m4; };
void f_cpA693(union  A693 *x, const union  A693 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA693(const union  A693 *x, const union  A693 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA693() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A693), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A693, m0), 1);
		dcStructField(at, 'c', offsetof(union  A693, m1), 1);
		dcStructField(at, 'p', offsetof(union  A693, m2), 1);
		dcStructField(at, 'j', offsetof(union  A693, m3), 1);
		dcStructField(at, 'c', offsetof(union  A693, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cldc} */
struct A694 { c m0; l m1; d m2; c m3; };
void f_cpA694(struct A694 *x, const struct A694 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA694(const struct A694 *x, const struct A694 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA694() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A694), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A694, m0), 1);
		dcStructField(at, 'l', offsetof(struct A694, m1), 1);
		dcStructField(at, 'd', offsetof(struct A694, m2), 1);
		dcStructField(at, 'c', offsetof(struct A694, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<jcpjc>d{cldc}jcfcjp> */
union  A695 { union  A693 m0; d m1; struct A694 m2; j m3; c m4; f m5; c m6; j m7; p m8; };
void f_cpA695(union  A695 *x, const union  A695 *y) { f_cpA693(&x->m0, &y->m0); x->m1 = y->m1; f_cpA694(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA695(const union  A695 *x, const union  A695 *y) { return f_cmpA693(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA694(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA695() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A695), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A695, m0), 1, f_touchdcstA693());
		dcStructField(at, 'd', offsetof(union  A695, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A695, m2), 1, f_touchdcstA694());
		dcStructField(at, 'j', offsetof(union  A695, m3), 1);
		dcStructField(at, 'c', offsetof(union  A695, m4), 1);
		dcStructField(at, 'f', offsetof(union  A695, m5), 1);
		dcStructField(at, 'c', offsetof(union  A695, m6), 1);
		dcStructField(at, 'j', offsetof(union  A695, m7), 1);
		dcStructField(at, 'p', offsetof(union  A695, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {didl} */
struct A696 { d m0; i m1; d m2; l m3; };
void f_cpA696(struct A696 *x, const struct A696 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA696(const struct A696 *x, const struct A696 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA696() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A696), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A696, m0), 1);
		dcStructField(at, 'i', offsetof(struct A696, m1), 1);
		dcStructField(at, 'd', offsetof(struct A696, m2), 1);
		dcStructField(at, 'l', offsetof(struct A696, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cldsf} */
struct A697 { c m0; l m1; d m2; s m3; f m4; };
void f_cpA697(struct A697 *x, const struct A697 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA697(const struct A697 *x, const struct A697 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA697() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A697), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A697, m0), 1);
		dcStructField(at, 'l', offsetof(struct A697, m1), 1);
		dcStructField(at, 'd', offsetof(struct A697, m2), 1);
		dcStructField(at, 's', offsetof(struct A697, m3), 1);
		dcStructField(at, 'f', offsetof(struct A697, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fpddsscl} */
struct A698 { f m0; p m1; d m2; d m3; s m4; s m5; c m6; l m7; };
void f_cpA698(struct A698 *x, const struct A698 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA698(const struct A698 *x, const struct A698 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA698() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A698), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A698, m0), 1);
		dcStructField(at, 'p', offsetof(struct A698, m1), 1);
		dcStructField(at, 'd', offsetof(struct A698, m2), 1);
		dcStructField(at, 'd', offsetof(struct A698, m3), 1);
		dcStructField(at, 's', offsetof(struct A698, m4), 1);
		dcStructField(at, 's', offsetof(struct A698, m5), 1);
		dcStructField(at, 'c', offsetof(struct A698, m6), 1);
		dcStructField(at, 'l', offsetof(struct A698, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jpjl{didl}{cldsf}f{s}jil[9]{fpddsscl}> */
union  A699 { j m0; p m1; j m2; l m3; struct A696 m4; struct A697 m5; f m6; struct A162 m7; j m8; i m9; l m10[9]; struct A698 m11; };
void f_cpA699(union  A699 *x, const union  A699 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA696(&x->m4, &y->m4); f_cpA697(&x->m5, &y->m5); x->m6 = y->m6; f_cpA162(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m10[8] = y->m10[8]; f_cpA698(&x->m11, &y->m11); };
int f_cmpA699(const union  A699 *x, const union  A699 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA696(&x->m4, &y->m4) && f_cmpA697(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA162(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m10[8] == y->m10[8] && f_cmpA698(&x->m11, &y->m11); };
DCstruct* f_touchdcstA699() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A699), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A699, m0), 1);
		dcStructField(at, 'p', offsetof(union  A699, m1), 1);
		dcStructField(at, 'j', offsetof(union  A699, m2), 1);
		dcStructField(at, 'l', offsetof(union  A699, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A699, m4), 1, f_touchdcstA696());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A699, m5), 1, f_touchdcstA697());
		dcStructField(at, 'f', offsetof(union  A699, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A699, m7), 1, f_touchdcstA162());
		dcStructField(at, 'j', offsetof(union  A699, m8), 1);
		dcStructField(at, 'i', offsetof(union  A699, m9), 1);
		dcStructField(at, 'l', offsetof(union  A699, m10), 9);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A699, m11), 1, f_touchdcstA698());
		dcCloseStruct(at);
	}
	return at;
};
/* {<c><jpjl{didl}{cldsf}f{s}jil[9]{fpddsscl}>} */
struct A700 { union  A116 m0; union  A699 m1; };
void f_cpA700(struct A700 *x, const struct A700 *y) { f_cpA116(&x->m0, &y->m0); f_cpA699(&x->m1, &y->m1); };
int f_cmpA700(const struct A700 *x, const struct A700 *y) { return f_cmpA116(&x->m0, &y->m0) && f_cmpA699(&x->m1, &y->m1); };
DCstruct* f_touchdcstA700() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A700), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A700, m0), 1, f_touchdcstA116());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A700, m1), 1, f_touchdcstA699());
		dcCloseStruct(at);
	}
	return at;
};
/* {ll} */
struct A701 { l m0; l m1; };
void f_cpA701(struct A701 *x, const struct A701 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA701(const struct A701 *x, const struct A701 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA701() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A701), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A701, m0), 1);
		dcStructField(at, 'l', offsetof(struct A701, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {plpls[14]jj{ll}fc} */
struct A702 { p m0; l m1; p m2; l m3; s m4[14]; j m5; j m6; struct A701 m7; f m8; c m9; };
void f_cpA702(struct A702 *x, const struct A702 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m4[12] = y->m4[12]; x->m4[13] = y->m4[13]; x->m5 = y->m5; x->m6 = y->m6; f_cpA701(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA702(const struct A702 *x, const struct A702 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m4[12] == y->m4[12] && x->m4[13] == y->m4[13] && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA701(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA702() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A702), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A702, m0), 1);
		dcStructField(at, 'l', offsetof(struct A702, m1), 1);
		dcStructField(at, 'p', offsetof(struct A702, m2), 1);
		dcStructField(at, 'l', offsetof(struct A702, m3), 1);
		dcStructField(at, 's', offsetof(struct A702, m4), 14);
		dcStructField(at, 'j', offsetof(struct A702, m5), 1);
		dcStructField(at, 'j', offsetof(struct A702, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A702, m7), 1, f_touchdcstA701());
		dcStructField(at, 'f', offsetof(struct A702, m8), 1);
		dcStructField(at, 'c', offsetof(struct A702, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cciidll} */
struct A703 { c m0; c m1; i m2; i m3; d m4; l m5; l m6; };
void f_cpA703(struct A703 *x, const struct A703 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA703(const struct A703 *x, const struct A703 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA703() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A703), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A703, m0), 1);
		dcStructField(at, 'c', offsetof(struct A703, m1), 1);
		dcStructField(at, 'i', offsetof(struct A703, m2), 1);
		dcStructField(at, 'i', offsetof(struct A703, m3), 1);
		dcStructField(at, 'd', offsetof(struct A703, m4), 1);
		dcStructField(at, 'l', offsetof(struct A703, m5), 1);
		dcStructField(at, 'l', offsetof(struct A703, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <scilsl> */
union  A704 { s m0; c m1; i m2; l m3; s m4; l m5; };
void f_cpA704(union  A704 *x, const union  A704 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA704(const union  A704 *x, const union  A704 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA704() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A704), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A704, m0), 1);
		dcStructField(at, 'c', offsetof(union  A704, m1), 1);
		dcStructField(at, 'i', offsetof(union  A704, m2), 1);
		dcStructField(at, 'l', offsetof(union  A704, m3), 1);
		dcStructField(at, 's', offsetof(union  A704, m4), 1);
		dcStructField(at, 'l', offsetof(union  A704, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{cciidll}<scilsl>> */
union  A705 { struct A703 m0; union  A704 m1; };
void f_cpA705(union  A705 *x, const union  A705 *y) { f_cpA703(&x->m0, &y->m0); f_cpA704(&x->m1, &y->m1); };
int f_cmpA705(const union  A705 *x, const union  A705 *y) { return f_cmpA703(&x->m0, &y->m0) && f_cmpA704(&x->m1, &y->m1); };
DCstruct* f_touchdcstA705() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A705), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A705, m0), 1, f_touchdcstA703());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A705, m1), 1, f_touchdcstA704());
		dcCloseStruct(at);
	}
	return at;
};
/* {lfdlpd} */
struct A706 { l m0; f m1; d m2; l m3; p m4; d m5; };
void f_cpA706(struct A706 *x, const struct A706 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA706(const struct A706 *x, const struct A706 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA706() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A706), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A706, m0), 1);
		dcStructField(at, 'f', offsetof(struct A706, m1), 1);
		dcStructField(at, 'd', offsetof(struct A706, m2), 1);
		dcStructField(at, 'l', offsetof(struct A706, m3), 1);
		dcStructField(at, 'p', offsetof(struct A706, m4), 1);
		dcStructField(at, 'd', offsetof(struct A706, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lpslss[15]cijslc> */
union  A707 { l m0; p m1; s m2; l m3; s m4; s m5[15]; c m6; i m7; j m8; s m9; l m10; c m11; };
void f_cpA707(union  A707 *x, const union  A707 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m5[11] = y->m5[11]; x->m5[12] = y->m5[12]; x->m5[13] = y->m5[13]; x->m5[14] = y->m5[14]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA707(const union  A707 *x, const union  A707 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m5[11] == y->m5[11] && x->m5[12] == y->m5[12] && x->m5[13] == y->m5[13] && x->m5[14] == y->m5[14] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA707() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A707), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A707, m0), 1);
		dcStructField(at, 'p', offsetof(union  A707, m1), 1);
		dcStructField(at, 's', offsetof(union  A707, m2), 1);
		dcStructField(at, 'l', offsetof(union  A707, m3), 1);
		dcStructField(at, 's', offsetof(union  A707, m4), 1);
		dcStructField(at, 's', offsetof(union  A707, m5), 15);
		dcStructField(at, 'c', offsetof(union  A707, m6), 1);
		dcStructField(at, 'i', offsetof(union  A707, m7), 1);
		dcStructField(at, 'j', offsetof(union  A707, m8), 1);
		dcStructField(at, 's', offsetof(union  A707, m9), 1);
		dcStructField(at, 'l', offsetof(union  A707, m10), 1);
		dcStructField(at, 'c', offsetof(union  A707, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {idp} */
struct A708 { i m0; d m1; p m2; };
void f_cpA708(struct A708 *x, const struct A708 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA708(const struct A708 *x, const struct A708 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA708() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A708), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A708, m0), 1);
		dcStructField(at, 'd', offsetof(struct A708, m1), 1);
		dcStructField(at, 'p', offsetof(struct A708, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{lfdlpd}<lpslss[15]cijslc>lldi{idp}icdi[9]i} */
struct A709 { struct A706 m0; union  A707 m1; l m2; l m3; d m4; i m5; struct A708 m6; i m7; c m8; d m9; i m10[9]; i m11; };
void f_cpA709(struct A709 *x, const struct A709 *y) { f_cpA706(&x->m0, &y->m0); f_cpA707(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA708(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m10[8] = y->m10[8]; x->m11 = y->m11; };
int f_cmpA709(const struct A709 *x, const struct A709 *y) { return f_cmpA706(&x->m0, &y->m0) && f_cmpA707(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA708(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m10[8] == y->m10[8] && x->m11 == y->m11; };
DCstruct* f_touchdcstA709() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A709), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A709, m0), 1, f_touchdcstA706());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A709, m1), 1, f_touchdcstA707());
		dcStructField(at, 'l', offsetof(struct A709, m2), 1);
		dcStructField(at, 'l', offsetof(struct A709, m3), 1);
		dcStructField(at, 'd', offsetof(struct A709, m4), 1);
		dcStructField(at, 'i', offsetof(struct A709, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A709, m6), 1, f_touchdcstA708());
		dcStructField(at, 'i', offsetof(struct A709, m7), 1);
		dcStructField(at, 'c', offsetof(struct A709, m8), 1);
		dcStructField(at, 'd', offsetof(struct A709, m9), 1);
		dcStructField(at, 'i', offsetof(struct A709, m10), 9);
		dcStructField(at, 'i', offsetof(struct A709, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{{lfdlpd}<lpslss[15]cijslc>lldi{idp}icdi[9]i}d> */
union  A710 { struct A709 m0; d m1; };
void f_cpA710(union  A710 *x, const union  A710 *y) { f_cpA709(&x->m0, &y->m0); x->m1 = y->m1; };
int f_cmpA710(const union  A710 *x, const union  A710 *y) { return f_cmpA709(&x->m0, &y->m0) && x->m1 == y->m1; };
DCstruct* f_touchdcstA710() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A710), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A710, m0), 1, f_touchdcstA709());
		dcStructField(at, 'd', offsetof(union  A710, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <djiijfssdill> */
union  A711 { d m0; j m1; i m2; i m3; j m4; f m5; s m6; s m7; d m8; i m9; l m10; l m11; };
void f_cpA711(union  A711 *x, const union  A711 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA711(const union  A711 *x, const union  A711 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA711() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A711), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A711, m0), 1);
		dcStructField(at, 'j', offsetof(union  A711, m1), 1);
		dcStructField(at, 'i', offsetof(union  A711, m2), 1);
		dcStructField(at, 'i', offsetof(union  A711, m3), 1);
		dcStructField(at, 'j', offsetof(union  A711, m4), 1);
		dcStructField(at, 'f', offsetof(union  A711, m5), 1);
		dcStructField(at, 's', offsetof(union  A711, m6), 1);
		dcStructField(at, 's', offsetof(union  A711, m7), 1);
		dcStructField(at, 'd', offsetof(union  A711, m8), 1);
		dcStructField(at, 'i', offsetof(union  A711, m9), 1);
		dcStructField(at, 'l', offsetof(union  A711, m10), 1);
		dcStructField(at, 'l', offsetof(union  A711, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<djiijfssdill>jsilp[11]lcclij> */
union  A712 { union  A711 m0; j m1; s m2; i m3; l m4; p m5[11]; l m6; c m7; c m8; l m9; i m10; j m11; };
void f_cpA712(union  A712 *x, const union  A712 *y) { f_cpA711(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA712(const union  A712 *x, const union  A712 *y) { return f_cmpA711(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA712() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A712), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A712, m0), 1, f_touchdcstA711());
		dcStructField(at, 'j', offsetof(union  A712, m1), 1);
		dcStructField(at, 's', offsetof(union  A712, m2), 1);
		dcStructField(at, 'i', offsetof(union  A712, m3), 1);
		dcStructField(at, 'l', offsetof(union  A712, m4), 1);
		dcStructField(at, 'p', offsetof(union  A712, m5), 11);
		dcStructField(at, 'l', offsetof(union  A712, m6), 1);
		dcStructField(at, 'c', offsetof(union  A712, m7), 1);
		dcStructField(at, 'c', offsetof(union  A712, m8), 1);
		dcStructField(at, 'l', offsetof(union  A712, m9), 1);
		dcStructField(at, 'i', offsetof(union  A712, m10), 1);
		dcStructField(at, 'j', offsetof(union  A712, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ccljscdjidll> */
union  A713 { c m0; c m1; l m2; j m3; s m4; c m5; d m6; j m7; i m8; d m9; l m10; l m11; };
void f_cpA713(union  A713 *x, const union  A713 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA713(const union  A713 *x, const union  A713 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA713() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A713), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A713, m0), 1);
		dcStructField(at, 'c', offsetof(union  A713, m1), 1);
		dcStructField(at, 'l', offsetof(union  A713, m2), 1);
		dcStructField(at, 'j', offsetof(union  A713, m3), 1);
		dcStructField(at, 's', offsetof(union  A713, m4), 1);
		dcStructField(at, 'c', offsetof(union  A713, m5), 1);
		dcStructField(at, 'd', offsetof(union  A713, m6), 1);
		dcStructField(at, 'j', offsetof(union  A713, m7), 1);
		dcStructField(at, 'i', offsetof(union  A713, m8), 1);
		dcStructField(at, 'd', offsetof(union  A713, m9), 1);
		dcStructField(at, 'l', offsetof(union  A713, m10), 1);
		dcStructField(at, 'l', offsetof(union  A713, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jdldj<ccljscdjidll>jc} */
struct A714 { j m0; d m1; l m2; d m3; j m4; union  A713 m5; j m6; c m7; };
void f_cpA714(struct A714 *x, const struct A714 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA713(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA714(const struct A714 *x, const struct A714 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA713(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA714() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A714), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A714, m0), 1);
		dcStructField(at, 'd', offsetof(struct A714, m1), 1);
		dcStructField(at, 'l', offsetof(struct A714, m2), 1);
		dcStructField(at, 'd', offsetof(struct A714, m3), 1);
		dcStructField(at, 'j', offsetof(struct A714, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A714, m5), 1, f_touchdcstA713());
		dcStructField(at, 'j', offsetof(struct A714, m6), 1);
		dcStructField(at, 'c', offsetof(struct A714, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<<djiijfssdill>jsilp[11]lcclij>fc{jdldj<ccljscdjidll>jc}ipds[7]> */
union  A715 { union  A712 m0; f m1; c m2; struct A714 m3; i m4; p m5; d m6; s m7[7]; };
void f_cpA715(union  A715 *x, const union  A715 *y) { f_cpA712(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA714(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; };
int f_cmpA715(const union  A715 *x, const union  A715 *y) { return f_cmpA712(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA714(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6]; };
DCstruct* f_touchdcstA715() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A715), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A715, m0), 1, f_touchdcstA712());
		dcStructField(at, 'f', offsetof(union  A715, m1), 1);
		dcStructField(at, 'c', offsetof(union  A715, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A715, m3), 1, f_touchdcstA714());
		dcStructField(at, 'i', offsetof(union  A715, m4), 1);
		dcStructField(at, 'p', offsetof(union  A715, m5), 1);
		dcStructField(at, 'd', offsetof(union  A715, m6), 1);
		dcStructField(at, 's', offsetof(union  A715, m7), 7);
		dcCloseStruct(at);
	}
	return at;
};
/* {jdj{p}} */
struct A716 { j m0; d m1; j m2; struct A33 m3; };
void f_cpA716(struct A716 *x, const struct A716 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA33(&x->m3, &y->m3); };
int f_cmpA716(const struct A716 *x, const struct A716 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA33(&x->m3, &y->m3); };
DCstruct* f_touchdcstA716() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A716), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A716, m0), 1);
		dcStructField(at, 'd', offsetof(struct A716, m1), 1);
		dcStructField(at, 'j', offsetof(struct A716, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A716, m3), 1, f_touchdcstA33());
		dcCloseStruct(at);
	}
	return at;
};
/* <lpfsiclpljid> */
union  A717 { l m0; p m1; f m2; s m3; i m4; c m5; l m6; p m7; l m8; j m9; i m10; d m11; };
void f_cpA717(union  A717 *x, const union  A717 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA717(const union  A717 *x, const union  A717 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA717() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A717), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A717, m0), 1);
		dcStructField(at, 'p', offsetof(union  A717, m1), 1);
		dcStructField(at, 'f', offsetof(union  A717, m2), 1);
		dcStructField(at, 's', offsetof(union  A717, m3), 1);
		dcStructField(at, 'i', offsetof(union  A717, m4), 1);
		dcStructField(at, 'c', offsetof(union  A717, m5), 1);
		dcStructField(at, 'l', offsetof(union  A717, m6), 1);
		dcStructField(at, 'p', offsetof(union  A717, m7), 1);
		dcStructField(at, 'l', offsetof(union  A717, m8), 1);
		dcStructField(at, 'j', offsetof(union  A717, m9), 1);
		dcStructField(at, 'i', offsetof(union  A717, m10), 1);
		dcStructField(at, 'd', offsetof(union  A717, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dplscppfdllc} */
struct A718 { d m0; p m1; l m2; s m3; c m4; p m5; p m6; f m7; d m8; l m9; l m10; c m11; };
void f_cpA718(struct A718 *x, const struct A718 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA718(const struct A718 *x, const struct A718 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA718() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A718), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A718, m0), 1);
		dcStructField(at, 'p', offsetof(struct A718, m1), 1);
		dcStructField(at, 'l', offsetof(struct A718, m2), 1);
		dcStructField(at, 's', offsetof(struct A718, m3), 1);
		dcStructField(at, 'c', offsetof(struct A718, m4), 1);
		dcStructField(at, 'p', offsetof(struct A718, m5), 1);
		dcStructField(at, 'p', offsetof(struct A718, m6), 1);
		dcStructField(at, 'f', offsetof(struct A718, m7), 1);
		dcStructField(at, 'd', offsetof(struct A718, m8), 1);
		dcStructField(at, 'l', offsetof(struct A718, m9), 1);
		dcStructField(at, 'l', offsetof(struct A718, m10), 1);
		dcStructField(at, 'c', offsetof(struct A718, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jjpiisdfsjcc> */
union  A719 { j m0; j m1; p m2; i m3; i m4; s m5; d m6; f m7; s m8; j m9; c m10; c m11; };
void f_cpA719(union  A719 *x, const union  A719 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA719(const union  A719 *x, const union  A719 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA719() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A719), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A719, m0), 1);
		dcStructField(at, 'j', offsetof(union  A719, m1), 1);
		dcStructField(at, 'p', offsetof(union  A719, m2), 1);
		dcStructField(at, 'i', offsetof(union  A719, m3), 1);
		dcStructField(at, 'i', offsetof(union  A719, m4), 1);
		dcStructField(at, 's', offsetof(union  A719, m5), 1);
		dcStructField(at, 'd', offsetof(union  A719, m6), 1);
		dcStructField(at, 'f', offsetof(union  A719, m7), 1);
		dcStructField(at, 's', offsetof(union  A719, m8), 1);
		dcStructField(at, 'j', offsetof(union  A719, m9), 1);
		dcStructField(at, 'c', offsetof(union  A719, m10), 1);
		dcStructField(at, 'c', offsetof(union  A719, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fsf} */
struct A720 { f m0; s m1; f m2; };
void f_cpA720(struct A720 *x, const struct A720 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA720(const struct A720 *x, const struct A720 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA720() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A720), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A720, m0), 1);
		dcStructField(at, 's', offsetof(struct A720, m1), 1);
		dcStructField(at, 'f', offsetof(struct A720, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {l[2]<jjpiisdfsjcc>jf{fsf}} */
struct A721 { l m0[2]; union  A719 m1; j m2; f m3; struct A720 m4; };
void f_cpA721(struct A721 *x, const struct A721 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; f_cpA719(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; f_cpA720(&x->m4, &y->m4); };
int f_cmpA721(const struct A721 *x, const struct A721 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && f_cmpA719(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA720(&x->m4, &y->m4); };
DCstruct* f_touchdcstA721() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A721), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A721, m0), 2);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A721, m1), 1, f_touchdcstA719());
		dcStructField(at, 'j', offsetof(struct A721, m2), 1);
		dcStructField(at, 'f', offsetof(struct A721, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A721, m4), 1, f_touchdcstA720());
		dcCloseStruct(at);
	}
	return at;
};
/* <fcflcpjjfdcp> */
union  A722 { f m0; c m1; f m2; l m3; c m4; p m5; j m6; j m7; f m8; d m9; c m10; p m11; };
void f_cpA722(union  A722 *x, const union  A722 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA722(const union  A722 *x, const union  A722 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA722() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A722), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A722, m0), 1);
		dcStructField(at, 'c', offsetof(union  A722, m1), 1);
		dcStructField(at, 'f', offsetof(union  A722, m2), 1);
		dcStructField(at, 'l', offsetof(union  A722, m3), 1);
		dcStructField(at, 'c', offsetof(union  A722, m4), 1);
		dcStructField(at, 'p', offsetof(union  A722, m5), 1);
		dcStructField(at, 'j', offsetof(union  A722, m6), 1);
		dcStructField(at, 'j', offsetof(union  A722, m7), 1);
		dcStructField(at, 'f', offsetof(union  A722, m8), 1);
		dcStructField(at, 'd', offsetof(union  A722, m9), 1);
		dcStructField(at, 'c', offsetof(union  A722, m10), 1);
		dcStructField(at, 'p', offsetof(union  A722, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lc<fcflcpjjfdcp>d> */
union  A723 { l m0; c m1; union  A722 m2; d m3; };
void f_cpA723(union  A723 *x, const union  A723 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA722(&x->m2, &y->m2); x->m3 = y->m3; };
int f_cmpA723(const union  A723 *x, const union  A723 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA722(&x->m2, &y->m2) && x->m3 == y->m3; };
DCstruct* f_touchdcstA723() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A723), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A723, m0), 1);
		dcStructField(at, 'c', offsetof(union  A723, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A723, m2), 1, f_touchdcstA722());
		dcStructField(at, 'd', offsetof(union  A723, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{l[2]<jjpiisdfsjcc>jf{fsf}}<lc<fcflcpjjfdcp>d>flcc> */
union  A724 { struct A721 m0; union  A723 m1; f m2; l m3; c m4; c m5; };
void f_cpA724(union  A724 *x, const union  A724 *y) { f_cpA721(&x->m0, &y->m0); f_cpA723(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA724(const union  A724 *x, const union  A724 *y) { return f_cmpA721(&x->m0, &y->m0) && f_cmpA723(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA724() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A724), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A724, m0), 1, f_touchdcstA721());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A724, m1), 1, f_touchdcstA723());
		dcStructField(at, 'f', offsetof(union  A724, m2), 1);
		dcStructField(at, 'l', offsetof(union  A724, m3), 1);
		dcStructField(at, 'c', offsetof(union  A724, m4), 1);
		dcStructField(at, 'c', offsetof(union  A724, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpcjisjj> */
union  A725 { c m0; p m1; c m2; j m3; i m4; s m5; j m6; j m7; };
void f_cpA725(union  A725 *x, const union  A725 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA725(const union  A725 *x, const union  A725 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA725() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A725), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A725, m0), 1);
		dcStructField(at, 'p', offsetof(union  A725, m1), 1);
		dcStructField(at, 'c', offsetof(union  A725, m2), 1);
		dcStructField(at, 'j', offsetof(union  A725, m3), 1);
		dcStructField(at, 'i', offsetof(union  A725, m4), 1);
		dcStructField(at, 's', offsetof(union  A725, m5), 1);
		dcStructField(at, 'j', offsetof(union  A725, m6), 1);
		dcStructField(at, 'j', offsetof(union  A725, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <spppf[4]> */
union  A726 { s m0; p m1; p m2; p m3; f m4[4]; };
void f_cpA726(union  A726 *x, const union  A726 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; };
int f_cmpA726(const union  A726 *x, const union  A726 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3]; };
DCstruct* f_touchdcstA726() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A726), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A726, m0), 1);
		dcStructField(at, 'p', offsetof(union  A726, m1), 1);
		dcStructField(at, 'p', offsetof(union  A726, m2), 1);
		dcStructField(at, 'p', offsetof(union  A726, m3), 1);
		dcStructField(at, 'f', offsetof(union  A726, m4), 4);
		dcCloseStruct(at);
	}
	return at;
};
/* <ccf> */
union  A727 { c m0; c m1; f m2; };
void f_cpA727(union  A727 *x, const union  A727 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA727(const union  A727 *x, const union  A727 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA727() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A727), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A727, m0), 1);
		dcStructField(at, 'c', offsetof(union  A727, m1), 1);
		dcStructField(at, 'f', offsetof(union  A727, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sjpcidldf} */
struct A728 { s m0; j m1; p m2; c m3; i m4; d m5; l m6; d m7; f m8; };
void f_cpA728(struct A728 *x, const struct A728 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA728(const struct A728 *x, const struct A728 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA728() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A728), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A728, m0), 1);
		dcStructField(at, 'j', offsetof(struct A728, m1), 1);
		dcStructField(at, 'p', offsetof(struct A728, m2), 1);
		dcStructField(at, 'c', offsetof(struct A728, m3), 1);
		dcStructField(at, 'i', offsetof(struct A728, m4), 1);
		dcStructField(at, 'd', offsetof(struct A728, m5), 1);
		dcStructField(at, 'l', offsetof(struct A728, m6), 1);
		dcStructField(at, 'd', offsetof(struct A728, m7), 1);
		dcStructField(at, 'f', offsetof(struct A728, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iipj{sjpcidldf}ljp} */
struct A729 { i m0; i m1; p m2; j m3; struct A728 m4; l m5; j m6; p m7; };
void f_cpA729(struct A729 *x, const struct A729 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA728(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA729(const struct A729 *x, const struct A729 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA728(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA729() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A729), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A729, m0), 1);
		dcStructField(at, 'i', offsetof(struct A729, m1), 1);
		dcStructField(at, 'p', offsetof(struct A729, m2), 1);
		dcStructField(at, 'j', offsetof(struct A729, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A729, m4), 1, f_touchdcstA728());
		dcStructField(at, 'l', offsetof(struct A729, m5), 1);
		dcStructField(at, 'j', offsetof(struct A729, m6), 1);
		dcStructField(at, 'p', offsetof(struct A729, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <idfjsscdslds> */
union  A730 { i m0; d m1; f m2; j m3; s m4; s m5; c m6; d m7; s m8; l m9; d m10; s m11; };
void f_cpA730(union  A730 *x, const union  A730 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA730(const union  A730 *x, const union  A730 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA730() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A730), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A730, m0), 1);
		dcStructField(at, 'd', offsetof(union  A730, m1), 1);
		dcStructField(at, 'f', offsetof(union  A730, m2), 1);
		dcStructField(at, 'j', offsetof(union  A730, m3), 1);
		dcStructField(at, 's', offsetof(union  A730, m4), 1);
		dcStructField(at, 's', offsetof(union  A730, m5), 1);
		dcStructField(at, 'c', offsetof(union  A730, m6), 1);
		dcStructField(at, 'd', offsetof(union  A730, m7), 1);
		dcStructField(at, 's', offsetof(union  A730, m8), 1);
		dcStructField(at, 'l', offsetof(union  A730, m9), 1);
		dcStructField(at, 'd', offsetof(union  A730, m10), 1);
		dcStructField(at, 's', offsetof(union  A730, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fic> */
union  A731 { f m0; i m1; c m2; };
void f_cpA731(union  A731 *x, const union  A731 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA731(const union  A731 *x, const union  A731 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA731() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A731), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A731, m0), 1);
		dcStructField(at, 'i', offsetof(union  A731, m1), 1);
		dcStructField(at, 'c', offsetof(union  A731, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sfsjssfljs<fic>l> */
union  A732 { s m0; f m1; s m2; j m3; s m4; s m5; f m6; l m7; j m8; s m9; union  A731 m10; l m11; };
void f_cpA732(union  A732 *x, const union  A732 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA731(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA732(const union  A732 *x, const union  A732 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA731(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA732() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A732), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A732, m0), 1);
		dcStructField(at, 'f', offsetof(union  A732, m1), 1);
		dcStructField(at, 's', offsetof(union  A732, m2), 1);
		dcStructField(at, 'j', offsetof(union  A732, m3), 1);
		dcStructField(at, 's', offsetof(union  A732, m4), 1);
		dcStructField(at, 's', offsetof(union  A732, m5), 1);
		dcStructField(at, 'f', offsetof(union  A732, m6), 1);
		dcStructField(at, 'l', offsetof(union  A732, m7), 1);
		dcStructField(at, 'j', offsetof(union  A732, m8), 1);
		dcStructField(at, 's', offsetof(union  A732, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A732, m10), 1, f_touchdcstA731());
		dcStructField(at, 'l', offsetof(union  A732, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jc<ccf>{iipj{sjpcidldf}ljp}ij<idfjsscdslds>jfs<sfsjssfljs<fic>l>l> */
union  A733 { j m0; c m1; union  A727 m2; struct A729 m3; i m4; j m5; union  A730 m6; j m7; f m8; s m9; union  A732 m10; l m11; };
void f_cpA733(union  A733 *x, const union  A733 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA727(&x->m2, &y->m2); f_cpA729(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; f_cpA730(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA732(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA733(const union  A733 *x, const union  A733 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA727(&x->m2, &y->m2) && f_cmpA729(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA730(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA732(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA733() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A733), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A733, m0), 1);
		dcStructField(at, 'c', offsetof(union  A733, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A733, m2), 1, f_touchdcstA727());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A733, m3), 1, f_touchdcstA729());
		dcStructField(at, 'i', offsetof(union  A733, m4), 1);
		dcStructField(at, 'j', offsetof(union  A733, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A733, m6), 1, f_touchdcstA730());
		dcStructField(at, 'j', offsetof(union  A733, m7), 1);
		dcStructField(at, 'f', offsetof(union  A733, m8), 1);
		dcStructField(at, 's', offsetof(union  A733, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A733, m10), 1, f_touchdcstA732());
		dcStructField(at, 'l', offsetof(union  A733, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ffpiljpld} */
struct A734 { f m0; f m1; p m2; i m3; l m4; j m5; p m6; l m7; d m8; };
void f_cpA734(struct A734 *x, const struct A734 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA734(const struct A734 *x, const struct A734 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA734() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A734), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A734, m0), 1);
		dcStructField(at, 'f', offsetof(struct A734, m1), 1);
		dcStructField(at, 'p', offsetof(struct A734, m2), 1);
		dcStructField(at, 'i', offsetof(struct A734, m3), 1);
		dcStructField(at, 'l', offsetof(struct A734, m4), 1);
		dcStructField(at, 'j', offsetof(struct A734, m5), 1);
		dcStructField(at, 'p', offsetof(struct A734, m6), 1);
		dcStructField(at, 'l', offsetof(struct A734, m7), 1);
		dcStructField(at, 'd', offsetof(struct A734, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {csi{d}fpiij{ffpiljpld}pj} */
struct A735 { c m0; s m1; i m2; struct A47 m3; f m4; p m5; i m6; i m7; j m8; struct A734 m9; p m10; j m11; };
void f_cpA735(struct A735 *x, const struct A735 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA47(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA734(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA735(const struct A735 *x, const struct A735 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA47(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA734(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA735() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A735), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A735, m0), 1);
		dcStructField(at, 's', offsetof(struct A735, m1), 1);
		dcStructField(at, 'i', offsetof(struct A735, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A735, m3), 1, f_touchdcstA47());
		dcStructField(at, 'f', offsetof(struct A735, m4), 1);
		dcStructField(at, 'p', offsetof(struct A735, m5), 1);
		dcStructField(at, 'i', offsetof(struct A735, m6), 1);
		dcStructField(at, 'i', offsetof(struct A735, m7), 1);
		dcStructField(at, 'j', offsetof(struct A735, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A735, m9), 1, f_touchdcstA734());
		dcStructField(at, 'p', offsetof(struct A735, m10), 1);
		dcStructField(at, 'j', offsetof(struct A735, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pjil> */
union  A736 { p m0; j m1; i m2; l m3; };
void f_cpA736(union  A736 *x, const union  A736 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA736(const union  A736 *x, const union  A736 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA736() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A736), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A736, m0), 1);
		dcStructField(at, 'j', offsetof(union  A736, m1), 1);
		dcStructField(at, 'i', offsetof(union  A736, m2), 1);
		dcStructField(at, 'l', offsetof(union  A736, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<pjil>> */
union  A737 { union  A736 m0; };
void f_cpA737(union  A737 *x, const union  A737 *y) { f_cpA736(&x->m0, &y->m0); };
int f_cmpA737(const union  A737 *x, const union  A737 *y) { return f_cmpA736(&x->m0, &y->m0); };
DCstruct* f_touchdcstA737() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A737), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A737, m0), 1, f_touchdcstA736());
		dcCloseStruct(at);
	}
	return at;
};
/* <jjijilfcf> */
union  A738 { j m0; j m1; i m2; j m3; i m4; l m5; f m6; c m7; f m8; };
void f_cpA738(union  A738 *x, const union  A738 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA738(const union  A738 *x, const union  A738 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA738() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A738), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A738, m0), 1);
		dcStructField(at, 'j', offsetof(union  A738, m1), 1);
		dcStructField(at, 'i', offsetof(union  A738, m2), 1);
		dcStructField(at, 'j', offsetof(union  A738, m3), 1);
		dcStructField(at, 'i', offsetof(union  A738, m4), 1);
		dcStructField(at, 'l', offsetof(union  A738, m5), 1);
		dcStructField(at, 'f', offsetof(union  A738, m6), 1);
		dcStructField(at, 'c', offsetof(union  A738, m7), 1);
		dcStructField(at, 'f', offsetof(union  A738, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cij} */
struct A739 { c m0; i m1; j m2; };
void f_cpA739(struct A739 *x, const struct A739 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA739(const struct A739 *x, const struct A739 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA739() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A739), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A739, m0), 1);
		dcStructField(at, 'i', offsetof(struct A739, m1), 1);
		dcStructField(at, 'j', offsetof(struct A739, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iil> */
union  A740 { i m0; i m1; l m2; };
void f_cpA740(union  A740 *x, const union  A740 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA740(const union  A740 *x, const union  A740 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA740() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A740), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A740, m0), 1);
		dcStructField(at, 'i', offsetof(union  A740, m1), 1);
		dcStructField(at, 'l', offsetof(union  A740, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{cij}<iil>d} */
struct A741 { struct A739 m0; union  A740 m1; d m2; };
void f_cpA741(struct A741 *x, const struct A741 *y) { f_cpA739(&x->m0, &y->m0); f_cpA740(&x->m1, &y->m1); x->m2 = y->m2; };
int f_cmpA741(const struct A741 *x, const struct A741 *y) { return f_cmpA739(&x->m0, &y->m0) && f_cmpA740(&x->m1, &y->m1) && x->m2 == y->m2; };
DCstruct* f_touchdcstA741() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A741), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A741, m0), 1, f_touchdcstA739());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A741, m1), 1, f_touchdcstA740());
		dcStructField(at, 'd', offsetof(struct A741, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <l<i>fp{{cij}<iil>d}fsdf{p}ij> */
union  A742 { l m0; union  A62 m1; f m2; p m3; struct A741 m4; f m5; s m6; d m7; f m8; struct A33 m9; i m10; j m11; };
void f_cpA742(union  A742 *x, const union  A742 *y) { x->m0 = y->m0; f_cpA62(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; f_cpA741(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA33(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA742(const union  A742 *x, const union  A742 *y) { return x->m0 == y->m0 && f_cmpA62(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA741(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA33(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA742() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A742), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A742, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A742, m1), 1, f_touchdcstA62());
		dcStructField(at, 'f', offsetof(union  A742, m2), 1);
		dcStructField(at, 'p', offsetof(union  A742, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A742, m4), 1, f_touchdcstA741());
		dcStructField(at, 'f', offsetof(union  A742, m5), 1);
		dcStructField(at, 's', offsetof(union  A742, m6), 1);
		dcStructField(at, 'd', offsetof(union  A742, m7), 1);
		dcStructField(at, 'f', offsetof(union  A742, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A742, m9), 1, f_touchdcstA33());
		dcStructField(at, 'i', offsetof(union  A742, m10), 1);
		dcStructField(at, 'j', offsetof(union  A742, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <splpjf> */
union  A743 { s m0; p m1; l m2; p m3; j m4; f m5; };
void f_cpA743(union  A743 *x, const union  A743 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA743(const union  A743 *x, const union  A743 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA743() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A743), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A743, m0), 1);
		dcStructField(at, 'p', offsetof(union  A743, m1), 1);
		dcStructField(at, 'l', offsetof(union  A743, m2), 1);
		dcStructField(at, 'p', offsetof(union  A743, m3), 1);
		dcStructField(at, 'j', offsetof(union  A743, m4), 1);
		dcStructField(at, 'f', offsetof(union  A743, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {scdllpildci} */
struct A744 { s m0; c m1; d m2; l m3; l m4; p m5; i m6; l m7; d m8; c m9; i m10; };
void f_cpA744(struct A744 *x, const struct A744 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA744(const struct A744 *x, const struct A744 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA744() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A744), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A744, m0), 1);
		dcStructField(at, 'c', offsetof(struct A744, m1), 1);
		dcStructField(at, 'd', offsetof(struct A744, m2), 1);
		dcStructField(at, 'l', offsetof(struct A744, m3), 1);
		dcStructField(at, 'l', offsetof(struct A744, m4), 1);
		dcStructField(at, 'p', offsetof(struct A744, m5), 1);
		dcStructField(at, 'i', offsetof(struct A744, m6), 1);
		dcStructField(at, 'l', offsetof(struct A744, m7), 1);
		dcStructField(at, 'd', offsetof(struct A744, m8), 1);
		dcStructField(at, 'c', offsetof(struct A744, m9), 1);
		dcStructField(at, 'i', offsetof(struct A744, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpl<splpjf>sfcj{scdllpildci}lj> */
union  A745 { c m0; p m1; l m2; union  A743 m3; s m4; f m5; c m6; j m7; struct A744 m8; l m9; j m10; };
void f_cpA745(union  A745 *x, const union  A745 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA743(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA744(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA745(const union  A745 *x, const union  A745 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA743(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA744(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA745() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A745), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A745, m0), 1);
		dcStructField(at, 'p', offsetof(union  A745, m1), 1);
		dcStructField(at, 'l', offsetof(union  A745, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A745, m3), 1, f_touchdcstA743());
		dcStructField(at, 's', offsetof(union  A745, m4), 1);
		dcStructField(at, 'f', offsetof(union  A745, m5), 1);
		dcStructField(at, 'c', offsetof(union  A745, m6), 1);
		dcStructField(at, 'j', offsetof(union  A745, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A745, m8), 1, f_touchdcstA744());
		dcStructField(at, 'l', offsetof(union  A745, m9), 1);
		dcStructField(at, 'j', offsetof(union  A745, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<cpl<splpjf>sfcj{scdllpildci}lj>> */
union  A746 { union  A745 m0; };
void f_cpA746(union  A746 *x, const union  A746 *y) { f_cpA745(&x->m0, &y->m0); };
int f_cmpA746(const union  A746 *x, const union  A746 *y) { return f_cmpA745(&x->m0, &y->m0); };
DCstruct* f_touchdcstA746() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A746), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A746, m0), 1, f_touchdcstA745());
		dcCloseStruct(at);
	}
	return at;
};
/* {silsi} */
struct A747 { s m0; i m1; l m2; s m3; i m4; };
void f_cpA747(struct A747 *x, const struct A747 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA747(const struct A747 *x, const struct A747 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA747() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A747), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A747, m0), 1);
		dcStructField(at, 'i', offsetof(struct A747, m1), 1);
		dcStructField(at, 'l', offsetof(struct A747, m2), 1);
		dcStructField(at, 's', offsetof(struct A747, m3), 1);
		dcStructField(at, 'i', offsetof(struct A747, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fdpif> */
union  A748 { f m0; d m1; p m2; i m3; f m4; };
void f_cpA748(union  A748 *x, const union  A748 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA748(const union  A748 *x, const union  A748 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA748() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A748), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A748, m0), 1);
		dcStructField(at, 'd', offsetof(union  A748, m1), 1);
		dcStructField(at, 'p', offsetof(union  A748, m2), 1);
		dcStructField(at, 'i', offsetof(union  A748, m3), 1);
		dcStructField(at, 'f', offsetof(union  A748, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ilpllipj> */
union  A749 { i m0; l m1; p m2; l m3; l m4; i m5; p m6; j m7; };
void f_cpA749(union  A749 *x, const union  A749 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA749(const union  A749 *x, const union  A749 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA749() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A749), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A749, m0), 1);
		dcStructField(at, 'l', offsetof(union  A749, m1), 1);
		dcStructField(at, 'p', offsetof(union  A749, m2), 1);
		dcStructField(at, 'l', offsetof(union  A749, m3), 1);
		dcStructField(at, 'l', offsetof(union  A749, m4), 1);
		dcStructField(at, 'i', offsetof(union  A749, m5), 1);
		dcStructField(at, 'p', offsetof(union  A749, m6), 1);
		dcStructField(at, 'j', offsetof(union  A749, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {icjsdp} */
struct A750 { i m0; c m1; j m2; s m3; d m4; p m5; };
void f_cpA750(struct A750 *x, const struct A750 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA750(const struct A750 *x, const struct A750 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA750() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A750), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A750, m0), 1);
		dcStructField(at, 'c', offsetof(struct A750, m1), 1);
		dcStructField(at, 'j', offsetof(struct A750, m2), 1);
		dcStructField(at, 's', offsetof(struct A750, m3), 1);
		dcStructField(at, 'd', offsetof(struct A750, m4), 1);
		dcStructField(at, 'p', offsetof(struct A750, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fi<fdpif>ijidpjf<ilpllipj>{icjsdp}> */
union  A751 { f m0; i m1; union  A748 m2; i m3; j m4; i m5; d m6; p m7; j m8; f m9; union  A749 m10; struct A750 m11; };
void f_cpA751(union  A751 *x, const union  A751 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA748(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA749(&x->m10, &y->m10); f_cpA750(&x->m11, &y->m11); };
int f_cmpA751(const union  A751 *x, const union  A751 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA748(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA749(&x->m10, &y->m10) && f_cmpA750(&x->m11, &y->m11); };
DCstruct* f_touchdcstA751() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A751), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A751, m0), 1);
		dcStructField(at, 'i', offsetof(union  A751, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A751, m2), 1, f_touchdcstA748());
		dcStructField(at, 'i', offsetof(union  A751, m3), 1);
		dcStructField(at, 'j', offsetof(union  A751, m4), 1);
		dcStructField(at, 'i', offsetof(union  A751, m5), 1);
		dcStructField(at, 'd', offsetof(union  A751, m6), 1);
		dcStructField(at, 'p', offsetof(union  A751, m7), 1);
		dcStructField(at, 'j', offsetof(union  A751, m8), 1);
		dcStructField(at, 'f', offsetof(union  A751, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A751, m10), 1, f_touchdcstA749());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A751, m11), 1, f_touchdcstA750());
		dcCloseStruct(at);
	}
	return at;
};
/* <{silsi}cfd<fi<fdpif>ijidpjf<ilpllipj>{icjsdp}>jifl> */
union  A752 { struct A747 m0; c m1; f m2; d m3; union  A751 m4; j m5; i m6; f m7; l m8; };
void f_cpA752(union  A752 *x, const union  A752 *y) { f_cpA747(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA751(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA752(const union  A752 *x, const union  A752 *y) { return f_cmpA747(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA751(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA752() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A752), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A752, m0), 1, f_touchdcstA747());
		dcStructField(at, 'c', offsetof(union  A752, m1), 1);
		dcStructField(at, 'f', offsetof(union  A752, m2), 1);
		dcStructField(at, 'd', offsetof(union  A752, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A752, m4), 1, f_touchdcstA751());
		dcStructField(at, 'j', offsetof(union  A752, m5), 1);
		dcStructField(at, 'i', offsetof(union  A752, m6), 1);
		dcStructField(at, 'f', offsetof(union  A752, m7), 1);
		dcStructField(at, 'l', offsetof(union  A752, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jlf> */
union  A753 { j m0; l m1; f m2; };
void f_cpA753(union  A753 *x, const union  A753 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA753(const union  A753 *x, const union  A753 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA753() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A753), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A753, m0), 1);
		dcStructField(at, 'l', offsetof(union  A753, m1), 1);
		dcStructField(at, 'f', offsetof(union  A753, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cpcl} */
struct A754 { c m0; p m1; c m2; l m3; };
void f_cpA754(struct A754 *x, const struct A754 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA754(const struct A754 *x, const struct A754 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA754() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A754), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A754, m0), 1);
		dcStructField(at, 'p', offsetof(struct A754, m1), 1);
		dcStructField(at, 'c', offsetof(struct A754, m2), 1);
		dcStructField(at, 'l', offsetof(struct A754, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cpcill<jlf>lcs{cpcl}c} */
struct A755 { c m0; p m1; c m2; i m3; l m4; l m5; union  A753 m6; l m7; c m8; s m9; struct A754 m10; c m11; };
void f_cpA755(struct A755 *x, const struct A755 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA753(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA754(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA755(const struct A755 *x, const struct A755 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA753(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA754(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA755() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A755), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A755, m0), 1);
		dcStructField(at, 'p', offsetof(struct A755, m1), 1);
		dcStructField(at, 'c', offsetof(struct A755, m2), 1);
		dcStructField(at, 'i', offsetof(struct A755, m3), 1);
		dcStructField(at, 'l', offsetof(struct A755, m4), 1);
		dcStructField(at, 'l', offsetof(struct A755, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A755, m6), 1, f_touchdcstA753());
		dcStructField(at, 'l', offsetof(struct A755, m7), 1);
		dcStructField(at, 'c', offsetof(struct A755, m8), 1);
		dcStructField(at, 's', offsetof(struct A755, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A755, m10), 1, f_touchdcstA754());
		dcStructField(at, 'c', offsetof(struct A755, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sp} */
struct A756 { s m0; p m1; };
void f_cpA756(struct A756 *x, const struct A756 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA756(const struct A756 *x, const struct A756 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA756() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A756), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A756, m0), 1);
		dcStructField(at, 'p', offsetof(struct A756, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {is} */
struct A757 { i m0; s m1; };
void f_cpA757(struct A757 *x, const struct A757 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA757(const struct A757 *x, const struct A757 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA757() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A757), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A757, m0), 1);
		dcStructField(at, 's', offsetof(struct A757, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {diciplppdji[10]} */
struct A758 { d m0; i m1; c m2; i m3; p m4; l m5; p m6; p m7; d m8; j m9; i m10[10]; };
void f_cpA758(struct A758 *x, const struct A758 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m10[8] = y->m10[8]; x->m10[9] = y->m10[9]; };
int f_cmpA758(const struct A758 *x, const struct A758 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m10[8] == y->m10[8] && x->m10[9] == y->m10[9]; };
DCstruct* f_touchdcstA758() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A758), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A758, m0), 1);
		dcStructField(at, 'i', offsetof(struct A758, m1), 1);
		dcStructField(at, 'c', offsetof(struct A758, m2), 1);
		dcStructField(at, 'i', offsetof(struct A758, m3), 1);
		dcStructField(at, 'p', offsetof(struct A758, m4), 1);
		dcStructField(at, 'l', offsetof(struct A758, m5), 1);
		dcStructField(at, 'p', offsetof(struct A758, m6), 1);
		dcStructField(at, 'p', offsetof(struct A758, m7), 1);
		dcStructField(at, 'd', offsetof(struct A758, m8), 1);
		dcStructField(at, 'j', offsetof(struct A758, m9), 1);
		dcStructField(at, 'i', offsetof(struct A758, m10), 10);
		dcCloseStruct(at);
	}
	return at;
};
/* {dss} */
struct A759 { d m0; s m1; s m2; };
void f_cpA759(struct A759 *x, const struct A759 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA759(const struct A759 *x, const struct A759 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA759() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A759), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A759, m0), 1);
		dcStructField(at, 's', offsetof(struct A759, m1), 1);
		dcStructField(at, 's', offsetof(struct A759, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {idipi{is}{diciplppdji[10]}{dss}} */
struct A760 { i m0; d m1; i m2; p m3; i m4; struct A757 m5; struct A758 m6; struct A759 m7; };
void f_cpA760(struct A760 *x, const struct A760 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA757(&x->m5, &y->m5); f_cpA758(&x->m6, &y->m6); f_cpA759(&x->m7, &y->m7); };
int f_cmpA760(const struct A760 *x, const struct A760 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA757(&x->m5, &y->m5) && f_cmpA758(&x->m6, &y->m6) && f_cmpA759(&x->m7, &y->m7); };
DCstruct* f_touchdcstA760() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A760), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A760, m0), 1);
		dcStructField(at, 'd', offsetof(struct A760, m1), 1);
		dcStructField(at, 'i', offsetof(struct A760, m2), 1);
		dcStructField(at, 'p', offsetof(struct A760, m3), 1);
		dcStructField(at, 'i', offsetof(struct A760, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A760, m5), 1, f_touchdcstA757());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A760, m6), 1, f_touchdcstA758());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A760, m7), 1, f_touchdcstA759());
		dcCloseStruct(at);
	}
	return at;
};
/* {jsi[11]p{idipi{is}{diciplppdji[10]}{dss}}ss} */
struct A761 { j m0; s m1; i m2[11]; p m3; struct A760 m4; s m5; s m6; };
void f_cpA761(struct A761 *x, const struct A761 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m3 = y->m3; f_cpA760(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA761(const struct A761 *x, const struct A761 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m3 == y->m3 && f_cmpA760(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA761() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A761), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A761, m0), 1);
		dcStructField(at, 's', offsetof(struct A761, m1), 1);
		dcStructField(at, 'i', offsetof(struct A761, m2), 11);
		dcStructField(at, 'p', offsetof(struct A761, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A761, m4), 1, f_touchdcstA760());
		dcStructField(at, 's', offsetof(struct A761, m5), 1);
		dcStructField(at, 's', offsetof(struct A761, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lfcid> */
union  A762 { l m0; f m1; c m2; i m3; d m4; };
void f_cpA762(union  A762 *x, const union  A762 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA762(const union  A762 *x, const union  A762 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA762() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A762), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A762, m0), 1);
		dcStructField(at, 'f', offsetof(union  A762, m1), 1);
		dcStructField(at, 'c', offsetof(union  A762, m2), 1);
		dcStructField(at, 'i', offsetof(union  A762, m3), 1);
		dcStructField(at, 'd', offsetof(union  A762, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dffcl} */
struct A763 { d m0; f m1; f m2; c m3; l m4; };
void f_cpA763(struct A763 *x, const struct A763 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA763(const struct A763 *x, const struct A763 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA763() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A763), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A763, m0), 1);
		dcStructField(at, 'f', offsetof(struct A763, m1), 1);
		dcStructField(at, 'f', offsetof(struct A763, m2), 1);
		dcStructField(at, 'c', offsetof(struct A763, m3), 1);
		dcStructField(at, 'l', offsetof(struct A763, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dppfcfjjdplc} */
struct A764 { d m0; p m1; p m2; f m3; c m4; f m5; j m6; j m7; d m8; p m9; l m10; c m11; };
void f_cpA764(struct A764 *x, const struct A764 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA764(const struct A764 *x, const struct A764 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA764() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A764), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A764, m0), 1);
		dcStructField(at, 'p', offsetof(struct A764, m1), 1);
		dcStructField(at, 'p', offsetof(struct A764, m2), 1);
		dcStructField(at, 'f', offsetof(struct A764, m3), 1);
		dcStructField(at, 'c', offsetof(struct A764, m4), 1);
		dcStructField(at, 'f', offsetof(struct A764, m5), 1);
		dcStructField(at, 'j', offsetof(struct A764, m6), 1);
		dcStructField(at, 'j', offsetof(struct A764, m7), 1);
		dcStructField(at, 'd', offsetof(struct A764, m8), 1);
		dcStructField(at, 'p', offsetof(struct A764, m9), 1);
		dcStructField(at, 'l', offsetof(struct A764, m10), 1);
		dcStructField(at, 'c', offsetof(struct A764, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fps{dffcl}<if>{dppfcfjjdplc}lfiscp} */
struct A765 { f m0; p m1; s m2; struct A763 m3; union  A78 m4; struct A764 m5; l m6; f m7; i m8; s m9; c m10; p m11; };
void f_cpA765(struct A765 *x, const struct A765 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA763(&x->m3, &y->m3); f_cpA78(&x->m4, &y->m4); f_cpA764(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA765(const struct A765 *x, const struct A765 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA763(&x->m3, &y->m3) && f_cmpA78(&x->m4, &y->m4) && f_cmpA764(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA765() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A765), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A765, m0), 1);
		dcStructField(at, 'p', offsetof(struct A765, m1), 1);
		dcStructField(at, 's', offsetof(struct A765, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A765, m3), 1, f_touchdcstA763());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A765, m4), 1, f_touchdcstA78());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A765, m5), 1, f_touchdcstA764());
		dcStructField(at, 'l', offsetof(struct A765, m6), 1);
		dcStructField(at, 'f', offsetof(struct A765, m7), 1);
		dcStructField(at, 'i', offsetof(struct A765, m8), 1);
		dcStructField(at, 's', offsetof(struct A765, m9), 1);
		dcStructField(at, 'c', offsetof(struct A765, m10), 1);
		dcStructField(at, 'p', offsetof(struct A765, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <csldlpllpcdc> */
union  A766 { c m0; s m1; l m2; d m3; l m4; p m5; l m6; l m7; p m8; c m9; d m10; c m11; };
void f_cpA766(union  A766 *x, const union  A766 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA766(const union  A766 *x, const union  A766 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA766() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A766), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A766, m0), 1);
		dcStructField(at, 's', offsetof(union  A766, m1), 1);
		dcStructField(at, 'l', offsetof(union  A766, m2), 1);
		dcStructField(at, 'd', offsetof(union  A766, m3), 1);
		dcStructField(at, 'l', offsetof(union  A766, m4), 1);
		dcStructField(at, 'p', offsetof(union  A766, m5), 1);
		dcStructField(at, 'l', offsetof(union  A766, m6), 1);
		dcStructField(at, 'l', offsetof(union  A766, m7), 1);
		dcStructField(at, 'p', offsetof(union  A766, m8), 1);
		dcStructField(at, 'c', offsetof(union  A766, m9), 1);
		dcStructField(at, 'd', offsetof(union  A766, m10), 1);
		dcStructField(at, 'c', offsetof(union  A766, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <csj<csldlpllpcdc>i> */
union  A767 { c m0; s m1; j m2; union  A766 m3; i m4; };
void f_cpA767(union  A767 *x, const union  A767 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA766(&x->m3, &y->m3); x->m4 = y->m4; };
int f_cmpA767(const union  A767 *x, const union  A767 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA766(&x->m3, &y->m3) && x->m4 == y->m4; };
DCstruct* f_touchdcstA767() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A767), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A767, m0), 1);
		dcStructField(at, 's', offsetof(union  A767, m1), 1);
		dcStructField(at, 'j', offsetof(union  A767, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A767, m3), 1, f_touchdcstA766());
		dcStructField(at, 'i', offsetof(union  A767, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iilfllifdsjf} */
struct A768 { i m0; i m1; l m2; f m3; l m4; l m5; i m6; f m7; d m8; s m9; j m10; f m11; };
void f_cpA768(struct A768 *x, const struct A768 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA768(const struct A768 *x, const struct A768 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA768() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A768), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A768, m0), 1);
		dcStructField(at, 'i', offsetof(struct A768, m1), 1);
		dcStructField(at, 'l', offsetof(struct A768, m2), 1);
		dcStructField(at, 'f', offsetof(struct A768, m3), 1);
		dcStructField(at, 'l', offsetof(struct A768, m4), 1);
		dcStructField(at, 'l', offsetof(struct A768, m5), 1);
		dcStructField(at, 'i', offsetof(struct A768, m6), 1);
		dcStructField(at, 'f', offsetof(struct A768, m7), 1);
		dcStructField(at, 'd', offsetof(struct A768, m8), 1);
		dcStructField(at, 's', offsetof(struct A768, m9), 1);
		dcStructField(at, 'j', offsetof(struct A768, m10), 1);
		dcStructField(at, 'f', offsetof(struct A768, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lijpd} */
struct A769 { l m0; i m1; j m2; p m3; d m4; };
void f_cpA769(struct A769 *x, const struct A769 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA769(const struct A769 *x, const struct A769 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA769() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A769), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A769, m0), 1);
		dcStructField(at, 'i', offsetof(struct A769, m1), 1);
		dcStructField(at, 'j', offsetof(struct A769, m2), 1);
		dcStructField(at, 'p', offsetof(struct A769, m3), 1);
		dcStructField(at, 'd', offsetof(struct A769, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jclj> */
union  A770 { j m0; c m1; l m2; j m3; };
void f_cpA770(union  A770 *x, const union  A770 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA770(const union  A770 *x, const union  A770 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA770() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A770), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A770, m0), 1);
		dcStructField(at, 'c', offsetof(union  A770, m1), 1);
		dcStructField(at, 'l', offsetof(union  A770, m2), 1);
		dcStructField(at, 'j', offsetof(union  A770, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lld{lijpd}fislsd<jclj>d> */
union  A771 { l m0; l m1; d m2; struct A769 m3; f m4; i m5; s m6; l m7; s m8; d m9; union  A770 m10; d m11; };
void f_cpA771(union  A771 *x, const union  A771 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA769(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA770(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA771(const union  A771 *x, const union  A771 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA769(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA770(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA771() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A771), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A771, m0), 1);
		dcStructField(at, 'l', offsetof(union  A771, m1), 1);
		dcStructField(at, 'd', offsetof(union  A771, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A771, m3), 1, f_touchdcstA769());
		dcStructField(at, 'f', offsetof(union  A771, m4), 1);
		dcStructField(at, 'i', offsetof(union  A771, m5), 1);
		dcStructField(at, 's', offsetof(union  A771, m6), 1);
		dcStructField(at, 'l', offsetof(union  A771, m7), 1);
		dcStructField(at, 's', offsetof(union  A771, m8), 1);
		dcStructField(at, 'd', offsetof(union  A771, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A771, m10), 1, f_touchdcstA770());
		dcStructField(at, 'd', offsetof(union  A771, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sldsp[3]pdisffd> */
union  A772 { s m0; l m1; d m2; s m3; p m4[3]; p m5; d m6; i m7; s m8; f m9; f m10; d m11; };
void f_cpA772(union  A772 *x, const union  A772 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA772(const union  A772 *x, const union  A772 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA772() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A772), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A772, m0), 1);
		dcStructField(at, 'l', offsetof(union  A772, m1), 1);
		dcStructField(at, 'd', offsetof(union  A772, m2), 1);
		dcStructField(at, 's', offsetof(union  A772, m3), 1);
		dcStructField(at, 'p', offsetof(union  A772, m4), 3);
		dcStructField(at, 'p', offsetof(union  A772, m5), 1);
		dcStructField(at, 'd', offsetof(union  A772, m6), 1);
		dcStructField(at, 'i', offsetof(union  A772, m7), 1);
		dcStructField(at, 's', offsetof(union  A772, m8), 1);
		dcStructField(at, 'f', offsetof(union  A772, m9), 1);
		dcStructField(at, 'f', offsetof(union  A772, m10), 1);
		dcStructField(at, 'd', offsetof(union  A772, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <idcl[11]pcjflijf> */
union  A773 { i m0; d m1; c m2; l m3[11]; p m4; c m5; j m6; f m7; l m8; i m9; j m10; f m11; };
void f_cpA773(union  A773 *x, const union  A773 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA773(const union  A773 *x, const union  A773 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA773() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A773), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A773, m0), 1);
		dcStructField(at, 'd', offsetof(union  A773, m1), 1);
		dcStructField(at, 'c', offsetof(union  A773, m2), 1);
		dcStructField(at, 'l', offsetof(union  A773, m3), 11);
		dcStructField(at, 'p', offsetof(union  A773, m4), 1);
		dcStructField(at, 'c', offsetof(union  A773, m5), 1);
		dcStructField(at, 'j', offsetof(union  A773, m6), 1);
		dcStructField(at, 'f', offsetof(union  A773, m7), 1);
		dcStructField(at, 'l', offsetof(union  A773, m8), 1);
		dcStructField(at, 'i', offsetof(union  A773, m9), 1);
		dcStructField(at, 'j', offsetof(union  A773, m10), 1);
		dcStructField(at, 'f', offsetof(union  A773, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {icli<idcl[11]pcjflijf>} */
struct A774 { i m0; c m1; l m2; i m3; union  A773 m4; };
void f_cpA774(struct A774 *x, const struct A774 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA773(&x->m4, &y->m4); };
int f_cmpA774(const struct A774 *x, const struct A774 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA773(&x->m4, &y->m4); };
DCstruct* f_touchdcstA774() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A774), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A774, m0), 1);
		dcStructField(at, 'c', offsetof(struct A774, m1), 1);
		dcStructField(at, 'l', offsetof(struct A774, m2), 1);
		dcStructField(at, 'i', offsetof(struct A774, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A774, m4), 1, f_touchdcstA773());
		dcCloseStruct(at);
	}
	return at;
};
/* {llffjjsjsfjl} */
struct A775 { l m0; l m1; f m2; f m3; j m4; j m5; s m6; j m7; s m8; f m9; j m10; l m11; };
void f_cpA775(struct A775 *x, const struct A775 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA775(const struct A775 *x, const struct A775 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA775() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A775), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A775, m0), 1);
		dcStructField(at, 'l', offsetof(struct A775, m1), 1);
		dcStructField(at, 'f', offsetof(struct A775, m2), 1);
		dcStructField(at, 'f', offsetof(struct A775, m3), 1);
		dcStructField(at, 'j', offsetof(struct A775, m4), 1);
		dcStructField(at, 'j', offsetof(struct A775, m5), 1);
		dcStructField(at, 's', offsetof(struct A775, m6), 1);
		dcStructField(at, 'j', offsetof(struct A775, m7), 1);
		dcStructField(at, 's', offsetof(struct A775, m8), 1);
		dcStructField(at, 'f', offsetof(struct A775, m9), 1);
		dcStructField(at, 'j', offsetof(struct A775, m10), 1);
		dcStructField(at, 'l', offsetof(struct A775, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {flcpfllifslp} */
struct A776 { f m0; l m1; c m2; p m3; f m4; l m5; l m6; i m7; f m8; s m9; l m10; p m11; };
void f_cpA776(struct A776 *x, const struct A776 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA776(const struct A776 *x, const struct A776 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA776() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A776), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A776, m0), 1);
		dcStructField(at, 'l', offsetof(struct A776, m1), 1);
		dcStructField(at, 'c', offsetof(struct A776, m2), 1);
		dcStructField(at, 'p', offsetof(struct A776, m3), 1);
		dcStructField(at, 'f', offsetof(struct A776, m4), 1);
		dcStructField(at, 'l', offsetof(struct A776, m5), 1);
		dcStructField(at, 'l', offsetof(struct A776, m6), 1);
		dcStructField(at, 'i', offsetof(struct A776, m7), 1);
		dcStructField(at, 'f', offsetof(struct A776, m8), 1);
		dcStructField(at, 's', offsetof(struct A776, m9), 1);
		dcStructField(at, 'l', offsetof(struct A776, m10), 1);
		dcStructField(at, 'p', offsetof(struct A776, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cps<c>scffd{flcpfllifslp}cf> */
union  A777 { c m0; p m1; s m2; union  A116 m3; s m4; c m5; f m6; f m7; d m8; struct A776 m9; c m10; f m11; };
void f_cpA777(union  A777 *x, const union  A777 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA116(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA776(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA777(const union  A777 *x, const union  A777 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA116(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA776(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA777() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A777), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A777, m0), 1);
		dcStructField(at, 'p', offsetof(union  A777, m1), 1);
		dcStructField(at, 's', offsetof(union  A777, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A777, m3), 1, f_touchdcstA116());
		dcStructField(at, 's', offsetof(union  A777, m4), 1);
		dcStructField(at, 'c', offsetof(union  A777, m5), 1);
		dcStructField(at, 'f', offsetof(union  A777, m6), 1);
		dcStructField(at, 'f', offsetof(union  A777, m7), 1);
		dcStructField(at, 'd', offsetof(union  A777, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A777, m9), 1, f_touchdcstA776());
		dcStructField(at, 'c', offsetof(union  A777, m10), 1);
		dcStructField(at, 'f', offsetof(union  A777, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {difljjd} */
struct A778 { d m0; i m1; f m2; l m3; j m4; j m5; d m6; };
void f_cpA778(struct A778 *x, const struct A778 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA778(const struct A778 *x, const struct A778 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA778() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A778), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A778, m0), 1);
		dcStructField(at, 'i', offsetof(struct A778, m1), 1);
		dcStructField(at, 'f', offsetof(struct A778, m2), 1);
		dcStructField(at, 'l', offsetof(struct A778, m3), 1);
		dcStructField(at, 'j', offsetof(struct A778, m4), 1);
		dcStructField(at, 'j', offsetof(struct A778, m5), 1);
		dcStructField(at, 'd', offsetof(struct A778, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dflpddfsppcf> */
union  A779 { d m0; f m1; l m2; p m3; d m4; d m5; f m6; s m7; p m8; p m9; c m10; f m11; };
void f_cpA779(union  A779 *x, const union  A779 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA779(const union  A779 *x, const union  A779 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA779() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A779), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A779, m0), 1);
		dcStructField(at, 'f', offsetof(union  A779, m1), 1);
		dcStructField(at, 'l', offsetof(union  A779, m2), 1);
		dcStructField(at, 'p', offsetof(union  A779, m3), 1);
		dcStructField(at, 'd', offsetof(union  A779, m4), 1);
		dcStructField(at, 'd', offsetof(union  A779, m5), 1);
		dcStructField(at, 'f', offsetof(union  A779, m6), 1);
		dcStructField(at, 's', offsetof(union  A779, m7), 1);
		dcStructField(at, 'p', offsetof(union  A779, m8), 1);
		dcStructField(at, 'p', offsetof(union  A779, m9), 1);
		dcStructField(at, 'c', offsetof(union  A779, m10), 1);
		dcStructField(at, 'f', offsetof(union  A779, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {isjj} */
struct A780 { i m0; s m1; j m2; j m3; };
void f_cpA780(struct A780 *x, const struct A780 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA780(const struct A780 *x, const struct A780 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA780() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A780), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A780, m0), 1);
		dcStructField(at, 's', offsetof(struct A780, m1), 1);
		dcStructField(at, 'j', offsetof(struct A780, m2), 1);
		dcStructField(at, 'j', offsetof(struct A780, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lpj} */
struct A781 { l m0; p m1; j m2; };
void f_cpA781(struct A781 *x, const struct A781 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA781(const struct A781 *x, const struct A781 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA781() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A781), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A781, m0), 1);
		dcStructField(at, 'p', offsetof(struct A781, m1), 1);
		dcStructField(at, 'j', offsetof(struct A781, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ij} */
struct A782 { i m0; j m1; };
void f_cpA782(struct A782 *x, const struct A782 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA782(const struct A782 *x, const struct A782 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA782() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A782), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A782, m0), 1);
		dcStructField(at, 'j', offsetof(struct A782, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{lpj}sc{ij}flllsldj} */
struct A783 { struct A781 m0; s m1; c m2; struct A782 m3; f m4; l m5; l m6; l m7; s m8; l m9; d m10; j m11; };
void f_cpA783(struct A783 *x, const struct A783 *y) { f_cpA781(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA782(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA783(const struct A783 *x, const struct A783 *y) { return f_cmpA781(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA782(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA783() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A783), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A783, m0), 1, f_touchdcstA781());
		dcStructField(at, 's', offsetof(struct A783, m1), 1);
		dcStructField(at, 'c', offsetof(struct A783, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A783, m3), 1, f_touchdcstA782());
		dcStructField(at, 'f', offsetof(struct A783, m4), 1);
		dcStructField(at, 'l', offsetof(struct A783, m5), 1);
		dcStructField(at, 'l', offsetof(struct A783, m6), 1);
		dcStructField(at, 'l', offsetof(struct A783, m7), 1);
		dcStructField(at, 's', offsetof(struct A783, m8), 1);
		dcStructField(at, 'l', offsetof(struct A783, m9), 1);
		dcStructField(at, 'd', offsetof(struct A783, m10), 1);
		dcStructField(at, 'j', offsetof(struct A783, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sjdipds[9]ssl[4]js[5]} */
struct A784 { s m0; j m1; d m2; i m3; p m4; d m5; s m6[9]; s m7; s m8; l m9[4]; j m10; s m11[5]; };
void f_cpA784(struct A784 *x, const struct A784 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m10 = y->m10; x->m11[0] = y->m11[0]; x->m11[1] = y->m11[1]; x->m11[2] = y->m11[2]; x->m11[3] = y->m11[3]; x->m11[4] = y->m11[4]; };
int f_cmpA784(const struct A784 *x, const struct A784 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m10 == y->m10 && x->m11[0] == y->m11[0] && x->m11[1] == y->m11[1] && x->m11[2] == y->m11[2] && x->m11[3] == y->m11[3] && x->m11[4] == y->m11[4]; };
DCstruct* f_touchdcstA784() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A784), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A784, m0), 1);
		dcStructField(at, 'j', offsetof(struct A784, m1), 1);
		dcStructField(at, 'd', offsetof(struct A784, m2), 1);
		dcStructField(at, 'i', offsetof(struct A784, m3), 1);
		dcStructField(at, 'p', offsetof(struct A784, m4), 1);
		dcStructField(at, 'd', offsetof(struct A784, m5), 1);
		dcStructField(at, 's', offsetof(struct A784, m6), 9);
		dcStructField(at, 's', offsetof(struct A784, m7), 1);
		dcStructField(at, 's', offsetof(struct A784, m8), 1);
		dcStructField(at, 'l', offsetof(struct A784, m9), 4);
		dcStructField(at, 'j', offsetof(struct A784, m10), 1);
		dcStructField(at, 's', offsetof(struct A784, m11), 5);
		dcCloseStruct(at);
	}
	return at;
};
/* {flidlld[3]jpcll} */
struct A785 { f m0; l m1; i m2; d m3; l m4; l m5; d m6[3]; j m7; p m8; c m9; l m10; l m11; };
void f_cpA785(struct A785 *x, const struct A785 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA785(const struct A785 *x, const struct A785 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA785() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A785), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A785, m0), 1);
		dcStructField(at, 'l', offsetof(struct A785, m1), 1);
		dcStructField(at, 'i', offsetof(struct A785, m2), 1);
		dcStructField(at, 'd', offsetof(struct A785, m3), 1);
		dcStructField(at, 'l', offsetof(struct A785, m4), 1);
		dcStructField(at, 'l', offsetof(struct A785, m5), 1);
		dcStructField(at, 'd', offsetof(struct A785, m6), 3);
		dcStructField(at, 'j', offsetof(struct A785, m7), 1);
		dcStructField(at, 'p', offsetof(struct A785, m8), 1);
		dcStructField(at, 'c', offsetof(struct A785, m9), 1);
		dcStructField(at, 'l', offsetof(struct A785, m10), 1);
		dcStructField(at, 'l', offsetof(struct A785, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{sjdipds[9]ssl[4]js[5]}{flidlld[3]jpcll}djcjp> */
union  A786 { struct A784 m0; struct A785 m1; d m2; j m3; c m4; j m5; p m6; };
void f_cpA786(union  A786 *x, const union  A786 *y) { f_cpA784(&x->m0, &y->m0); f_cpA785(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA786(const union  A786 *x, const union  A786 *y) { return f_cmpA784(&x->m0, &y->m0) && f_cmpA785(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA786() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A786), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A786, m0), 1, f_touchdcstA784());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A786, m1), 1, f_touchdcstA785());
		dcStructField(at, 'd', offsetof(union  A786, m2), 1);
		dcStructField(at, 'j', offsetof(union  A786, m3), 1);
		dcStructField(at, 'c', offsetof(union  A786, m4), 1);
		dcStructField(at, 'j', offsetof(union  A786, m5), 1);
		dcStructField(at, 'p', offsetof(union  A786, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iiiplds> */
union  A787 { i m0; i m1; i m2; p m3; l m4; d m5; s m6; };
void f_cpA787(union  A787 *x, const union  A787 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA787(const union  A787 *x, const union  A787 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA787() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A787), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A787, m0), 1);
		dcStructField(at, 'i', offsetof(union  A787, m1), 1);
		dcStructField(at, 'i', offsetof(union  A787, m2), 1);
		dcStructField(at, 'p', offsetof(union  A787, m3), 1);
		dcStructField(at, 'l', offsetof(union  A787, m4), 1);
		dcStructField(at, 'd', offsetof(union  A787, m5), 1);
		dcStructField(at, 's', offsetof(union  A787, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dfcliiscjcdf} */
struct A788 { d m0; f m1; c m2; l m3; i m4; i m5; s m6; c m7; j m8; c m9; d m10; f m11; };
void f_cpA788(struct A788 *x, const struct A788 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA788(const struct A788 *x, const struct A788 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA788() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A788), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A788, m0), 1);
		dcStructField(at, 'f', offsetof(struct A788, m1), 1);
		dcStructField(at, 'c', offsetof(struct A788, m2), 1);
		dcStructField(at, 'l', offsetof(struct A788, m3), 1);
		dcStructField(at, 'i', offsetof(struct A788, m4), 1);
		dcStructField(at, 'i', offsetof(struct A788, m5), 1);
		dcStructField(at, 's', offsetof(struct A788, m6), 1);
		dcStructField(at, 'c', offsetof(struct A788, m7), 1);
		dcStructField(at, 'j', offsetof(struct A788, m8), 1);
		dcStructField(at, 'c', offsetof(struct A788, m9), 1);
		dcStructField(at, 'd', offsetof(struct A788, m10), 1);
		dcStructField(at, 'f', offsetof(struct A788, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <d<iiiplds>cpc{dfcliiscjcdf}if> */
union  A789 { d m0; union  A787 m1; c m2; p m3; c m4; struct A788 m5; i m6; f m7; };
void f_cpA789(union  A789 *x, const union  A789 *y) { x->m0 = y->m0; f_cpA787(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA788(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA789(const union  A789 *x, const union  A789 *y) { return x->m0 == y->m0 && f_cmpA787(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA788(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA789() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A789), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A789, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A789, m1), 1, f_touchdcstA787());
		dcStructField(at, 'c', offsetof(union  A789, m2), 1);
		dcStructField(at, 'p', offsetof(union  A789, m3), 1);
		dcStructField(at, 'c', offsetof(union  A789, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A789, m5), 1, f_touchdcstA788());
		dcStructField(at, 'i', offsetof(union  A789, m6), 1);
		dcStructField(at, 'f', offsetof(union  A789, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cpjsjlspcccd} */
struct A790 { c m0; p m1; j m2; s m3; j m4; l m5; s m6; p m7; c m8; c m9; c m10; d m11; };
void f_cpA790(struct A790 *x, const struct A790 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA790(const struct A790 *x, const struct A790 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA790() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A790), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A790, m0), 1);
		dcStructField(at, 'p', offsetof(struct A790, m1), 1);
		dcStructField(at, 'j', offsetof(struct A790, m2), 1);
		dcStructField(at, 's', offsetof(struct A790, m3), 1);
		dcStructField(at, 'j', offsetof(struct A790, m4), 1);
		dcStructField(at, 'l', offsetof(struct A790, m5), 1);
		dcStructField(at, 's', offsetof(struct A790, m6), 1);
		dcStructField(at, 'p', offsetof(struct A790, m7), 1);
		dcStructField(at, 'c', offsetof(struct A790, m8), 1);
		dcStructField(at, 'c', offsetof(struct A790, m9), 1);
		dcStructField(at, 'c', offsetof(struct A790, m10), 1);
		dcStructField(at, 'd', offsetof(struct A790, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dcs} */
struct A791 { d m0; c m1; s m2; };
void f_cpA791(struct A791 *x, const struct A791 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA791(const struct A791 *x, const struct A791 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA791() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A791), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A791, m0), 1);
		dcStructField(at, 'c', offsetof(struct A791, m1), 1);
		dcStructField(at, 's', offsetof(struct A791, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pp> */
union  A792 { p m0; p m1; };
void f_cpA792(union  A792 *x, const union  A792 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA792(const union  A792 *x, const union  A792 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA792() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A792), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A792, m0), 1);
		dcStructField(at, 'p', offsetof(union  A792, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <d{cpjsjlspcccd}js{dcs}<pp>f[2]fidjf> */
union  A793 { d m0; struct A790 m1; j m2; s m3; struct A791 m4; union  A792 m5; f m6[2]; f m7; i m8; d m9; j m10; f m11; };
void f_cpA793(union  A793 *x, const union  A793 *y) { x->m0 = y->m0; f_cpA790(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; f_cpA791(&x->m4, &y->m4); f_cpA792(&x->m5, &y->m5); x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA793(const union  A793 *x, const union  A793 *y) { return x->m0 == y->m0 && f_cmpA790(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA791(&x->m4, &y->m4) && f_cmpA792(&x->m5, &y->m5) && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA793() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A793), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A793, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A793, m1), 1, f_touchdcstA790());
		dcStructField(at, 'j', offsetof(union  A793, m2), 1);
		dcStructField(at, 's', offsetof(union  A793, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A793, m4), 1, f_touchdcstA791());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A793, m5), 1, f_touchdcstA792());
		dcStructField(at, 'f', offsetof(union  A793, m6), 2);
		dcStructField(at, 'f', offsetof(union  A793, m7), 1);
		dcStructField(at, 'i', offsetof(union  A793, m8), 1);
		dcStructField(at, 'd', offsetof(union  A793, m9), 1);
		dcStructField(at, 'j', offsetof(union  A793, m10), 1);
		dcStructField(at, 'f', offsetof(union  A793, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p<fc>ccsi> */
union  A794 { p m0; union  A252 m1; c m2; c m3; s m4; i m5; };
void f_cpA794(union  A794 *x, const union  A794 *y) { x->m0 = y->m0; f_cpA252(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA794(const union  A794 *x, const union  A794 *y) { return x->m0 == y->m0 && f_cmpA252(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA794() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A794), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A794, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A794, m1), 1, f_touchdcstA252());
		dcStructField(at, 'c', offsetof(union  A794, m2), 1);
		dcStructField(at, 'c', offsetof(union  A794, m3), 1);
		dcStructField(at, 's', offsetof(union  A794, m4), 1);
		dcStructField(at, 'i', offsetof(union  A794, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f<{sjdipds[9]ssl[4]js[5]}{flidlld[3]jpcll}djcjp>d<d<iiiplds>cpc{dfcliiscjcdf}if>js<d{cpjsjlspcccd}js{dcs}<pp>f[2]fidjf>dclc<p<fc>ccsi>} */
struct A795 { f m0; union  A786 m1; d m2; union  A789 m3; j m4; s m5; union  A793 m6; d m7; c m8; l m9; c m10; union  A794 m11; };
void f_cpA795(struct A795 *x, const struct A795 *y) { x->m0 = y->m0; f_cpA786(&x->m1, &y->m1); x->m2 = y->m2; f_cpA789(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; f_cpA793(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA794(&x->m11, &y->m11); };
int f_cmpA795(const struct A795 *x, const struct A795 *y) { return x->m0 == y->m0 && f_cmpA786(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA789(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA793(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA794(&x->m11, &y->m11); };
DCstruct* f_touchdcstA795() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A795), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A795, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A795, m1), 1, f_touchdcstA786());
		dcStructField(at, 'd', offsetof(struct A795, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A795, m3), 1, f_touchdcstA789());
		dcStructField(at, 'j', offsetof(struct A795, m4), 1);
		dcStructField(at, 's', offsetof(struct A795, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A795, m6), 1, f_touchdcstA793());
		dcStructField(at, 'd', offsetof(struct A795, m7), 1);
		dcStructField(at, 'c', offsetof(struct A795, m8), 1);
		dcStructField(at, 'l', offsetof(struct A795, m9), 1);
		dcStructField(at, 'c', offsetof(struct A795, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A795, m11), 1, f_touchdcstA794());
		dcCloseStruct(at);
	}
	return at;
};
/* <liccc> */
union  A796 { l m0; i m1; c m2; c m3; c m4; };
void f_cpA796(union  A796 *x, const union  A796 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA796(const union  A796 *x, const union  A796 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA796() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A796), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A796, m0), 1);
		dcStructField(at, 'i', offsetof(union  A796, m1), 1);
		dcStructField(at, 'c', offsetof(union  A796, m2), 1);
		dcStructField(at, 'c', offsetof(union  A796, m3), 1);
		dcStructField(at, 'c', offsetof(union  A796, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ljpssjdf> */
union  A797 { l m0; j m1; p m2; s m3; s m4; j m5; d m6; f m7; };
void f_cpA797(union  A797 *x, const union  A797 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA797(const union  A797 *x, const union  A797 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA797() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A797), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A797, m0), 1);
		dcStructField(at, 'j', offsetof(union  A797, m1), 1);
		dcStructField(at, 'p', offsetof(union  A797, m2), 1);
		dcStructField(at, 's', offsetof(union  A797, m3), 1);
		dcStructField(at, 's', offsetof(union  A797, m4), 1);
		dcStructField(at, 'j', offsetof(union  A797, m5), 1);
		dcStructField(at, 'd', offsetof(union  A797, m6), 1);
		dcStructField(at, 'f', offsetof(union  A797, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jljdpplfpipp} */
struct A798 { j m0; l m1; j m2; d m3; p m4; p m5; l m6; f m7; p m8; i m9; p m10; p m11; };
void f_cpA798(struct A798 *x, const struct A798 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA798(const struct A798 *x, const struct A798 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA798() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A798), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A798, m0), 1);
		dcStructField(at, 'l', offsetof(struct A798, m1), 1);
		dcStructField(at, 'j', offsetof(struct A798, m2), 1);
		dcStructField(at, 'd', offsetof(struct A798, m3), 1);
		dcStructField(at, 'p', offsetof(struct A798, m4), 1);
		dcStructField(at, 'p', offsetof(struct A798, m5), 1);
		dcStructField(at, 'l', offsetof(struct A798, m6), 1);
		dcStructField(at, 'f', offsetof(struct A798, m7), 1);
		dcStructField(at, 'p', offsetof(struct A798, m8), 1);
		dcStructField(at, 'i', offsetof(struct A798, m9), 1);
		dcStructField(at, 'p', offsetof(struct A798, m10), 1);
		dcStructField(at, 'p', offsetof(struct A798, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {j{jljdpplfpipp}} */
struct A799 { j m0; struct A798 m1; };
void f_cpA799(struct A799 *x, const struct A799 *y) { x->m0 = y->m0; f_cpA798(&x->m1, &y->m1); };
int f_cmpA799(const struct A799 *x, const struct A799 *y) { return x->m0 == y->m0 && f_cmpA798(&x->m1, &y->m1); };
DCstruct* f_touchdcstA799() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A799), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A799, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A799, m1), 1, f_touchdcstA798());
		dcCloseStruct(at);
	}
	return at;
};
/* {ld} */
struct A800 { l m0; d m1; };
void f_cpA800(struct A800 *x, const struct A800 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA800(const struct A800 *x, const struct A800 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA800() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A800), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A800, m0), 1);
		dcStructField(at, 'd', offsetof(struct A800, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jfij} */
struct A801 { j m0; f m1; i m2; j m3; };
void f_cpA801(struct A801 *x, const struct A801 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA801(const struct A801 *x, const struct A801 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA801() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A801), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A801, m0), 1);
		dcStructField(at, 'f', offsetof(struct A801, m1), 1);
		dcStructField(at, 'i', offsetof(struct A801, m2), 1);
		dcStructField(at, 'j', offsetof(struct A801, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iflcjp} */
struct A802 { i m0; f m1; l m2; c m3; j m4; p m5; };
void f_cpA802(struct A802 *x, const struct A802 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA802(const struct A802 *x, const struct A802 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA802() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A802), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A802, m0), 1);
		dcStructField(at, 'f', offsetof(struct A802, m1), 1);
		dcStructField(at, 'l', offsetof(struct A802, m2), 1);
		dcStructField(at, 'c', offsetof(struct A802, m3), 1);
		dcStructField(at, 'j', offsetof(struct A802, m4), 1);
		dcStructField(at, 'p', offsetof(struct A802, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iicc} */
struct A803 { i m0; i m1; c m2; c m3; };
void f_cpA803(struct A803 *x, const struct A803 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA803(const struct A803 *x, const struct A803 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA803() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A803), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A803, m0), 1);
		dcStructField(at, 'i', offsetof(struct A803, m1), 1);
		dcStructField(at, 'c', offsetof(struct A803, m2), 1);
		dcStructField(at, 'c', offsetof(struct A803, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dsiss{iicc}pp> */
union  A804 { d m0; s m1; i m2; s m3; s m4; struct A803 m5; p m6; p m7; };
void f_cpA804(union  A804 *x, const union  A804 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA803(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA804(const union  A804 *x, const union  A804 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA803(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA804() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A804), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A804, m0), 1);
		dcStructField(at, 's', offsetof(union  A804, m1), 1);
		dcStructField(at, 'i', offsetof(union  A804, m2), 1);
		dcStructField(at, 's', offsetof(union  A804, m3), 1);
		dcStructField(at, 's', offsetof(union  A804, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A804, m5), 1, f_touchdcstA803());
		dcStructField(at, 'p', offsetof(union  A804, m6), 1);
		dcStructField(at, 'p', offsetof(union  A804, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {isc{cs}f[8]c<dsiss{iicc}pp>icis} */
struct A805 { i m0; s m1; c m2; struct A612 m3; f m4[8]; c m5; union  A804 m6; i m7; c m8; i m9; s m10; };
void f_cpA805(struct A805 *x, const struct A805 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA612(&x->m3, &y->m3); x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m5 = y->m5; f_cpA804(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA805(const struct A805 *x, const struct A805 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA612(&x->m3, &y->m3) && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m5 == y->m5 && f_cmpA804(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA805() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A805), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A805, m0), 1);
		dcStructField(at, 's', offsetof(struct A805, m1), 1);
		dcStructField(at, 'c', offsetof(struct A805, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A805, m3), 1, f_touchdcstA612());
		dcStructField(at, 'f', offsetof(struct A805, m4), 8);
		dcStructField(at, 'c', offsetof(struct A805, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A805, m6), 1, f_touchdcstA804());
		dcStructField(at, 'i', offsetof(struct A805, m7), 1);
		dcStructField(at, 'c', offsetof(struct A805, m8), 1);
		dcStructField(at, 'i', offsetof(struct A805, m9), 1);
		dcStructField(at, 's', offsetof(struct A805, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {psp} */
struct A806 { p m0; s m1; p m2; };
void f_cpA806(struct A806 *x, const struct A806 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA806(const struct A806 *x, const struct A806 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA806() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A806), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A806, m0), 1);
		dcStructField(at, 's', offsetof(struct A806, m1), 1);
		dcStructField(at, 'p', offsetof(struct A806, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ilijsip> */
union  A807 { i m0; l m1; i m2; j m3; s m4; i m5; p m6; };
void f_cpA807(union  A807 *x, const union  A807 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA807(const union  A807 *x, const union  A807 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA807() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A807), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A807, m0), 1);
		dcStructField(at, 'l', offsetof(union  A807, m1), 1);
		dcStructField(at, 'i', offsetof(union  A807, m2), 1);
		dcStructField(at, 'j', offsetof(union  A807, m3), 1);
		dcStructField(at, 's', offsetof(union  A807, m4), 1);
		dcStructField(at, 'i', offsetof(union  A807, m5), 1);
		dcStructField(at, 'p', offsetof(union  A807, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fcpssfsi> */
union  A808 { f m0; c m1; p m2; s m3; s m4; f m5; s m6; i m7; };
void f_cpA808(union  A808 *x, const union  A808 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA808(const union  A808 *x, const union  A808 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA808() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A808), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A808, m0), 1);
		dcStructField(at, 'c', offsetof(union  A808, m1), 1);
		dcStructField(at, 'p', offsetof(union  A808, m2), 1);
		dcStructField(at, 's', offsetof(union  A808, m3), 1);
		dcStructField(at, 's', offsetof(union  A808, m4), 1);
		dcStructField(at, 'f', offsetof(union  A808, m5), 1);
		dcStructField(at, 's', offsetof(union  A808, m6), 1);
		dcStructField(at, 'i', offsetof(union  A808, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lfl> */
union  A809 { l m0; f m1; l m2; };
void f_cpA809(union  A809 *x, const union  A809 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA809(const union  A809 *x, const union  A809 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA809() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A809), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A809, m0), 1);
		dcStructField(at, 'f', offsetof(union  A809, m1), 1);
		dcStructField(at, 'l', offsetof(union  A809, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <clc<ilijsip>cc<fcpssfsi><id>sj<lfl>d> */
union  A810 { c m0; l m1; c m2; union  A807 m3; c m4; c m5; union  A808 m6; union  A232 m7; s m8; j m9; union  A809 m10; d m11; };
void f_cpA810(union  A810 *x, const union  A810 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA807(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; f_cpA808(&x->m6, &y->m6); f_cpA232(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; f_cpA809(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA810(const union  A810 *x, const union  A810 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA807(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA808(&x->m6, &y->m6) && f_cmpA232(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA809(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA810() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A810), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A810, m0), 1);
		dcStructField(at, 'l', offsetof(union  A810, m1), 1);
		dcStructField(at, 'c', offsetof(union  A810, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A810, m3), 1, f_touchdcstA807());
		dcStructField(at, 'c', offsetof(union  A810, m4), 1);
		dcStructField(at, 'c', offsetof(union  A810, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A810, m6), 1, f_touchdcstA808());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A810, m7), 1, f_touchdcstA232());
		dcStructField(at, 's', offsetof(union  A810, m8), 1);
		dcStructField(at, 'j', offsetof(union  A810, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A810, m10), 1, f_touchdcstA809());
		dcStructField(at, 'd', offsetof(union  A810, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jd} */
struct A811 { j m0; d m1; };
void f_cpA811(struct A811 *x, const struct A811 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA811(const struct A811 *x, const struct A811 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA811() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A811), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A811, m0), 1);
		dcStructField(at, 'd', offsetof(struct A811, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fji} */
struct A812 { f m0; j m1; i m2; };
void f_cpA812(struct A812 *x, const struct A812 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA812(const struct A812 *x, const struct A812 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA812() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A812), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A812, m0), 1);
		dcStructField(at, 'j', offsetof(struct A812, m1), 1);
		dcStructField(at, 'i', offsetof(struct A812, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jjp} */
struct A813 { j m0; j m1; p m2; };
void f_cpA813(struct A813 *x, const struct A813 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA813(const struct A813 *x, const struct A813 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA813() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A813), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A813, m0), 1);
		dcStructField(at, 'j', offsetof(struct A813, m1), 1);
		dcStructField(at, 'p', offsetof(struct A813, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ilfiiid> */
union  A814 { i m0; l m1; f m2; i m3; i m4; i m5; d m6; };
void f_cpA814(union  A814 *x, const union  A814 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA814(const union  A814 *x, const union  A814 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA814() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A814), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A814, m0), 1);
		dcStructField(at, 'l', offsetof(union  A814, m1), 1);
		dcStructField(at, 'f', offsetof(union  A814, m2), 1);
		dcStructField(at, 'i', offsetof(union  A814, m3), 1);
		dcStructField(at, 'i', offsetof(union  A814, m4), 1);
		dcStructField(at, 'i', offsetof(union  A814, m5), 1);
		dcStructField(at, 'd', offsetof(union  A814, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lpiicpllfpi> */
union  A815 { l m0; p m1; i m2; i m3; c m4; p m5; l m6; l m7; f m8; p m9; i m10; };
void f_cpA815(union  A815 *x, const union  A815 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA815(const union  A815 *x, const union  A815 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA815() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A815), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A815, m0), 1);
		dcStructField(at, 'p', offsetof(union  A815, m1), 1);
		dcStructField(at, 'i', offsetof(union  A815, m2), 1);
		dcStructField(at, 'i', offsetof(union  A815, m3), 1);
		dcStructField(at, 'c', offsetof(union  A815, m4), 1);
		dcStructField(at, 'p', offsetof(union  A815, m5), 1);
		dcStructField(at, 'l', offsetof(union  A815, m6), 1);
		dcStructField(at, 'l', offsetof(union  A815, m7), 1);
		dcStructField(at, 'f', offsetof(union  A815, m8), 1);
		dcStructField(at, 'p', offsetof(union  A815, m9), 1);
		dcStructField(at, 'i', offsetof(union  A815, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cjislcispcsf> */
union  A816 { c m0; j m1; i m2; s m3; l m4; c m5; i m6; s m7; p m8; c m9; s m10; f m11; };
void f_cpA816(union  A816 *x, const union  A816 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA816(const union  A816 *x, const union  A816 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA816() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A816), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A816, m0), 1);
		dcStructField(at, 'j', offsetof(union  A816, m1), 1);
		dcStructField(at, 'i', offsetof(union  A816, m2), 1);
		dcStructField(at, 's', offsetof(union  A816, m3), 1);
		dcStructField(at, 'l', offsetof(union  A816, m4), 1);
		dcStructField(at, 'c', offsetof(union  A816, m5), 1);
		dcStructField(at, 'i', offsetof(union  A816, m6), 1);
		dcStructField(at, 's', offsetof(union  A816, m7), 1);
		dcStructField(at, 'p', offsetof(union  A816, m8), 1);
		dcStructField(at, 'c', offsetof(union  A816, m9), 1);
		dcStructField(at, 's', offsetof(union  A816, m10), 1);
		dcStructField(at, 'f', offsetof(union  A816, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sdl<ilfiiid><lpiicpllfpi>sdfp<cjislcispcsf>f} */
struct A817 { s m0; d m1; l m2; union  A814 m3; union  A815 m4; s m5; d m6; f m7; p m8; union  A816 m9; f m10; };
void f_cpA817(struct A817 *x, const struct A817 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA814(&x->m3, &y->m3); f_cpA815(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA816(&x->m9, &y->m9); x->m10 = y->m10; };
int f_cmpA817(const struct A817 *x, const struct A817 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA814(&x->m3, &y->m3) && f_cmpA815(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA816(&x->m9, &y->m9) && x->m10 == y->m10; };
DCstruct* f_touchdcstA817() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A817), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A817, m0), 1);
		dcStructField(at, 'd', offsetof(struct A817, m1), 1);
		dcStructField(at, 'l', offsetof(struct A817, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A817, m3), 1, f_touchdcstA814());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A817, m4), 1, f_touchdcstA815());
		dcStructField(at, 's', offsetof(struct A817, m5), 1);
		dcStructField(at, 'd', offsetof(struct A817, m6), 1);
		dcStructField(at, 'f', offsetof(struct A817, m7), 1);
		dcStructField(at, 'p', offsetof(struct A817, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A817, m9), 1, f_touchdcstA816());
		dcStructField(at, 'f', offsetof(struct A817, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cdjjspfdiccf} */
struct A818 { c m0; d m1; j m2; j m3; s m4; p m5; f m6; d m7; i m8; c m9; c m10; f m11; };
void f_cpA818(struct A818 *x, const struct A818 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA818(const struct A818 *x, const struct A818 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA818() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A818), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A818, m0), 1);
		dcStructField(at, 'd', offsetof(struct A818, m1), 1);
		dcStructField(at, 'j', offsetof(struct A818, m2), 1);
		dcStructField(at, 'j', offsetof(struct A818, m3), 1);
		dcStructField(at, 's', offsetof(struct A818, m4), 1);
		dcStructField(at, 'p', offsetof(struct A818, m5), 1);
		dcStructField(at, 'f', offsetof(struct A818, m6), 1);
		dcStructField(at, 'd', offsetof(struct A818, m7), 1);
		dcStructField(at, 'i', offsetof(struct A818, m8), 1);
		dcStructField(at, 'c', offsetof(struct A818, m9), 1);
		dcStructField(at, 'c', offsetof(struct A818, m10), 1);
		dcStructField(at, 'f', offsetof(struct A818, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{cdjjspfdiccf}ld} */
struct A819 { struct A818 m0; l m1; d m2; };
void f_cpA819(struct A819 *x, const struct A819 *y) { f_cpA818(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA819(const struct A819 *x, const struct A819 *y) { return f_cmpA818(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA819() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A819), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A819, m0), 1, f_touchdcstA818());
		dcStructField(at, 'l', offsetof(struct A819, m1), 1);
		dcStructField(at, 'd', offsetof(struct A819, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {id{sdl<ilfiiid><lpiicpllfpi>sdfp<cjislcispcsf>f}{{cdjjspfdiccf}ld}cc} */
struct A820 { i m0; d m1; struct A817 m2; struct A819 m3; c m4; c m5; };
void f_cpA820(struct A820 *x, const struct A820 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA817(&x->m2, &y->m2); f_cpA819(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA820(const struct A820 *x, const struct A820 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA817(&x->m2, &y->m2) && f_cmpA819(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA820() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A820), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A820, m0), 1);
		dcStructField(at, 'd', offsetof(struct A820, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A820, m2), 1, f_touchdcstA817());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A820, m3), 1, f_touchdcstA819());
		dcStructField(at, 'c', offsetof(struct A820, m4), 1);
		dcStructField(at, 'c', offsetof(struct A820, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cpsfil[6]slfifc} */
struct A821 { c m0; p m1; s m2; f m3; i m4; l m5[6]; s m6; l m7; f m8; i m9; f m10; c m11; };
void f_cpA821(struct A821 *x, const struct A821 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA821(const struct A821 *x, const struct A821 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA821() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A821), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A821, m0), 1);
		dcStructField(at, 'p', offsetof(struct A821, m1), 1);
		dcStructField(at, 's', offsetof(struct A821, m2), 1);
		dcStructField(at, 'f', offsetof(struct A821, m3), 1);
		dcStructField(at, 'i', offsetof(struct A821, m4), 1);
		dcStructField(at, 'l', offsetof(struct A821, m5), 6);
		dcStructField(at, 's', offsetof(struct A821, m6), 1);
		dcStructField(at, 'l', offsetof(struct A821, m7), 1);
		dcStructField(at, 'f', offsetof(struct A821, m8), 1);
		dcStructField(at, 'i', offsetof(struct A821, m9), 1);
		dcStructField(at, 'f', offsetof(struct A821, m10), 1);
		dcStructField(at, 'c', offsetof(struct A821, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jifsc} */
struct A822 { j m0; i m1; f m2; s m3; c m4; };
void f_cpA822(struct A822 *x, const struct A822 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA822(const struct A822 *x, const struct A822 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA822() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A822), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A822, m0), 1);
		dcStructField(at, 'i', offsetof(struct A822, m1), 1);
		dcStructField(at, 'f', offsetof(struct A822, m2), 1);
		dcStructField(at, 's', offsetof(struct A822, m3), 1);
		dcStructField(at, 'c', offsetof(struct A822, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ds{d}ipcil{cpsfil[6]slfifc}{jifsc}lf> */
union  A823 { d m0; s m1; struct A47 m2; i m3; p m4; c m5; i m6; l m7; struct A821 m8; struct A822 m9; l m10; f m11; };
void f_cpA823(union  A823 *x, const union  A823 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA47(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA821(&x->m8, &y->m8); f_cpA822(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA823(const union  A823 *x, const union  A823 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA47(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA821(&x->m8, &y->m8) && f_cmpA822(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA823() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A823), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A823, m0), 1);
		dcStructField(at, 's', offsetof(union  A823, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A823, m2), 1, f_touchdcstA47());
		dcStructField(at, 'i', offsetof(union  A823, m3), 1);
		dcStructField(at, 'p', offsetof(union  A823, m4), 1);
		dcStructField(at, 'c', offsetof(union  A823, m5), 1);
		dcStructField(at, 'i', offsetof(union  A823, m6), 1);
		dcStructField(at, 'l', offsetof(union  A823, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A823, m8), 1, f_touchdcstA821());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A823, m9), 1, f_touchdcstA822());
		dcStructField(at, 'l', offsetof(union  A823, m10), 1);
		dcStructField(at, 'f', offsetof(union  A823, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ji{p}fd<sls>} */
struct A824 { j m0; i m1; struct A33 m2; f m3; d m4; union  A631 m5; };
void f_cpA824(struct A824 *x, const struct A824 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA33(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; f_cpA631(&x->m5, &y->m5); };
int f_cmpA824(const struct A824 *x, const struct A824 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA33(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA631(&x->m5, &y->m5); };
DCstruct* f_touchdcstA824() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A824), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A824, m0), 1);
		dcStructField(at, 'i', offsetof(struct A824, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A824, m2), 1, f_touchdcstA33());
		dcStructField(at, 'f', offsetof(struct A824, m3), 1);
		dcStructField(at, 'd', offsetof(struct A824, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A824, m5), 1, f_touchdcstA631());
		dcCloseStruct(at);
	}
	return at;
};
/* {pjcfsj} */
struct A825 { p m0; j m1; c m2; f m3; s m4; j m5; };
void f_cpA825(struct A825 *x, const struct A825 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA825(const struct A825 *x, const struct A825 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA825() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A825), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A825, m0), 1);
		dcStructField(at, 'j', offsetof(struct A825, m1), 1);
		dcStructField(at, 'c', offsetof(struct A825, m2), 1);
		dcStructField(at, 'f', offsetof(struct A825, m3), 1);
		dcStructField(at, 's', offsetof(struct A825, m4), 1);
		dcStructField(at, 'j', offsetof(struct A825, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{pjcfsj}c} */
struct A826 { struct A825 m0; c m1; };
void f_cpA826(struct A826 *x, const struct A826 *y) { f_cpA825(&x->m0, &y->m0); x->m1 = y->m1; };
int f_cmpA826(const struct A826 *x, const struct A826 *y) { return f_cmpA825(&x->m0, &y->m0) && x->m1 == y->m1; };
DCstruct* f_touchdcstA826() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A826), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A826, m0), 1, f_touchdcstA825());
		dcStructField(at, 'c', offsetof(struct A826, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jpjffdipp> */
union  A827 { j m0; p m1; j m2; f m3; f m4; d m5; i m6; p m7; p m8; };
void f_cpA827(union  A827 *x, const union  A827 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA827(const union  A827 *x, const union  A827 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA827() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A827), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A827, m0), 1);
		dcStructField(at, 'p', offsetof(union  A827, m1), 1);
		dcStructField(at, 'j', offsetof(union  A827, m2), 1);
		dcStructField(at, 'f', offsetof(union  A827, m3), 1);
		dcStructField(at, 'f', offsetof(union  A827, m4), 1);
		dcStructField(at, 'd', offsetof(union  A827, m5), 1);
		dcStructField(at, 'i', offsetof(union  A827, m6), 1);
		dcStructField(at, 'p', offsetof(union  A827, m7), 1);
		dcStructField(at, 'p', offsetof(union  A827, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dpcccpdfffpc} */
struct A828 { d m0; p m1; c m2; c m3; c m4; p m5; d m6; f m7; f m8; f m9; p m10; c m11; };
void f_cpA828(struct A828 *x, const struct A828 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA828(const struct A828 *x, const struct A828 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA828() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A828), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A828, m0), 1);
		dcStructField(at, 'p', offsetof(struct A828, m1), 1);
		dcStructField(at, 'c', offsetof(struct A828, m2), 1);
		dcStructField(at, 'c', offsetof(struct A828, m3), 1);
		dcStructField(at, 'c', offsetof(struct A828, m4), 1);
		dcStructField(at, 'p', offsetof(struct A828, m5), 1);
		dcStructField(at, 'd', offsetof(struct A828, m6), 1);
		dcStructField(at, 'f', offsetof(struct A828, m7), 1);
		dcStructField(at, 'f', offsetof(struct A828, m8), 1);
		dcStructField(at, 'f', offsetof(struct A828, m9), 1);
		dcStructField(at, 'p', offsetof(struct A828, m10), 1);
		dcStructField(at, 'c', offsetof(struct A828, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpddlcl> */
union  A829 { c m0; p m1; d m2; d m3; l m4; c m5; l m6; };
void f_cpA829(union  A829 *x, const union  A829 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA829(const union  A829 *x, const union  A829 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA829() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A829), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A829, m0), 1);
		dcStructField(at, 'p', offsetof(union  A829, m1), 1);
		dcStructField(at, 'd', offsetof(union  A829, m2), 1);
		dcStructField(at, 'd', offsetof(union  A829, m3), 1);
		dcStructField(at, 'l', offsetof(union  A829, m4), 1);
		dcStructField(at, 'c', offsetof(union  A829, m5), 1);
		dcStructField(at, 'l', offsetof(union  A829, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pdlfsfjlcfdf} */
struct A830 { p m0; d m1; l m2; f m3; s m4; f m5; j m6; l m7; c m8; f m9; d m10; f m11; };
void f_cpA830(struct A830 *x, const struct A830 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA830(const struct A830 *x, const struct A830 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA830() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A830), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A830, m0), 1);
		dcStructField(at, 'd', offsetof(struct A830, m1), 1);
		dcStructField(at, 'l', offsetof(struct A830, m2), 1);
		dcStructField(at, 'f', offsetof(struct A830, m3), 1);
		dcStructField(at, 's', offsetof(struct A830, m4), 1);
		dcStructField(at, 'f', offsetof(struct A830, m5), 1);
		dcStructField(at, 'j', offsetof(struct A830, m6), 1);
		dcStructField(at, 'l', offsetof(struct A830, m7), 1);
		dcStructField(at, 'c', offsetof(struct A830, m8), 1);
		dcStructField(at, 'f', offsetof(struct A830, m9), 1);
		dcStructField(at, 'd', offsetof(struct A830, m10), 1);
		dcStructField(at, 'f', offsetof(struct A830, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p[1]sjdljl> */
union  A831 { p m0[1]; s m1; j m2; d m3; l m4; j m5; l m6; };
void f_cpA831(union  A831 *x, const union  A831 *y) { x->m0[0] = y->m0[0]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA831(const union  A831 *x, const union  A831 *y) { return x->m0[0] == y->m0[0] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA831() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A831), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A831, m0), 1);
		dcStructField(at, 's', offsetof(union  A831, m1), 1);
		dcStructField(at, 'j', offsetof(union  A831, m2), 1);
		dcStructField(at, 'd', offsetof(union  A831, m3), 1);
		dcStructField(at, 'l', offsetof(union  A831, m4), 1);
		dcStructField(at, 'j', offsetof(union  A831, m5), 1);
		dcStructField(at, 'l', offsetof(union  A831, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dlilljcsls> */
union  A832 { d m0; l m1; i m2; l m3; l m4; j m5; c m6; s m7; l m8; s m9; };
void f_cpA832(union  A832 *x, const union  A832 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA832(const union  A832 *x, const union  A832 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA832() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A832), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A832, m0), 1);
		dcStructField(at, 'l', offsetof(union  A832, m1), 1);
		dcStructField(at, 'i', offsetof(union  A832, m2), 1);
		dcStructField(at, 'l', offsetof(union  A832, m3), 1);
		dcStructField(at, 'l', offsetof(union  A832, m4), 1);
		dcStructField(at, 'j', offsetof(union  A832, m5), 1);
		dcStructField(at, 'c', offsetof(union  A832, m6), 1);
		dcStructField(at, 's', offsetof(union  A832, m7), 1);
		dcStructField(at, 'l', offsetof(union  A832, m8), 1);
		dcStructField(at, 's', offsetof(union  A832, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lljic} */
struct A833 { l m0; l m1; j m2; i m3; c m4; };
void f_cpA833(struct A833 *x, const struct A833 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA833(const struct A833 *x, const struct A833 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA833() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A833), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A833, m0), 1);
		dcStructField(at, 'l', offsetof(struct A833, m1), 1);
		dcStructField(at, 'j', offsetof(struct A833, m2), 1);
		dcStructField(at, 'i', offsetof(struct A833, m3), 1);
		dcStructField(at, 'c', offsetof(struct A833, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {isc{pdlfsfjlcfdf}sij<p[1]sjdljl><dlilljcsls>s{lljic}s} */
struct A834 { i m0; s m1; c m2; struct A830 m3; s m4; i m5; j m6; union  A831 m7; union  A832 m8; s m9; struct A833 m10; s m11; };
void f_cpA834(struct A834 *x, const struct A834 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA830(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA831(&x->m7, &y->m7); f_cpA832(&x->m8, &y->m8); x->m9 = y->m9; f_cpA833(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA834(const struct A834 *x, const struct A834 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA830(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA831(&x->m7, &y->m7) && f_cmpA832(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA833(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA834() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A834), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A834, m0), 1);
		dcStructField(at, 's', offsetof(struct A834, m1), 1);
		dcStructField(at, 'c', offsetof(struct A834, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A834, m3), 1, f_touchdcstA830());
		dcStructField(at, 's', offsetof(struct A834, m4), 1);
		dcStructField(at, 'i', offsetof(struct A834, m5), 1);
		dcStructField(at, 'j', offsetof(struct A834, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A834, m7), 1, f_touchdcstA831());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A834, m8), 1, f_touchdcstA832());
		dcStructField(at, 's', offsetof(struct A834, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A834, m10), 1, f_touchdcstA833());
		dcStructField(at, 's', offsetof(struct A834, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dpjsisjisl> */
union  A835 { d m0; p m1; j m2; s m3; i m4; s m5; j m6; i m7; s m8; l m9; };
void f_cpA835(union  A835 *x, const union  A835 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA835(const union  A835 *x, const union  A835 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA835() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A835), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A835, m0), 1);
		dcStructField(at, 'p', offsetof(union  A835, m1), 1);
		dcStructField(at, 'j', offsetof(union  A835, m2), 1);
		dcStructField(at, 's', offsetof(union  A835, m3), 1);
		dcStructField(at, 'i', offsetof(union  A835, m4), 1);
		dcStructField(at, 's', offsetof(union  A835, m5), 1);
		dcStructField(at, 'j', offsetof(union  A835, m6), 1);
		dcStructField(at, 'i', offsetof(union  A835, m7), 1);
		dcStructField(at, 's', offsetof(union  A835, m8), 1);
		dcStructField(at, 'l', offsetof(union  A835, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <isilijplcsd[6]d> */
union  A836 { i m0; s m1; i m2; l m3; i m4; j m5; p m6; l m7; c m8; s m9; d m10[6]; d m11; };
void f_cpA836(union  A836 *x, const union  A836 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m11 = y->m11; };
int f_cmpA836(const union  A836 *x, const union  A836 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m11 == y->m11; };
DCstruct* f_touchdcstA836() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A836), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A836, m0), 1);
		dcStructField(at, 's', offsetof(union  A836, m1), 1);
		dcStructField(at, 'i', offsetof(union  A836, m2), 1);
		dcStructField(at, 'l', offsetof(union  A836, m3), 1);
		dcStructField(at, 'i', offsetof(union  A836, m4), 1);
		dcStructField(at, 'j', offsetof(union  A836, m5), 1);
		dcStructField(at, 'p', offsetof(union  A836, m6), 1);
		dcStructField(at, 'l', offsetof(union  A836, m7), 1);
		dcStructField(at, 'c', offsetof(union  A836, m8), 1);
		dcStructField(at, 's', offsetof(union  A836, m9), 1);
		dcStructField(at, 'd', offsetof(union  A836, m10), 6);
		dcStructField(at, 'd', offsetof(union  A836, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {icp<dpjsisjisl><j>d<isilijplcsd[6]d>f} */
struct A837 { i m0; c m1; p m2; union  A835 m3; union  A43 m4; d m5; union  A836 m6; f m7; };
void f_cpA837(struct A837 *x, const struct A837 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA835(&x->m3, &y->m3); f_cpA43(&x->m4, &y->m4); x->m5 = y->m5; f_cpA836(&x->m6, &y->m6); x->m7 = y->m7; };
int f_cmpA837(const struct A837 *x, const struct A837 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA835(&x->m3, &y->m3) && f_cmpA43(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA836(&x->m6, &y->m6) && x->m7 == y->m7; };
DCstruct* f_touchdcstA837() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A837), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A837, m0), 1);
		dcStructField(at, 'c', offsetof(struct A837, m1), 1);
		dcStructField(at, 'p', offsetof(struct A837, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A837, m3), 1, f_touchdcstA835());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A837, m4), 1, f_touchdcstA43());
		dcStructField(at, 'd', offsetof(struct A837, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A837, m6), 1, f_touchdcstA836());
		dcStructField(at, 'f', offsetof(struct A837, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ssldddfjip> */
union  A838 { s m0; s m1; l m2; d m3; d m4; d m5; f m6; j m7; i m8; p m9; };
void f_cpA838(union  A838 *x, const union  A838 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA838(const union  A838 *x, const union  A838 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA838() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A838), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A838, m0), 1);
		dcStructField(at, 's', offsetof(union  A838, m1), 1);
		dcStructField(at, 'l', offsetof(union  A838, m2), 1);
		dcStructField(at, 'd', offsetof(union  A838, m3), 1);
		dcStructField(at, 'd', offsetof(union  A838, m4), 1);
		dcStructField(at, 'd', offsetof(union  A838, m5), 1);
		dcStructField(at, 'f', offsetof(union  A838, m6), 1);
		dcStructField(at, 'j', offsetof(union  A838, m7), 1);
		dcStructField(at, 'i', offsetof(union  A838, m8), 1);
		dcStructField(at, 'p', offsetof(union  A838, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<ssldddfjip>> */
union  A839 { union  A838 m0; };
void f_cpA839(union  A839 *x, const union  A839 *y) { f_cpA838(&x->m0, &y->m0); };
int f_cmpA839(const union  A839 *x, const union  A839 *y) { return f_cmpA838(&x->m0, &y->m0); };
DCstruct* f_touchdcstA839() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A839), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A839, m0), 1, f_touchdcstA838());
		dcCloseStruct(at);
	}
	return at;
};
/* <djl{icp<dpjsisjisl><j>d<isilijplcsd[6]d>f}<<ssldddfjip>>isiljs<is>> */
union  A840 { d m0; j m1; l m2; struct A837 m3; union  A839 m4; i m5; s m6; i m7; l m8; j m9; s m10; union  A377 m11; };
void f_cpA840(union  A840 *x, const union  A840 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA837(&x->m3, &y->m3); f_cpA839(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA377(&x->m11, &y->m11); };
int f_cmpA840(const union  A840 *x, const union  A840 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA837(&x->m3, &y->m3) && f_cmpA839(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA377(&x->m11, &y->m11); };
DCstruct* f_touchdcstA840() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A840), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A840, m0), 1);
		dcStructField(at, 'j', offsetof(union  A840, m1), 1);
		dcStructField(at, 'l', offsetof(union  A840, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A840, m3), 1, f_touchdcstA837());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A840, m4), 1, f_touchdcstA839());
		dcStructField(at, 'i', offsetof(union  A840, m5), 1);
		dcStructField(at, 's', offsetof(union  A840, m6), 1);
		dcStructField(at, 'i', offsetof(union  A840, m7), 1);
		dcStructField(at, 'l', offsetof(union  A840, m8), 1);
		dcStructField(at, 'j', offsetof(union  A840, m9), 1);
		dcStructField(at, 's', offsetof(union  A840, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A840, m11), 1, f_touchdcstA377());
		dcCloseStruct(at);
	}
	return at;
};
/* <lllclpccpdsj> */
union  A841 { l m0; l m1; l m2; c m3; l m4; p m5; c m6; c m7; p m8; d m9; s m10; j m11; };
void f_cpA841(union  A841 *x, const union  A841 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA841(const union  A841 *x, const union  A841 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA841() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A841), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A841, m0), 1);
		dcStructField(at, 'l', offsetof(union  A841, m1), 1);
		dcStructField(at, 'l', offsetof(union  A841, m2), 1);
		dcStructField(at, 'c', offsetof(union  A841, m3), 1);
		dcStructField(at, 'l', offsetof(union  A841, m4), 1);
		dcStructField(at, 'p', offsetof(union  A841, m5), 1);
		dcStructField(at, 'c', offsetof(union  A841, m6), 1);
		dcStructField(at, 'c', offsetof(union  A841, m7), 1);
		dcStructField(at, 'p', offsetof(union  A841, m8), 1);
		dcStructField(at, 'd', offsetof(union  A841, m9), 1);
		dcStructField(at, 's', offsetof(union  A841, m10), 1);
		dcStructField(at, 'j', offsetof(union  A841, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jp> */
union  A842 { j m0; p m1; };
void f_cpA842(union  A842 *x, const union  A842 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA842(const union  A842 *x, const union  A842 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA842() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A842), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A842, m0), 1);
		dcStructField(at, 'p', offsetof(union  A842, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dj<jp>> */
union  A843 { d m0; j m1; union  A842 m2; };
void f_cpA843(union  A843 *x, const union  A843 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA842(&x->m2, &y->m2); };
int f_cmpA843(const union  A843 *x, const union  A843 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA842(&x->m2, &y->m2); };
DCstruct* f_touchdcstA843() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A843), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A843, m0), 1);
		dcStructField(at, 'j', offsetof(union  A843, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A843, m2), 1, f_touchdcstA842());
		dcCloseStruct(at);
	}
	return at;
};
/* <jfpcjcpd<dj<jp>>dfi> */
union  A844 { j m0; f m1; p m2; c m3; j m4; c m5; p m6; d m7; union  A843 m8; d m9; f m10; i m11; };
void f_cpA844(union  A844 *x, const union  A844 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA843(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA844(const union  A844 *x, const union  A844 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA843(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA844() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A844), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A844, m0), 1);
		dcStructField(at, 'f', offsetof(union  A844, m1), 1);
		dcStructField(at, 'p', offsetof(union  A844, m2), 1);
		dcStructField(at, 'c', offsetof(union  A844, m3), 1);
		dcStructField(at, 'j', offsetof(union  A844, m4), 1);
		dcStructField(at, 'c', offsetof(union  A844, m5), 1);
		dcStructField(at, 'p', offsetof(union  A844, m6), 1);
		dcStructField(at, 'd', offsetof(union  A844, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A844, m8), 1, f_touchdcstA843());
		dcStructField(at, 'd', offsetof(union  A844, m9), 1);
		dcStructField(at, 'f', offsetof(union  A844, m10), 1);
		dcStructField(at, 'i', offsetof(union  A844, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fldlfdppcp> */
union  A845 { f m0; l m1; d m2; l m3; f m4; d m5; p m6; p m7; c m8; p m9; };
void f_cpA845(union  A845 *x, const union  A845 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA845(const union  A845 *x, const union  A845 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA845() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A845), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A845, m0), 1);
		dcStructField(at, 'l', offsetof(union  A845, m1), 1);
		dcStructField(at, 'd', offsetof(union  A845, m2), 1);
		dcStructField(at, 'l', offsetof(union  A845, m3), 1);
		dcStructField(at, 'f', offsetof(union  A845, m4), 1);
		dcStructField(at, 'd', offsetof(union  A845, m5), 1);
		dcStructField(at, 'p', offsetof(union  A845, m6), 1);
		dcStructField(at, 'p', offsetof(union  A845, m7), 1);
		dcStructField(at, 'c', offsetof(union  A845, m8), 1);
		dcStructField(at, 'p', offsetof(union  A845, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fpfsi> */
union  A846 { f m0; p m1; f m2; s m3; i m4; };
void f_cpA846(union  A846 *x, const union  A846 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA846(const union  A846 *x, const union  A846 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA846() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A846), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A846, m0), 1);
		dcStructField(at, 'p', offsetof(union  A846, m1), 1);
		dcStructField(at, 'f', offsetof(union  A846, m2), 1);
		dcStructField(at, 's', offsetof(union  A846, m3), 1);
		dcStructField(at, 'i', offsetof(union  A846, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<fldlfdppcp>i<fpfsi>ls> */
union  A847 { union  A845 m0; i m1; union  A846 m2; l m3; s m4; };
void f_cpA847(union  A847 *x, const union  A847 *y) { f_cpA845(&x->m0, &y->m0); x->m1 = y->m1; f_cpA846(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA847(const union  A847 *x, const union  A847 *y) { return f_cmpA845(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA846(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA847() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A847), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A847, m0), 1, f_touchdcstA845());
		dcStructField(at, 'i', offsetof(union  A847, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A847, m2), 1, f_touchdcstA846());
		dcStructField(at, 'l', offsetof(union  A847, m3), 1);
		dcStructField(at, 's', offsetof(union  A847, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {l<<fldlfdppcp>i<fpfsi>ls>f} */
struct A848 { l m0; union  A847 m1; f m2; };
void f_cpA848(struct A848 *x, const struct A848 *y) { x->m0 = y->m0; f_cpA847(&x->m1, &y->m1); x->m2 = y->m2; };
int f_cmpA848(const struct A848 *x, const struct A848 *y) { return x->m0 == y->m0 && f_cmpA847(&x->m1, &y->m1) && x->m2 == y->m2; };
DCstruct* f_touchdcstA848() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A848), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A848, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A848, m1), 1, f_touchdcstA847());
		dcStructField(at, 'f', offsetof(struct A848, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jj[1]jl> */
union  A849 { j m0; j m1[1]; j m2; l m3; };
void f_cpA849(union  A849 *x, const union  A849 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA849(const union  A849 *x, const union  A849 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA849() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A849), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A849, m0), 1);
		dcStructField(at, 'j', offsetof(union  A849, m1), 1);
		dcStructField(at, 'j', offsetof(union  A849, m2), 1);
		dcStructField(at, 'l', offsetof(union  A849, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {spi<jj[1]jl>c[10]dlfsp[8]} */
struct A850 { s m0; p m1; i m2; union  A849 m3; c m4[10]; d m5; l m6; f m7; s m8; p m9[8]; };
void f_cpA850(struct A850 *x, const struct A850 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA849(&x->m3, &y->m3); x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; };
int f_cmpA850(const struct A850 *x, const struct A850 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA849(&x->m3, &y->m3) && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7]; };
DCstruct* f_touchdcstA850() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A850), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A850, m0), 1);
		dcStructField(at, 'p', offsetof(struct A850, m1), 1);
		dcStructField(at, 'i', offsetof(struct A850, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A850, m3), 1, f_touchdcstA849());
		dcStructField(at, 'c', offsetof(struct A850, m4), 10);
		dcStructField(at, 'd', offsetof(struct A850, m5), 1);
		dcStructField(at, 'l', offsetof(struct A850, m6), 1);
		dcStructField(at, 'f', offsetof(struct A850, m7), 1);
		dcStructField(at, 's', offsetof(struct A850, m8), 1);
		dcStructField(at, 'p', offsetof(struct A850, m9), 8);
		dcCloseStruct(at);
	}
	return at;
};
/* <ijpfdiscl> */
union  A851 { i m0; j m1; p m2; f m3; d m4; i m5; s m6; c m7; l m8; };
void f_cpA851(union  A851 *x, const union  A851 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA851(const union  A851 *x, const union  A851 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA851() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A851), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A851, m0), 1);
		dcStructField(at, 'j', offsetof(union  A851, m1), 1);
		dcStructField(at, 'p', offsetof(union  A851, m2), 1);
		dcStructField(at, 'f', offsetof(union  A851, m3), 1);
		dcStructField(at, 'd', offsetof(union  A851, m4), 1);
		dcStructField(at, 'i', offsetof(union  A851, m5), 1);
		dcStructField(at, 's', offsetof(union  A851, m6), 1);
		dcStructField(at, 'c', offsetof(union  A851, m7), 1);
		dcStructField(at, 'l', offsetof(union  A851, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ldf} */
struct A852 { l m0; d m1; f m2; };
void f_cpA852(struct A852 *x, const struct A852 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA852(const struct A852 *x, const struct A852 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA852() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A852), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A852, m0), 1);
		dcStructField(at, 'd', offsetof(struct A852, m1), 1);
		dcStructField(at, 'f', offsetof(struct A852, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpf{s}<ijpfdiscl>pidf{ldf}ls> */
union  A853 { c m0; p m1; f m2; struct A162 m3; union  A851 m4; p m5; i m6; d m7; f m8; struct A852 m9; l m10; s m11; };
void f_cpA853(union  A853 *x, const union  A853 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA162(&x->m3, &y->m3); f_cpA851(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA852(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA853(const union  A853 *x, const union  A853 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA162(&x->m3, &y->m3) && f_cmpA851(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA852(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA853() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A853), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A853, m0), 1);
		dcStructField(at, 'p', offsetof(union  A853, m1), 1);
		dcStructField(at, 'f', offsetof(union  A853, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A853, m3), 1, f_touchdcstA162());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A853, m4), 1, f_touchdcstA851());
		dcStructField(at, 'p', offsetof(union  A853, m5), 1);
		dcStructField(at, 'i', offsetof(union  A853, m6), 1);
		dcStructField(at, 'd', offsetof(union  A853, m7), 1);
		dcStructField(at, 'f', offsetof(union  A853, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A853, m9), 1, f_touchdcstA852());
		dcStructField(at, 'l', offsetof(union  A853, m10), 1);
		dcStructField(at, 's', offsetof(union  A853, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {il} */
struct A854 { i m0; l m1; };
void f_cpA854(struct A854 *x, const struct A854 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA854(const struct A854 *x, const struct A854 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA854() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A854), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A854, m0), 1);
		dcStructField(at, 'l', offsetof(struct A854, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <scc> */
union  A855 { s m0; c m1; c m2; };
void f_cpA855(union  A855 *x, const union  A855 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA855(const union  A855 *x, const union  A855 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA855() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A855), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A855, m0), 1);
		dcStructField(at, 'c', offsetof(union  A855, m1), 1);
		dcStructField(at, 'c', offsetof(union  A855, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ii{il}p[14]pllpfps<scc>} */
struct A856 { i m0; i m1; struct A854 m2; p m3[14]; p m4; l m5; l m6; p m7; f m8; p m9; s m10; union  A855 m11; };
void f_cpA856(struct A856 *x, const struct A856 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA854(&x->m2, &y->m2); x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m3[12] = y->m3[12]; x->m3[13] = y->m3[13]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA855(&x->m11, &y->m11); };
int f_cmpA856(const struct A856 *x, const struct A856 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA854(&x->m2, &y->m2) && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m3[12] == y->m3[12] && x->m3[13] == y->m3[13] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA855(&x->m11, &y->m11); };
DCstruct* f_touchdcstA856() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A856), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A856, m0), 1);
		dcStructField(at, 'i', offsetof(struct A856, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A856, m2), 1, f_touchdcstA854());
		dcStructField(at, 'p', offsetof(struct A856, m3), 14);
		dcStructField(at, 'p', offsetof(struct A856, m4), 1);
		dcStructField(at, 'l', offsetof(struct A856, m5), 1);
		dcStructField(at, 'l', offsetof(struct A856, m6), 1);
		dcStructField(at, 'p', offsetof(struct A856, m7), 1);
		dcStructField(at, 'f', offsetof(struct A856, m8), 1);
		dcStructField(at, 'p', offsetof(struct A856, m9), 1);
		dcStructField(at, 's', offsetof(struct A856, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A856, m11), 1, f_touchdcstA855());
		dcCloseStruct(at);
	}
	return at;
};
/* <ljdifi[13]jl> */
union  A857 { l m0; j m1; d m2; i m3; f m4; i m5[13]; j m6; l m7; };
void f_cpA857(union  A857 *x, const union  A857 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m5[11] = y->m5[11]; x->m5[12] = y->m5[12]; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA857(const union  A857 *x, const union  A857 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m5[11] == y->m5[11] && x->m5[12] == y->m5[12] && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA857() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A857), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A857, m0), 1);
		dcStructField(at, 'j', offsetof(union  A857, m1), 1);
		dcStructField(at, 'd', offsetof(union  A857, m2), 1);
		dcStructField(at, 'i', offsetof(union  A857, m3), 1);
		dcStructField(at, 'f', offsetof(union  A857, m4), 1);
		dcStructField(at, 'i', offsetof(union  A857, m5), 13);
		dcStructField(at, 'j', offsetof(union  A857, m6), 1);
		dcStructField(at, 'l', offsetof(union  A857, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jlspidsls} */
struct A858 { j m0; l m1; s m2; p m3; i m4; d m5; s m6; l m7; s m8; };
void f_cpA858(struct A858 *x, const struct A858 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA858(const struct A858 *x, const struct A858 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA858() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A858), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A858, m0), 1);
		dcStructField(at, 'l', offsetof(struct A858, m1), 1);
		dcStructField(at, 's', offsetof(struct A858, m2), 1);
		dcStructField(at, 'p', offsetof(struct A858, m3), 1);
		dcStructField(at, 'i', offsetof(struct A858, m4), 1);
		dcStructField(at, 'd', offsetof(struct A858, m5), 1);
		dcStructField(at, 's', offsetof(struct A858, m6), 1);
		dcStructField(at, 'l', offsetof(struct A858, m7), 1);
		dcStructField(at, 's', offsetof(struct A858, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cflsi> */
union  A859 { c m0; f m1; l m2; s m3; i m4; };
void f_cpA859(union  A859 *x, const union  A859 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA859(const union  A859 *x, const union  A859 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA859() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A859), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A859, m0), 1);
		dcStructField(at, 'f', offsetof(union  A859, m1), 1);
		dcStructField(at, 'l', offsetof(union  A859, m2), 1);
		dcStructField(at, 's', offsetof(union  A859, m3), 1);
		dcStructField(at, 'i', offsetof(union  A859, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<ljdifi[13]jl>p{jlspidsls}d<cflsi>sjfd[9]jjf} */
struct A860 { union  A857 m0; p m1; struct A858 m2; d m3; union  A859 m4; s m5; j m6; f m7; d m8[9]; j m9; j m10; f m11; };
void f_cpA860(struct A860 *x, const struct A860 *y) { f_cpA857(&x->m0, &y->m0); x->m1 = y->m1; f_cpA858(&x->m2, &y->m2); x->m3 = y->m3; f_cpA859(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m8[8] = y->m8[8]; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA860(const struct A860 *x, const struct A860 *y) { return f_cmpA857(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA858(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA859(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m8[8] == y->m8[8] && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA860() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A860), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A860, m0), 1, f_touchdcstA857());
		dcStructField(at, 'p', offsetof(struct A860, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A860, m2), 1, f_touchdcstA858());
		dcStructField(at, 'd', offsetof(struct A860, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A860, m4), 1, f_touchdcstA859());
		dcStructField(at, 's', offsetof(struct A860, m5), 1);
		dcStructField(at, 'j', offsetof(struct A860, m6), 1);
		dcStructField(at, 'f', offsetof(struct A860, m7), 1);
		dcStructField(at, 'd', offsetof(struct A860, m8), 9);
		dcStructField(at, 'j', offsetof(struct A860, m9), 1);
		dcStructField(at, 'j', offsetof(struct A860, m10), 1);
		dcStructField(at, 'f', offsetof(struct A860, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ffsfcfd} */
struct A861 { f m0; f m1; s m2; f m3; c m4; f m5; d m6; };
void f_cpA861(struct A861 *x, const struct A861 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA861(const struct A861 *x, const struct A861 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA861() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A861), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A861, m0), 1);
		dcStructField(at, 'f', offsetof(struct A861, m1), 1);
		dcStructField(at, 's', offsetof(struct A861, m2), 1);
		dcStructField(at, 'f', offsetof(struct A861, m3), 1);
		dcStructField(at, 'c', offsetof(struct A861, m4), 1);
		dcStructField(at, 'f', offsetof(struct A861, m5), 1);
		dcStructField(at, 'd', offsetof(struct A861, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pd[2]fssfpidfip[9]> */
union  A862 { p m0; d m1[2]; f m2; s m3; s m4; f m5; p m6; i m7; d m8; f m9; i m10; p m11[9]; };
void f_cpA862(union  A862 *x, const union  A862 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11[0] = y->m11[0]; x->m11[1] = y->m11[1]; x->m11[2] = y->m11[2]; x->m11[3] = y->m11[3]; x->m11[4] = y->m11[4]; x->m11[5] = y->m11[5]; x->m11[6] = y->m11[6]; x->m11[7] = y->m11[7]; x->m11[8] = y->m11[8]; };
int f_cmpA862(const union  A862 *x, const union  A862 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11[0] == y->m11[0] && x->m11[1] == y->m11[1] && x->m11[2] == y->m11[2] && x->m11[3] == y->m11[3] && x->m11[4] == y->m11[4] && x->m11[5] == y->m11[5] && x->m11[6] == y->m11[6] && x->m11[7] == y->m11[7] && x->m11[8] == y->m11[8]; };
DCstruct* f_touchdcstA862() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A862), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A862, m0), 1);
		dcStructField(at, 'd', offsetof(union  A862, m1), 2);
		dcStructField(at, 'f', offsetof(union  A862, m2), 1);
		dcStructField(at, 's', offsetof(union  A862, m3), 1);
		dcStructField(at, 's', offsetof(union  A862, m4), 1);
		dcStructField(at, 'f', offsetof(union  A862, m5), 1);
		dcStructField(at, 'p', offsetof(union  A862, m6), 1);
		dcStructField(at, 'i', offsetof(union  A862, m7), 1);
		dcStructField(at, 'd', offsetof(union  A862, m8), 1);
		dcStructField(at, 'f', offsetof(union  A862, m9), 1);
		dcStructField(at, 'i', offsetof(union  A862, m10), 1);
		dcStructField(at, 'p', offsetof(union  A862, m11), 9);
		dcCloseStruct(at);
	}
	return at;
};
/* <ffs<pd[2]fssfpidfip[9]>f> */
union  A863 { f m0; f m1; s m2; union  A862 m3; f m4; };
void f_cpA863(union  A863 *x, const union  A863 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA862(&x->m3, &y->m3); x->m4 = y->m4; };
int f_cmpA863(const union  A863 *x, const union  A863 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA862(&x->m3, &y->m3) && x->m4 == y->m4; };
DCstruct* f_touchdcstA863() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A863), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A863, m0), 1);
		dcStructField(at, 'f', offsetof(union  A863, m1), 1);
		dcStructField(at, 's', offsetof(union  A863, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A863, m3), 1, f_touchdcstA862());
		dcStructField(at, 'f', offsetof(union  A863, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{<ljdifi[13]jl>p{jlspidsls}d<cflsi>sjfd[9]jjf}{ffsfcfd}jllc<ffs<pd[2]fssfpidfip[9]>f>fcllc> */
union  A864 { struct A860 m0; struct A861 m1; j m2; l m3; l m4; c m5; union  A863 m6; f m7; c m8; l m9; l m10; c m11; };
void f_cpA864(union  A864 *x, const union  A864 *y) { f_cpA860(&x->m0, &y->m0); f_cpA861(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA863(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA864(const union  A864 *x, const union  A864 *y) { return f_cmpA860(&x->m0, &y->m0) && f_cmpA861(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA863(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA864() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A864), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A864, m0), 1, f_touchdcstA860());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A864, m1), 1, f_touchdcstA861());
		dcStructField(at, 'j', offsetof(union  A864, m2), 1);
		dcStructField(at, 'l', offsetof(union  A864, m3), 1);
		dcStructField(at, 'l', offsetof(union  A864, m4), 1);
		dcStructField(at, 'c', offsetof(union  A864, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A864, m6), 1, f_touchdcstA863());
		dcStructField(at, 'f', offsetof(union  A864, m7), 1);
		dcStructField(at, 'c', offsetof(union  A864, m8), 1);
		dcStructField(at, 'l', offsetof(union  A864, m9), 1);
		dcStructField(at, 'l', offsetof(union  A864, m10), 1);
		dcStructField(at, 'c', offsetof(union  A864, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lsdcc[16]fs} */
struct A865 { l m0; s m1; d m2; c m3; c m4[16]; f m5; s m6; };
void f_cpA865(struct A865 *x, const struct A865 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m4[12] = y->m4[12]; x->m4[13] = y->m4[13]; x->m4[14] = y->m4[14]; x->m4[15] = y->m4[15]; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA865(const struct A865 *x, const struct A865 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m4[12] == y->m4[12] && x->m4[13] == y->m4[13] && x->m4[14] == y->m4[14] && x->m4[15] == y->m4[15] && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA865() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A865), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A865, m0), 1);
		dcStructField(at, 's', offsetof(struct A865, m1), 1);
		dcStructField(at, 'd', offsetof(struct A865, m2), 1);
		dcStructField(at, 'c', offsetof(struct A865, m3), 1);
		dcStructField(at, 'c', offsetof(struct A865, m4), 16);
		dcStructField(at, 'f', offsetof(struct A865, m5), 1);
		dcStructField(at, 's', offsetof(struct A865, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ipjf} */
struct A866 { i m0; p m1; j m2; f m3; };
void f_cpA866(struct A866 *x, const struct A866 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA866(const struct A866 *x, const struct A866 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA866() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A866), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A866, m0), 1);
		dcStructField(at, 'p', offsetof(struct A866, m1), 1);
		dcStructField(at, 'j', offsetof(struct A866, m2), 1);
		dcStructField(at, 'f', offsetof(struct A866, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {spl} */
struct A867 { s m0; p m1; l m2; };
void f_cpA867(struct A867 *x, const struct A867 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA867(const struct A867 *x, const struct A867 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA867() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A867), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A867, m0), 1);
		dcStructField(at, 'p', offsetof(struct A867, m1), 1);
		dcStructField(at, 'l', offsetof(struct A867, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{lsdcc[16]fs}{ipjf}l{spl}lpjfi[12]} */
struct A868 { struct A865 m0; struct A866 m1; l m2; struct A867 m3; l m4; p m5; j m6; f m7; i m8[12]; };
void f_cpA868(struct A868 *x, const struct A868 *y) { f_cpA865(&x->m0, &y->m0); f_cpA866(&x->m1, &y->m1); x->m2 = y->m2; f_cpA867(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m8[8] = y->m8[8]; x->m8[9] = y->m8[9]; x->m8[10] = y->m8[10]; x->m8[11] = y->m8[11]; };
int f_cmpA868(const struct A868 *x, const struct A868 *y) { return f_cmpA865(&x->m0, &y->m0) && f_cmpA866(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA867(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m8[8] == y->m8[8] && x->m8[9] == y->m8[9] && x->m8[10] == y->m8[10] && x->m8[11] == y->m8[11]; };
DCstruct* f_touchdcstA868() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A868), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A868, m0), 1, f_touchdcstA865());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A868, m1), 1, f_touchdcstA866());
		dcStructField(at, 'l', offsetof(struct A868, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A868, m3), 1, f_touchdcstA867());
		dcStructField(at, 'l', offsetof(struct A868, m4), 1);
		dcStructField(at, 'p', offsetof(struct A868, m5), 1);
		dcStructField(at, 'j', offsetof(struct A868, m6), 1);
		dcStructField(at, 'f', offsetof(struct A868, m7), 1);
		dcStructField(at, 'i', offsetof(struct A868, m8), 12);
		dcCloseStruct(at);
	}
	return at;
};
/* <llcf> */
union  A869 { l m0; l m1; c m2; f m3; };
void f_cpA869(union  A869 *x, const union  A869 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA869(const union  A869 *x, const union  A869 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA869() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A869), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A869, m0), 1);
		dcStructField(at, 'l', offsetof(union  A869, m1), 1);
		dcStructField(at, 'c', offsetof(union  A869, m2), 1);
		dcStructField(at, 'f', offsetof(union  A869, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpljssdc<llcf>dll> */
union  A870 { c m0; p m1; l m2; j m3; s m4; s m5; d m6; c m7; union  A869 m8; d m9; l m10; l m11; };
void f_cpA870(union  A870 *x, const union  A870 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA869(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA870(const union  A870 *x, const union  A870 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA869(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA870() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A870), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A870, m0), 1);
		dcStructField(at, 'p', offsetof(union  A870, m1), 1);
		dcStructField(at, 'l', offsetof(union  A870, m2), 1);
		dcStructField(at, 'j', offsetof(union  A870, m3), 1);
		dcStructField(at, 's', offsetof(union  A870, m4), 1);
		dcStructField(at, 's', offsetof(union  A870, m5), 1);
		dcStructField(at, 'd', offsetof(union  A870, m6), 1);
		dcStructField(at, 'c', offsetof(union  A870, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A870, m8), 1, f_touchdcstA869());
		dcStructField(at, 'd', offsetof(union  A870, m9), 1);
		dcStructField(at, 'l', offsetof(union  A870, m10), 1);
		dcStructField(at, 'l', offsetof(union  A870, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iscllsfjflp} */
struct A871 { i m0; s m1; c m2; l m3; l m4; s m5; f m6; j m7; f m8; l m9; p m10; };
void f_cpA871(struct A871 *x, const struct A871 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA871(const struct A871 *x, const struct A871 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA871() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A871), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A871, m0), 1);
		dcStructField(at, 's', offsetof(struct A871, m1), 1);
		dcStructField(at, 'c', offsetof(struct A871, m2), 1);
		dcStructField(at, 'l', offsetof(struct A871, m3), 1);
		dcStructField(at, 'l', offsetof(struct A871, m4), 1);
		dcStructField(at, 's', offsetof(struct A871, m5), 1);
		dcStructField(at, 'f', offsetof(struct A871, m6), 1);
		dcStructField(at, 'j', offsetof(struct A871, m7), 1);
		dcStructField(at, 'f', offsetof(struct A871, m8), 1);
		dcStructField(at, 'l', offsetof(struct A871, m9), 1);
		dcStructField(at, 'p', offsetof(struct A871, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ild} */
struct A872 { i m0; l m1; d m2; };
void f_cpA872(struct A872 *x, const struct A872 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA872(const struct A872 *x, const struct A872 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA872() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A872), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A872, m0), 1);
		dcStructField(at, 'l', offsetof(struct A872, m1), 1);
		dcStructField(at, 'd', offsetof(struct A872, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cddpd> */
union  A873 { c m0; d m1; d m2; p m3; d m4; };
void f_cpA873(union  A873 *x, const union  A873 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA873(const union  A873 *x, const union  A873 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA873() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A873), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A873, m0), 1);
		dcStructField(at, 'd', offsetof(union  A873, m1), 1);
		dcStructField(at, 'd', offsetof(union  A873, m2), 1);
		dcStructField(at, 'p', offsetof(union  A873, m3), 1);
		dcStructField(at, 'd', offsetof(union  A873, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sdd> */
union  A874 { s m0; d m1; d m2; };
void f_cpA874(union  A874 *x, const union  A874 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA874(const union  A874 *x, const union  A874 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA874() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A874), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A874, m0), 1);
		dcStructField(at, 'd', offsetof(union  A874, m1), 1);
		dcStructField(at, 'd', offsetof(union  A874, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pclpd{iscllsfjflp}sjp{ild}<cddpd><sdd>> */
union  A875 { p m0; c m1; l m2; p m3; d m4; struct A871 m5; s m6; j m7; p m8; struct A872 m9; union  A873 m10; union  A874 m11; };
void f_cpA875(union  A875 *x, const union  A875 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA871(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA872(&x->m9, &y->m9); f_cpA873(&x->m10, &y->m10); f_cpA874(&x->m11, &y->m11); };
int f_cmpA875(const union  A875 *x, const union  A875 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA871(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA872(&x->m9, &y->m9) && f_cmpA873(&x->m10, &y->m10) && f_cmpA874(&x->m11, &y->m11); };
DCstruct* f_touchdcstA875() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A875), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A875, m0), 1);
		dcStructField(at, 'c', offsetof(union  A875, m1), 1);
		dcStructField(at, 'l', offsetof(union  A875, m2), 1);
		dcStructField(at, 'p', offsetof(union  A875, m3), 1);
		dcStructField(at, 'd', offsetof(union  A875, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A875, m5), 1, f_touchdcstA871());
		dcStructField(at, 's', offsetof(union  A875, m6), 1);
		dcStructField(at, 'j', offsetof(union  A875, m7), 1);
		dcStructField(at, 'p', offsetof(union  A875, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A875, m9), 1, f_touchdcstA872());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A875, m10), 1, f_touchdcstA873());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A875, m11), 1, f_touchdcstA874());
		dcCloseStruct(at);
	}
	return at;
};
/* {pl{{lsdcc[16]fs}{ipjf}l{spl}lpjfi[12]}<cpljssdc<llcf>dll><pclpd{iscllsfjflp}sjp{ild}<cddpd><sdd>>ldl} */
struct A876 { p m0; l m1; struct A868 m2; union  A870 m3; union  A875 m4; l m5; d m6; l m7; };
void f_cpA876(struct A876 *x, const struct A876 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA868(&x->m2, &y->m2); f_cpA870(&x->m3, &y->m3); f_cpA875(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA876(const struct A876 *x, const struct A876 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA868(&x->m2, &y->m2) && f_cmpA870(&x->m3, &y->m3) && f_cmpA875(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA876() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A876), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A876, m0), 1);
		dcStructField(at, 'l', offsetof(struct A876, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A876, m2), 1, f_touchdcstA868());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A876, m3), 1, f_touchdcstA870());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A876, m4), 1, f_touchdcstA875());
		dcStructField(at, 'l', offsetof(struct A876, m5), 1);
		dcStructField(at, 'd', offsetof(struct A876, m6), 1);
		dcStructField(at, 'l', offsetof(struct A876, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pljs> */
union  A877 { p m0; l m1; j m2; s m3; };
void f_cpA877(union  A877 *x, const union  A877 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA877(const union  A877 *x, const union  A877 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA877() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A877), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A877, m0), 1);
		dcStructField(at, 'l', offsetof(union  A877, m1), 1);
		dcStructField(at, 'j', offsetof(union  A877, m2), 1);
		dcStructField(at, 's', offsetof(union  A877, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dpsldsdspdss> */
union  A878 { d m0; p m1; s m2; l m3; d m4; s m5; d m6; s m7; p m8; d m9; s m10; s m11; };
void f_cpA878(union  A878 *x, const union  A878 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA878(const union  A878 *x, const union  A878 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA878() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A878), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A878, m0), 1);
		dcStructField(at, 'p', offsetof(union  A878, m1), 1);
		dcStructField(at, 's', offsetof(union  A878, m2), 1);
		dcStructField(at, 'l', offsetof(union  A878, m3), 1);
		dcStructField(at, 'd', offsetof(union  A878, m4), 1);
		dcStructField(at, 's', offsetof(union  A878, m5), 1);
		dcStructField(at, 'd', offsetof(union  A878, m6), 1);
		dcStructField(at, 's', offsetof(union  A878, m7), 1);
		dcStructField(at, 'p', offsetof(union  A878, m8), 1);
		dcStructField(at, 'd', offsetof(union  A878, m9), 1);
		dcStructField(at, 's', offsetof(union  A878, m10), 1);
		dcStructField(at, 's', offsetof(union  A878, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pfilsilidscj} */
struct A879 { p m0; f m1; i m2; l m3; s m4; i m5; l m6; i m7; d m8; s m9; c m10; j m11; };
void f_cpA879(struct A879 *x, const struct A879 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA879(const struct A879 *x, const struct A879 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA879() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A879), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A879, m0), 1);
		dcStructField(at, 'f', offsetof(struct A879, m1), 1);
		dcStructField(at, 'i', offsetof(struct A879, m2), 1);
		dcStructField(at, 'l', offsetof(struct A879, m3), 1);
		dcStructField(at, 's', offsetof(struct A879, m4), 1);
		dcStructField(at, 'i', offsetof(struct A879, m5), 1);
		dcStructField(at, 'l', offsetof(struct A879, m6), 1);
		dcStructField(at, 'i', offsetof(struct A879, m7), 1);
		dcStructField(at, 'd', offsetof(struct A879, m8), 1);
		dcStructField(at, 's', offsetof(struct A879, m9), 1);
		dcStructField(at, 'c', offsetof(struct A879, m10), 1);
		dcStructField(at, 'j', offsetof(struct A879, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<pljs><dpsldsdspdss>{pfilsilidscj}pfcddpcjj> */
union  A880 { union  A877 m0; union  A878 m1; struct A879 m2; p m3; f m4; c m5; d m6; d m7; p m8; c m9; j m10; j m11; };
void f_cpA880(union  A880 *x, const union  A880 *y) { f_cpA877(&x->m0, &y->m0); f_cpA878(&x->m1, &y->m1); f_cpA879(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA880(const union  A880 *x, const union  A880 *y) { return f_cmpA877(&x->m0, &y->m0) && f_cmpA878(&x->m1, &y->m1) && f_cmpA879(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA880() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A880), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A880, m0), 1, f_touchdcstA877());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A880, m1), 1, f_touchdcstA878());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A880, m2), 1, f_touchdcstA879());
		dcStructField(at, 'p', offsetof(union  A880, m3), 1);
		dcStructField(at, 'f', offsetof(union  A880, m4), 1);
		dcStructField(at, 'c', offsetof(union  A880, m5), 1);
		dcStructField(at, 'd', offsetof(union  A880, m6), 1);
		dcStructField(at, 'd', offsetof(union  A880, m7), 1);
		dcStructField(at, 'p', offsetof(union  A880, m8), 1);
		dcStructField(at, 'c', offsetof(union  A880, m9), 1);
		dcStructField(at, 'j', offsetof(union  A880, m10), 1);
		dcStructField(at, 'j', offsetof(union  A880, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ljfcdd[16]sjslcd} */
struct A881 { l m0; j m1; f m2; c m3; d m4; d m5[16]; s m6; j m7; s m8; l m9; c m10; d m11; };
void f_cpA881(struct A881 *x, const struct A881 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m5[11] = y->m5[11]; x->m5[12] = y->m5[12]; x->m5[13] = y->m5[13]; x->m5[14] = y->m5[14]; x->m5[15] = y->m5[15]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA881(const struct A881 *x, const struct A881 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m5[11] == y->m5[11] && x->m5[12] == y->m5[12] && x->m5[13] == y->m5[13] && x->m5[14] == y->m5[14] && x->m5[15] == y->m5[15] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA881() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A881), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A881, m0), 1);
		dcStructField(at, 'j', offsetof(struct A881, m1), 1);
		dcStructField(at, 'f', offsetof(struct A881, m2), 1);
		dcStructField(at, 'c', offsetof(struct A881, m3), 1);
		dcStructField(at, 'd', offsetof(struct A881, m4), 1);
		dcStructField(at, 'd', offsetof(struct A881, m5), 16);
		dcStructField(at, 's', offsetof(struct A881, m6), 1);
		dcStructField(at, 'j', offsetof(struct A881, m7), 1);
		dcStructField(at, 's', offsetof(struct A881, m8), 1);
		dcStructField(at, 'l', offsetof(struct A881, m9), 1);
		dcStructField(at, 'c', offsetof(struct A881, m10), 1);
		dcStructField(at, 'd', offsetof(struct A881, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jlijssiflfdj} */
struct A882 { j m0; l m1; i m2; j m3; s m4; s m5; i m6; f m7; l m8; f m9; d m10; j m11; };
void f_cpA882(struct A882 *x, const struct A882 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA882(const struct A882 *x, const struct A882 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA882() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A882), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A882, m0), 1);
		dcStructField(at, 'l', offsetof(struct A882, m1), 1);
		dcStructField(at, 'i', offsetof(struct A882, m2), 1);
		dcStructField(at, 'j', offsetof(struct A882, m3), 1);
		dcStructField(at, 's', offsetof(struct A882, m4), 1);
		dcStructField(at, 's', offsetof(struct A882, m5), 1);
		dcStructField(at, 'i', offsetof(struct A882, m6), 1);
		dcStructField(at, 'f', offsetof(struct A882, m7), 1);
		dcStructField(at, 'l', offsetof(struct A882, m8), 1);
		dcStructField(at, 'f', offsetof(struct A882, m9), 1);
		dcStructField(at, 'd', offsetof(struct A882, m10), 1);
		dcStructField(at, 'j', offsetof(struct A882, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {icfl{ljfcdd[16]sjslcd}jcjsj{jlijssiflfdj}f} */
struct A883 { i m0; c m1; f m2; l m3; struct A881 m4; j m5; c m6; j m7; s m8; j m9; struct A882 m10; f m11; };
void f_cpA883(struct A883 *x, const struct A883 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA881(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA882(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA883(const struct A883 *x, const struct A883 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA881(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA882(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA883() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A883), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A883, m0), 1);
		dcStructField(at, 'c', offsetof(struct A883, m1), 1);
		dcStructField(at, 'f', offsetof(struct A883, m2), 1);
		dcStructField(at, 'l', offsetof(struct A883, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A883, m4), 1, f_touchdcstA881());
		dcStructField(at, 'j', offsetof(struct A883, m5), 1);
		dcStructField(at, 'c', offsetof(struct A883, m6), 1);
		dcStructField(at, 'j', offsetof(struct A883, m7), 1);
		dcStructField(at, 's', offsetof(struct A883, m8), 1);
		dcStructField(at, 'j', offsetof(struct A883, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A883, m10), 1, f_touchdcstA882());
		dcStructField(at, 'f', offsetof(struct A883, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p[12]lcplcipsffs> */
union  A884 { p m0[12]; l m1; c m2; p m3; l m4; c m5; i m6; p m7; s m8; f m9; f m10; s m11; };
void f_cpA884(union  A884 *x, const union  A884 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA884(const union  A884 *x, const union  A884 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA884() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A884), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A884, m0), 12);
		dcStructField(at, 'l', offsetof(union  A884, m1), 1);
		dcStructField(at, 'c', offsetof(union  A884, m2), 1);
		dcStructField(at, 'p', offsetof(union  A884, m3), 1);
		dcStructField(at, 'l', offsetof(union  A884, m4), 1);
		dcStructField(at, 'c', offsetof(union  A884, m5), 1);
		dcStructField(at, 'i', offsetof(union  A884, m6), 1);
		dcStructField(at, 'p', offsetof(union  A884, m7), 1);
		dcStructField(at, 's', offsetof(union  A884, m8), 1);
		dcStructField(at, 'f', offsetof(union  A884, m9), 1);
		dcStructField(at, 'f', offsetof(union  A884, m10), 1);
		dcStructField(at, 's', offsetof(union  A884, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fs{c}fppisjjj<p[12]lcplcipsffs>> */
union  A885 { f m0; s m1; struct A212 m2; f m3; p m4; p m5; i m6; s m7; j m8; j m9; j m10; union  A884 m11; };
void f_cpA885(union  A885 *x, const union  A885 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA212(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA884(&x->m11, &y->m11); };
int f_cmpA885(const union  A885 *x, const union  A885 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA212(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA884(&x->m11, &y->m11); };
DCstruct* f_touchdcstA885() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A885), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A885, m0), 1);
		dcStructField(at, 's', offsetof(union  A885, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A885, m2), 1, f_touchdcstA212());
		dcStructField(at, 'f', offsetof(union  A885, m3), 1);
		dcStructField(at, 'p', offsetof(union  A885, m4), 1);
		dcStructField(at, 'p', offsetof(union  A885, m5), 1);
		dcStructField(at, 'i', offsetof(union  A885, m6), 1);
		dcStructField(at, 's', offsetof(union  A885, m7), 1);
		dcStructField(at, 'j', offsetof(union  A885, m8), 1);
		dcStructField(at, 'j', offsetof(union  A885, m9), 1);
		dcStructField(at, 'j', offsetof(union  A885, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A885, m11), 1, f_touchdcstA884());
		dcCloseStruct(at);
	}
	return at;
};
/* {lp<<pljs><dpsldsdspdss>{pfilsilidscj}pfcddpcjj>pj{icfl{ljfcdd[16]sjslcd}jcjsj{jlijssiflfdj}f}<fs{c}fppisjjj<p[12]lcplcipsffs>>ff} */
struct A886 { l m0; p m1; union  A880 m2; p m3; j m4; struct A883 m5; union  A885 m6; f m7; f m8; };
void f_cpA886(struct A886 *x, const struct A886 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA880(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; f_cpA883(&x->m5, &y->m5); f_cpA885(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA886(const struct A886 *x, const struct A886 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA880(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA883(&x->m5, &y->m5) && f_cmpA885(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA886() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A886), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A886, m0), 1);
		dcStructField(at, 'p', offsetof(struct A886, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A886, m2), 1, f_touchdcstA880());
		dcStructField(at, 'p', offsetof(struct A886, m3), 1);
		dcStructField(at, 'j', offsetof(struct A886, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A886, m5), 1, f_touchdcstA883());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A886, m6), 1, f_touchdcstA885());
		dcStructField(at, 'f', offsetof(struct A886, m7), 1);
		dcStructField(at, 'f', offsetof(struct A886, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <clll> */
union  A887 { c m0; l m1; l m2; l m3; };
void f_cpA887(union  A887 *x, const union  A887 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA887(const union  A887 *x, const union  A887 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA887() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A887), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A887, m0), 1);
		dcStructField(at, 'l', offsetof(union  A887, m1), 1);
		dcStructField(at, 'l', offsetof(union  A887, m2), 1);
		dcStructField(at, 'l', offsetof(union  A887, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fdj} */
struct A888 { f m0; d m1; j m2; };
void f_cpA888(struct A888 *x, const struct A888 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA888(const struct A888 *x, const struct A888 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA888() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A888), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A888, m0), 1);
		dcStructField(at, 'd', offsetof(struct A888, m1), 1);
		dcStructField(at, 'j', offsetof(struct A888, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <disf> */
union  A889 { d m0; i m1; s m2; f m3; };
void f_cpA889(union  A889 *x, const union  A889 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA889(const union  A889 *x, const union  A889 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA889() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A889), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A889, m0), 1);
		dcStructField(at, 'i', offsetof(union  A889, m1), 1);
		dcStructField(at, 's', offsetof(union  A889, m2), 1);
		dcStructField(at, 'f', offsetof(union  A889, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iip<clll><c>{fdj}p<disf>dcld} */
struct A890 { i m0; i m1; p m2; union  A887 m3; union  A116 m4; struct A888 m5; p m6; union  A889 m7; d m8; c m9; l m10; d m11; };
void f_cpA890(struct A890 *x, const struct A890 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA887(&x->m3, &y->m3); f_cpA116(&x->m4, &y->m4); f_cpA888(&x->m5, &y->m5); x->m6 = y->m6; f_cpA889(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA890(const struct A890 *x, const struct A890 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA887(&x->m3, &y->m3) && f_cmpA116(&x->m4, &y->m4) && f_cmpA888(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA889(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA890() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A890), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A890, m0), 1);
		dcStructField(at, 'i', offsetof(struct A890, m1), 1);
		dcStructField(at, 'p', offsetof(struct A890, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A890, m3), 1, f_touchdcstA887());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A890, m4), 1, f_touchdcstA116());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A890, m5), 1, f_touchdcstA888());
		dcStructField(at, 'p', offsetof(struct A890, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A890, m7), 1, f_touchdcstA889());
		dcStructField(at, 'd', offsetof(struct A890, m8), 1);
		dcStructField(at, 'c', offsetof(struct A890, m9), 1);
		dcStructField(at, 'l', offsetof(struct A890, m10), 1);
		dcStructField(at, 'd', offsetof(struct A890, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sidippliljsi> */
union  A891 { s m0; i m1; d m2; i m3; p m4; p m5; l m6; i m7; l m8; j m9; s m10; i m11; };
void f_cpA891(union  A891 *x, const union  A891 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA891(const union  A891 *x, const union  A891 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA891() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A891), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A891, m0), 1);
		dcStructField(at, 'i', offsetof(union  A891, m1), 1);
		dcStructField(at, 'd', offsetof(union  A891, m2), 1);
		dcStructField(at, 'i', offsetof(union  A891, m3), 1);
		dcStructField(at, 'p', offsetof(union  A891, m4), 1);
		dcStructField(at, 'p', offsetof(union  A891, m5), 1);
		dcStructField(at, 'l', offsetof(union  A891, m6), 1);
		dcStructField(at, 'i', offsetof(union  A891, m7), 1);
		dcStructField(at, 'l', offsetof(union  A891, m8), 1);
		dcStructField(at, 'j', offsetof(union  A891, m9), 1);
		dcStructField(at, 's', offsetof(union  A891, m10), 1);
		dcStructField(at, 'i', offsetof(union  A891, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <idfcsl> */
union  A892 { i m0; d m1; f m2; c m3; s m4; l m5; };
void f_cpA892(union  A892 *x, const union  A892 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA892(const union  A892 *x, const union  A892 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA892() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A892), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A892, m0), 1);
		dcStructField(at, 'd', offsetof(union  A892, m1), 1);
		dcStructField(at, 'f', offsetof(union  A892, m2), 1);
		dcStructField(at, 'c', offsetof(union  A892, m3), 1);
		dcStructField(at, 's', offsetof(union  A892, m4), 1);
		dcStructField(at, 'l', offsetof(union  A892, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpdsl[2]<sidippliljsi>jffi{j}<idfcsl>> */
union  A893 { c m0; p m1; d m2; s m3; l m4[2]; union  A891 m5; j m6; f m7; f m8; i m9; struct A117 m10; union  A892 m11; };
void f_cpA893(union  A893 *x, const union  A893 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; f_cpA891(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA117(&x->m10, &y->m10); f_cpA892(&x->m11, &y->m11); };
int f_cmpA893(const union  A893 *x, const union  A893 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && f_cmpA891(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA117(&x->m10, &y->m10) && f_cmpA892(&x->m11, &y->m11); };
DCstruct* f_touchdcstA893() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A893), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A893, m0), 1);
		dcStructField(at, 'p', offsetof(union  A893, m1), 1);
		dcStructField(at, 'd', offsetof(union  A893, m2), 1);
		dcStructField(at, 's', offsetof(union  A893, m3), 1);
		dcStructField(at, 'l', offsetof(union  A893, m4), 2);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A893, m5), 1, f_touchdcstA891());
		dcStructField(at, 'j', offsetof(union  A893, m6), 1);
		dcStructField(at, 'f', offsetof(union  A893, m7), 1);
		dcStructField(at, 'f', offsetof(union  A893, m8), 1);
		dcStructField(at, 'i', offsetof(union  A893, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A893, m10), 1, f_touchdcstA117());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A893, m11), 1, f_touchdcstA892());
		dcCloseStruct(at);
	}
	return at;
};
/* {j<jj>j} */
struct A894 { j m0; union  A606 m1; j m2; };
void f_cpA894(struct A894 *x, const struct A894 *y) { x->m0 = y->m0; f_cpA606(&x->m1, &y->m1); x->m2 = y->m2; };
int f_cmpA894(const struct A894 *x, const struct A894 *y) { return x->m0 == y->m0 && f_cmpA606(&x->m1, &y->m1) && x->m2 == y->m2; };
DCstruct* f_touchdcstA894() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A894), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A894, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A894, m1), 1, f_touchdcstA606());
		dcStructField(at, 'j', offsetof(struct A894, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<cpdsl[2]<sidippliljsi>jffi{j}<idfcsl>>pipdifd{j<jj>j}cji} */
struct A895 { union  A893 m0; p m1; i m2; p m3; d m4; i m5; f m6; d m7; struct A894 m8; c m9; j m10; i m11; };
void f_cpA895(struct A895 *x, const struct A895 *y) { f_cpA893(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA894(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA895(const struct A895 *x, const struct A895 *y) { return f_cmpA893(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA894(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA895() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A895), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A895, m0), 1, f_touchdcstA893());
		dcStructField(at, 'p', offsetof(struct A895, m1), 1);
		dcStructField(at, 'i', offsetof(struct A895, m2), 1);
		dcStructField(at, 'p', offsetof(struct A895, m3), 1);
		dcStructField(at, 'd', offsetof(struct A895, m4), 1);
		dcStructField(at, 'i', offsetof(struct A895, m5), 1);
		dcStructField(at, 'f', offsetof(struct A895, m6), 1);
		dcStructField(at, 'd', offsetof(struct A895, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A895, m8), 1, f_touchdcstA894());
		dcStructField(at, 'c', offsetof(struct A895, m9), 1);
		dcStructField(at, 'j', offsetof(struct A895, m10), 1);
		dcStructField(at, 'i', offsetof(struct A895, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ficsddpi} */
struct A896 { f m0; i m1; c m2; s m3; d m4; d m5; p m6; i m7; };
void f_cpA896(struct A896 *x, const struct A896 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA896(const struct A896 *x, const struct A896 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA896() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A896), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A896, m0), 1);
		dcStructField(at, 'i', offsetof(struct A896, m1), 1);
		dcStructField(at, 'c', offsetof(struct A896, m2), 1);
		dcStructField(at, 's', offsetof(struct A896, m3), 1);
		dcStructField(at, 'd', offsetof(struct A896, m4), 1);
		dcStructField(at, 'd', offsetof(struct A896, m5), 1);
		dcStructField(at, 'p', offsetof(struct A896, m6), 1);
		dcStructField(at, 'i', offsetof(struct A896, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iilcdddl} */
struct A897 { i m0; i m1; l m2; c m3; d m4; d m5; d m6; l m7; };
void f_cpA897(struct A897 *x, const struct A897 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA897(const struct A897 *x, const struct A897 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA897() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A897), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A897, m0), 1);
		dcStructField(at, 'i', offsetof(struct A897, m1), 1);
		dcStructField(at, 'l', offsetof(struct A897, m2), 1);
		dcStructField(at, 'c', offsetof(struct A897, m3), 1);
		dcStructField(at, 'd', offsetof(struct A897, m4), 1);
		dcStructField(at, 'd', offsetof(struct A897, m5), 1);
		dcStructField(at, 'd', offsetof(struct A897, m6), 1);
		dcStructField(at, 'l', offsetof(struct A897, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<c>jc{iilcdddl}cci> */
union  A898 { union  A116 m0; j m1; c m2; struct A897 m3; c m4; c m5; i m6; };
void f_cpA898(union  A898 *x, const union  A898 *y) { f_cpA116(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA897(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA898(const union  A898 *x, const union  A898 *y) { return f_cmpA116(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA897(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA898() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A898), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A898, m0), 1, f_touchdcstA116());
		dcStructField(at, 'j', offsetof(union  A898, m1), 1);
		dcStructField(at, 'c', offsetof(union  A898, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A898, m3), 1, f_touchdcstA897());
		dcStructField(at, 'c', offsetof(union  A898, m4), 1);
		dcStructField(at, 'c', offsetof(union  A898, m5), 1);
		dcStructField(at, 'i', offsetof(union  A898, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{sp}[2]<<c>jc{iilcdddl}cci>jjiic> */
union  A899 { struct A756 m0[2]; union  A898 m1; j m2; j m3; i m4; i m5; c m6; };
void f_cpA899(union  A899 *x, const union  A899 *y) { f_cpA756(&x->m0[0], &y->m0[0]); f_cpA756(&x->m0[1], &y->m0[1]); f_cpA898(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA899(const union  A899 *x, const union  A899 *y) { return f_cmpA756(&x->m0[0], &y->m0[0]) && f_cmpA756(&x->m0[1], &y->m0[1]) && f_cmpA898(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA899() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A899), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A899, m0), 2, f_touchdcstA756());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A899, m1), 1, f_touchdcstA898());
		dcStructField(at, 'j', offsetof(union  A899, m2), 1);
		dcStructField(at, 'j', offsetof(union  A899, m3), 1);
		dcStructField(at, 'i', offsetof(union  A899, m4), 1);
		dcStructField(at, 'i', offsetof(union  A899, m5), 1);
		dcStructField(at, 'c', offsetof(union  A899, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {d<i>s<jf>pd} */
struct A900 { d m0; union  A62 m1; s m2; union  A679 m3; p m4; d m5; };
void f_cpA900(struct A900 *x, const struct A900 *y) { x->m0 = y->m0; f_cpA62(&x->m1, &y->m1); x->m2 = y->m2; f_cpA679(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA900(const struct A900 *x, const struct A900 *y) { return x->m0 == y->m0 && f_cmpA62(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA679(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA900() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A900), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A900, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A900, m1), 1, f_touchdcstA62());
		dcStructField(at, 's', offsetof(struct A900, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A900, m3), 1, f_touchdcstA679());
		dcStructField(at, 'p', offsetof(struct A900, m4), 1);
		dcStructField(at, 'd', offsetof(struct A900, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pidfjdjpcis> */
union  A901 { p m0; i m1; d m2; f m3; j m4; d m5; j m6; p m7; c m8; i m9; s m10; };
void f_cpA901(union  A901 *x, const union  A901 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA901(const union  A901 *x, const union  A901 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA901() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A901), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A901, m0), 1);
		dcStructField(at, 'i', offsetof(union  A901, m1), 1);
		dcStructField(at, 'd', offsetof(union  A901, m2), 1);
		dcStructField(at, 'f', offsetof(union  A901, m3), 1);
		dcStructField(at, 'j', offsetof(union  A901, m4), 1);
		dcStructField(at, 'd', offsetof(union  A901, m5), 1);
		dcStructField(at, 'j', offsetof(union  A901, m6), 1);
		dcStructField(at, 'p', offsetof(union  A901, m7), 1);
		dcStructField(at, 'c', offsetof(union  A901, m8), 1);
		dcStructField(at, 'i', offsetof(union  A901, m9), 1);
		dcStructField(at, 's', offsetof(union  A901, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jfdpsjsdpcjs} */
struct A902 { j m0; f m1; d m2; p m3; s m4; j m5; s m6; d m7; p m8; c m9; j m10; s m11; };
void f_cpA902(struct A902 *x, const struct A902 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA902(const struct A902 *x, const struct A902 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA902() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A902), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A902, m0), 1);
		dcStructField(at, 'f', offsetof(struct A902, m1), 1);
		dcStructField(at, 'd', offsetof(struct A902, m2), 1);
		dcStructField(at, 'p', offsetof(struct A902, m3), 1);
		dcStructField(at, 's', offsetof(struct A902, m4), 1);
		dcStructField(at, 'j', offsetof(struct A902, m5), 1);
		dcStructField(at, 's', offsetof(struct A902, m6), 1);
		dcStructField(at, 'd', offsetof(struct A902, m7), 1);
		dcStructField(at, 'p', offsetof(struct A902, m8), 1);
		dcStructField(at, 'c', offsetof(struct A902, m9), 1);
		dcStructField(at, 'j', offsetof(struct A902, m10), 1);
		dcStructField(at, 's', offsetof(struct A902, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ffls} */
struct A903 { f m0; f m1; l m2; s m3; };
void f_cpA903(struct A903 *x, const struct A903 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA903(const struct A903 *x, const struct A903 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA903() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A903), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A903, m0), 1);
		dcStructField(at, 'f', offsetof(struct A903, m1), 1);
		dcStructField(at, 'l', offsetof(struct A903, m2), 1);
		dcStructField(at, 's', offsetof(struct A903, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jd> */
union  A904 { j m0; d m1; };
void f_cpA904(union  A904 *x, const union  A904 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA904(const union  A904 *x, const union  A904 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA904() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A904), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A904, m0), 1);
		dcStructField(at, 'd', offsetof(union  A904, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {isdds<s>i<jd>fi} */
struct A905 { i m0; s m1; d m2; d m3; s m4; union  A179 m5; i m6; union  A904 m7; f m8; i m9; };
void f_cpA905(struct A905 *x, const struct A905 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA179(&x->m5, &y->m5); x->m6 = y->m6; f_cpA904(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA905(const struct A905 *x, const struct A905 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA179(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA904(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA905() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A905), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A905, m0), 1);
		dcStructField(at, 's', offsetof(struct A905, m1), 1);
		dcStructField(at, 'd', offsetof(struct A905, m2), 1);
		dcStructField(at, 'd', offsetof(struct A905, m3), 1);
		dcStructField(at, 's', offsetof(struct A905, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A905, m5), 1, f_touchdcstA179());
		dcStructField(at, 'i', offsetof(struct A905, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A905, m7), 1, f_touchdcstA904());
		dcStructField(at, 'f', offsetof(struct A905, m8), 1);
		dcStructField(at, 'i', offsetof(struct A905, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <scps{isdds<s>i<jd>fi}fj> */
union  A906 { s m0; c m1; p m2; s m3; struct A905 m4; f m5; j m6; };
void f_cpA906(union  A906 *x, const union  A906 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA905(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA906(const union  A906 *x, const union  A906 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA905(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA906() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A906), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A906, m0), 1);
		dcStructField(at, 'c', offsetof(union  A906, m1), 1);
		dcStructField(at, 'p', offsetof(union  A906, m2), 1);
		dcStructField(at, 's', offsetof(union  A906, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A906, m4), 1, f_touchdcstA905());
		dcStructField(at, 'f', offsetof(union  A906, m5), 1);
		dcStructField(at, 'j', offsetof(union  A906, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ijllc} */
struct A907 { i m0; j m1; l m2; l m3; c m4; };
void f_cpA907(struct A907 *x, const struct A907 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA907(const struct A907 *x, const struct A907 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA907() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A907), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A907, m0), 1);
		dcStructField(at, 'j', offsetof(struct A907, m1), 1);
		dcStructField(at, 'l', offsetof(struct A907, m2), 1);
		dcStructField(at, 'l', offsetof(struct A907, m3), 1);
		dcStructField(at, 'c', offsetof(struct A907, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dlpcsdldf> */
union  A908 { d m0; l m1; p m2; c m3; s m4; d m5; l m6; d m7; f m8; };
void f_cpA908(union  A908 *x, const union  A908 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA908(const union  A908 *x, const union  A908 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA908() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A908), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A908, m0), 1);
		dcStructField(at, 'l', offsetof(union  A908, m1), 1);
		dcStructField(at, 'p', offsetof(union  A908, m2), 1);
		dcStructField(at, 'c', offsetof(union  A908, m3), 1);
		dcStructField(at, 's', offsetof(union  A908, m4), 1);
		dcStructField(at, 'd', offsetof(union  A908, m5), 1);
		dcStructField(at, 'l', offsetof(union  A908, m6), 1);
		dcStructField(at, 'd', offsetof(union  A908, m7), 1);
		dcStructField(at, 'f', offsetof(union  A908, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p{ijllc}<dlpcsdldf>fsfsicppj} */
struct A909 { p m0; struct A907 m1; union  A908 m2; f m3; s m4; f m5; s m6; i m7; c m8; p m9; p m10; j m11; };
void f_cpA909(struct A909 *x, const struct A909 *y) { x->m0 = y->m0; f_cpA907(&x->m1, &y->m1); f_cpA908(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA909(const struct A909 *x, const struct A909 *y) { return x->m0 == y->m0 && f_cmpA907(&x->m1, &y->m1) && f_cmpA908(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA909() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A909), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A909, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A909, m1), 1, f_touchdcstA907());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A909, m2), 1, f_touchdcstA908());
		dcStructField(at, 'f', offsetof(struct A909, m3), 1);
		dcStructField(at, 's', offsetof(struct A909, m4), 1);
		dcStructField(at, 'f', offsetof(struct A909, m5), 1);
		dcStructField(at, 's', offsetof(struct A909, m6), 1);
		dcStructField(at, 'i', offsetof(struct A909, m7), 1);
		dcStructField(at, 'c', offsetof(struct A909, m8), 1);
		dcStructField(at, 'p', offsetof(struct A909, m9), 1);
		dcStructField(at, 'p', offsetof(struct A909, m10), 1);
		dcStructField(at, 'j', offsetof(struct A909, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djj} */
struct A910 { d m0; j m1; j m2; };
void f_cpA910(struct A910 *x, const struct A910 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA910(const struct A910 *x, const struct A910 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA910() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A910), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A910, m0), 1);
		dcStructField(at, 'j', offsetof(struct A910, m1), 1);
		dcStructField(at, 'j', offsetof(struct A910, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ss{djj}{lf}s> */
union  A911 { s m0; s m1; struct A910 m2; struct A662 m3; s m4; };
void f_cpA911(union  A911 *x, const union  A911 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA910(&x->m2, &y->m2); f_cpA662(&x->m3, &y->m3); x->m4 = y->m4; };
int f_cmpA911(const union  A911 *x, const union  A911 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA910(&x->m2, &y->m2) && f_cmpA662(&x->m3, &y->m3) && x->m4 == y->m4; };
DCstruct* f_touchdcstA911() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A911), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A911, m0), 1);
		dcStructField(at, 's', offsetof(union  A911, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A911, m2), 1, f_touchdcstA910());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A911, m3), 1, f_touchdcstA662());
		dcStructField(at, 's', offsetof(union  A911, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sclpp} */
struct A912 { s m0; c m1; l m2; p m3; p m4; };
void f_cpA912(struct A912 *x, const struct A912 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA912(const struct A912 *x, const struct A912 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA912() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A912), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A912, m0), 1);
		dcStructField(at, 'c', offsetof(struct A912, m1), 1);
		dcStructField(at, 'l', offsetof(struct A912, m2), 1);
		dcStructField(at, 'p', offsetof(struct A912, m3), 1);
		dcStructField(at, 'p', offsetof(struct A912, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pjlflilidfpp} */
struct A913 { p m0; j m1; l m2; f m3; l m4; i m5; l m6; i m7; d m8; f m9; p m10; p m11; };
void f_cpA913(struct A913 *x, const struct A913 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA913(const struct A913 *x, const struct A913 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA913() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A913), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A913, m0), 1);
		dcStructField(at, 'j', offsetof(struct A913, m1), 1);
		dcStructField(at, 'l', offsetof(struct A913, m2), 1);
		dcStructField(at, 'f', offsetof(struct A913, m3), 1);
		dcStructField(at, 'l', offsetof(struct A913, m4), 1);
		dcStructField(at, 'i', offsetof(struct A913, m5), 1);
		dcStructField(at, 'l', offsetof(struct A913, m6), 1);
		dcStructField(at, 'i', offsetof(struct A913, m7), 1);
		dcStructField(at, 'd', offsetof(struct A913, m8), 1);
		dcStructField(at, 'f', offsetof(struct A913, m9), 1);
		dcStructField(at, 'p', offsetof(struct A913, m10), 1);
		dcStructField(at, 'p', offsetof(struct A913, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {icl} */
struct A914 { i m0; c m1; l m2; };
void f_cpA914(struct A914 *x, const struct A914 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA914(const struct A914 *x, const struct A914 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA914() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A914), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A914, m0), 1);
		dcStructField(at, 'c', offsetof(struct A914, m1), 1);
		dcStructField(at, 'l', offsetof(struct A914, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pc{sclpp}{pjlflilidfpp}spjjcjc{icl}> */
union  A915 { p m0; c m1; struct A912 m2; struct A913 m3; s m4; p m5; j m6; j m7; c m8; j m9; c m10; struct A914 m11; };
void f_cpA915(union  A915 *x, const union  A915 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA912(&x->m2, &y->m2); f_cpA913(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA914(&x->m11, &y->m11); };
int f_cmpA915(const union  A915 *x, const union  A915 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA912(&x->m2, &y->m2) && f_cmpA913(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA914(&x->m11, &y->m11); };
DCstruct* f_touchdcstA915() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A915), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A915, m0), 1);
		dcStructField(at, 'c', offsetof(union  A915, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A915, m2), 1, f_touchdcstA912());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A915, m3), 1, f_touchdcstA913());
		dcStructField(at, 's', offsetof(union  A915, m4), 1);
		dcStructField(at, 'p', offsetof(union  A915, m5), 1);
		dcStructField(at, 'j', offsetof(union  A915, m6), 1);
		dcStructField(at, 'j', offsetof(union  A915, m7), 1);
		dcStructField(at, 'c', offsetof(union  A915, m8), 1);
		dcStructField(at, 'j', offsetof(union  A915, m9), 1);
		dcStructField(at, 'c', offsetof(union  A915, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A915, m11), 1, f_touchdcstA914());
		dcCloseStruct(at);
	}
	return at;
};
/* <pi> */
union  A916 { p m0; i m1; };
void f_cpA916(union  A916 *x, const union  A916 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA916(const union  A916 *x, const union  A916 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA916() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A916), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A916, m0), 1);
		dcStructField(at, 'i', offsetof(union  A916, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <isdcccij> */
union  A917 { i m0; s m1; d m2; c m3; c m4; c m5; i m6; j m7; };
void f_cpA917(union  A917 *x, const union  A917 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA917(const union  A917 *x, const union  A917 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA917() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A917), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A917, m0), 1);
		dcStructField(at, 's', offsetof(union  A917, m1), 1);
		dcStructField(at, 'd', offsetof(union  A917, m2), 1);
		dcStructField(at, 'c', offsetof(union  A917, m3), 1);
		dcStructField(at, 'c', offsetof(union  A917, m4), 1);
		dcStructField(at, 'c', offsetof(union  A917, m5), 1);
		dcStructField(at, 'i', offsetof(union  A917, m6), 1);
		dcStructField(at, 'j', offsetof(union  A917, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jpsp<isdcccij>> */
union  A918 { j m0; p m1; s m2; p m3; union  A917 m4; };
void f_cpA918(union  A918 *x, const union  A918 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA917(&x->m4, &y->m4); };
int f_cmpA918(const union  A918 *x, const union  A918 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA917(&x->m4, &y->m4); };
DCstruct* f_touchdcstA918() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A918), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A918, m0), 1);
		dcStructField(at, 'p', offsetof(union  A918, m1), 1);
		dcStructField(at, 's', offsetof(union  A918, m2), 1);
		dcStructField(at, 'p', offsetof(union  A918, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A918, m4), 1, f_touchdcstA917());
		dcCloseStruct(at);
	}
	return at;
};
/* {lpcp[10]p[14]spfdpjc} */
struct A919 { l m0; p m1; c m2; p m3[10]; p m4[14]; s m5; p m6; f m7; d m8; p m9; j m10; c m11; };
void f_cpA919(struct A919 *x, const struct A919 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m4[12] = y->m4[12]; x->m4[13] = y->m4[13]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA919(const struct A919 *x, const struct A919 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m4[12] == y->m4[12] && x->m4[13] == y->m4[13] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA919() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A919), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A919, m0), 1);
		dcStructField(at, 'p', offsetof(struct A919, m1), 1);
		dcStructField(at, 'c', offsetof(struct A919, m2), 1);
		dcStructField(at, 'p', offsetof(struct A919, m3), 10);
		dcStructField(at, 'p', offsetof(struct A919, m4), 14);
		dcStructField(at, 's', offsetof(struct A919, m5), 1);
		dcStructField(at, 'p', offsetof(struct A919, m6), 1);
		dcStructField(at, 'f', offsetof(struct A919, m7), 1);
		dcStructField(at, 'd', offsetof(struct A919, m8), 1);
		dcStructField(at, 'p', offsetof(struct A919, m9), 1);
		dcStructField(at, 'j', offsetof(struct A919, m10), 1);
		dcStructField(at, 'c', offsetof(struct A919, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dpllf> */
union  A920 { d m0; p m1; l m2; l m3; f m4; };
void f_cpA920(union  A920 *x, const union  A920 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA920(const union  A920 *x, const union  A920 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA920() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A920), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A920, m0), 1);
		dcStructField(at, 'p', offsetof(union  A920, m1), 1);
		dcStructField(at, 'l', offsetof(union  A920, m2), 1);
		dcStructField(at, 'l', offsetof(union  A920, m3), 1);
		dcStructField(at, 'f', offsetof(union  A920, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <d{lpcp[10]p[14]spfdpjc}<f><dpllf>> */
union  A921 { d m0; struct A919 m1; union  A438 m2; union  A920 m3; };
void f_cpA921(union  A921 *x, const union  A921 *y) { x->m0 = y->m0; f_cpA919(&x->m1, &y->m1); f_cpA438(&x->m2, &y->m2); f_cpA920(&x->m3, &y->m3); };
int f_cmpA921(const union  A921 *x, const union  A921 *y) { return x->m0 == y->m0 && f_cmpA919(&x->m1, &y->m1) && f_cmpA438(&x->m2, &y->m2) && f_cmpA920(&x->m3, &y->m3); };
DCstruct* f_touchdcstA921() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A921), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A921, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A921, m1), 1, f_touchdcstA919());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A921, m2), 1, f_touchdcstA438());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A921, m3), 1, f_touchdcstA920());
		dcCloseStruct(at);
	}
	return at;
};
/* {fcpfjccdjlsc} */
struct A922 { f m0; c m1; p m2; f m3; j m4; c m5; c m6; d m7; j m8; l m9; s m10; c m11; };
void f_cpA922(struct A922 *x, const struct A922 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA922(const struct A922 *x, const struct A922 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA922() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A922), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A922, m0), 1);
		dcStructField(at, 'c', offsetof(struct A922, m1), 1);
		dcStructField(at, 'p', offsetof(struct A922, m2), 1);
		dcStructField(at, 'f', offsetof(struct A922, m3), 1);
		dcStructField(at, 'j', offsetof(struct A922, m4), 1);
		dcStructField(at, 'c', offsetof(struct A922, m5), 1);
		dcStructField(at, 'c', offsetof(struct A922, m6), 1);
		dcStructField(at, 'd', offsetof(struct A922, m7), 1);
		dcStructField(at, 'j', offsetof(struct A922, m8), 1);
		dcStructField(at, 'l', offsetof(struct A922, m9), 1);
		dcStructField(at, 's', offsetof(struct A922, m10), 1);
		dcStructField(at, 'c', offsetof(struct A922, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sj> */
union  A923 { s m0; j m1; };
void f_cpA923(union  A923 *x, const union  A923 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA923(const union  A923 *x, const union  A923 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA923() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A923), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A923, m0), 1);
		dcStructField(at, 'j', offsetof(union  A923, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{j}> */
union  A924 { struct A117 m0; };
void f_cpA924(union  A924 *x, const union  A924 *y) { f_cpA117(&x->m0, &y->m0); };
int f_cmpA924(const union  A924 *x, const union  A924 *y) { return f_cmpA117(&x->m0, &y->m0); };
DCstruct* f_touchdcstA924() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A924), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A924, m0), 1, f_touchdcstA117());
		dcCloseStruct(at);
	}
	return at;
};
/* {fsidscplfcjc} */
struct A925 { f m0; s m1; i m2; d m3; s m4; c m5; p m6; l m7; f m8; c m9; j m10; c m11; };
void f_cpA925(struct A925 *x, const struct A925 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA925(const struct A925 *x, const struct A925 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA925() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A925), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A925, m0), 1);
		dcStructField(at, 's', offsetof(struct A925, m1), 1);
		dcStructField(at, 'i', offsetof(struct A925, m2), 1);
		dcStructField(at, 'd', offsetof(struct A925, m3), 1);
		dcStructField(at, 's', offsetof(struct A925, m4), 1);
		dcStructField(at, 'c', offsetof(struct A925, m5), 1);
		dcStructField(at, 'p', offsetof(struct A925, m6), 1);
		dcStructField(at, 'l', offsetof(struct A925, m7), 1);
		dcStructField(at, 'f', offsetof(struct A925, m8), 1);
		dcStructField(at, 'c', offsetof(struct A925, m9), 1);
		dcStructField(at, 'j', offsetof(struct A925, m10), 1);
		dcStructField(at, 'c', offsetof(struct A925, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sc> */
union  A926 { s m0; c m1; };
void f_cpA926(union  A926 *x, const union  A926 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA926(const union  A926 *x, const union  A926 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA926() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A926), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A926, m0), 1);
		dcStructField(at, 'c', offsetof(union  A926, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {csdfdfldlff} */
struct A927 { c m0; s m1; d m2; f m3; d m4; f m5; l m6; d m7; l m8; f m9; f m10; };
void f_cpA927(struct A927 *x, const struct A927 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA927(const struct A927 *x, const struct A927 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA927() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A927), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A927, m0), 1);
		dcStructField(at, 's', offsetof(struct A927, m1), 1);
		dcStructField(at, 'd', offsetof(struct A927, m2), 1);
		dcStructField(at, 'f', offsetof(struct A927, m3), 1);
		dcStructField(at, 'd', offsetof(struct A927, m4), 1);
		dcStructField(at, 'f', offsetof(struct A927, m5), 1);
		dcStructField(at, 'l', offsetof(struct A927, m6), 1);
		dcStructField(at, 'd', offsetof(struct A927, m7), 1);
		dcStructField(at, 'l', offsetof(struct A927, m8), 1);
		dcStructField(at, 'f', offsetof(struct A927, m9), 1);
		dcStructField(at, 'f', offsetof(struct A927, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {d{fsidscplfcjc}is<sc>f{csdfdfldlff}lcsl[6]p} */
struct A928 { d m0; struct A925 m1; i m2; s m3; union  A926 m4; f m5; struct A927 m6; l m7; c m8; s m9; l m10[6]; p m11; };
void f_cpA928(struct A928 *x, const struct A928 *y) { x->m0 = y->m0; f_cpA925(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; f_cpA926(&x->m4, &y->m4); x->m5 = y->m5; f_cpA927(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m11 = y->m11; };
int f_cmpA928(const struct A928 *x, const struct A928 *y) { return x->m0 == y->m0 && f_cmpA925(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA926(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA927(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m11 == y->m11; };
DCstruct* f_touchdcstA928() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A928), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A928, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A928, m1), 1, f_touchdcstA925());
		dcStructField(at, 'i', offsetof(struct A928, m2), 1);
		dcStructField(at, 's', offsetof(struct A928, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A928, m4), 1, f_touchdcstA926());
		dcStructField(at, 'f', offsetof(struct A928, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A928, m6), 1, f_touchdcstA927());
		dcStructField(at, 'l', offsetof(struct A928, m7), 1);
		dcStructField(at, 'c', offsetof(struct A928, m8), 1);
		dcStructField(at, 's', offsetof(struct A928, m9), 1);
		dcStructField(at, 'l', offsetof(struct A928, m10), 6);
		dcStructField(at, 'p', offsetof(struct A928, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cclpip> */
union  A929 { c m0; c m1; l m2; p m3; i m4; p m5; };
void f_cpA929(union  A929 *x, const union  A929 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA929(const union  A929 *x, const union  A929 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA929() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A929), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A929, m0), 1);
		dcStructField(at, 'c', offsetof(union  A929, m1), 1);
		dcStructField(at, 'l', offsetof(union  A929, m2), 1);
		dcStructField(at, 'p', offsetof(union  A929, m3), 1);
		dcStructField(at, 'i', offsetof(union  A929, m4), 1);
		dcStructField(at, 'p', offsetof(union  A929, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <psjccidfsdil> */
union  A930 { p m0; s m1; j m2; c m3; c m4; i m5; d m6; f m7; s m8; d m9; i m10; l m11; };
void f_cpA930(union  A930 *x, const union  A930 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA930(const union  A930 *x, const union  A930 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA930() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A930), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A930, m0), 1);
		dcStructField(at, 's', offsetof(union  A930, m1), 1);
		dcStructField(at, 'j', offsetof(union  A930, m2), 1);
		dcStructField(at, 'c', offsetof(union  A930, m3), 1);
		dcStructField(at, 'c', offsetof(union  A930, m4), 1);
		dcStructField(at, 'i', offsetof(union  A930, m5), 1);
		dcStructField(at, 'd', offsetof(union  A930, m6), 1);
		dcStructField(at, 'f', offsetof(union  A930, m7), 1);
		dcStructField(at, 's', offsetof(union  A930, m8), 1);
		dcStructField(at, 'd', offsetof(union  A930, m9), 1);
		dcStructField(at, 'i', offsetof(union  A930, m10), 1);
		dcStructField(at, 'l', offsetof(union  A930, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <l[1]sddlf> */
union  A931 { l m0[1]; s m1; d m2; d m3; l m4; f m5; };
void f_cpA931(union  A931 *x, const union  A931 *y) { x->m0[0] = y->m0[0]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA931(const union  A931 *x, const union  A931 *y) { return x->m0[0] == y->m0[0] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA931() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A931), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A931, m0), 1);
		dcStructField(at, 's', offsetof(union  A931, m1), 1);
		dcStructField(at, 'd', offsetof(union  A931, m2), 1);
		dcStructField(at, 'd', offsetof(union  A931, m3), 1);
		dcStructField(at, 'l', offsetof(union  A931, m4), 1);
		dcStructField(at, 'f', offsetof(union  A931, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pc<cclpip><psjccidfsdil>iidlpp<l[1]sddlf>j> */
union  A932 { p m0; c m1; union  A929 m2; union  A930 m3; i m4; i m5; d m6; l m7; p m8; p m9; union  A931 m10; j m11; };
void f_cpA932(union  A932 *x, const union  A932 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA929(&x->m2, &y->m2); f_cpA930(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA931(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA932(const union  A932 *x, const union  A932 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA929(&x->m2, &y->m2) && f_cmpA930(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA931(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA932() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A932), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A932, m0), 1);
		dcStructField(at, 'c', offsetof(union  A932, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A932, m2), 1, f_touchdcstA929());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A932, m3), 1, f_touchdcstA930());
		dcStructField(at, 'i', offsetof(union  A932, m4), 1);
		dcStructField(at, 'i', offsetof(union  A932, m5), 1);
		dcStructField(at, 'd', offsetof(union  A932, m6), 1);
		dcStructField(at, 'l', offsetof(union  A932, m7), 1);
		dcStructField(at, 'p', offsetof(union  A932, m8), 1);
		dcStructField(at, 'p', offsetof(union  A932, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A932, m10), 1, f_touchdcstA931());
		dcStructField(at, 'j', offsetof(union  A932, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ciddclp} */
struct A933 { c m0; i m1; d m2; d m3; c m4; l m5; p m6; };
void f_cpA933(struct A933 *x, const struct A933 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA933(const struct A933 *x, const struct A933 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA933() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A933), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A933, m0), 1);
		dcStructField(at, 'i', offsetof(struct A933, m1), 1);
		dcStructField(at, 'd', offsetof(struct A933, m2), 1);
		dcStructField(at, 'd', offsetof(struct A933, m3), 1);
		dcStructField(at, 'c', offsetof(struct A933, m4), 1);
		dcStructField(at, 'l', offsetof(struct A933, m5), 1);
		dcStructField(at, 'p', offsetof(struct A933, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{ciddclp}} */
struct A934 { struct A933 m0; };
void f_cpA934(struct A934 *x, const struct A934 *y) { f_cpA933(&x->m0, &y->m0); };
int f_cmpA934(const struct A934 *x, const struct A934 *y) { return f_cmpA933(&x->m0, &y->m0); };
DCstruct* f_touchdcstA934() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A934), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A934, m0), 1, f_touchdcstA933());
		dcCloseStruct(at);
	}
	return at;
};
/* {l<pc<cclpip><psjccidfsdil>iidlpp<l[1]sddlf>j>d{{ciddclp}}ic} */
struct A935 { l m0; union  A932 m1; d m2; struct A934 m3; i m4; c m5; };
void f_cpA935(struct A935 *x, const struct A935 *y) { x->m0 = y->m0; f_cpA932(&x->m1, &y->m1); x->m2 = y->m2; f_cpA934(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA935(const struct A935 *x, const struct A935 *y) { return x->m0 == y->m0 && f_cmpA932(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA934(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA935() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A935), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A935, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A935, m1), 1, f_touchdcstA932());
		dcStructField(at, 'd', offsetof(struct A935, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A935, m3), 1, f_touchdcstA934());
		dcStructField(at, 'i', offsetof(struct A935, m4), 1);
		dcStructField(at, 'c', offsetof(struct A935, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pfjljlpdf[14]ppj> */
union  A936 { p m0; f m1; j m2; l m3; j m4; l m5; p m6; d m7; f m8[14]; p m9; p m10; j m11; };
void f_cpA936(union  A936 *x, const union  A936 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m8[8] = y->m8[8]; x->m8[9] = y->m8[9]; x->m8[10] = y->m8[10]; x->m8[11] = y->m8[11]; x->m8[12] = y->m8[12]; x->m8[13] = y->m8[13]; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA936(const union  A936 *x, const union  A936 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m8[8] == y->m8[8] && x->m8[9] == y->m8[9] && x->m8[10] == y->m8[10] && x->m8[11] == y->m8[11] && x->m8[12] == y->m8[12] && x->m8[13] == y->m8[13] && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA936() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A936), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A936, m0), 1);
		dcStructField(at, 'f', offsetof(union  A936, m1), 1);
		dcStructField(at, 'j', offsetof(union  A936, m2), 1);
		dcStructField(at, 'l', offsetof(union  A936, m3), 1);
		dcStructField(at, 'j', offsetof(union  A936, m4), 1);
		dcStructField(at, 'l', offsetof(union  A936, m5), 1);
		dcStructField(at, 'p', offsetof(union  A936, m6), 1);
		dcStructField(at, 'd', offsetof(union  A936, m7), 1);
		dcStructField(at, 'f', offsetof(union  A936, m8), 14);
		dcStructField(at, 'p', offsetof(union  A936, m9), 1);
		dcStructField(at, 'p', offsetof(union  A936, m10), 1);
		dcStructField(at, 'j', offsetof(union  A936, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fjdflj} */
struct A937 { f m0; j m1; d m2; f m3; l m4; j m5; };
void f_cpA937(struct A937 *x, const struct A937 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA937(const struct A937 *x, const struct A937 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA937() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A937), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A937, m0), 1);
		dcStructField(at, 'j', offsetof(struct A937, m1), 1);
		dcStructField(at, 'd', offsetof(struct A937, m2), 1);
		dcStructField(at, 'f', offsetof(struct A937, m3), 1);
		dcStructField(at, 'l', offsetof(struct A937, m4), 1);
		dcStructField(at, 'j', offsetof(struct A937, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cfcj[2]<pi>js{fjdflj}[9]ipcj} */
struct A938 { c m0; f m1; c m2; j m3[2]; union  A916 m4; j m5; s m6; struct A937 m7[9]; i m8; p m9; c m10; j m11; };
void f_cpA938(struct A938 *x, const struct A938 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; f_cpA916(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA937(&x->m7[0], &y->m7[0]); f_cpA937(&x->m7[1], &y->m7[1]); f_cpA937(&x->m7[2], &y->m7[2]); f_cpA937(&x->m7[3], &y->m7[3]); f_cpA937(&x->m7[4], &y->m7[4]); f_cpA937(&x->m7[5], &y->m7[5]); f_cpA937(&x->m7[6], &y->m7[6]); f_cpA937(&x->m7[7], &y->m7[7]); f_cpA937(&x->m7[8], &y->m7[8]); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA938(const struct A938 *x, const struct A938 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && f_cmpA916(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA937(&x->m7[0], &y->m7[0]) && f_cmpA937(&x->m7[1], &y->m7[1]) && f_cmpA937(&x->m7[2], &y->m7[2]) && f_cmpA937(&x->m7[3], &y->m7[3]) && f_cmpA937(&x->m7[4], &y->m7[4]) && f_cmpA937(&x->m7[5], &y->m7[5]) && f_cmpA937(&x->m7[6], &y->m7[6]) && f_cmpA937(&x->m7[7], &y->m7[7]) && f_cmpA937(&x->m7[8], &y->m7[8]) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA938() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A938), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A938, m0), 1);
		dcStructField(at, 'f', offsetof(struct A938, m1), 1);
		dcStructField(at, 'c', offsetof(struct A938, m2), 1);
		dcStructField(at, 'j', offsetof(struct A938, m3), 2);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A938, m4), 1, f_touchdcstA916());
		dcStructField(at, 'j', offsetof(struct A938, m5), 1);
		dcStructField(at, 's', offsetof(struct A938, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A938, m7), 9, f_touchdcstA937());
		dcStructField(at, 'i', offsetof(struct A938, m8), 1);
		dcStructField(at, 'p', offsetof(struct A938, m9), 1);
		dcStructField(at, 'c', offsetof(struct A938, m10), 1);
		dcStructField(at, 'j', offsetof(struct A938, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sclil> */
union  A939 { s m0; c m1; l m2; i m3; l m4; };
void f_cpA939(union  A939 *x, const union  A939 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA939(const union  A939 *x, const union  A939 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA939() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A939), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A939, m0), 1);
		dcStructField(at, 'c', offsetof(union  A939, m1), 1);
		dcStructField(at, 'l', offsetof(union  A939, m2), 1);
		dcStructField(at, 'i', offsetof(union  A939, m3), 1);
		dcStructField(at, 'l', offsetof(union  A939, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sdflpij[10]lddjd} */
struct A940 { s m0; d m1; f m2; l m3; p m4; i m5; j m6[10]; l m7; d m8; d m9; j m10; d m11; };
void f_cpA940(struct A940 *x, const struct A940 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA940(const struct A940 *x, const struct A940 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA940() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A940), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A940, m0), 1);
		dcStructField(at, 'd', offsetof(struct A940, m1), 1);
		dcStructField(at, 'f', offsetof(struct A940, m2), 1);
		dcStructField(at, 'l', offsetof(struct A940, m3), 1);
		dcStructField(at, 'p', offsetof(struct A940, m4), 1);
		dcStructField(at, 'i', offsetof(struct A940, m5), 1);
		dcStructField(at, 'j', offsetof(struct A940, m6), 10);
		dcStructField(at, 'l', offsetof(struct A940, m7), 1);
		dcStructField(at, 'd', offsetof(struct A940, m8), 1);
		dcStructField(at, 'd', offsetof(struct A940, m9), 1);
		dcStructField(at, 'j', offsetof(struct A940, m10), 1);
		dcStructField(at, 'd', offsetof(struct A940, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cdjfpcdl} */
struct A941 { c m0; d m1; j m2; f m3; p m4; c m5; d m6; l m7; };
void f_cpA941(struct A941 *x, const struct A941 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA941(const struct A941 *x, const struct A941 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA941() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A941), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A941, m0), 1);
		dcStructField(at, 'd', offsetof(struct A941, m1), 1);
		dcStructField(at, 'j', offsetof(struct A941, m2), 1);
		dcStructField(at, 'f', offsetof(struct A941, m3), 1);
		dcStructField(at, 'p', offsetof(struct A941, m4), 1);
		dcStructField(at, 'c', offsetof(struct A941, m5), 1);
		dcStructField(at, 'd', offsetof(struct A941, m6), 1);
		dcStructField(at, 'l', offsetof(struct A941, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cj} */
struct A942 { c m0; j m1; };
void f_cpA942(struct A942 *x, const struct A942 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA942(const struct A942 *x, const struct A942 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA942() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A942), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A942, m0), 1);
		dcStructField(at, 'j', offsetof(struct A942, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{sdflpij[10]lddjd}d{cdjfpcdl}{cj}l} */
struct A943 { struct A940 m0; d m1; struct A941 m2; struct A942 m3; l m4; };
void f_cpA943(struct A943 *x, const struct A943 *y) { f_cpA940(&x->m0, &y->m0); x->m1 = y->m1; f_cpA941(&x->m2, &y->m2); f_cpA942(&x->m3, &y->m3); x->m4 = y->m4; };
int f_cmpA943(const struct A943 *x, const struct A943 *y) { return f_cmpA940(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA941(&x->m2, &y->m2) && f_cmpA942(&x->m3, &y->m3) && x->m4 == y->m4; };
DCstruct* f_touchdcstA943() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A943), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A943, m0), 1, f_touchdcstA940());
		dcStructField(at, 'd', offsetof(struct A943, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A943, m2), 1, f_touchdcstA941());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A943, m3), 1, f_touchdcstA942());
		dcStructField(at, 'l', offsetof(struct A943, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dds> */
union  A944 { d m0; d m1; s m2; };
void f_cpA944(union  A944 *x, const union  A944 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA944(const union  A944 *x, const union  A944 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA944() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A944), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A944, m0), 1);
		dcStructField(at, 'd', offsetof(union  A944, m1), 1);
		dcStructField(at, 's', offsetof(union  A944, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fipjjil} */
struct A945 { f m0; i m1; p m2; j m3; j m4; i m5; l m6; };
void f_cpA945(struct A945 *x, const struct A945 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA945(const struct A945 *x, const struct A945 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA945() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A945), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A945, m0), 1);
		dcStructField(at, 'i', offsetof(struct A945, m1), 1);
		dcStructField(at, 'p', offsetof(struct A945, m2), 1);
		dcStructField(at, 'j', offsetof(struct A945, m3), 1);
		dcStructField(at, 'j', offsetof(struct A945, m4), 1);
		dcStructField(at, 'i', offsetof(struct A945, m5), 1);
		dcStructField(at, 'l', offsetof(struct A945, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <plldd<dds>ilpd{fipjjil}> */
union  A946 { p m0; l m1; l m2; d m3; d m4; union  A944 m5; i m6; l m7; p m8; d m9; struct A945 m10; };
void f_cpA946(union  A946 *x, const union  A946 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA944(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA945(&x->m10, &y->m10); };
int f_cmpA946(const union  A946 *x, const union  A946 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA944(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA945(&x->m10, &y->m10); };
DCstruct* f_touchdcstA946() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A946), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A946, m0), 1);
		dcStructField(at, 'l', offsetof(union  A946, m1), 1);
		dcStructField(at, 'l', offsetof(union  A946, m2), 1);
		dcStructField(at, 'd', offsetof(union  A946, m3), 1);
		dcStructField(at, 'd', offsetof(union  A946, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A946, m5), 1, f_touchdcstA944());
		dcStructField(at, 'i', offsetof(union  A946, m6), 1);
		dcStructField(at, 'l', offsetof(union  A946, m7), 1);
		dcStructField(at, 'p', offsetof(union  A946, m8), 1);
		dcStructField(at, 'd', offsetof(union  A946, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A946, m10), 1, f_touchdcstA945());
		dcCloseStruct(at);
	}
	return at;
};
/* <<plldd<dds>ilpd{fipjjil}>> */
union  A947 { union  A946 m0; };
void f_cpA947(union  A947 *x, const union  A947 *y) { f_cpA946(&x->m0, &y->m0); };
int f_cmpA947(const union  A947 *x, const union  A947 *y) { return f_cmpA946(&x->m0, &y->m0); };
DCstruct* f_touchdcstA947() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A947), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A947, m0), 1, f_touchdcstA946());
		dcCloseStruct(at);
	}
	return at;
};
/* <scijffislp> */
union  A948 { s m0; c m1; i m2; j m3; f m4; f m5; i m6; s m7; l m8; p m9; };
void f_cpA948(union  A948 *x, const union  A948 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA948(const union  A948 *x, const union  A948 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA948() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A948), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A948, m0), 1);
		dcStructField(at, 'c', offsetof(union  A948, m1), 1);
		dcStructField(at, 'i', offsetof(union  A948, m2), 1);
		dcStructField(at, 'j', offsetof(union  A948, m3), 1);
		dcStructField(at, 'f', offsetof(union  A948, m4), 1);
		dcStructField(at, 'f', offsetof(union  A948, m5), 1);
		dcStructField(at, 'i', offsetof(union  A948, m6), 1);
		dcStructField(at, 's', offsetof(union  A948, m7), 1);
		dcStructField(at, 'l', offsetof(union  A948, m8), 1);
		dcStructField(at, 'p', offsetof(union  A948, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sfpscc[5]d> */
union  A949 { s m0; f m1; p m2; s m3; c m4; c m5[5]; d m6; };
void f_cpA949(union  A949 *x, const union  A949 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m6 = y->m6; };
int f_cmpA949(const union  A949 *x, const union  A949 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m6 == y->m6; };
DCstruct* f_touchdcstA949() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A949), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A949, m0), 1);
		dcStructField(at, 'f', offsetof(union  A949, m1), 1);
		dcStructField(at, 'p', offsetof(union  A949, m2), 1);
		dcStructField(at, 's', offsetof(union  A949, m3), 1);
		dcStructField(at, 'c', offsetof(union  A949, m4), 1);
		dcStructField(at, 'c', offsetof(union  A949, m5), 5);
		dcStructField(at, 'd', offsetof(union  A949, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pjfpcffjlddf> */
union  A950 { p m0; j m1; f m2; p m3; c m4; f m5; f m6; j m7; l m8; d m9; d m10; f m11; };
void f_cpA950(union  A950 *x, const union  A950 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA950(const union  A950 *x, const union  A950 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA950() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A950), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A950, m0), 1);
		dcStructField(at, 'j', offsetof(union  A950, m1), 1);
		dcStructField(at, 'f', offsetof(union  A950, m2), 1);
		dcStructField(at, 'p', offsetof(union  A950, m3), 1);
		dcStructField(at, 'c', offsetof(union  A950, m4), 1);
		dcStructField(at, 'f', offsetof(union  A950, m5), 1);
		dcStructField(at, 'f', offsetof(union  A950, m6), 1);
		dcStructField(at, 'j', offsetof(union  A950, m7), 1);
		dcStructField(at, 'l', offsetof(union  A950, m8), 1);
		dcStructField(at, 'd', offsetof(union  A950, m9), 1);
		dcStructField(at, 'd', offsetof(union  A950, m10), 1);
		dcStructField(at, 'f', offsetof(union  A950, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<sfpscc[5]d>d<pjfpcffjlddf>} */
struct A951 { union  A949 m0; d m1; union  A950 m2; };
void f_cpA951(struct A951 *x, const struct A951 *y) { f_cpA949(&x->m0, &y->m0); x->m1 = y->m1; f_cpA950(&x->m2, &y->m2); };
int f_cmpA951(const struct A951 *x, const struct A951 *y) { return f_cmpA949(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA950(&x->m2, &y->m2); };
DCstruct* f_touchdcstA951() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A951), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A951, m0), 1, f_touchdcstA949());
		dcStructField(at, 'd', offsetof(struct A951, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A951, m2), 1, f_touchdcstA950());
		dcCloseStruct(at);
	}
	return at;
};
/* {f[11]si} */
struct A952 { f m0[11]; s m1; i m2; };
void f_cpA952(struct A952 *x, const struct A952 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA952(const struct A952 *x, const struct A952 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA952() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A952), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A952, m0), 11);
		dcStructField(at, 's', offsetof(struct A952, m1), 1);
		dcStructField(at, 'i', offsetof(struct A952, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cdjp} */
struct A953 { c m0; d m1; j m2; p m3; };
void f_cpA953(struct A953 *x, const struct A953 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA953(const struct A953 *x, const struct A953 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA953() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A953), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A953, m0), 1);
		dcStructField(at, 'd', offsetof(struct A953, m1), 1);
		dcStructField(at, 'j', offsetof(struct A953, m2), 1);
		dcStructField(at, 'p', offsetof(struct A953, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sli> */
union  A954 { s m0; l m1; i m2; };
void f_cpA954(union  A954 *x, const union  A954 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA954(const union  A954 *x, const union  A954 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA954() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A954), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A954, m0), 1);
		dcStructField(at, 'l', offsetof(union  A954, m1), 1);
		dcStructField(at, 'i', offsetof(union  A954, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ljfflf} */
struct A955 { l m0; j m1; f m2; f m3; l m4; f m5; };
void f_cpA955(struct A955 *x, const struct A955 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA955(const struct A955 *x, const struct A955 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA955() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A955), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A955, m0), 1);
		dcStructField(at, 'j', offsetof(struct A955, m1), 1);
		dcStructField(at, 'f', offsetof(struct A955, m2), 1);
		dcStructField(at, 'f', offsetof(struct A955, m3), 1);
		dcStructField(at, 'l', offsetof(struct A955, m4), 1);
		dcStructField(at, 'f', offsetof(struct A955, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jdjcld> */
union  A956 { j m0; d m1; j m2; c m3; l m4; d m5; };
void f_cpA956(union  A956 *x, const union  A956 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA956(const union  A956 *x, const union  A956 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA956() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A956), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A956, m0), 1);
		dcStructField(at, 'd', offsetof(union  A956, m1), 1);
		dcStructField(at, 'j', offsetof(union  A956, m2), 1);
		dcStructField(at, 'c', offsetof(union  A956, m3), 1);
		dcStructField(at, 'l', offsetof(union  A956, m4), 1);
		dcStructField(at, 'd', offsetof(union  A956, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ipd> */
union  A957 { i m0; p m1; d m2; };
void f_cpA957(union  A957 *x, const union  A957 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA957(const union  A957 *x, const union  A957 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA957() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A957), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A957, m0), 1);
		dcStructField(at, 'p', offsetof(union  A957, m1), 1);
		dcStructField(at, 'd', offsetof(union  A957, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fjsji} */
struct A958 { f m0; j m1; s m2; j m3; i m4; };
void f_cpA958(struct A958 *x, const struct A958 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA958(const struct A958 *x, const struct A958 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA958() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A958), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A958, m0), 1);
		dcStructField(at, 'j', offsetof(struct A958, m1), 1);
		dcStructField(at, 's', offsetof(struct A958, m2), 1);
		dcStructField(at, 'j', offsetof(struct A958, m3), 1);
		dcStructField(at, 'i', offsetof(struct A958, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pclcdjf[3]jcsps> */
union  A959 { p m0; c m1; l m2; c m3; d m4; j m5; f m6[3]; j m7; c m8; s m9; p m10; s m11; };
void f_cpA959(union  A959 *x, const union  A959 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA959(const union  A959 *x, const union  A959 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA959() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A959), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A959, m0), 1);
		dcStructField(at, 'c', offsetof(union  A959, m1), 1);
		dcStructField(at, 'l', offsetof(union  A959, m2), 1);
		dcStructField(at, 'c', offsetof(union  A959, m3), 1);
		dcStructField(at, 'd', offsetof(union  A959, m4), 1);
		dcStructField(at, 'j', offsetof(union  A959, m5), 1);
		dcStructField(at, 'f', offsetof(union  A959, m6), 3);
		dcStructField(at, 'j', offsetof(union  A959, m7), 1);
		dcStructField(at, 'c', offsetof(union  A959, m8), 1);
		dcStructField(at, 's', offsetof(union  A959, m9), 1);
		dcStructField(at, 'p', offsetof(union  A959, m10), 1);
		dcStructField(at, 's', offsetof(union  A959, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{ljfflf}cd<jdjcld>idcc<ipd>{fjsji}<pclcdjf[3]jcsps>> */
union  A960 { struct A955 m0; c m1; d m2; union  A956 m3; i m4; d m5; c m6; c m7; union  A957 m8; struct A958 m9; union  A959 m10; };
void f_cpA960(union  A960 *x, const union  A960 *y) { f_cpA955(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA956(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA957(&x->m8, &y->m8); f_cpA958(&x->m9, &y->m9); f_cpA959(&x->m10, &y->m10); };
int f_cmpA960(const union  A960 *x, const union  A960 *y) { return f_cmpA955(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA956(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA957(&x->m8, &y->m8) && f_cmpA958(&x->m9, &y->m9) && f_cmpA959(&x->m10, &y->m10); };
DCstruct* f_touchdcstA960() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A960), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A960, m0), 1, f_touchdcstA955());
		dcStructField(at, 'c', offsetof(union  A960, m1), 1);
		dcStructField(at, 'd', offsetof(union  A960, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A960, m3), 1, f_touchdcstA956());
		dcStructField(at, 'i', offsetof(union  A960, m4), 1);
		dcStructField(at, 'd', offsetof(union  A960, m5), 1);
		dcStructField(at, 'c', offsetof(union  A960, m6), 1);
		dcStructField(at, 'c', offsetof(union  A960, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A960, m8), 1, f_touchdcstA957());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A960, m9), 1, f_touchdcstA958());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A960, m10), 1, f_touchdcstA959());
		dcCloseStruct(at);
	}
	return at;
};
/* <<sli>di[16]<{ljfflf}cd<jdjcld>idcc<ipd>{fjsji}<pclcdjf[3]jcsps>>fpl> */
union  A961 { union  A954 m0; d m1; i m2[16]; union  A960 m3; f m4; p m5; l m6; };
void f_cpA961(union  A961 *x, const union  A961 *y) { f_cpA954(&x->m0, &y->m0); x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m2[13] = y->m2[13]; x->m2[14] = y->m2[14]; x->m2[15] = y->m2[15]; f_cpA960(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA961(const union  A961 *x, const union  A961 *y) { return f_cmpA954(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m2[13] == y->m2[13] && x->m2[14] == y->m2[14] && x->m2[15] == y->m2[15] && f_cmpA960(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA961() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A961), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A961, m0), 1, f_touchdcstA954());
		dcStructField(at, 'd', offsetof(union  A961, m1), 1);
		dcStructField(at, 'i', offsetof(union  A961, m2), 16);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A961, m3), 1, f_touchdcstA960());
		dcStructField(at, 'f', offsetof(union  A961, m4), 1);
		dcStructField(at, 'p', offsetof(union  A961, m5), 1);
		dcStructField(at, 'l', offsetof(union  A961, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cipci} */
struct A962 { c m0; i m1; p m2; c m3; i m4; };
void f_cpA962(struct A962 *x, const struct A962 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA962(const struct A962 *x, const struct A962 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA962() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A962), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A962, m0), 1);
		dcStructField(at, 'i', offsetof(struct A962, m1), 1);
		dcStructField(at, 'p', offsetof(struct A962, m2), 1);
		dcStructField(at, 'c', offsetof(struct A962, m3), 1);
		dcStructField(at, 'i', offsetof(struct A962, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ilfj} */
struct A963 { i m0; l m1; f m2; j m3; };
void f_cpA963(struct A963 *x, const struct A963 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA963(const struct A963 *x, const struct A963 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA963() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A963), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A963, m0), 1);
		dcStructField(at, 'l', offsetof(struct A963, m1), 1);
		dcStructField(at, 'f', offsetof(struct A963, m2), 1);
		dcStructField(at, 'j', offsetof(struct A963, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sd} */
struct A964 { s m0; d m1; };
void f_cpA964(struct A964 *x, const struct A964 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA964(const struct A964 *x, const struct A964 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA964() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A964), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A964, m0), 1);
		dcStructField(at, 'd', offsetof(struct A964, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{sd}ip> */
union  A965 { struct A964 m0; i m1; p m2; };
void f_cpA965(union  A965 *x, const union  A965 *y) { f_cpA964(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA965(const union  A965 *x, const union  A965 *y) { return f_cmpA964(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA965() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A965), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A965, m0), 1, f_touchdcstA964());
		dcStructField(at, 'i', offsetof(union  A965, m1), 1);
		dcStructField(at, 'p', offsetof(union  A965, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pdiccjllscpf> */
union  A966 { p m0; d m1; i m2; c m3; c m4; j m5; l m6; l m7; s m8; c m9; p m10; f m11; };
void f_cpA966(union  A966 *x, const union  A966 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA966(const union  A966 *x, const union  A966 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA966() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A966), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A966, m0), 1);
		dcStructField(at, 'd', offsetof(union  A966, m1), 1);
		dcStructField(at, 'i', offsetof(union  A966, m2), 1);
		dcStructField(at, 'c', offsetof(union  A966, m3), 1);
		dcStructField(at, 'c', offsetof(union  A966, m4), 1);
		dcStructField(at, 'j', offsetof(union  A966, m5), 1);
		dcStructField(at, 'l', offsetof(union  A966, m6), 1);
		dcStructField(at, 'l', offsetof(union  A966, m7), 1);
		dcStructField(at, 's', offsetof(union  A966, m8), 1);
		dcStructField(at, 'c', offsetof(union  A966, m9), 1);
		dcStructField(at, 'p', offsetof(union  A966, m10), 1);
		dcStructField(at, 'f', offsetof(union  A966, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fpcljcfilf[11]is} */
struct A967 { f m0; p m1; c m2; l m3; j m4; c m5; f m6; i m7; l m8; f m9[11]; i m10; s m11; };
void f_cpA967(struct A967 *x, const struct A967 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m9[8] = y->m9[8]; x->m9[9] = y->m9[9]; x->m9[10] = y->m9[10]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA967(const struct A967 *x, const struct A967 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m9[8] == y->m9[8] && x->m9[9] == y->m9[9] && x->m9[10] == y->m9[10] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA967() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A967), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A967, m0), 1);
		dcStructField(at, 'p', offsetof(struct A967, m1), 1);
		dcStructField(at, 'c', offsetof(struct A967, m2), 1);
		dcStructField(at, 'l', offsetof(struct A967, m3), 1);
		dcStructField(at, 'j', offsetof(struct A967, m4), 1);
		dcStructField(at, 'c', offsetof(struct A967, m5), 1);
		dcStructField(at, 'f', offsetof(struct A967, m6), 1);
		dcStructField(at, 'i', offsetof(struct A967, m7), 1);
		dcStructField(at, 'l', offsetof(struct A967, m8), 1);
		dcStructField(at, 'f', offsetof(struct A967, m9), 11);
		dcStructField(at, 'i', offsetof(struct A967, m10), 1);
		dcStructField(at, 's', offsetof(struct A967, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <l{fpcljcfilf[11]is}> */
union  A968 { l m0; struct A967 m1; };
void f_cpA968(union  A968 *x, const union  A968 *y) { x->m0 = y->m0; f_cpA967(&x->m1, &y->m1); };
int f_cmpA968(const union  A968 *x, const union  A968 *y) { return x->m0 == y->m0 && f_cmpA967(&x->m1, &y->m1); };
DCstruct* f_touchdcstA968() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A968), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A968, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A968, m1), 1, f_touchdcstA967());
		dcCloseStruct(at);
	}
	return at;
};
/* <csslppjjd> */
union  A969 { c m0; s m1; s m2; l m3; p m4; p m5; j m6; j m7; d m8; };
void f_cpA969(union  A969 *x, const union  A969 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA969(const union  A969 *x, const union  A969 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA969() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A969), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A969, m0), 1);
		dcStructField(at, 's', offsetof(union  A969, m1), 1);
		dcStructField(at, 's', offsetof(union  A969, m2), 1);
		dcStructField(at, 'l', offsetof(union  A969, m3), 1);
		dcStructField(at, 'p', offsetof(union  A969, m4), 1);
		dcStructField(at, 'p', offsetof(union  A969, m5), 1);
		dcStructField(at, 'j', offsetof(union  A969, m6), 1);
		dcStructField(at, 'j', offsetof(union  A969, m7), 1);
		dcStructField(at, 'd', offsetof(union  A969, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ci} */
struct A970 { c m0; i m1; };
void f_cpA970(struct A970 *x, const struct A970 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA970(const struct A970 *x, const struct A970 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA970() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A970), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A970, m0), 1);
		dcStructField(at, 'i', offsetof(struct A970, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<csslppjjd>dcliipcscj{ci}} */
struct A971 { union  A969 m0; d m1; c m2; l m3; i m4; i m5; p m6; c m7; s m8; c m9; j m10; struct A970 m11; };
void f_cpA971(struct A971 *x, const struct A971 *y) { f_cpA969(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA970(&x->m11, &y->m11); };
int f_cmpA971(const struct A971 *x, const struct A971 *y) { return f_cmpA969(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA970(&x->m11, &y->m11); };
DCstruct* f_touchdcstA971() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A971), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A971, m0), 1, f_touchdcstA969());
		dcStructField(at, 'd', offsetof(struct A971, m1), 1);
		dcStructField(at, 'c', offsetof(struct A971, m2), 1);
		dcStructField(at, 'l', offsetof(struct A971, m3), 1);
		dcStructField(at, 'i', offsetof(struct A971, m4), 1);
		dcStructField(at, 'i', offsetof(struct A971, m5), 1);
		dcStructField(at, 'p', offsetof(struct A971, m6), 1);
		dcStructField(at, 'c', offsetof(struct A971, m7), 1);
		dcStructField(at, 's', offsetof(struct A971, m8), 1);
		dcStructField(at, 'c', offsetof(struct A971, m9), 1);
		dcStructField(at, 'j', offsetof(struct A971, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A971, m11), 1, f_touchdcstA970());
		dcCloseStruct(at);
	}
	return at;
};
/* {l{<csslppjjd>dcliipcscj{ci}}ipi{d}} */
struct A972 { l m0; struct A971 m1; i m2; p m3; i m4; struct A47 m5; };
void f_cpA972(struct A972 *x, const struct A972 *y) { x->m0 = y->m0; f_cpA971(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA47(&x->m5, &y->m5); };
int f_cmpA972(const struct A972 *x, const struct A972 *y) { return x->m0 == y->m0 && f_cmpA971(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA47(&x->m5, &y->m5); };
DCstruct* f_touchdcstA972() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A972), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A972, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A972, m1), 1, f_touchdcstA971());
		dcStructField(at, 'i', offsetof(struct A972, m2), 1);
		dcStructField(at, 'p', offsetof(struct A972, m3), 1);
		dcStructField(at, 'i', offsetof(struct A972, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A972, m5), 1, f_touchdcstA47());
		dcCloseStruct(at);
	}
	return at;
};
/* {cfsc} */
struct A973 { c m0; f m1; s m2; c m3; };
void f_cpA973(struct A973 *x, const struct A973 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA973(const struct A973 *x, const struct A973 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA973() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A973), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A973, m0), 1);
		dcStructField(at, 'f', offsetof(struct A973, m1), 1);
		dcStructField(at, 's', offsetof(struct A973, m2), 1);
		dcStructField(at, 'c', offsetof(struct A973, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {scpispj} */
struct A974 { s m0; c m1; p m2; i m3; s m4; p m5; j m6; };
void f_cpA974(struct A974 *x, const struct A974 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA974(const struct A974 *x, const struct A974 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA974() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A974), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A974, m0), 1);
		dcStructField(at, 'c', offsetof(struct A974, m1), 1);
		dcStructField(at, 'p', offsetof(struct A974, m2), 1);
		dcStructField(at, 'i', offsetof(struct A974, m3), 1);
		dcStructField(at, 's', offsetof(struct A974, m4), 1);
		dcStructField(at, 'p', offsetof(struct A974, m5), 1);
		dcStructField(at, 'j', offsetof(struct A974, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sipifcj> */
union  A975 { s m0; i m1; p m2; i m3; f m4; c m5; j m6; };
void f_cpA975(union  A975 *x, const union  A975 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA975(const union  A975 *x, const union  A975 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA975() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A975), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A975, m0), 1);
		dcStructField(at, 'i', offsetof(union  A975, m1), 1);
		dcStructField(at, 'p', offsetof(union  A975, m2), 1);
		dcStructField(at, 'i', offsetof(union  A975, m3), 1);
		dcStructField(at, 'f', offsetof(union  A975, m4), 1);
		dcStructField(at, 'c', offsetof(union  A975, m5), 1);
		dcStructField(at, 'j', offsetof(union  A975, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ffdi> */
union  A976 { f m0; f m1; d m2; i m3; };
void f_cpA976(union  A976 *x, const union  A976 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA976(const union  A976 *x, const union  A976 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA976() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A976), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A976, m0), 1);
		dcStructField(at, 'f', offsetof(union  A976, m1), 1);
		dcStructField(at, 'd', offsetof(union  A976, m2), 1);
		dcStructField(at, 'i', offsetof(union  A976, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f<ffdi>j} */
struct A977 { f m0; union  A976 m1; j m2; };
void f_cpA977(struct A977 *x, const struct A977 *y) { x->m0 = y->m0; f_cpA976(&x->m1, &y->m1); x->m2 = y->m2; };
int f_cmpA977(const struct A977 *x, const struct A977 *y) { return x->m0 == y->m0 && f_cmpA976(&x->m1, &y->m1) && x->m2 == y->m2; };
DCstruct* f_touchdcstA977() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A977), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A977, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A977, m1), 1, f_touchdcstA976());
		dcStructField(at, 'j', offsetof(struct A977, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <icl> */
union  A978 { i m0; c m1; l m2; };
void f_cpA978(union  A978 *x, const union  A978 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA978(const union  A978 *x, const union  A978 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA978() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A978), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A978, m0), 1);
		dcStructField(at, 'c', offsetof(union  A978, m1), 1);
		dcStructField(at, 'l', offsetof(union  A978, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ifd<icl>iljli[4]ipl} */
struct A979 { i m0; f m1; d m2; union  A978 m3; i m4; l m5; j m6; l m7; i m8[4]; i m9; p m10; l m11; };
void f_cpA979(struct A979 *x, const struct A979 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA978(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA979(const struct A979 *x, const struct A979 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA978(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA979() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A979), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A979, m0), 1);
		dcStructField(at, 'f', offsetof(struct A979, m1), 1);
		dcStructField(at, 'd', offsetof(struct A979, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A979, m3), 1, f_touchdcstA978());
		dcStructField(at, 'i', offsetof(struct A979, m4), 1);
		dcStructField(at, 'l', offsetof(struct A979, m5), 1);
		dcStructField(at, 'j', offsetof(struct A979, m6), 1);
		dcStructField(at, 'l', offsetof(struct A979, m7), 1);
		dcStructField(at, 'i', offsetof(struct A979, m8), 4);
		dcStructField(at, 'i', offsetof(struct A979, m9), 1);
		dcStructField(at, 'p', offsetof(struct A979, m10), 1);
		dcStructField(at, 'l', offsetof(struct A979, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jiijp> */
union  A980 { j m0; i m1; i m2; j m3; p m4; };
void f_cpA980(union  A980 *x, const union  A980 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA980(const union  A980 *x, const union  A980 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA980() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A980), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A980, m0), 1);
		dcStructField(at, 'i', offsetof(union  A980, m1), 1);
		dcStructField(at, 'i', offsetof(union  A980, m2), 1);
		dcStructField(at, 'j', offsetof(union  A980, m3), 1);
		dcStructField(at, 'p', offsetof(union  A980, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ffj[7]} */
struct A981 { f m0; f m1; j m2[7]; };
void f_cpA981(struct A981 *x, const struct A981 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; };
int f_cmpA981(const struct A981 *x, const struct A981 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6]; };
DCstruct* f_touchdcstA981() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A981), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A981, m0), 1);
		dcStructField(at, 'f', offsetof(struct A981, m1), 1);
		dcStructField(at, 'j', offsetof(struct A981, m2), 7);
		dcCloseStruct(at);
	}
	return at;
};
/* <p[6]p{lp}dis<jiijp>{ffj[7]}jdil> */
union  A982 { p m0[6]; p m1; struct A191 m2; d m3; i m4; s m5; union  A980 m6; struct A981 m7; j m8; d m9; i m10; l m11; };
void f_cpA982(union  A982 *x, const union  A982 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m1 = y->m1; f_cpA191(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA980(&x->m6, &y->m6); f_cpA981(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA982(const union  A982 *x, const union  A982 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m1 == y->m1 && f_cmpA191(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA980(&x->m6, &y->m6) && f_cmpA981(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA982() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A982), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A982, m0), 6);
		dcStructField(at, 'p', offsetof(union  A982, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A982, m2), 1, f_touchdcstA191());
		dcStructField(at, 'd', offsetof(union  A982, m3), 1);
		dcStructField(at, 'i', offsetof(union  A982, m4), 1);
		dcStructField(at, 's', offsetof(union  A982, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A982, m6), 1, f_touchdcstA980());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A982, m7), 1, f_touchdcstA981());
		dcStructField(at, 'j', offsetof(union  A982, m8), 1);
		dcStructField(at, 'd', offsetof(union  A982, m9), 1);
		dcStructField(at, 'i', offsetof(union  A982, m10), 1);
		dcStructField(at, 'l', offsetof(union  A982, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{ifd<icl>iljli[4]ipl}<p[6]p{lp}dis<jiijp>{ffj[7]}jdil>i} */
struct A983 { struct A979 m0; union  A982 m1; i m2; };
void f_cpA983(struct A983 *x, const struct A983 *y) { f_cpA979(&x->m0, &y->m0); f_cpA982(&x->m1, &y->m1); x->m2 = y->m2; };
int f_cmpA983(const struct A983 *x, const struct A983 *y) { return f_cmpA979(&x->m0, &y->m0) && f_cmpA982(&x->m1, &y->m1) && x->m2 == y->m2; };
DCstruct* f_touchdcstA983() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A983), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A983, m0), 1, f_touchdcstA979());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A983, m1), 1, f_touchdcstA982());
		dcStructField(at, 'i', offsetof(struct A983, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fjpflcspsjsp} */
struct A984 { f m0; j m1; p m2; f m3; l m4; c m5; s m6; p m7; s m8; j m9; s m10; p m11; };
void f_cpA984(struct A984 *x, const struct A984 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA984(const struct A984 *x, const struct A984 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA984() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A984), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A984, m0), 1);
		dcStructField(at, 'j', offsetof(struct A984, m1), 1);
		dcStructField(at, 'p', offsetof(struct A984, m2), 1);
		dcStructField(at, 'f', offsetof(struct A984, m3), 1);
		dcStructField(at, 'l', offsetof(struct A984, m4), 1);
		dcStructField(at, 'c', offsetof(struct A984, m5), 1);
		dcStructField(at, 's', offsetof(struct A984, m6), 1);
		dcStructField(at, 'p', offsetof(struct A984, m7), 1);
		dcStructField(at, 's', offsetof(struct A984, m8), 1);
		dcStructField(at, 'j', offsetof(struct A984, m9), 1);
		dcStructField(at, 's', offsetof(struct A984, m10), 1);
		dcStructField(at, 'p', offsetof(struct A984, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p[3]> */
union  A985 { p m0[3]; };
void f_cpA985(union  A985 *x, const union  A985 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; };
int f_cmpA985(const union  A985 *x, const union  A985 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2]; };
DCstruct* f_touchdcstA985() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A985), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A985, m0), 3);
		dcCloseStruct(at);
	}
	return at;
};
/* {psldpjlscpsd} */
struct A986 { p m0; s m1; l m2; d m3; p m4; j m5; l m6; s m7; c m8; p m9; s m10; d m11; };
void f_cpA986(struct A986 *x, const struct A986 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA986(const struct A986 *x, const struct A986 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA986() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A986), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A986, m0), 1);
		dcStructField(at, 's', offsetof(struct A986, m1), 1);
		dcStructField(at, 'l', offsetof(struct A986, m2), 1);
		dcStructField(at, 'd', offsetof(struct A986, m3), 1);
		dcStructField(at, 'p', offsetof(struct A986, m4), 1);
		dcStructField(at, 'j', offsetof(struct A986, m5), 1);
		dcStructField(at, 'l', offsetof(struct A986, m6), 1);
		dcStructField(at, 's', offsetof(struct A986, m7), 1);
		dcStructField(at, 'c', offsetof(struct A986, m8), 1);
		dcStructField(at, 'p', offsetof(struct A986, m9), 1);
		dcStructField(at, 's', offsetof(struct A986, m10), 1);
		dcStructField(at, 'd', offsetof(struct A986, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ispj> */
union  A987 { i m0; s m1; p m2; j m3; };
void f_cpA987(union  A987 *x, const union  A987 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA987(const union  A987 *x, const union  A987 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA987() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A987), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A987, m0), 1);
		dcStructField(at, 's', offsetof(union  A987, m1), 1);
		dcStructField(at, 'p', offsetof(union  A987, m2), 1);
		dcStructField(at, 'j', offsetof(union  A987, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cjdjdpji> */
union  A988 { c m0; j m1; d m2; j m3; d m4; p m5; j m6; i m7; };
void f_cpA988(union  A988 *x, const union  A988 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA988(const union  A988 *x, const union  A988 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA988() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A988), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A988, m0), 1);
		dcStructField(at, 'j', offsetof(union  A988, m1), 1);
		dcStructField(at, 'd', offsetof(union  A988, m2), 1);
		dcStructField(at, 'j', offsetof(union  A988, m3), 1);
		dcStructField(at, 'd', offsetof(union  A988, m4), 1);
		dcStructField(at, 'p', offsetof(union  A988, m5), 1);
		dcStructField(at, 'j', offsetof(union  A988, m6), 1);
		dcStructField(at, 'i', offsetof(union  A988, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <li[4]df> */
union  A989 { l m0; i m1[4]; d m2; f m3; };
void f_cpA989(union  A989 *x, const union  A989 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA989(const union  A989 *x, const union  A989 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA989() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A989), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A989, m0), 1);
		dcStructField(at, 'i', offsetof(union  A989, m1), 4);
		dcStructField(at, 'd', offsetof(union  A989, m2), 1);
		dcStructField(at, 'f', offsetof(union  A989, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<ispj>jjj<cjdjdpji>sdsfpj<li[4]df>} */
struct A990 { union  A987 m0; j m1; j m2; j m3; union  A988 m4; s m5; d m6; s m7; f m8; p m9; j m10; union  A989 m11; };
void f_cpA990(struct A990 *x, const struct A990 *y) { f_cpA987(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA988(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA989(&x->m11, &y->m11); };
int f_cmpA990(const struct A990 *x, const struct A990 *y) { return f_cmpA987(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA988(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA989(&x->m11, &y->m11); };
DCstruct* f_touchdcstA990() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A990), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A990, m0), 1, f_touchdcstA987());
		dcStructField(at, 'j', offsetof(struct A990, m1), 1);
		dcStructField(at, 'j', offsetof(struct A990, m2), 1);
		dcStructField(at, 'j', offsetof(struct A990, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A990, m4), 1, f_touchdcstA988());
		dcStructField(at, 's', offsetof(struct A990, m5), 1);
		dcStructField(at, 'd', offsetof(struct A990, m6), 1);
		dcStructField(at, 's', offsetof(struct A990, m7), 1);
		dcStructField(at, 'f', offsetof(struct A990, m8), 1);
		dcStructField(at, 'p', offsetof(struct A990, m9), 1);
		dcStructField(at, 'j', offsetof(struct A990, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A990, m11), 1, f_touchdcstA989());
		dcCloseStruct(at);
	}
	return at;
};
/* {siccfcscjjlc} */
struct A991 { s m0; i m1; c m2; c m3; f m4; c m5; s m6; c m7; j m8; j m9; l m10; c m11; };
void f_cpA991(struct A991 *x, const struct A991 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA991(const struct A991 *x, const struct A991 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA991() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A991), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A991, m0), 1);
		dcStructField(at, 'i', offsetof(struct A991, m1), 1);
		dcStructField(at, 'c', offsetof(struct A991, m2), 1);
		dcStructField(at, 'c', offsetof(struct A991, m3), 1);
		dcStructField(at, 'f', offsetof(struct A991, m4), 1);
		dcStructField(at, 'c', offsetof(struct A991, m5), 1);
		dcStructField(at, 's', offsetof(struct A991, m6), 1);
		dcStructField(at, 'c', offsetof(struct A991, m7), 1);
		dcStructField(at, 'j', offsetof(struct A991, m8), 1);
		dcStructField(at, 'j', offsetof(struct A991, m9), 1);
		dcStructField(at, 'l', offsetof(struct A991, m10), 1);
		dcStructField(at, 'c', offsetof(struct A991, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lfijpii} */
struct A992 { l m0; f m1; i m2; j m3; p m4; i m5; i m6; };
void f_cpA992(struct A992 *x, const struct A992 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA992(const struct A992 *x, const struct A992 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA992() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A992), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A992, m0), 1);
		dcStructField(at, 'f', offsetof(struct A992, m1), 1);
		dcStructField(at, 'i', offsetof(struct A992, m2), 1);
		dcStructField(at, 'j', offsetof(struct A992, m3), 1);
		dcStructField(at, 'p', offsetof(struct A992, m4), 1);
		dcStructField(at, 'i', offsetof(struct A992, m5), 1);
		dcStructField(at, 'i', offsetof(struct A992, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <spdfp> */
union  A993 { s m0; p m1; d m2; f m3; p m4; };
void f_cpA993(union  A993 *x, const union  A993 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA993(const union  A993 *x, const union  A993 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA993() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A993), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A993, m0), 1);
		dcStructField(at, 'p', offsetof(union  A993, m1), 1);
		dcStructField(at, 'd', offsetof(union  A993, m2), 1);
		dcStructField(at, 'f', offsetof(union  A993, m3), 1);
		dcStructField(at, 'p', offsetof(union  A993, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {icsiispscjd} */
struct A994 { i m0; c m1; s m2; i m3; i m4; s m5; p m6; s m7; c m8; j m9; d m10; };
void f_cpA994(struct A994 *x, const struct A994 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA994(const struct A994 *x, const struct A994 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA994() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A994), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A994, m0), 1);
		dcStructField(at, 'c', offsetof(struct A994, m1), 1);
		dcStructField(at, 's', offsetof(struct A994, m2), 1);
		dcStructField(at, 'i', offsetof(struct A994, m3), 1);
		dcStructField(at, 'i', offsetof(struct A994, m4), 1);
		dcStructField(at, 's', offsetof(struct A994, m5), 1);
		dcStructField(at, 'p', offsetof(struct A994, m6), 1);
		dcStructField(at, 's', offsetof(struct A994, m7), 1);
		dcStructField(at, 'c', offsetof(struct A994, m8), 1);
		dcStructField(at, 'j', offsetof(struct A994, m9), 1);
		dcStructField(at, 'd', offsetof(struct A994, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jfsfisl> */
union  A995 { j m0; f m1; s m2; f m3; i m4; s m5; l m6; };
void f_cpA995(union  A995 *x, const union  A995 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA995(const union  A995 *x, const union  A995 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA995() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A995), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A995, m0), 1);
		dcStructField(at, 'f', offsetof(union  A995, m1), 1);
		dcStructField(at, 's', offsetof(union  A995, m2), 1);
		dcStructField(at, 'f', offsetof(union  A995, m3), 1);
		dcStructField(at, 'i', offsetof(union  A995, m4), 1);
		dcStructField(at, 's', offsetof(union  A995, m5), 1);
		dcStructField(at, 'l', offsetof(union  A995, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cfccfjpjssj} */
struct A996 { c m0; f m1; c m2; c m3; f m4; j m5; p m6; j m7; s m8; s m9; j m10; };
void f_cpA996(struct A996 *x, const struct A996 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA996(const struct A996 *x, const struct A996 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA996() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A996), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A996, m0), 1);
		dcStructField(at, 'f', offsetof(struct A996, m1), 1);
		dcStructField(at, 'c', offsetof(struct A996, m2), 1);
		dcStructField(at, 'c', offsetof(struct A996, m3), 1);
		dcStructField(at, 'f', offsetof(struct A996, m4), 1);
		dcStructField(at, 'j', offsetof(struct A996, m5), 1);
		dcStructField(at, 'p', offsetof(struct A996, m6), 1);
		dcStructField(at, 'j', offsetof(struct A996, m7), 1);
		dcStructField(at, 's', offsetof(struct A996, m8), 1);
		dcStructField(at, 's', offsetof(struct A996, m9), 1);
		dcStructField(at, 'j', offsetof(struct A996, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sspfpc{cfccfjpjssj}c{d}> */
union  A997 { s m0; s m1; p m2; f m3; p m4; c m5; struct A996 m6; c m7; struct A47 m8; };
void f_cpA997(union  A997 *x, const union  A997 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA996(&x->m6, &y->m6); x->m7 = y->m7; f_cpA47(&x->m8, &y->m8); };
int f_cmpA997(const union  A997 *x, const union  A997 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA996(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA47(&x->m8, &y->m8); };
DCstruct* f_touchdcstA997() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A997), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A997, m0), 1);
		dcStructField(at, 's', offsetof(union  A997, m1), 1);
		dcStructField(at, 'p', offsetof(union  A997, m2), 1);
		dcStructField(at, 'f', offsetof(union  A997, m3), 1);
		dcStructField(at, 'p', offsetof(union  A997, m4), 1);
		dcStructField(at, 'c', offsetof(union  A997, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A997, m6), 1, f_touchdcstA996());
		dcStructField(at, 'c', offsetof(union  A997, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A997, m8), 1, f_touchdcstA47());
		dcCloseStruct(at);
	}
	return at;
};
/* {cdi<sspfpc{cfccfjpjssj}c{d}>scffilps} */
struct A998 { c m0; d m1; i m2; union  A997 m3; s m4; c m5; f m6; f m7; i m8; l m9; p m10; s m11; };
void f_cpA998(struct A998 *x, const struct A998 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA997(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA998(const struct A998 *x, const struct A998 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA997(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA998() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A998), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A998, m0), 1);
		dcStructField(at, 'd', offsetof(struct A998, m1), 1);
		dcStructField(at, 'i', offsetof(struct A998, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A998, m3), 1, f_touchdcstA997());
		dcStructField(at, 's', offsetof(struct A998, m4), 1);
		dcStructField(at, 'c', offsetof(struct A998, m5), 1);
		dcStructField(at, 'f', offsetof(struct A998, m6), 1);
		dcStructField(at, 'f', offsetof(struct A998, m7), 1);
		dcStructField(at, 'i', offsetof(struct A998, m8), 1);
		dcStructField(at, 'l', offsetof(struct A998, m9), 1);
		dcStructField(at, 'p', offsetof(struct A998, m10), 1);
		dcStructField(at, 's', offsetof(struct A998, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iji> */
union  A999 { i m0; j m1; i m2; };
void f_cpA999(union  A999 *x, const union  A999 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA999(const union  A999 *x, const union  A999 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA999() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A999), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A999, m0), 1);
		dcStructField(at, 'j', offsetof(union  A999, m1), 1);
		dcStructField(at, 'i', offsetof(union  A999, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dipcs[6]> */
union  A1000 { d m0; i m1; p m2; c m3; s m4[6]; };
void f_cpA1000(union  A1000 *x, const union  A1000 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; };
int f_cmpA1000(const union  A1000 *x, const union  A1000 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5]; };
DCstruct* f_touchdcstA1000() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1000), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1000, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1000, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1000, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1000, m3), 1);
		dcStructField(at, 's', offsetof(union  A1000, m4), 6);
		dcCloseStruct(at);
	}
	return at;
};
/* <cjs> */
union  A1001 { c m0; j m1; s m2; };
void f_cpA1001(union  A1001 *x, const union  A1001 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1001(const union  A1001 *x, const union  A1001 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1001() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1001), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1001, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1001, m1), 1);
		dcStructField(at, 's', offsetof(union  A1001, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jslsjsjlfc} */
struct A1002 { j m0; s m1; l m2; s m3; j m4; s m5; j m6; l m7; f m8; c m9; };
void f_cpA1002(struct A1002 *x, const struct A1002 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1002(const struct A1002 *x, const struct A1002 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1002() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1002), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1002, m0), 1);
		dcStructField(at, 's', offsetof(struct A1002, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1002, m2), 1);
		dcStructField(at, 's', offsetof(struct A1002, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1002, m4), 1);
		dcStructField(at, 's', offsetof(struct A1002, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1002, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1002, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1002, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1002, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{jslsjsjlfc}[14]> */
union  A1003 { struct A1002 m0[14]; };
void f_cpA1003(union  A1003 *x, const union  A1003 *y) { f_cpA1002(&x->m0[0], &y->m0[0]); f_cpA1002(&x->m0[1], &y->m0[1]); f_cpA1002(&x->m0[2], &y->m0[2]); f_cpA1002(&x->m0[3], &y->m0[3]); f_cpA1002(&x->m0[4], &y->m0[4]); f_cpA1002(&x->m0[5], &y->m0[5]); f_cpA1002(&x->m0[6], &y->m0[6]); f_cpA1002(&x->m0[7], &y->m0[7]); f_cpA1002(&x->m0[8], &y->m0[8]); f_cpA1002(&x->m0[9], &y->m0[9]); f_cpA1002(&x->m0[10], &y->m0[10]); f_cpA1002(&x->m0[11], &y->m0[11]); f_cpA1002(&x->m0[12], &y->m0[12]); f_cpA1002(&x->m0[13], &y->m0[13]); };
int f_cmpA1003(const union  A1003 *x, const union  A1003 *y) { return f_cmpA1002(&x->m0[0], &y->m0[0]) && f_cmpA1002(&x->m0[1], &y->m0[1]) && f_cmpA1002(&x->m0[2], &y->m0[2]) && f_cmpA1002(&x->m0[3], &y->m0[3]) && f_cmpA1002(&x->m0[4], &y->m0[4]) && f_cmpA1002(&x->m0[5], &y->m0[5]) && f_cmpA1002(&x->m0[6], &y->m0[6]) && f_cmpA1002(&x->m0[7], &y->m0[7]) && f_cmpA1002(&x->m0[8], &y->m0[8]) && f_cmpA1002(&x->m0[9], &y->m0[9]) && f_cmpA1002(&x->m0[10], &y->m0[10]) && f_cmpA1002(&x->m0[11], &y->m0[11]) && f_cmpA1002(&x->m0[12], &y->m0[12]) && f_cmpA1002(&x->m0[13], &y->m0[13]); };
DCstruct* f_touchdcstA1003() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A1003), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1003, m0), 14, f_touchdcstA1002());
		dcCloseStruct(at);
	}
	return at;
};
/* {icpcplj[14]lsplj} */
struct A1004 { i m0; c m1; p m2; c m3; p m4; l m5; j m6[14]; l m7; s m8; p m9; l m10; j m11; };
void f_cpA1004(struct A1004 *x, const struct A1004 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m6[11] = y->m6[11]; x->m6[12] = y->m6[12]; x->m6[13] = y->m6[13]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1004(const struct A1004 *x, const struct A1004 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m6[11] == y->m6[11] && x->m6[12] == y->m6[12] && x->m6[13] == y->m6[13] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1004() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1004), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1004, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1004, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1004, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1004, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1004, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1004, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1004, m6), 14);
		dcStructField(at, 'l', offsetof(struct A1004, m7), 1);
		dcStructField(at, 's', offsetof(struct A1004, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1004, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1004, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1004, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ddldc> */
union  A1005 { d m0; d m1; l m2; d m3; c m4; };
void f_cpA1005(union  A1005 *x, const union  A1005 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1005(const union  A1005 *x, const union  A1005 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1005() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1005), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1005, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1005, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1005, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1005, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1005, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ppdjppsppssf> */
union  A1006 { p m0; p m1; d m2; j m3; p m4; p m5; s m6; p m7; p m8; s m9; s m10; f m11; };
void f_cpA1006(union  A1006 *x, const union  A1006 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1006(const union  A1006 *x, const union  A1006 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1006() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1006), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1006, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1006, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1006, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1006, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1006, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1006, m5), 1);
		dcStructField(at, 's', offsetof(union  A1006, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1006, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1006, m8), 1);
		dcStructField(at, 's', offsetof(union  A1006, m9), 1);
		dcStructField(at, 's', offsetof(union  A1006, m10), 1);
		dcStructField(at, 'f', offsetof(union  A1006, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jcpddddpfpcs> */
union  A1007 { j m0; c m1; p m2; d m3; d m4; d m5; d m6; p m7; f m8; p m9; c m10; s m11; };
void f_cpA1007(union  A1007 *x, const union  A1007 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1007(const union  A1007 *x, const union  A1007 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1007() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1007), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1007, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1007, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1007, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1007, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1007, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1007, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1007, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1007, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1007, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1007, m9), 1);
		dcStructField(at, 'c', offsetof(union  A1007, m10), 1);
		dcStructField(at, 's', offsetof(union  A1007, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dlsflcsspisf} */
struct A1008 { d m0; l m1; s m2; f m3; l m4; c m5; s m6; s m7; p m8; i m9; s m10; f m11; };
void f_cpA1008(struct A1008 *x, const struct A1008 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1008(const struct A1008 *x, const struct A1008 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1008() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1008), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1008, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1008, m1), 1);
		dcStructField(at, 's', offsetof(struct A1008, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1008, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1008, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1008, m5), 1);
		dcStructField(at, 's', offsetof(struct A1008, m6), 1);
		dcStructField(at, 's', offsetof(struct A1008, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1008, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1008, m9), 1);
		dcStructField(at, 's', offsetof(struct A1008, m10), 1);
		dcStructField(at, 'f', offsetof(struct A1008, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<ddldc>ji<ppdjppsppssf>csisl<jcpddddpfpcs>l{dlsflcsspisf}} */
struct A1009 { union  A1005 m0; j m1; i m2; union  A1006 m3; c m4; s m5; i m6; s m7; l m8; union  A1007 m9; l m10; struct A1008 m11; };
void f_cpA1009(struct A1009 *x, const struct A1009 *y) { f_cpA1005(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA1006(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1007(&x->m9, &y->m9); x->m10 = y->m10; f_cpA1008(&x->m11, &y->m11); };
int f_cmpA1009(const struct A1009 *x, const struct A1009 *y) { return f_cmpA1005(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1006(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1007(&x->m9, &y->m9) && x->m10 == y->m10 && f_cmpA1008(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1009() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1009), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1009, m0), 1, f_touchdcstA1005());
		dcStructField(at, 'j', offsetof(struct A1009, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1009, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1009, m3), 1, f_touchdcstA1006());
		dcStructField(at, 'c', offsetof(struct A1009, m4), 1);
		dcStructField(at, 's', offsetof(struct A1009, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1009, m6), 1);
		dcStructField(at, 's', offsetof(struct A1009, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1009, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1009, m9), 1, f_touchdcstA1007());
		dcStructField(at, 'l', offsetof(struct A1009, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1009, m11), 1, f_touchdcstA1008());
		dcCloseStruct(at);
	}
	return at;
};
/* <ldccd[5]fpjjdjc> */
union  A1010 { l m0; d m1; c m2; c m3; d m4[5]; f m5; p m6; j m7; j m8; d m9; j m10; c m11; };
void f_cpA1010(union  A1010 *x, const union  A1010 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1010(const union  A1010 *x, const union  A1010 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1010() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1010), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1010, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1010, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1010, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1010, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1010, m4), 5);
		dcStructField(at, 'f', offsetof(union  A1010, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1010, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1010, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1010, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1010, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1010, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1010, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cjip} */
struct A1011 { c m0; j m1; i m2; p m3; };
void f_cpA1011(struct A1011 *x, const struct A1011 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1011(const struct A1011 *x, const struct A1011 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1011() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1011), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1011, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1011, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1011, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1011, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fl<ldccd[5]fpjjdjc>jsljifc{cjip}l} */
struct A1012 { f m0; l m1; union  A1010 m2; j m3; s m4; l m5; j m6; i m7; f m8; c m9; struct A1011 m10; l m11; };
void f_cpA1012(struct A1012 *x, const struct A1012 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1010(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1011(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1012(const struct A1012 *x, const struct A1012 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1010(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1011(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1012() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1012), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1012, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1012, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1012, m2), 1, f_touchdcstA1010());
		dcStructField(at, 'j', offsetof(struct A1012, m3), 1);
		dcStructField(at, 's', offsetof(struct A1012, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1012, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1012, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1012, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1012, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1012, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1012, m10), 1, f_touchdcstA1011());
		dcStructField(at, 'l', offsetof(struct A1012, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <f{<ddldc>ji<ppdjppsppssf>csisl<jcpddddpfpcs>l{dlsflcsspisf}}fp{fl<ldccd[5]fpjjdjc>jsljifc{cjip}l}j> */
union  A1013 { f m0; struct A1009 m1; f m2; p m3; struct A1012 m4; j m5; };
void f_cpA1013(union  A1013 *x, const union  A1013 *y) { x->m0 = y->m0; f_cpA1009(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; f_cpA1012(&x->m4, &y->m4); x->m5 = y->m5; };
int f_cmpA1013(const union  A1013 *x, const union  A1013 *y) { return x->m0 == y->m0 && f_cmpA1009(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1012(&x->m4, &y->m4) && x->m5 == y->m5; };
DCstruct* f_touchdcstA1013() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1013), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1013, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1013, m1), 1, f_touchdcstA1009());
		dcStructField(at, 'f', offsetof(union  A1013, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1013, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1013, m4), 1, f_touchdcstA1012());
		dcStructField(at, 'j', offsetof(union  A1013, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <liisccpjjflj> */
union  A1014 { l m0; i m1; i m2; s m3; c m4; c m5; p m6; j m7; j m8; f m9; l m10; j m11; };
void f_cpA1014(union  A1014 *x, const union  A1014 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1014(const union  A1014 *x, const union  A1014 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1014() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1014), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1014, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1014, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1014, m2), 1);
		dcStructField(at, 's', offsetof(union  A1014, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1014, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1014, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1014, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1014, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1014, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1014, m9), 1);
		dcStructField(at, 'l', offsetof(union  A1014, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1014, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jjdjcicil} */
struct A1015 { j m0; j m1; d m2; j m3; c m4; i m5; c m6; i m7; l m8; };
void f_cpA1015(struct A1015 *x, const struct A1015 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1015(const struct A1015 *x, const struct A1015 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1015() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1015), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1015, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1015, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1015, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1015, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1015, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1015, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1015, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1015, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1015, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jffsi> */
union  A1016 { j m0; f m1; f m2; s m3; i m4; };
void f_cpA1016(union  A1016 *x, const union  A1016 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1016(const union  A1016 *x, const union  A1016 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1016() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1016), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1016, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1016, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1016, m2), 1);
		dcStructField(at, 's', offsetof(union  A1016, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1016, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cfii> */
union  A1017 { c m0; f m1; i m2; i m3; };
void f_cpA1017(union  A1017 *x, const union  A1017 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1017(const union  A1017 *x, const union  A1017 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1017() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1017), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1017, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1017, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1017, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1017, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {c<jffsi>[7]jil<cfii>cpd} */
struct A1018 { c m0; union  A1016 m1[7]; j m2; i m3; l m4; union  A1017 m5; c m6; p m7; d m8; };
void f_cpA1018(struct A1018 *x, const struct A1018 *y) { x->m0 = y->m0; f_cpA1016(&x->m1[0], &y->m1[0]); f_cpA1016(&x->m1[1], &y->m1[1]); f_cpA1016(&x->m1[2], &y->m1[2]); f_cpA1016(&x->m1[3], &y->m1[3]); f_cpA1016(&x->m1[4], &y->m1[4]); f_cpA1016(&x->m1[5], &y->m1[5]); f_cpA1016(&x->m1[6], &y->m1[6]); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1017(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1018(const struct A1018 *x, const struct A1018 *y) { return x->m0 == y->m0 && f_cmpA1016(&x->m1[0], &y->m1[0]) && f_cmpA1016(&x->m1[1], &y->m1[1]) && f_cmpA1016(&x->m1[2], &y->m1[2]) && f_cmpA1016(&x->m1[3], &y->m1[3]) && f_cmpA1016(&x->m1[4], &y->m1[4]) && f_cmpA1016(&x->m1[5], &y->m1[5]) && f_cmpA1016(&x->m1[6], &y->m1[6]) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1017(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1018() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1018), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1018, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1018, m1), 7, f_touchdcstA1016());
		dcStructField(at, 'j', offsetof(struct A1018, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1018, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1018, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1018, m5), 1, f_touchdcstA1017());
		dcStructField(at, 'c', offsetof(struct A1018, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1018, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1018, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jj[7]scffc[12]plpfd> */
union  A1019 { j m0; j m1[7]; s m2; c m3; f m4; f m5; c m6[12]; p m7; l m8; p m9; f m10; d m11; };
void f_cpA1019(union  A1019 *x, const union  A1019 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m6[11] = y->m6[11]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1019(const union  A1019 *x, const union  A1019 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m6[11] == y->m6[11] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1019() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1019), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1019, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1019, m1), 7);
		dcStructField(at, 's', offsetof(union  A1019, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1019, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1019, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1019, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1019, m6), 12);
		dcStructField(at, 'p', offsetof(union  A1019, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1019, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1019, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1019, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1019, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lipddd<jj[7]scffc[12]plpfd>fc> */
union  A1020 { l m0; i m1; p m2; d m3; d m4; d m5; union  A1019 m6; f m7; c m8; };
void f_cpA1020(union  A1020 *x, const union  A1020 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1019(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1020(const union  A1020 *x, const union  A1020 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1019(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1020() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1020), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1020, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1020, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1020, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1020, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1020, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1020, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1020, m6), 1, f_touchdcstA1019());
		dcStructField(at, 'f', offsetof(union  A1020, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1020, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {j<lipddd<jj[7]scffc[12]plpfd>fc>} */
struct A1021 { j m0; union  A1020 m1; };
void f_cpA1021(struct A1021 *x, const struct A1021 *y) { x->m0 = y->m0; f_cpA1020(&x->m1, &y->m1); };
int f_cmpA1021(const struct A1021 *x, const struct A1021 *y) { return x->m0 == y->m0 && f_cmpA1020(&x->m1, &y->m1); };
DCstruct* f_touchdcstA1021() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1021), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1021, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1021, m1), 1, f_touchdcstA1020());
		dcCloseStruct(at);
	}
	return at;
};
/* <dpd> */
union  A1022 { d m0; p m1; d m2; };
void f_cpA1022(union  A1022 *x, const union  A1022 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1022(const union  A1022 *x, const union  A1022 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1022() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1022), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1022, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1022, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1022, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<dpd>d> */
union  A1023 { union  A1022 m0; d m1; };
void f_cpA1023(union  A1023 *x, const union  A1023 *y) { f_cpA1022(&x->m0, &y->m0); x->m1 = y->m1; };
int f_cmpA1023(const union  A1023 *x, const union  A1023 *y) { return f_cmpA1022(&x->m0, &y->m0) && x->m1 == y->m1; };
DCstruct* f_touchdcstA1023() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1023), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1023, m0), 1, f_touchdcstA1022());
		dcStructField(at, 'd', offsetof(union  A1023, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jiisidi> */
union  A1024 { j m0; i m1; i m2; s m3; i m4; d m5; i m6; };
void f_cpA1024(union  A1024 *x, const union  A1024 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1024(const union  A1024 *x, const union  A1024 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1024() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1024), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1024, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1024, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1024, m2), 1);
		dcStructField(at, 's', offsetof(union  A1024, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1024, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1024, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1024, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {clpiiffclfd} */
struct A1025 { c m0; l m1; p m2; i m3; i m4; f m5; f m6; c m7; l m8; f m9; d m10; };
void f_cpA1025(struct A1025 *x, const struct A1025 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1025(const struct A1025 *x, const struct A1025 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1025() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1025), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1025, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1025, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1025, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1025, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1025, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1025, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1025, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1025, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1025, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1025, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1025, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ldp} */
struct A1026 { l m0; d m1; p m2; };
void f_cpA1026(struct A1026 *x, const struct A1026 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1026(const struct A1026 *x, const struct A1026 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1026() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1026), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1026, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1026, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1026, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sf<jiisidi>{clpiiffclfd}{ldp}cddcffi} */
struct A1027 { s m0; f m1; union  A1024 m2; struct A1025 m3; struct A1026 m4; c m5; d m6; d m7; c m8; f m9; f m10; i m11; };
void f_cpA1027(struct A1027 *x, const struct A1027 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1024(&x->m2, &y->m2); f_cpA1025(&x->m3, &y->m3); f_cpA1026(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1027(const struct A1027 *x, const struct A1027 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1024(&x->m2, &y->m2) && f_cmpA1025(&x->m3, &y->m3) && f_cmpA1026(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1027() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1027), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1027, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1027, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1027, m2), 1, f_touchdcstA1024());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1027, m3), 1, f_touchdcstA1025());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1027, m4), 1, f_touchdcstA1026());
		dcStructField(at, 'c', offsetof(struct A1027, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1027, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1027, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1027, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1027, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1027, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1027, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sc} */
struct A1028 { s m0; c m1; };
void f_cpA1028(struct A1028 *x, const struct A1028 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1028(const struct A1028 *x, const struct A1028 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1028() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1028), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1028, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1028, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lfclfpp> */
union  A1029 { l m0; f m1; c m2; l m3; f m4; p m5; p m6; };
void f_cpA1029(union  A1029 *x, const union  A1029 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1029(const union  A1029 *x, const union  A1029 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1029() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1029), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1029, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1029, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1029, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1029, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1029, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1029, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1029, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jpp[3]ic[2]ssc> */
union  A1030 { j m0; p m1; p m2[3]; i m3; c m4[2]; s m5; s m6; c m7; };
void f_cpA1030(union  A1030 *x, const union  A1030 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1030(const union  A1030 *x, const union  A1030 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1030() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1030), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1030, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1030, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1030, m2), 3);
		dcStructField(at, 'i', offsetof(union  A1030, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1030, m4), 2);
		dcStructField(at, 's', offsetof(union  A1030, m5), 1);
		dcStructField(at, 's', offsetof(union  A1030, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1030, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {j[12]dp} */
struct A1031 { j m0[12]; d m1; p m2; };
void f_cpA1031(struct A1031 *x, const struct A1031 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1031(const struct A1031 *x, const struct A1031 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1031() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1031), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1031, m0), 12);
		dcStructField(at, 'd', offsetof(struct A1031, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1031, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ljsfjiplsdcp} */
struct A1032 { l m0; j m1; s m2; f m3; j m4; i m5; p m6; l m7; s m8; d m9; c m10; p m11; };
void f_cpA1032(struct A1032 *x, const struct A1032 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1032(const struct A1032 *x, const struct A1032 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1032() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1032), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1032, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1032, m1), 1);
		dcStructField(at, 's', offsetof(struct A1032, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1032, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1032, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1032, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1032, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1032, m7), 1);
		dcStructField(at, 's', offsetof(struct A1032, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1032, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1032, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1032, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lpl{j[12]dp}f{ljsfjiplsdcp}il> */
union  A1033 { l m0; p m1; l m2; struct A1031 m3; f m4; struct A1032 m5; i m6; l m7; };
void f_cpA1033(union  A1033 *x, const union  A1033 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1031(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1032(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1033(const union  A1033 *x, const union  A1033 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1031(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1032(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1033() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1033), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1033, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1033, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1033, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1033, m3), 1, f_touchdcstA1031());
		dcStructField(at, 'f', offsetof(union  A1033, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1033, m5), 1, f_touchdcstA1032());
		dcStructField(at, 'i', offsetof(union  A1033, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1033, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dfpdiilfj} */
struct A1034 { d m0; f m1; p m2; d m3; i m4; i m5; l m6; f m7; j m8; };
void f_cpA1034(struct A1034 *x, const struct A1034 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1034(const struct A1034 *x, const struct A1034 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1034() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1034), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1034, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1034, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1034, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1034, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1034, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1034, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1034, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1034, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1034, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {di[13]} */
struct A1035 { d m0; i m1[13]; };
void f_cpA1035(struct A1035 *x, const struct A1035 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m1[10] = y->m1[10]; x->m1[11] = y->m1[11]; x->m1[12] = y->m1[12]; };
int f_cmpA1035(const struct A1035 *x, const struct A1035 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m1[10] == y->m1[10] && x->m1[11] == y->m1[11] && x->m1[12] == y->m1[12]; };
DCstruct* f_touchdcstA1035() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1035), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1035, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1035, m1), 13);
		dcCloseStruct(at);
	}
	return at;
};
/* {sp{di[13]}cccic} */
struct A1036 { s m0; p m1; struct A1035 m2; c m3; c m4; c m5; i m6; c m7; };
void f_cpA1036(struct A1036 *x, const struct A1036 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1035(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1036(const struct A1036 *x, const struct A1036 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1035(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1036() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1036), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1036, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1036, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1036, m2), 1, f_touchdcstA1035());
		dcStructField(at, 'c', offsetof(struct A1036, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1036, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1036, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1036, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1036, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sfs> */
union  A1037 { s m0; f m1; s m2; };
void f_cpA1037(union  A1037 *x, const union  A1037 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1037(const union  A1037 *x, const union  A1037 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1037() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1037), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1037, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1037, m1), 1);
		dcStructField(at, 's', offsetof(union  A1037, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fd<sfs>ip<f><jp>p> */
union  A1038 { f m0; d m1; union  A1037 m2; i m3; p m4; union  A438 m5; union  A842 m6; p m7; };
void f_cpA1038(union  A1038 *x, const union  A1038 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1037(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; f_cpA438(&x->m5, &y->m5); f_cpA842(&x->m6, &y->m6); x->m7 = y->m7; };
int f_cmpA1038(const union  A1038 *x, const union  A1038 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1037(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA438(&x->m5, &y->m5) && f_cmpA842(&x->m6, &y->m6) && x->m7 == y->m7; };
DCstruct* f_touchdcstA1038() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1038), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1038, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1038, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1038, m2), 1, f_touchdcstA1037());
		dcStructField(at, 'i', offsetof(union  A1038, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1038, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1038, m5), 1, f_touchdcstA438());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1038, m6), 1, f_touchdcstA842());
		dcStructField(at, 'p', offsetof(union  A1038, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {d<c>fpjiddlp} */
struct A1039 { d m0; union  A116 m1; f m2; p m3; j m4; i m5; d m6; d m7; l m8; p m9; };
void f_cpA1039(struct A1039 *x, const struct A1039 *y) { x->m0 = y->m0; f_cpA116(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1039(const struct A1039 *x, const struct A1039 *y) { return x->m0 == y->m0 && f_cmpA116(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1039() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1039), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1039, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1039, m1), 1, f_touchdcstA116());
		dcStructField(at, 'f', offsetof(struct A1039, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1039, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1039, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1039, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1039, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1039, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1039, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1039, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{sp{di[13]}cccic}d<fd<sfs>ip<f><jp>p>c{d<c>fpjiddlp}cppdsdc> */
union  A1040 { struct A1036 m0; d m1; union  A1038 m2; c m3; struct A1039 m4; c m5; p m6; p m7; d m8; s m9; d m10; c m11; };
void f_cpA1040(union  A1040 *x, const union  A1040 *y) { f_cpA1036(&x->m0, &y->m0); x->m1 = y->m1; f_cpA1038(&x->m2, &y->m2); x->m3 = y->m3; f_cpA1039(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1040(const union  A1040 *x, const union  A1040 *y) { return f_cmpA1036(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA1038(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA1039(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1040() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1040), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1040, m0), 1, f_touchdcstA1036());
		dcStructField(at, 'd', offsetof(union  A1040, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1040, m2), 1, f_touchdcstA1038());
		dcStructField(at, 'c', offsetof(union  A1040, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1040, m4), 1, f_touchdcstA1039());
		dcStructField(at, 'c', offsetof(union  A1040, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1040, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1040, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1040, m8), 1);
		dcStructField(at, 's', offsetof(union  A1040, m9), 1);
		dcStructField(at, 'd', offsetof(union  A1040, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1040, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ilcijdiifffp} */
struct A1041 { i m0; l m1; c m2; i m3; j m4; d m5; i m6; i m7; f m8; f m9; f m10; p m11; };
void f_cpA1041(struct A1041 *x, const struct A1041 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1041(const struct A1041 *x, const struct A1041 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1041() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1041), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1041, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1041, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1041, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1041, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1041, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1041, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1041, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1041, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1041, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1041, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1041, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1041, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jddlddf[11]cff} */
struct A1042 { j m0; d m1; d m2; l m3; d m4; d m5; f m6[11]; c m7; f m8; f m9; };
void f_cpA1042(struct A1042 *x, const struct A1042 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1042(const struct A1042 *x, const struct A1042 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1042() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1042), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1042, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1042, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1042, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1042, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1042, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1042, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1042, m6), 11);
		dcStructField(at, 'c', offsetof(struct A1042, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1042, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1042, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cijsj} */
struct A1043 { c m0; i m1; j m2; s m3; j m4; };
void f_cpA1043(struct A1043 *x, const struct A1043 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1043(const struct A1043 *x, const struct A1043 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1043() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1043), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1043, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1043, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1043, m2), 1);
		dcStructField(at, 's', offsetof(struct A1043, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1043, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jds> */
union  A1044 { j m0; d m1; s m2; };
void f_cpA1044(union  A1044 *x, const union  A1044 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1044(const union  A1044 *x, const union  A1044 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1044() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1044), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1044, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1044, m1), 1);
		dcStructField(at, 's', offsetof(union  A1044, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ffdddscidfdj} */
struct A1045 { f m0; f m1; d m2; d m3; d m4; s m5; c m6; i m7; d m8; f m9; d m10; j m11; };
void f_cpA1045(struct A1045 *x, const struct A1045 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1045(const struct A1045 *x, const struct A1045 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1045() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1045), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1045, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1045, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1045, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1045, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1045, m4), 1);
		dcStructField(at, 's', offsetof(struct A1045, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1045, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1045, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1045, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1045, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1045, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1045, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ip[2]liflffci> */
union  A1046 { i m0; p m1[2]; l m2; i m3; f m4; l m5; f m6; f m7; c m8; i m9; };
void f_cpA1046(union  A1046 *x, const union  A1046 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1046(const union  A1046 *x, const union  A1046 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1046() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1046), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1046, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1046, m1), 2);
		dcStructField(at, 'l', offsetof(union  A1046, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1046, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1046, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1046, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1046, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1046, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1046, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1046, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpdcp[1]> */
union  A1047 { c m0; p m1; d m2; c m3; p m4[1]; };
void f_cpA1047(union  A1047 *x, const union  A1047 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; };
int f_cmpA1047(const union  A1047 *x, const union  A1047 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0]; };
DCstruct* f_touchdcstA1047() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1047), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1047, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1047, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1047, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1047, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1047, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{jddlddf[11]cff}{cijsj}l<jds>f{ffdddscidfdj}[13]d<ip[2]liflffci><cpdcp[1]>iii> */
union  A1048 { struct A1042 m0; struct A1043 m1; l m2; union  A1044 m3; f m4; struct A1045 m5[13]; d m6; union  A1046 m7; union  A1047 m8; i m9; i m10; i m11; };
void f_cpA1048(union  A1048 *x, const union  A1048 *y) { f_cpA1042(&x->m0, &y->m0); f_cpA1043(&x->m1, &y->m1); x->m2 = y->m2; f_cpA1044(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1045(&x->m5[0], &y->m5[0]); f_cpA1045(&x->m5[1], &y->m5[1]); f_cpA1045(&x->m5[2], &y->m5[2]); f_cpA1045(&x->m5[3], &y->m5[3]); f_cpA1045(&x->m5[4], &y->m5[4]); f_cpA1045(&x->m5[5], &y->m5[5]); f_cpA1045(&x->m5[6], &y->m5[6]); f_cpA1045(&x->m5[7], &y->m5[7]); f_cpA1045(&x->m5[8], &y->m5[8]); f_cpA1045(&x->m5[9], &y->m5[9]); f_cpA1045(&x->m5[10], &y->m5[10]); f_cpA1045(&x->m5[11], &y->m5[11]); f_cpA1045(&x->m5[12], &y->m5[12]); x->m6 = y->m6; f_cpA1046(&x->m7, &y->m7); f_cpA1047(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1048(const union  A1048 *x, const union  A1048 *y) { return f_cmpA1042(&x->m0, &y->m0) && f_cmpA1043(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA1044(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1045(&x->m5[0], &y->m5[0]) && f_cmpA1045(&x->m5[1], &y->m5[1]) && f_cmpA1045(&x->m5[2], &y->m5[2]) && f_cmpA1045(&x->m5[3], &y->m5[3]) && f_cmpA1045(&x->m5[4], &y->m5[4]) && f_cmpA1045(&x->m5[5], &y->m5[5]) && f_cmpA1045(&x->m5[6], &y->m5[6]) && f_cmpA1045(&x->m5[7], &y->m5[7]) && f_cmpA1045(&x->m5[8], &y->m5[8]) && f_cmpA1045(&x->m5[9], &y->m5[9]) && f_cmpA1045(&x->m5[10], &y->m5[10]) && f_cmpA1045(&x->m5[11], &y->m5[11]) && f_cmpA1045(&x->m5[12], &y->m5[12]) && x->m6 == y->m6 && f_cmpA1046(&x->m7, &y->m7) && f_cmpA1047(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1048() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1048), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1048, m0), 1, f_touchdcstA1042());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1048, m1), 1, f_touchdcstA1043());
		dcStructField(at, 'l', offsetof(union  A1048, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1048, m3), 1, f_touchdcstA1044());
		dcStructField(at, 'f', offsetof(union  A1048, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1048, m5), 13, f_touchdcstA1045());
		dcStructField(at, 'd', offsetof(union  A1048, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1048, m7), 1, f_touchdcstA1046());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1048, m8), 1, f_touchdcstA1047());
		dcStructField(at, 'i', offsetof(union  A1048, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1048, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1048, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cljfsiplfii> */
union  A1049 { c m0; l m1; j m2; f m3; s m4; i m5; p m6; l m7; f m8; i m9; i m10; };
void f_cpA1049(union  A1049 *x, const union  A1049 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1049(const union  A1049 *x, const union  A1049 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1049() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1049), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1049, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1049, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1049, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1049, m3), 1);
		dcStructField(at, 's', offsetof(union  A1049, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1049, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1049, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1049, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1049, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1049, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1049, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ci<cljfsiplfii>sl<f>lip<i>d} */
struct A1050 { c m0; i m1; union  A1049 m2; s m3; l m4; union  A438 m5; l m6; i m7; p m8; union  A62 m9; d m10; };
void f_cpA1050(struct A1050 *x, const struct A1050 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1049(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; f_cpA438(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA62(&x->m9, &y->m9); x->m10 = y->m10; };
int f_cmpA1050(const struct A1050 *x, const struct A1050 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1049(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA438(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA62(&x->m9, &y->m9) && x->m10 == y->m10; };
DCstruct* f_touchdcstA1050() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1050), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1050, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1050, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1050, m2), 1, f_touchdcstA1049());
		dcStructField(at, 's', offsetof(struct A1050, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1050, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1050, m5), 1, f_touchdcstA438());
		dcStructField(at, 'l', offsetof(struct A1050, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1050, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1050, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1050, m9), 1, f_touchdcstA62());
		dcStructField(at, 'd', offsetof(struct A1050, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <isc{ci<cljfsiplfii>sl<f>lip<i>d}lc{pd}si> */
union  A1051 { i m0; s m1; c m2; struct A1050 m3; l m4; c m5; struct A541 m6; s m7; i m8; };
void f_cpA1051(union  A1051 *x, const union  A1051 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1050(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; f_cpA541(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1051(const union  A1051 *x, const union  A1051 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1050(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA541(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1051() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1051), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1051, m0), 1);
		dcStructField(at, 's', offsetof(union  A1051, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1051, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1051, m3), 1, f_touchdcstA1050());
		dcStructField(at, 'l', offsetof(union  A1051, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1051, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1051, m6), 1, f_touchdcstA541());
		dcStructField(at, 's', offsetof(union  A1051, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1051, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pl[4]flsffpicpl> */
union  A1052 { p m0; l m1[4]; f m2; l m3; s m4; f m5; f m6; p m7; i m8; c m9; p m10; l m11; };
void f_cpA1052(union  A1052 *x, const union  A1052 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1052(const union  A1052 *x, const union  A1052 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1052() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1052), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1052, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1052, m1), 4);
		dcStructField(at, 'f', offsetof(union  A1052, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1052, m3), 1);
		dcStructField(at, 's', offsetof(union  A1052, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1052, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1052, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1052, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1052, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1052, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1052, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1052, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pfcicspcps} */
struct A1053 { p m0; f m1; c m2; i m3; c m4; s m5; p m6; c m7; p m8; s m9; };
void f_cpA1053(struct A1053 *x, const struct A1053 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1053(const struct A1053 *x, const struct A1053 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1053() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1053), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1053, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1053, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1053, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1053, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1053, m4), 1);
		dcStructField(at, 's', offsetof(struct A1053, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1053, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1053, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1053, m8), 1);
		dcStructField(at, 's', offsetof(struct A1053, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sdlildd<pl[4]flsffpicpl>pl{pfcicspcps}p} */
struct A1054 { s m0; d m1; l m2; i m3; l m4; d m5; d m6; union  A1052 m7; p m8; l m9; struct A1053 m10; p m11; };
void f_cpA1054(struct A1054 *x, const struct A1054 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1052(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; f_cpA1053(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1054(const struct A1054 *x, const struct A1054 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1052(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1053(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1054() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1054), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1054, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1054, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1054, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1054, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1054, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1054, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1054, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1054, m7), 1, f_touchdcstA1052());
		dcStructField(at, 'p', offsetof(struct A1054, m8), 1);
		dcStructField(at, 'l', offsetof(struct A1054, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1054, m10), 1, f_touchdcstA1053());
		dcStructField(at, 'p', offsetof(struct A1054, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ddlsfidcjppd} */
struct A1055 { d m0; d m1; l m2; s m3; f m4; i m5; d m6; c m7; j m8; p m9; p m10; d m11; };
void f_cpA1055(struct A1055 *x, const struct A1055 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1055(const struct A1055 *x, const struct A1055 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1055() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1055), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1055, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1055, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1055, m2), 1);
		dcStructField(at, 's', offsetof(struct A1055, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1055, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1055, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1055, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1055, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1055, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1055, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1055, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1055, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sjjsjpjidd> */
union  A1056 { s m0; j m1; j m2; s m3; j m4; p m5; j m6; i m7; d m8; d m9; };
void f_cpA1056(union  A1056 *x, const union  A1056 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1056(const union  A1056 *x, const union  A1056 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1056() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1056), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1056, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1056, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1056, m2), 1);
		dcStructField(at, 's', offsetof(union  A1056, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1056, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1056, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1056, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1056, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1056, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1056, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fisiicllcici} */
struct A1057 { f m0; i m1; s m2; i m3; i m4; c m5; l m6; l m7; c m8; i m9; c m10; i m11; };
void f_cpA1057(struct A1057 *x, const struct A1057 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1057(const struct A1057 *x, const struct A1057 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1057() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1057), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1057, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1057, m1), 1);
		dcStructField(at, 's', offsetof(struct A1057, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1057, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1057, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1057, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1057, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1057, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1057, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1057, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1057, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1057, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {isjlfcscidlj} */
struct A1058 { i m0; s m1; j m2; l m3; f m4; c m5; s m6; c m7; i m8; d m9; l m10; j m11; };
void f_cpA1058(struct A1058 *x, const struct A1058 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1058(const struct A1058 *x, const struct A1058 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1058() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1058), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1058, m0), 1);
		dcStructField(at, 's', offsetof(struct A1058, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1058, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1058, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1058, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1058, m5), 1);
		dcStructField(at, 's', offsetof(struct A1058, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1058, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1058, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1058, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1058, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1058, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {clp<sjjsjpjidd>j{fisiicllcici}lfjp{isjlfcscidlj}c} */
struct A1059 { c m0; l m1; p m2; union  A1056 m3; j m4; struct A1057 m5; l m6; f m7; j m8; p m9; struct A1058 m10; c m11; };
void f_cpA1059(struct A1059 *x, const struct A1059 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1056(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1057(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1058(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1059(const struct A1059 *x, const struct A1059 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1056(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1057(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1058(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1059() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1059), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1059, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1059, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1059, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1059, m3), 1, f_touchdcstA1056());
		dcStructField(at, 'j', offsetof(struct A1059, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1059, m5), 1, f_touchdcstA1057());
		dcStructField(at, 'l', offsetof(struct A1059, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1059, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1059, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1059, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1059, m10), 1, f_touchdcstA1058());
		dcStructField(at, 'c', offsetof(struct A1059, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ic<s>} */
struct A1060 { i m0; c m1; union  A179 m2; };
void f_cpA1060(struct A1060 *x, const struct A1060 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA179(&x->m2, &y->m2); };
int f_cmpA1060(const struct A1060 *x, const struct A1060 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA179(&x->m2, &y->m2); };
DCstruct* f_touchdcstA1060() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1060), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1060, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1060, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1060, m2), 1, f_touchdcstA179());
		dcCloseStruct(at);
	}
	return at;
};
/* {jdsjcpi} */
struct A1061 { j m0; d m1; s m2; j m3; c m4; p m5; i m6; };
void f_cpA1061(struct A1061 *x, const struct A1061 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1061(const struct A1061 *x, const struct A1061 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1061() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1061), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1061, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1061, m1), 1);
		dcStructField(at, 's', offsetof(struct A1061, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1061, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1061, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1061, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1061, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pfp} */
struct A1062 { p m0; f m1; p m2; };
void f_cpA1062(struct A1062 *x, const struct A1062 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1062(const struct A1062 *x, const struct A1062 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1062() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1062), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1062, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1062, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1062, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {flldpc{jdsjcpi}fc{pfp}} */
struct A1063 { f m0; l m1; l m2; d m3; p m4; c m5; struct A1061 m6; f m7; c m8; struct A1062 m9; };
void f_cpA1063(struct A1063 *x, const struct A1063 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1061(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; f_cpA1062(&x->m9, &y->m9); };
int f_cmpA1063(const struct A1063 *x, const struct A1063 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1061(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1062(&x->m9, &y->m9); };
DCstruct* f_touchdcstA1063() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1063), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1063, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1063, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1063, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1063, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1063, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1063, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1063, m6), 1, f_touchdcstA1061());
		dcStructField(at, 'f', offsetof(struct A1063, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1063, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1063, m9), 1, f_touchdcstA1062());
		dcCloseStruct(at);
	}
	return at;
};
/* <dpplpdjpjjf[9]c> */
union  A1064 { d m0; p m1; p m2; l m3; p m4; d m5; j m6; p m7; j m8; j m9; f m10[9]; c m11; };
void f_cpA1064(union  A1064 *x, const union  A1064 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m10[8] = y->m10[8]; x->m11 = y->m11; };
int f_cmpA1064(const union  A1064 *x, const union  A1064 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m10[8] == y->m10[8] && x->m11 == y->m11; };
DCstruct* f_touchdcstA1064() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1064), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1064, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1064, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1064, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1064, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1064, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1064, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1064, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1064, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1064, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1064, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1064, m10), 9);
		dcStructField(at, 'c', offsetof(union  A1064, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sipics[10]illclf> */
union  A1065 { s m0; i m1; p m2; i m3; c m4; s m5[10]; i m6; l m7; l m8; c m9; l m10; f m11; };
void f_cpA1065(union  A1065 *x, const union  A1065 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1065(const union  A1065 *x, const union  A1065 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1065() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1065), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1065, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1065, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1065, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1065, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1065, m4), 1);
		dcStructField(at, 's', offsetof(union  A1065, m5), 10);
		dcStructField(at, 'i', offsetof(union  A1065, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1065, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1065, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1065, m9), 1);
		dcStructField(at, 'l', offsetof(union  A1065, m10), 1);
		dcStructField(at, 'f', offsetof(union  A1065, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iddcdli} */
struct A1066 { i m0; d m1; d m2; c m3; d m4; l m5; i m6; };
void f_cpA1066(struct A1066 *x, const struct A1066 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1066(const struct A1066 *x, const struct A1066 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1066() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1066), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1066, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1066, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1066, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1066, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1066, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1066, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1066, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ddlfpj} */
struct A1067 { d m0; d m1; l m2; f m3; p m4; j m5; };
void f_cpA1067(struct A1067 *x, const struct A1067 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1067(const struct A1067 *x, const struct A1067 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1067() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1067), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1067, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1067, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1067, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1067, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1067, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1067, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<sipics[10]illclf>s{iddcdli}[2]jdf{ddlfpj}c<jd>ci<id>} */
struct A1068 { union  A1065 m0; s m1; struct A1066 m2[2]; j m3; d m4; f m5; struct A1067 m6; c m7; union  A904 m8; c m9; i m10; union  A232 m11; };
void f_cpA1068(struct A1068 *x, const struct A1068 *y) { f_cpA1065(&x->m0, &y->m0); x->m1 = y->m1; f_cpA1066(&x->m2[0], &y->m2[0]); f_cpA1066(&x->m2[1], &y->m2[1]); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1067(&x->m6, &y->m6); x->m7 = y->m7; f_cpA904(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; f_cpA232(&x->m11, &y->m11); };
int f_cmpA1068(const struct A1068 *x, const struct A1068 *y) { return f_cmpA1065(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA1066(&x->m2[0], &y->m2[0]) && f_cmpA1066(&x->m2[1], &y->m2[1]) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1067(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA904(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA232(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1068() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1068), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1068, m0), 1, f_touchdcstA1065());
		dcStructField(at, 's', offsetof(struct A1068, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1068, m2), 2, f_touchdcstA1066());
		dcStructField(at, 'j', offsetof(struct A1068, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1068, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1068, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1068, m6), 1, f_touchdcstA1067());
		dcStructField(at, 'c', offsetof(struct A1068, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1068, m8), 1, f_touchdcstA904());
		dcStructField(at, 'c', offsetof(struct A1068, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1068, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1068, m11), 1, f_touchdcstA232());
		dcCloseStruct(at);
	}
	return at;
};
/* {pcjlsdcjl} */
struct A1069 { p m0; c m1; j m2; l m3; s m4; d m5; c m6; j m7; l m8; };
void f_cpA1069(struct A1069 *x, const struct A1069 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1069(const struct A1069 *x, const struct A1069 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1069() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1069), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1069, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1069, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1069, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1069, m3), 1);
		dcStructField(at, 's', offsetof(struct A1069, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1069, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1069, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1069, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1069, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <idclc> */
union  A1070 { i m0; d m1; c m2; l m3; c m4; };
void f_cpA1070(union  A1070 *x, const union  A1070 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1070(const union  A1070 *x, const union  A1070 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1070() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1070), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1070, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1070, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1070, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1070, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1070, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ddif{pcjlsdcjl}pi<idclc>ijfs} */
struct A1071 { d m0; d m1; i m2; f m3; struct A1069 m4; p m5; i m6; union  A1070 m7; i m8; j m9; f m10; s m11; };
void f_cpA1071(struct A1071 *x, const struct A1071 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1069(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA1070(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1071(const struct A1071 *x, const struct A1071 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1069(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1070(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1071() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1071), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1071, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1071, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1071, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1071, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1071, m4), 1, f_touchdcstA1069());
		dcStructField(at, 'p', offsetof(struct A1071, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1071, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1071, m7), 1, f_touchdcstA1070());
		dcStructField(at, 'i', offsetof(struct A1071, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1071, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1071, m10), 1);
		dcStructField(at, 's', offsetof(struct A1071, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pdjssd} */
struct A1072 { p m0; d m1; j m2; s m3; s m4; d m5; };
void f_cpA1072(struct A1072 *x, const struct A1072 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1072(const struct A1072 *x, const struct A1072 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1072() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1072), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1072, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1072, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1072, m2), 1);
		dcStructField(at, 's', offsetof(struct A1072, m3), 1);
		dcStructField(at, 's', offsetof(struct A1072, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1072, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sdpllcdpdiji} */
struct A1073 { s m0; d m1; p m2; l m3; l m4; c m5; d m6; p m7; d m8; i m9; j m10; i m11; };
void f_cpA1073(struct A1073 *x, const struct A1073 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1073(const struct A1073 *x, const struct A1073 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1073() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1073), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1073, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1073, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1073, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1073, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1073, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1073, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1073, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1073, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1073, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1073, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1073, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1073, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lpcslp{sdpllcdpdiji}jcdis} */
struct A1074 { l m0; p m1; c m2; s m3; l m4; p m5; struct A1073 m6; j m7; c m8; d m9; i m10; s m11; };
void f_cpA1074(struct A1074 *x, const struct A1074 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1073(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1074(const struct A1074 *x, const struct A1074 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1073(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1074() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1074), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1074, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1074, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1074, m2), 1);
		dcStructField(at, 's', offsetof(struct A1074, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1074, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1074, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1074, m6), 1, f_touchdcstA1073());
		dcStructField(at, 'j', offsetof(struct A1074, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1074, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1074, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1074, m10), 1);
		dcStructField(at, 's', offsetof(struct A1074, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fplpsc[6]icjfcj} */
struct A1075 { f m0; p m1; l m2; p m3; s m4; c m5[6]; i m6; c m7; j m8; f m9; c m10; j m11; };
void f_cpA1075(struct A1075 *x, const struct A1075 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1075(const struct A1075 *x, const struct A1075 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1075() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1075), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1075, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1075, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1075, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1075, m3), 1);
		dcStructField(at, 's', offsetof(struct A1075, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1075, m5), 6);
		dcStructField(at, 'i', offsetof(struct A1075, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1075, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1075, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1075, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1075, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1075, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{fplpsc[6]icjfcj}sfs> */
union  A1076 { struct A1075 m0; s m1; f m2; s m3; };
void f_cpA1076(union  A1076 *x, const union  A1076 *y) { f_cpA1075(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1076(const union  A1076 *x, const union  A1076 *y) { return f_cmpA1075(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1076() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1076), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1076, m0), 1, f_touchdcstA1075());
		dcStructField(at, 's', offsetof(union  A1076, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1076, m2), 1);
		dcStructField(at, 's', offsetof(union  A1076, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{ddif{pcjlsdcjl}pi<idclc>ijfs}ffc{pdjssd}{lpcslp{sdpllcdpdiji}jcdis}s<{fplpsc[6]icjfcj}sfs>f} */
struct A1077 { struct A1071 m0; f m1; f m2; c m3; struct A1072 m4; struct A1074 m5; s m6; union  A1076 m7; f m8; };
void f_cpA1077(struct A1077 *x, const struct A1077 *y) { f_cpA1071(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1072(&x->m4, &y->m4); f_cpA1074(&x->m5, &y->m5); x->m6 = y->m6; f_cpA1076(&x->m7, &y->m7); x->m8 = y->m8; };
int f_cmpA1077(const struct A1077 *x, const struct A1077 *y) { return f_cmpA1071(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1072(&x->m4, &y->m4) && f_cmpA1074(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA1076(&x->m7, &y->m7) && x->m8 == y->m8; };
DCstruct* f_touchdcstA1077() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1077), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1077, m0), 1, f_touchdcstA1071());
		dcStructField(at, 'f', offsetof(struct A1077, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1077, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1077, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1077, m4), 1, f_touchdcstA1072());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1077, m5), 1, f_touchdcstA1074());
		dcStructField(at, 's', offsetof(struct A1077, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1077, m7), 1, f_touchdcstA1076());
		dcStructField(at, 'f', offsetof(struct A1077, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fjipflpcd> */
union  A1078 { f m0; j m1; i m2; p m3; f m4; l m5; p m6; c m7; d m8; };
void f_cpA1078(union  A1078 *x, const union  A1078 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1078(const union  A1078 *x, const union  A1078 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1078() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1078), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1078, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1078, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1078, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1078, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1078, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1078, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1078, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1078, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1078, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pf> */
union  A1079 { p m0; f m1; };
void f_cpA1079(union  A1079 *x, const union  A1079 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1079(const union  A1079 *x, const union  A1079 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1079() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1079), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1079, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1079, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djps<pf>} */
struct A1080 { d m0; j m1; p m2; s m3; union  A1079 m4; };
void f_cpA1080(struct A1080 *x, const struct A1080 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1079(&x->m4, &y->m4); };
int f_cmpA1080(const struct A1080 *x, const struct A1080 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1079(&x->m4, &y->m4); };
DCstruct* f_touchdcstA1080() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1080), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1080, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1080, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1080, m2), 1);
		dcStructField(at, 's', offsetof(struct A1080, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1080, m4), 1, f_touchdcstA1079());
		dcCloseStruct(at);
	}
	return at;
};
/* <fcc[10]didcffl[1]j[10]l> */
union  A1081 { f m0; c m1; c m2[10]; d m3; i m4; d m5; c m6; f m7; f m8; l m9[1]; j m10[10]; l m11; };
void f_cpA1081(union  A1081 *x, const union  A1081 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m10[8] = y->m10[8]; x->m10[9] = y->m10[9]; x->m11 = y->m11; };
int f_cmpA1081(const union  A1081 *x, const union  A1081 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m10[8] == y->m10[8] && x->m10[9] == y->m10[9] && x->m11 == y->m11; };
DCstruct* f_touchdcstA1081() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1081), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1081, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1081, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1081, m2), 10);
		dcStructField(at, 'd', offsetof(union  A1081, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1081, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1081, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1081, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1081, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1081, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1081, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1081, m10), 10);
		dcStructField(at, 'l', offsetof(union  A1081, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lp[1]cfsfi> */
union  A1082 { l m0; p m1[1]; c m2; f m3; s m4; f m5; i m6; };
void f_cpA1082(union  A1082 *x, const union  A1082 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1082(const union  A1082 *x, const union  A1082 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1082() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1082), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1082, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1082, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1082, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1082, m3), 1);
		dcStructField(at, 's', offsetof(union  A1082, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1082, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1082, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <s<lp[1]cfsfi>jsf> */
union  A1083 { s m0; union  A1082 m1; j m2; s m3; f m4; };
void f_cpA1083(union  A1083 *x, const union  A1083 *y) { x->m0 = y->m0; f_cpA1082(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1083(const union  A1083 *x, const union  A1083 *y) { return x->m0 == y->m0 && f_cmpA1082(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1083() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1083), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1083, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1083, m1), 1, f_touchdcstA1082());
		dcStructField(at, 'j', offsetof(union  A1083, m2), 1);
		dcStructField(at, 's', offsetof(union  A1083, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1083, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {idlspcliiscj} */
struct A1084 { i m0; d m1; l m2; s m3; p m4; c m5; l m6; i m7; i m8; s m9; c m10; j m11; };
void f_cpA1084(struct A1084 *x, const struct A1084 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1084(const struct A1084 *x, const struct A1084 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1084() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1084), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1084, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1084, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1084, m2), 1);
		dcStructField(at, 's', offsetof(struct A1084, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1084, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1084, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1084, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1084, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1084, m8), 1);
		dcStructField(at, 's', offsetof(struct A1084, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1084, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1084, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ic> */
union  A1085 { i m0; c m1; };
void f_cpA1085(union  A1085 *x, const union  A1085 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1085(const union  A1085 *x, const union  A1085 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1085() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1085), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1085, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1085, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {scciffsdifcl} */
struct A1086 { s m0; c m1; c m2; i m3; f m4; f m5; s m6; d m7; i m8; f m9; c m10; l m11; };
void f_cpA1086(struct A1086 *x, const struct A1086 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1086(const struct A1086 *x, const struct A1086 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1086() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1086), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1086, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1086, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1086, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1086, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1086, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1086, m5), 1);
		dcStructField(at, 's', offsetof(struct A1086, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1086, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1086, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1086, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1086, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1086, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iispfp> */
union  A1087 { i m0; i m1; s m2; p m3; f m4; p m5; };
void f_cpA1087(union  A1087 *x, const union  A1087 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1087(const union  A1087 *x, const union  A1087 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1087() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1087), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1087, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1087, m1), 1);
		dcStructField(at, 's', offsetof(union  A1087, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1087, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1087, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1087, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sj{idlspcliiscj}<ic>s{scciffsdifcl}f<iispfp>} */
struct A1088 { s m0; j m1; struct A1084 m2; union  A1085 m3; s m4; struct A1086 m5; f m6; union  A1087 m7; };
void f_cpA1088(struct A1088 *x, const struct A1088 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1084(&x->m2, &y->m2); f_cpA1085(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1086(&x->m5, &y->m5); x->m6 = y->m6; f_cpA1087(&x->m7, &y->m7); };
int f_cmpA1088(const struct A1088 *x, const struct A1088 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1084(&x->m2, &y->m2) && f_cmpA1085(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1086(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA1087(&x->m7, &y->m7); };
DCstruct* f_touchdcstA1088() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1088), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1088, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1088, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1088, m2), 1, f_touchdcstA1084());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1088, m3), 1, f_touchdcstA1085());
		dcStructField(at, 's', offsetof(struct A1088, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1088, m5), 1, f_touchdcstA1086());
		dcStructField(at, 'f', offsetof(struct A1088, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1088, m7), 1, f_touchdcstA1087());
		dcCloseStruct(at);
	}
	return at;
};
/* {{sj{idlspcliiscj}<ic>s{scciffsdifcl}f<iispfp>}c[2]lcppsdjspp} */
struct A1089 { struct A1088 m0; c m1[2]; l m2; c m3; p m4; p m5; s m6; d m7; j m8; s m9; p m10; p m11; };
void f_cpA1089(struct A1089 *x, const struct A1089 *y) { f_cpA1088(&x->m0, &y->m0); x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1089(const struct A1089 *x, const struct A1089 *y) { return f_cmpA1088(&x->m0, &y->m0) && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1089() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1089), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1089, m0), 1, f_touchdcstA1088());
		dcStructField(at, 'c', offsetof(struct A1089, m1), 2);
		dcStructField(at, 'l', offsetof(struct A1089, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1089, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1089, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1089, m5), 1);
		dcStructField(at, 's', offsetof(struct A1089, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1089, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1089, m8), 1);
		dcStructField(at, 's', offsetof(struct A1089, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1089, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1089, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sdlfij} */
struct A1090 { s m0; d m1; l m2; f m3; i m4; j m5; };
void f_cpA1090(struct A1090 *x, const struct A1090 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1090(const struct A1090 *x, const struct A1090 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1090() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1090), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1090, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1090, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1090, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1090, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1090, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1090, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{sdlfij}sld> */
union  A1091 { struct A1090 m0; s m1; l m2; d m3; };
void f_cpA1091(union  A1091 *x, const union  A1091 *y) { f_cpA1090(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1091(const union  A1091 *x, const union  A1091 *y) { return f_cmpA1090(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1091() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1091), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1091, m0), 1, f_touchdcstA1090());
		dcStructField(at, 's', offsetof(union  A1091, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1091, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1091, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ljjlcslsisds> */
union  A1092 { l m0; j m1; j m2; l m3; c m4; s m5; l m6; s m7; i m8; s m9; d m10; s m11; };
void f_cpA1092(union  A1092 *x, const union  A1092 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1092(const union  A1092 *x, const union  A1092 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1092() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1092), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1092, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1092, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1092, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1092, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1092, m4), 1);
		dcStructField(at, 's', offsetof(union  A1092, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1092, m6), 1);
		dcStructField(at, 's', offsetof(union  A1092, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1092, m8), 1);
		dcStructField(at, 's', offsetof(union  A1092, m9), 1);
		dcStructField(at, 'd', offsetof(union  A1092, m10), 1);
		dcStructField(at, 's', offsetof(union  A1092, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jlicsdjid[8]jji> */
union  A1093 { j m0; l m1; i m2; c m3; s m4; d m5; j m6; i m7; d m8[8]; j m9; j m10; i m11; };
void f_cpA1093(union  A1093 *x, const union  A1093 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1093(const union  A1093 *x, const union  A1093 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1093() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1093), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1093, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1093, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1093, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1093, m3), 1);
		dcStructField(at, 's', offsetof(union  A1093, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1093, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1093, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1093, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1093, m8), 8);
		dcStructField(at, 'j', offsetof(union  A1093, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1093, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1093, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p[8]lifdl} */
struct A1094 { p m0[8]; l m1; i m2; f m3; d m4; l m5; };
void f_cpA1094(struct A1094 *x, const struct A1094 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1094(const struct A1094 *x, const struct A1094 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1094() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1094), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1094, m0), 8);
		dcStructField(at, 'l', offsetof(struct A1094, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1094, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1094, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1094, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1094, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jcpij> */
union  A1095 { j m0; c m1; p m2; i m3; j m4; };
void f_cpA1095(union  A1095 *x, const union  A1095 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1095(const union  A1095 *x, const union  A1095 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1095() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1095), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1095, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1095, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1095, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1095, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1095, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fllscp[12]} */
struct A1096 { f m0; l m1; l m2; s m3; c m4; p m5[12]; };
void f_cpA1096(struct A1096 *x, const struct A1096 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m5[11] = y->m5[11]; };
int f_cmpA1096(const struct A1096 *x, const struct A1096 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m5[11] == y->m5[11]; };
DCstruct* f_touchdcstA1096() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1096), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1096, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1096, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1096, m2), 1);
		dcStructField(at, 's', offsetof(struct A1096, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1096, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1096, m5), 12);
		dcCloseStruct(at);
	}
	return at;
};
/* <cfcis> */
union  A1097 { c m0; f m1; c m2; i m3; s m4; };
void f_cpA1097(union  A1097 *x, const union  A1097 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1097(const union  A1097 *x, const union  A1097 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1097() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1097), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1097, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1097, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1097, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1097, m3), 1);
		dcStructField(at, 's', offsetof(union  A1097, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<ljjlcslsisds>f<jlicsdjid[8]jji>{p[8]lifdl}i<jcpij>fj{fllscp[12]}c<cfcis>f} */
struct A1098 { union  A1092 m0; f m1; union  A1093 m2; struct A1094 m3; i m4; union  A1095 m5; f m6; j m7; struct A1096 m8; c m9; union  A1097 m10; f m11; };
void f_cpA1098(struct A1098 *x, const struct A1098 *y) { f_cpA1092(&x->m0, &y->m0); x->m1 = y->m1; f_cpA1093(&x->m2, &y->m2); f_cpA1094(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1095(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; f_cpA1096(&x->m8, &y->m8); x->m9 = y->m9; f_cpA1097(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1098(const struct A1098 *x, const struct A1098 *y) { return f_cmpA1092(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA1093(&x->m2, &y->m2) && f_cmpA1094(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1095(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1096(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA1097(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1098() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1098), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1098, m0), 1, f_touchdcstA1092());
		dcStructField(at, 'f', offsetof(struct A1098, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1098, m2), 1, f_touchdcstA1093());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1098, m3), 1, f_touchdcstA1094());
		dcStructField(at, 'i', offsetof(struct A1098, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1098, m5), 1, f_touchdcstA1095());
		dcStructField(at, 'f', offsetof(struct A1098, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1098, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1098, m8), 1, f_touchdcstA1096());
		dcStructField(at, 'c', offsetof(struct A1098, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1098, m10), 1, f_touchdcstA1097());
		dcStructField(at, 'f', offsetof(struct A1098, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dspdllcp> */
union  A1099 { d m0; s m1; p m2; d m3; l m4; l m5; c m6; p m7; };
void f_cpA1099(union  A1099 *x, const union  A1099 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1099(const union  A1099 *x, const union  A1099 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1099() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1099), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1099, m0), 1);
		dcStructField(at, 's', offsetof(union  A1099, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1099, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1099, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1099, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1099, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1099, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1099, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ifpfsdds[1]splj> */
union  A1100 { i m0; f m1; p m2; f m3; s m4; d m5; d m6; s m7[1]; s m8; p m9; l m10; j m11; };
void f_cpA1100(union  A1100 *x, const union  A1100 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1100(const union  A1100 *x, const union  A1100 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1100() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1100), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1100, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1100, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1100, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1100, m3), 1);
		dcStructField(at, 's', offsetof(union  A1100, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1100, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1100, m6), 1);
		dcStructField(at, 's', offsetof(union  A1100, m7), 1);
		dcStructField(at, 's', offsetof(union  A1100, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1100, m9), 1);
		dcStructField(at, 'l', offsetof(union  A1100, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1100, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dcif} */
struct A1101 { d m0; c m1; i m2; f m3; };
void f_cpA1101(struct A1101 *x, const struct A1101 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1101(const struct A1101 *x, const struct A1101 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1101() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1101), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1101, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1101, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1101, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1101, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <c<ifpfsdds[1]splj>sii<i>cc{dcif}cfd> */
union  A1102 { c m0; union  A1100 m1; s m2; i m3; i m4; union  A62 m5; c m6; c m7; struct A1101 m8; c m9; f m10; d m11; };
void f_cpA1102(union  A1102 *x, const union  A1102 *y) { x->m0 = y->m0; f_cpA1100(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA62(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; f_cpA1101(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1102(const union  A1102 *x, const union  A1102 *y) { return x->m0 == y->m0 && f_cmpA1100(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA62(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1101(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1102() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1102), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1102, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1102, m1), 1, f_touchdcstA1100());
		dcStructField(at, 's', offsetof(union  A1102, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1102, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1102, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1102, m5), 1, f_touchdcstA62());
		dcStructField(at, 'c', offsetof(union  A1102, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1102, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1102, m8), 1, f_touchdcstA1101());
		dcStructField(at, 'c', offsetof(union  A1102, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1102, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1102, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jfijifisdli[6]s> */
union  A1103 { j m0; f m1; i m2; j m3; i m4; f m5; i m6; s m7; d m8; l m9; i m10[6]; s m11; };
void f_cpA1103(union  A1103 *x, const union  A1103 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m11 = y->m11; };
int f_cmpA1103(const union  A1103 *x, const union  A1103 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m11 == y->m11; };
DCstruct* f_touchdcstA1103() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1103), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1103, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1103, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1103, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1103, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1103, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1103, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1103, m6), 1);
		dcStructField(at, 's', offsetof(union  A1103, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1103, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1103, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1103, m10), 6);
		dcStructField(at, 's', offsetof(union  A1103, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <isiilfp> */
union  A1104 { i m0; s m1; i m2; i m3; l m4; f m5; p m6; };
void f_cpA1104(union  A1104 *x, const union  A1104 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1104(const union  A1104 *x, const union  A1104 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1104() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1104), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1104, m0), 1);
		dcStructField(at, 's', offsetof(union  A1104, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1104, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1104, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1104, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1104, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1104, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pd<jfijifisdli[6]s>ididcijj<isiilfp>> */
union  A1105 { p m0; d m1; union  A1103 m2; i m3; d m4; i m5; d m6; c m7; i m8; j m9; j m10; union  A1104 m11; };
void f_cpA1105(union  A1105 *x, const union  A1105 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1103(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1104(&x->m11, &y->m11); };
int f_cmpA1105(const union  A1105 *x, const union  A1105 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1103(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1104(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1105() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1105), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1105, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1105, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1105, m2), 1, f_touchdcstA1103());
		dcStructField(at, 'i', offsetof(union  A1105, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1105, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1105, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1105, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1105, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1105, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1105, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1105, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1105, m11), 1, f_touchdcstA1104());
		dcCloseStruct(at);
	}
	return at;
};
/* {cd{<ljjlcslsisds>f<jlicsdjid[8]jji>{p[8]lifdl}i<jcpij>fj{fllscp[12]}c<cfcis>f}d<dspdllcp><c<ifpfsdds[1]splj>sii<i>cc{dcif}cfd>pll<pd<jfijifisdli[6]s>ididcijj<isiilfp>>{l}p} */
struct A1106 { c m0; d m1; struct A1098 m2; d m3; union  A1099 m4; union  A1102 m5; p m6; l m7; l m8; union  A1105 m9; struct A141 m10; p m11; };
void f_cpA1106(struct A1106 *x, const struct A1106 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1098(&x->m2, &y->m2); x->m3 = y->m3; f_cpA1099(&x->m4, &y->m4); f_cpA1102(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1105(&x->m9, &y->m9); f_cpA141(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1106(const struct A1106 *x, const struct A1106 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1098(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA1099(&x->m4, &y->m4) && f_cmpA1102(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1105(&x->m9, &y->m9) && f_cmpA141(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1106() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1106), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1106, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1106, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1106, m2), 1, f_touchdcstA1098());
		dcStructField(at, 'd', offsetof(struct A1106, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1106, m4), 1, f_touchdcstA1099());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1106, m5), 1, f_touchdcstA1102());
		dcStructField(at, 'p', offsetof(struct A1106, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1106, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1106, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1106, m9), 1, f_touchdcstA1105());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1106, m10), 1, f_touchdcstA141());
		dcStructField(at, 'p', offsetof(struct A1106, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lfc[7]ipisf[12]ccsf> */
union  A1107 { l m0; f m1; c m2[7]; i m3; p m4; i m5; s m6; f m7[12]; c m8; c m9; s m10; f m11; };
void f_cpA1107(union  A1107 *x, const union  A1107 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; x->m7[7] = y->m7[7]; x->m7[8] = y->m7[8]; x->m7[9] = y->m7[9]; x->m7[10] = y->m7[10]; x->m7[11] = y->m7[11]; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1107(const union  A1107 *x, const union  A1107 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6] && x->m7[7] == y->m7[7] && x->m7[8] == y->m7[8] && x->m7[9] == y->m7[9] && x->m7[10] == y->m7[10] && x->m7[11] == y->m7[11] && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1107() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1107), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1107, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1107, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1107, m2), 7);
		dcStructField(at, 'i', offsetof(union  A1107, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1107, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1107, m5), 1);
		dcStructField(at, 's', offsetof(union  A1107, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1107, m7), 12);
		dcStructField(at, 'c', offsetof(union  A1107, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1107, m9), 1);
		dcStructField(at, 's', offsetof(union  A1107, m10), 1);
		dcStructField(at, 'f', offsetof(union  A1107, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dpssds} */
struct A1108 { d m0; p m1; s m2; s m3; d m4; s m5; };
void f_cpA1108(struct A1108 *x, const struct A1108 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1108(const struct A1108 *x, const struct A1108 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1108() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1108), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1108, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1108, m1), 1);
		dcStructField(at, 's', offsetof(struct A1108, m2), 1);
		dcStructField(at, 's', offsetof(struct A1108, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1108, m4), 1);
		dcStructField(at, 's', offsetof(struct A1108, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<lfc[7]ipisf[12]ccsf>ijicccp{dpssds}> */
union  A1109 { union  A1107 m0; i m1; j m2; i m3; c m4; c m5; c m6; p m7; struct A1108 m8; };
void f_cpA1109(union  A1109 *x, const union  A1109 *y) { f_cpA1107(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1108(&x->m8, &y->m8); };
int f_cmpA1109(const union  A1109 *x, const union  A1109 *y) { return f_cmpA1107(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1108(&x->m8, &y->m8); };
DCstruct* f_touchdcstA1109() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1109), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1109, m0), 1, f_touchdcstA1107());
		dcStructField(at, 'i', offsetof(union  A1109, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1109, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1109, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1109, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1109, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1109, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1109, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1109, m8), 1, f_touchdcstA1108());
		dcCloseStruct(at);
	}
	return at;
};
/* {ls} */
struct A1110 { l m0; s m1; };
void f_cpA1110(struct A1110 *x, const struct A1110 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1110(const struct A1110 *x, const struct A1110 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1110() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1110), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1110, m0), 1);
		dcStructField(at, 's', offsetof(struct A1110, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fps[12]s{ls}pdjd> */
union  A1111 { f m0; p m1; s m2[12]; s m3; struct A1110 m4; p m5; d m6; j m7; d m8; };
void f_cpA1111(union  A1111 *x, const union  A1111 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m3 = y->m3; f_cpA1110(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1111(const union  A1111 *x, const union  A1111 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m3 == y->m3 && f_cmpA1110(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1111() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1111), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1111, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1111, m1), 1);
		dcStructField(at, 's', offsetof(union  A1111, m2), 12);
		dcStructField(at, 's', offsetof(union  A1111, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1111, m4), 1, f_touchdcstA1110());
		dcStructField(at, 'p', offsetof(union  A1111, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1111, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1111, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1111, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {js<<lfc[7]ipisf[12]ccsf>ijicccp{dpssds}>fljcff<fps[12]s{ls}pdjd>cs} */
struct A1112 { j m0; s m1; union  A1109 m2; f m3; l m4; j m5; c m6; f m7; f m8; union  A1111 m9; c m10; s m11; };
void f_cpA1112(struct A1112 *x, const struct A1112 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1109(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1111(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1112(const struct A1112 *x, const struct A1112 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1109(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1111(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1112() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1112), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1112, m0), 1);
		dcStructField(at, 's', offsetof(struct A1112, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1112, m2), 1, f_touchdcstA1109());
		dcStructField(at, 'f', offsetof(struct A1112, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1112, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1112, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1112, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1112, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1112, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1112, m9), 1, f_touchdcstA1111());
		dcStructField(at, 'c', offsetof(struct A1112, m10), 1);
		dcStructField(at, 's', offsetof(struct A1112, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <i[10]> */
union  A1113 { i m0[10]; };
void f_cpA1113(union  A1113 *x, const union  A1113 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; };
int f_cmpA1113(const union  A1113 *x, const union  A1113 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9]; };
DCstruct* f_touchdcstA1113() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A1113), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1113, m0), 10);
		dcCloseStruct(at);
	}
	return at;
};
/* {ilsd} */
struct A1114 { i m0; l m1; s m2; d m3; };
void f_cpA1114(struct A1114 *x, const struct A1114 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1114(const struct A1114 *x, const struct A1114 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1114() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1114), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1114, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1114, m1), 1);
		dcStructField(at, 's', offsetof(struct A1114, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1114, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ddcljdccdcci> */
union  A1115 { d m0; d m1; c m2; l m3; j m4; d m5; c m6; c m7; d m8; c m9; c m10; i m11; };
void f_cpA1115(union  A1115 *x, const union  A1115 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1115(const union  A1115 *x, const union  A1115 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1115() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1115), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1115, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1115, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1115, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1115, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1115, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1115, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1115, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1115, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1115, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1115, m9), 1);
		dcStructField(at, 'c', offsetof(union  A1115, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1115, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <filpsslc[3]fifi> */
union  A1116 { f m0; i m1; l m2; p m3; s m4; s m5; l m6; c m7[3]; f m8; i m9; f m10; i m11; };
void f_cpA1116(union  A1116 *x, const union  A1116 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1116(const union  A1116 *x, const union  A1116 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1116() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1116), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1116, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1116, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1116, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1116, m3), 1);
		dcStructField(at, 's', offsetof(union  A1116, m4), 1);
		dcStructField(at, 's', offsetof(union  A1116, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1116, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1116, m7), 3);
		dcStructField(at, 'f', offsetof(union  A1116, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1116, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1116, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1116, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dpldpcdispsj> */
union  A1117 { d m0; p m1; l m2; d m3; p m4; c m5; d m6; i m7; s m8; p m9; s m10; j m11; };
void f_cpA1117(union  A1117 *x, const union  A1117 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1117(const union  A1117 *x, const union  A1117 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1117() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1117), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1117, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1117, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1117, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1117, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1117, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1117, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1117, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1117, m7), 1);
		dcStructField(at, 's', offsetof(union  A1117, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1117, m9), 1);
		dcStructField(at, 's', offsetof(union  A1117, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1117, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {s{ilsd}<ddcljdccdcci><filpsslc[3]fifi>csjlspj<dpldpcdispsj>} */
struct A1118 { s m0; struct A1114 m1; union  A1115 m2; union  A1116 m3; c m4; s m5; j m6; l m7; s m8; p m9; j m10; union  A1117 m11; };
void f_cpA1118(struct A1118 *x, const struct A1118 *y) { x->m0 = y->m0; f_cpA1114(&x->m1, &y->m1); f_cpA1115(&x->m2, &y->m2); f_cpA1116(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1117(&x->m11, &y->m11); };
int f_cmpA1118(const struct A1118 *x, const struct A1118 *y) { return x->m0 == y->m0 && f_cmpA1114(&x->m1, &y->m1) && f_cmpA1115(&x->m2, &y->m2) && f_cmpA1116(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1117(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1118() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1118), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1118, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1118, m1), 1, f_touchdcstA1114());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1118, m2), 1, f_touchdcstA1115());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1118, m3), 1, f_touchdcstA1116());
		dcStructField(at, 'c', offsetof(struct A1118, m4), 1);
		dcStructField(at, 's', offsetof(struct A1118, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1118, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1118, m7), 1);
		dcStructField(at, 's', offsetof(struct A1118, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1118, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1118, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1118, m11), 1, f_touchdcstA1117());
		dcCloseStruct(at);
	}
	return at;
};
/* <pjdcd{il}fl> */
union  A1119 { p m0; j m1; d m2; c m3; d m4; struct A854 m5; f m6; l m7; };
void f_cpA1119(union  A1119 *x, const union  A1119 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA854(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1119(const union  A1119 *x, const union  A1119 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA854(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1119() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1119), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1119, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1119, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1119, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1119, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1119, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1119, m5), 1, f_touchdcstA854());
		dcStructField(at, 'f', offsetof(union  A1119, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1119, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jfcp[6]pf{s{ilsd}<ddcljdccdcci><filpsslc[3]fifi>csjlspj<dpldpcdispsj>}<pjdcd{il}fl>dfs[15]j> */
union  A1120 { j m0; f m1; c m2; p m3[6]; p m4; f m5; struct A1118 m6; union  A1119 m7; d m8; f m9; s m10[15]; j m11; };
void f_cpA1120(union  A1120 *x, const union  A1120 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m4 = y->m4; x->m5 = y->m5; f_cpA1118(&x->m6, &y->m6); f_cpA1119(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m10[8] = y->m10[8]; x->m10[9] = y->m10[9]; x->m10[10] = y->m10[10]; x->m10[11] = y->m10[11]; x->m10[12] = y->m10[12]; x->m10[13] = y->m10[13]; x->m10[14] = y->m10[14]; x->m11 = y->m11; };
int f_cmpA1120(const union  A1120 *x, const union  A1120 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1118(&x->m6, &y->m6) && f_cmpA1119(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m10[8] == y->m10[8] && x->m10[9] == y->m10[9] && x->m10[10] == y->m10[10] && x->m10[11] == y->m10[11] && x->m10[12] == y->m10[12] && x->m10[13] == y->m10[13] && x->m10[14] == y->m10[14] && x->m11 == y->m11; };
DCstruct* f_touchdcstA1120() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1120), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1120, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1120, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1120, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1120, m3), 6);
		dcStructField(at, 'p', offsetof(union  A1120, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1120, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1120, m6), 1, f_touchdcstA1118());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1120, m7), 1, f_touchdcstA1119());
		dcStructField(at, 'd', offsetof(union  A1120, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1120, m9), 1);
		dcStructField(at, 's', offsetof(union  A1120, m10), 15);
		dcStructField(at, 'j', offsetof(union  A1120, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lilpj> */
union  A1121 { l m0; i m1; l m2; p m3; j m4; };
void f_cpA1121(union  A1121 *x, const union  A1121 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1121(const union  A1121 *x, const union  A1121 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1121() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1121), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1121, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1121, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1121, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1121, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1121, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ic<lilpj>sfspsdjll} */
struct A1122 { i m0; c m1; union  A1121 m2; s m3; f m4; s m5; p m6; s m7; d m8; j m9; l m10; l m11; };
void f_cpA1122(struct A1122 *x, const struct A1122 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1121(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1122(const struct A1122 *x, const struct A1122 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1121(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1122() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1122), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1122, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1122, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1122, m2), 1, f_touchdcstA1121());
		dcStructField(at, 's', offsetof(struct A1122, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1122, m4), 1);
		dcStructField(at, 's', offsetof(struct A1122, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1122, m6), 1);
		dcStructField(at, 's', offsetof(struct A1122, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1122, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1122, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1122, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1122, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{ic<lilpj>sfspsdjll}lfislssplpc> */
union  A1123 { struct A1122 m0; l m1; f m2; i m3; s m4; l m5; s m6; s m7; p m8; l m9; p m10; c m11; };
void f_cpA1123(union  A1123 *x, const union  A1123 *y) { f_cpA1122(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1123(const union  A1123 *x, const union  A1123 *y) { return f_cmpA1122(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1123() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1123), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1123, m0), 1, f_touchdcstA1122());
		dcStructField(at, 'l', offsetof(union  A1123, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1123, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1123, m3), 1);
		dcStructField(at, 's', offsetof(union  A1123, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1123, m5), 1);
		dcStructField(at, 's', offsetof(union  A1123, m6), 1);
		dcStructField(at, 's', offsetof(union  A1123, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1123, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1123, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1123, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1123, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p[11]llpcsfc> */
union  A1124 { p m0[11]; l m1; l m2; p m3; c m4; s m5; f m6; c m7; };
void f_cpA1124(union  A1124 *x, const union  A1124 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1124(const union  A1124 *x, const union  A1124 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1124() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1124), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1124, m0), 11);
		dcStructField(at, 'l', offsetof(union  A1124, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1124, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1124, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1124, m4), 1);
		dcStructField(at, 's', offsetof(union  A1124, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1124, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1124, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cpicccffpdip} */
struct A1125 { c m0; p m1; i m2; c m3; c m4; c m5; f m6; f m7; p m8; d m9; i m10; p m11; };
void f_cpA1125(struct A1125 *x, const struct A1125 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1125(const struct A1125 *x, const struct A1125 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1125() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1125), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1125, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1125, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1125, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1125, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1125, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1125, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1125, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1125, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1125, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1125, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1125, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1125, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jfccs<p[11]llpcsfc>s<j>idj{cpicccffpdip}} */
struct A1126 { j m0; f m1; c m2; c m3; s m4; union  A1124 m5; s m6; union  A43 m7; i m8; d m9; j m10; struct A1125 m11; };
void f_cpA1126(struct A1126 *x, const struct A1126 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1124(&x->m5, &y->m5); x->m6 = y->m6; f_cpA43(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1125(&x->m11, &y->m11); };
int f_cmpA1126(const struct A1126 *x, const struct A1126 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1124(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA43(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1125(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1126() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1126), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1126, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1126, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1126, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1126, m3), 1);
		dcStructField(at, 's', offsetof(struct A1126, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1126, m5), 1, f_touchdcstA1124());
		dcStructField(at, 's', offsetof(struct A1126, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1126, m7), 1, f_touchdcstA43());
		dcStructField(at, 'i', offsetof(struct A1126, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1126, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1126, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1126, m11), 1, f_touchdcstA1125());
		dcCloseStruct(at);
	}
	return at;
};
/* <scpfddfjji{jfccs<p[11]llpcsfc>s<j>idj{cpicccffpdip}}> */
union  A1127 { s m0; c m1; p m2; f m3; d m4; d m5; f m6; j m7; j m8; i m9; struct A1126 m10; };
void f_cpA1127(union  A1127 *x, const union  A1127 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1126(&x->m10, &y->m10); };
int f_cmpA1127(const union  A1127 *x, const union  A1127 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1126(&x->m10, &y->m10); };
DCstruct* f_touchdcstA1127() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1127), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1127, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1127, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1127, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1127, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1127, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1127, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1127, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1127, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1127, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1127, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1127, m10), 1, f_touchdcstA1126());
		dcCloseStruct(at);
	}
	return at;
};
/* <idpc> */
union  A1128 { i m0; d m1; p m2; c m3; };
void f_cpA1128(union  A1128 *x, const union  A1128 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1128(const union  A1128 *x, const union  A1128 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1128() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1128), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1128, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1128, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1128, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1128, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<idpc>f<sc>l> */
union  A1129 { union  A1128 m0; f m1; union  A926 m2; l m3; };
void f_cpA1129(union  A1129 *x, const union  A1129 *y) { f_cpA1128(&x->m0, &y->m0); x->m1 = y->m1; f_cpA926(&x->m2, &y->m2); x->m3 = y->m3; };
int f_cmpA1129(const union  A1129 *x, const union  A1129 *y) { return f_cmpA1128(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA926(&x->m2, &y->m2) && x->m3 == y->m3; };
DCstruct* f_touchdcstA1129() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1129), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1129, m0), 1, f_touchdcstA1128());
		dcStructField(at, 'f', offsetof(union  A1129, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1129, m2), 1, f_touchdcstA926());
		dcStructField(at, 'l', offsetof(union  A1129, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dld} */
struct A1130 { d m0; l m1; d m2; };
void f_cpA1130(struct A1130 *x, const struct A1130 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1130(const struct A1130 *x, const struct A1130 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1130() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1130), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1130, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1130, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1130, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jilcijps[7]jc<sj>f} */
struct A1131 { j m0; i m1; l m2; c m3; i m4; j m5; p m6; s m7[7]; j m8; c m9; union  A923 m10; f m11; };
void f_cpA1131(struct A1131 *x, const struct A1131 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; x->m8 = y->m8; x->m9 = y->m9; f_cpA923(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1131(const struct A1131 *x, const struct A1131 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6] && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA923(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1131() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1131), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1131, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1131, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1131, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1131, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1131, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1131, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1131, m6), 1);
		dcStructField(at, 's', offsetof(struct A1131, m7), 7);
		dcStructField(at, 'j', offsetof(struct A1131, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1131, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1131, m10), 1, f_touchdcstA923());
		dcStructField(at, 'f', offsetof(struct A1131, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sfj[14]pijl> */
union  A1132 { s m0; f m1; j m2[14]; p m3; i m4; j m5; l m6; };
void f_cpA1132(union  A1132 *x, const union  A1132 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m2[13] = y->m2[13]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1132(const union  A1132 *x, const union  A1132 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m2[13] == y->m2[13] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1132() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1132), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1132, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1132, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1132, m2), 14);
		dcStructField(at, 'p', offsetof(union  A1132, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1132, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1132, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1132, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ddfssfl[8]s[15]pf} */
struct A1133 { d m0; d m1; f m2; s m3; s m4; f m5; l m6[8]; s m7[15]; p m8; f m9; };
void f_cpA1133(struct A1133 *x, const struct A1133 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; x->m7[7] = y->m7[7]; x->m7[8] = y->m7[8]; x->m7[9] = y->m7[9]; x->m7[10] = y->m7[10]; x->m7[11] = y->m7[11]; x->m7[12] = y->m7[12]; x->m7[13] = y->m7[13]; x->m7[14] = y->m7[14]; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1133(const struct A1133 *x, const struct A1133 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6] && x->m7[7] == y->m7[7] && x->m7[8] == y->m7[8] && x->m7[9] == y->m7[9] && x->m7[10] == y->m7[10] && x->m7[11] == y->m7[11] && x->m7[12] == y->m7[12] && x->m7[13] == y->m7[13] && x->m7[14] == y->m7[14] && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1133() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1133), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1133, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1133, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1133, m2), 1);
		dcStructField(at, 's', offsetof(struct A1133, m3), 1);
		dcStructField(at, 's', offsetof(struct A1133, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1133, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1133, m6), 8);
		dcStructField(at, 's', offsetof(struct A1133, m7), 15);
		dcStructField(at, 'p', offsetof(struct A1133, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1133, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<sfj[14]pijl>l{ddfssfl[8]s[15]pf}} */
struct A1134 { union  A1132 m0; l m1; struct A1133 m2; };
void f_cpA1134(struct A1134 *x, const struct A1134 *y) { f_cpA1132(&x->m0, &y->m0); x->m1 = y->m1; f_cpA1133(&x->m2, &y->m2); };
int f_cmpA1134(const struct A1134 *x, const struct A1134 *y) { return f_cmpA1132(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA1133(&x->m2, &y->m2); };
DCstruct* f_touchdcstA1134() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1134), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1134, m0), 1, f_touchdcstA1132());
		dcStructField(at, 'l', offsetof(struct A1134, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1134, m2), 1, f_touchdcstA1133());
		dcCloseStruct(at);
	}
	return at;
};
/* <{c}cildlsp{jilcijps[7]jc<sj>f}{<sfj[14]pijl>l{ddfssfl[8]s[15]pf}}ld> */
union  A1135 { struct A212 m0; c m1; i m2; l m3; d m4; l m5; s m6; p m7; struct A1131 m8; struct A1134 m9; l m10; d m11; };
void f_cpA1135(union  A1135 *x, const union  A1135 *y) { f_cpA212(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1131(&x->m8, &y->m8); f_cpA1134(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1135(const union  A1135 *x, const union  A1135 *y) { return f_cmpA212(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1131(&x->m8, &y->m8) && f_cmpA1134(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1135() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1135), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1135, m0), 1, f_touchdcstA212());
		dcStructField(at, 'c', offsetof(union  A1135, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1135, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1135, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1135, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1135, m5), 1);
		dcStructField(at, 's', offsetof(union  A1135, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1135, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1135, m8), 1, f_touchdcstA1131());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1135, m9), 1, f_touchdcstA1134());
		dcStructField(at, 'l', offsetof(union  A1135, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1135, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <clcfdfdip> */
union  A1136 { c m0; l m1; c m2; f m3; d m4; f m5; d m6; i m7; p m8; };
void f_cpA1136(union  A1136 *x, const union  A1136 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1136(const union  A1136 *x, const union  A1136 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1136() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1136), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1136, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1136, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1136, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1136, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1136, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1136, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1136, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1136, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1136, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {psijidici} */
struct A1137 { p m0; s m1; i m2; j m3; i m4; d m5; i m6; c m7; i m8; };
void f_cpA1137(struct A1137 *x, const struct A1137 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1137(const struct A1137 *x, const struct A1137 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1137() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1137), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1137, m0), 1);
		dcStructField(at, 's', offsetof(struct A1137, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1137, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1137, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1137, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1137, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1137, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1137, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1137, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {js{psijidici}} */
struct A1138 { j m0; s m1; struct A1137 m2; };
void f_cpA1138(struct A1138 *x, const struct A1138 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1137(&x->m2, &y->m2); };
int f_cmpA1138(const struct A1138 *x, const struct A1138 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1137(&x->m2, &y->m2); };
DCstruct* f_touchdcstA1138() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1138), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1138, m0), 1);
		dcStructField(at, 's', offsetof(struct A1138, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1138, m2), 1, f_touchdcstA1137());
		dcCloseStruct(at);
	}
	return at;
};
/* <sjcssj> */
union  A1139 { s m0; j m1; c m2; s m3; s m4; j m5; };
void f_cpA1139(union  A1139 *x, const union  A1139 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1139(const union  A1139 *x, const union  A1139 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1139() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1139), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1139, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1139, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1139, m2), 1);
		dcStructField(at, 's', offsetof(union  A1139, m3), 1);
		dcStructField(at, 's', offsetof(union  A1139, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1139, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dcjcdifilcfc> */
union  A1140 { d m0; c m1; j m2; c m3; d m4; i m5; f m6; i m7; l m8; c m9; f m10; c m11; };
void f_cpA1140(union  A1140 *x, const union  A1140 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1140(const union  A1140 *x, const union  A1140 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1140() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1140), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1140, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1140, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1140, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1140, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1140, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1140, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1140, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1140, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1140, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1140, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1140, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1140, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dcif[9]cdcljsif> */
union  A1141 { d m0; c m1; i m2; f m3[9]; c m4; d m5; c m6; l m7; j m8; s m9; i m10; f m11; };
void f_cpA1141(union  A1141 *x, const union  A1141 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1141(const union  A1141 *x, const union  A1141 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1141() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1141), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1141, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1141, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1141, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1141, m3), 9);
		dcStructField(at, 'c', offsetof(union  A1141, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1141, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1141, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1141, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1141, m8), 1);
		dcStructField(at, 's', offsetof(union  A1141, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1141, m10), 1);
		dcStructField(at, 'f', offsetof(union  A1141, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {i<sjcssj>c[4]<dcjcdifilcfc>d<dcif[9]cdcljsif>ll} */
struct A1142 { i m0; union  A1139 m1; c m2[4]; union  A1140 m3; d m4; union  A1141 m5; l m6; l m7; };
void f_cpA1142(struct A1142 *x, const struct A1142 *y) { x->m0 = y->m0; f_cpA1139(&x->m1, &y->m1); x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; f_cpA1140(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1141(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1142(const struct A1142 *x, const struct A1142 *y) { return x->m0 == y->m0 && f_cmpA1139(&x->m1, &y->m1) && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && f_cmpA1140(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1141(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1142() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1142), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1142, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1142, m1), 1, f_touchdcstA1139());
		dcStructField(at, 'c', offsetof(struct A1142, m2), 4);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1142, m3), 1, f_touchdcstA1140());
		dcStructField(at, 'd', offsetof(struct A1142, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1142, m5), 1, f_touchdcstA1141());
		dcStructField(at, 'l', offsetof(struct A1142, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1142, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sfpf} */
struct A1143 { s m0; f m1; p m2; f m3; };
void f_cpA1143(struct A1143 *x, const struct A1143 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1143(const struct A1143 *x, const struct A1143 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1143() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1143), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1143, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1143, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1143, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1143, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f{sfpf}lpidppcpff} */
struct A1144 { f m0; struct A1143 m1; l m2; p m3; i m4; d m5; p m6; p m7; c m8; p m9; f m10; f m11; };
void f_cpA1144(struct A1144 *x, const struct A1144 *y) { x->m0 = y->m0; f_cpA1143(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1144(const struct A1144 *x, const struct A1144 *y) { return x->m0 == y->m0 && f_cmpA1143(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1144() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1144), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1144, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1144, m1), 1, f_touchdcstA1143());
		dcStructField(at, 'l', offsetof(struct A1144, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1144, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1144, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1144, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1144, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1144, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1144, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1144, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1144, m10), 1);
		dcStructField(at, 'f', offsetof(struct A1144, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <c{js{psijidici}}dsdc{i<sjcssj>c[4]<dcjcdifilcfc>d<dcif[9]cdcljsif>ll}ffc{f{sfpf}lpidppcpff}l> */
union  A1145 { c m0; struct A1138 m1; d m2; s m3; d m4; c m5; struct A1142 m6; f m7; f m8; c m9; struct A1144 m10; l m11; };
void f_cpA1145(union  A1145 *x, const union  A1145 *y) { x->m0 = y->m0; f_cpA1138(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1142(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1144(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1145(const union  A1145 *x, const union  A1145 *y) { return x->m0 == y->m0 && f_cmpA1138(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1142(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1144(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1145() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1145), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1145, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1145, m1), 1, f_touchdcstA1138());
		dcStructField(at, 'd', offsetof(union  A1145, m2), 1);
		dcStructField(at, 's', offsetof(union  A1145, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1145, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1145, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1145, m6), 1, f_touchdcstA1142());
		dcStructField(at, 'f', offsetof(union  A1145, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1145, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1145, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1145, m10), 1, f_touchdcstA1144());
		dcStructField(at, 'l', offsetof(union  A1145, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ciciflf[8]liijl} */
struct A1146 { c m0; i m1; c m2; i m3; f m4; l m5; f m6[8]; l m7; i m8; i m9; j m10; l m11; };
void f_cpA1146(struct A1146 *x, const struct A1146 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1146(const struct A1146 *x, const struct A1146 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1146() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1146), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1146, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1146, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1146, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1146, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1146, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1146, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1146, m6), 8);
		dcStructField(at, 'l', offsetof(struct A1146, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1146, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1146, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1146, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1146, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sjddc{ciciflf[8]liijl}l<ii>iffc> */
union  A1147 { s m0; j m1; d m2; d m3; c m4; struct A1146 m5; l m6; union  A281 m7; i m8; f m9; f m10; c m11; };
void f_cpA1147(union  A1147 *x, const union  A1147 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1146(&x->m5, &y->m5); x->m6 = y->m6; f_cpA281(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1147(const union  A1147 *x, const union  A1147 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1146(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA281(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1147() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1147), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1147, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1147, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1147, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1147, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1147, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1147, m5), 1, f_touchdcstA1146());
		dcStructField(at, 'l', offsetof(union  A1147, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1147, m7), 1, f_touchdcstA281());
		dcStructField(at, 'i', offsetof(union  A1147, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1147, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1147, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1147, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iddfdfcsj} */
struct A1148 { i m0; d m1; d m2; f m3; d m4; f m5; c m6; s m7; j m8; };
void f_cpA1148(struct A1148 *x, const struct A1148 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1148(const struct A1148 *x, const struct A1148 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1148() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1148), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1148, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1148, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1148, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1148, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1148, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1148, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1148, m6), 1);
		dcStructField(at, 's', offsetof(struct A1148, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1148, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {clfdjdp} */
struct A1149 { c m0; l m1; f m2; d m3; j m4; d m5; p m6; };
void f_cpA1149(struct A1149 *x, const struct A1149 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1149(const struct A1149 *x, const struct A1149 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1149() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1149), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1149, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1149, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1149, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1149, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1149, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1149, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1149, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pj[8]clf} */
struct A1150 { p m0; j m1[8]; c m2; l m3; f m4; };
void f_cpA1150(struct A1150 *x, const struct A1150 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1150(const struct A1150 *x, const struct A1150 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1150() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1150), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1150, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1150, m1), 8);
		dcStructField(at, 'c', offsetof(struct A1150, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1150, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1150, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dd{clfdjdp}{pj[8]clf}[4]clissclc> */
union  A1151 { d m0; d m1; struct A1149 m2; struct A1150 m3[4]; c m4; l m5; i m6; s m7; s m8; c m9; l m10; c m11; };
void f_cpA1151(union  A1151 *x, const union  A1151 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1149(&x->m2, &y->m2); f_cpA1150(&x->m3[0], &y->m3[0]); f_cpA1150(&x->m3[1], &y->m3[1]); f_cpA1150(&x->m3[2], &y->m3[2]); f_cpA1150(&x->m3[3], &y->m3[3]); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1151(const union  A1151 *x, const union  A1151 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1149(&x->m2, &y->m2) && f_cmpA1150(&x->m3[0], &y->m3[0]) && f_cmpA1150(&x->m3[1], &y->m3[1]) && f_cmpA1150(&x->m3[2], &y->m3[2]) && f_cmpA1150(&x->m3[3], &y->m3[3]) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1151() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1151), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1151, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1151, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1151, m2), 1, f_touchdcstA1149());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1151, m3), 4, f_touchdcstA1150());
		dcStructField(at, 'c', offsetof(union  A1151, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1151, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1151, m6), 1);
		dcStructField(at, 's', offsetof(union  A1151, m7), 1);
		dcStructField(at, 's', offsetof(union  A1151, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1151, m9), 1);
		dcStructField(at, 'l', offsetof(union  A1151, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1151, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lcjsiifdp[2]pd[13]f} */
struct A1152 { l m0; c m1; j m2; s m3; i m4; i m5; f m6; d m7; p m8[2]; p m9; d m10[13]; f m11; };
void f_cpA1152(struct A1152 *x, const struct A1152 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m10[8] = y->m10[8]; x->m10[9] = y->m10[9]; x->m10[10] = y->m10[10]; x->m10[11] = y->m10[11]; x->m10[12] = y->m10[12]; x->m11 = y->m11; };
int f_cmpA1152(const struct A1152 *x, const struct A1152 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m10[8] == y->m10[8] && x->m10[9] == y->m10[9] && x->m10[10] == y->m10[10] && x->m10[11] == y->m10[11] && x->m10[12] == y->m10[12] && x->m11 == y->m11; };
DCstruct* f_touchdcstA1152() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1152), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1152, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1152, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1152, m2), 1);
		dcStructField(at, 's', offsetof(struct A1152, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1152, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1152, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1152, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1152, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1152, m8), 2);
		dcStructField(at, 'p', offsetof(struct A1152, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1152, m10), 13);
		dcStructField(at, 'f', offsetof(struct A1152, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {isldfjsdcccs} */
struct A1153 { i m0; s m1; l m2; d m3; f m4; j m5; s m6; d m7; c m8; c m9; c m10; s m11; };
void f_cpA1153(struct A1153 *x, const struct A1153 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1153(const struct A1153 *x, const struct A1153 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1153() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1153), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1153, m0), 1);
		dcStructField(at, 's', offsetof(struct A1153, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1153, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1153, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1153, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1153, m5), 1);
		dcStructField(at, 's', offsetof(struct A1153, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1153, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1153, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1153, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1153, m10), 1);
		dcStructField(at, 's', offsetof(struct A1153, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ipc[11]ifiip> */
union  A1154 { i m0; p m1; c m2[11]; i m3; f m4; i m5; i m6; p m7; };
void f_cpA1154(union  A1154 *x, const union  A1154 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1154(const union  A1154 *x, const union  A1154 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1154() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1154), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1154, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1154, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1154, m2), 11);
		dcStructField(at, 'i', offsetof(union  A1154, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1154, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1154, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1154, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1154, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cf{lcjsiifdp[2]pd[13]f}f{isldfjsdcccs}sp<ipc[11]ifiip>} */
struct A1155 { c m0; f m1; struct A1152 m2; f m3; struct A1153 m4; s m5; p m6; union  A1154 m7; };
void f_cpA1155(struct A1155 *x, const struct A1155 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1152(&x->m2, &y->m2); x->m3 = y->m3; f_cpA1153(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA1154(&x->m7, &y->m7); };
int f_cmpA1155(const struct A1155 *x, const struct A1155 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1152(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA1153(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1154(&x->m7, &y->m7); };
DCstruct* f_touchdcstA1155() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1155), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1155, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1155, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1155, m2), 1, f_touchdcstA1152());
		dcStructField(at, 'f', offsetof(struct A1155, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1155, m4), 1, f_touchdcstA1153());
		dcStructField(at, 's', offsetof(struct A1155, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1155, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1155, m7), 1, f_touchdcstA1154());
		dcCloseStruct(at);
	}
	return at;
};
/* {jp} */
struct A1156 { j m0; p m1; };
void f_cpA1156(struct A1156 *x, const struct A1156 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1156(const struct A1156 *x, const struct A1156 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1156() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1156), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1156, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1156, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <l<dd{clfdjdp}{pj[8]clf}[4]clissclc>cj{cf{lcjsiifdp[2]pd[13]f}f{isldfjsdcccs}sp<ipc[11]ifiip>}jjd{jp}> */
union  A1157 { l m0; union  A1151 m1; c m2; j m3; struct A1155 m4; j m5; j m6; d m7; struct A1156 m8; };
void f_cpA1157(union  A1157 *x, const union  A1157 *y) { x->m0 = y->m0; f_cpA1151(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; f_cpA1155(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1156(&x->m8, &y->m8); };
int f_cmpA1157(const union  A1157 *x, const union  A1157 *y) { return x->m0 == y->m0 && f_cmpA1151(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1155(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1156(&x->m8, &y->m8); };
DCstruct* f_touchdcstA1157() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1157), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1157, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1157, m1), 1, f_touchdcstA1151());
		dcStructField(at, 'c', offsetof(union  A1157, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1157, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1157, m4), 1, f_touchdcstA1155());
		dcStructField(at, 'j', offsetof(union  A1157, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1157, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1157, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1157, m8), 1, f_touchdcstA1156());
		dcCloseStruct(at);
	}
	return at;
};
/* <filc> */
union  A1158 { f m0; i m1; l m2; c m3; };
void f_cpA1158(union  A1158 *x, const union  A1158 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1158(const union  A1158 *x, const union  A1158 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1158() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1158), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1158, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1158, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1158, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1158, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ildc} */
struct A1159 { i m0; l m1; d m2; c m3; };
void f_cpA1159(struct A1159 *x, const struct A1159 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1159(const struct A1159 *x, const struct A1159 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1159() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1159), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1159, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1159, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1159, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1159, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jsljlpfjfs> */
union  A1160 { j m0; s m1; l m2; j m3; l m4; p m5; f m6; j m7; f m8; s m9; };
void f_cpA1160(union  A1160 *x, const union  A1160 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1160(const union  A1160 *x, const union  A1160 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1160() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1160), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1160, m0), 1);
		dcStructField(at, 's', offsetof(union  A1160, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1160, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1160, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1160, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1160, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1160, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1160, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1160, m8), 1);
		dcStructField(at, 's', offsetof(union  A1160, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ccpcdl<filc>{ildc}<jsljlpfjfs>llp} */
struct A1161 { c m0; c m1; p m2; c m3; d m4; l m5; union  A1158 m6; struct A1159 m7; union  A1160 m8; l m9; l m10; p m11; };
void f_cpA1161(struct A1161 *x, const struct A1161 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1158(&x->m6, &y->m6); f_cpA1159(&x->m7, &y->m7); f_cpA1160(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1161(const struct A1161 *x, const struct A1161 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1158(&x->m6, &y->m6) && f_cmpA1159(&x->m7, &y->m7) && f_cmpA1160(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1161() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1161), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1161, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1161, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1161, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1161, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1161, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1161, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1161, m6), 1, f_touchdcstA1158());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1161, m7), 1, f_touchdcstA1159());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1161, m8), 1, f_touchdcstA1160());
		dcStructField(at, 'l', offsetof(struct A1161, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1161, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1161, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pplplfcd} */
struct A1162 { p m0; p m1; l m2; p m3; l m4; f m5; c m6; d m7; };
void f_cpA1162(struct A1162 *x, const struct A1162 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1162(const struct A1162 *x, const struct A1162 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1162() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1162), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1162, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1162, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1162, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1162, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1162, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1162, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1162, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1162, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p{pplplfcd}jfdj> */
union  A1163 { p m0; struct A1162 m1; j m2; f m3; d m4; j m5; };
void f_cpA1163(union  A1163 *x, const union  A1163 *y) { x->m0 = y->m0; f_cpA1162(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1163(const union  A1163 *x, const union  A1163 *y) { return x->m0 == y->m0 && f_cmpA1162(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1163() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1163), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1163, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1163, m1), 1, f_touchdcstA1162());
		dcStructField(at, 'j', offsetof(union  A1163, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1163, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1163, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1163, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fds} */
struct A1164 { f m0; d m1; s m2; };
void f_cpA1164(struct A1164 *x, const struct A1164 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1164(const struct A1164 *x, const struct A1164 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1164() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1164), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1164, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1164, m1), 1);
		dcStructField(at, 's', offsetof(struct A1164, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ccs} */
struct A1165 { c m0; c m1; s m2; };
void f_cpA1165(struct A1165 *x, const struct A1165 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1165(const struct A1165 *x, const struct A1165 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1165() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1165), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1165, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1165, m1), 1);
		dcStructField(at, 's', offsetof(struct A1165, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jl{fds}jfifjf{ccs}pd> */
union  A1166 { j m0; l m1; struct A1164 m2; j m3; f m4; i m5; f m6; j m7; f m8; struct A1165 m9; p m10; d m11; };
void f_cpA1166(union  A1166 *x, const union  A1166 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1164(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1165(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1166(const union  A1166 *x, const union  A1166 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1164(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1165(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1166() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1166), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1166, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1166, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1166, m2), 1, f_touchdcstA1164());
		dcStructField(at, 'j', offsetof(union  A1166, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1166, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1166, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1166, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1166, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1166, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1166, m9), 1, f_touchdcstA1165());
		dcStructField(at, 'p', offsetof(union  A1166, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1166, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sps[12]ijd<jl{fds}jfifjf{ccs}pd>di> */
union  A1167 { s m0; p m1; s m2[12]; i m3; j m4; d m5; union  A1166 m6; d m7; i m8; };
void f_cpA1167(union  A1167 *x, const union  A1167 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1166(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1167(const union  A1167 *x, const union  A1167 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1166(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1167() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1167), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1167, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1167, m1), 1);
		dcStructField(at, 's', offsetof(union  A1167, m2), 12);
		dcStructField(at, 'i', offsetof(union  A1167, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1167, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1167, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1167, m6), 1, f_touchdcstA1166());
		dcStructField(at, 'd', offsetof(union  A1167, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1167, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fippidjddf> */
union  A1168 { f m0; i m1; p m2; p m3; i m4; d m5; j m6; d m7; d m8; f m9; };
void f_cpA1168(union  A1168 *x, const union  A1168 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1168(const union  A1168 *x, const union  A1168 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1168() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1168), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1168, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1168, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1168, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1168, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1168, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1168, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1168, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1168, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1168, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1168, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <diddpjpdlcji> */
union  A1169 { d m0; i m1; d m2; d m3; p m4; j m5; p m6; d m7; l m8; c m9; j m10; i m11; };
void f_cpA1169(union  A1169 *x, const union  A1169 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1169(const union  A1169 *x, const union  A1169 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1169() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1169), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1169, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1169, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1169, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1169, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1169, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1169, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1169, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1169, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1169, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1169, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1169, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1169, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fjp} */
struct A1170 { f m0; j m1; p m2; };
void f_cpA1170(struct A1170 *x, const struct A1170 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1170(const struct A1170 *x, const struct A1170 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1170() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1170), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1170, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1170, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1170, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lfcld> */
union  A1171 { l m0; f m1; c m2; l m3; d m4; };
void f_cpA1171(union  A1171 *x, const union  A1171 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1171(const union  A1171 *x, const union  A1171 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1171() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1171), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1171, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1171, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1171, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1171, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1171, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {c<pf>lcj} */
struct A1172 { c m0; union  A1079 m1; l m2; c m3; j m4; };
void f_cpA1172(struct A1172 *x, const struct A1172 *y) { x->m0 = y->m0; f_cpA1079(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1172(const struct A1172 *x, const struct A1172 *y) { return x->m0 == y->m0 && f_cmpA1079(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1172() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1172), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1172, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1172, m1), 1, f_touchdcstA1079());
		dcStructField(at, 'l', offsetof(struct A1172, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1172, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1172, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sdfcs} */
struct A1173 { s m0; d m1; f m2; c m3; s m4; };
void f_cpA1173(struct A1173 *x, const struct A1173 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1173(const struct A1173 *x, const struct A1173 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1173() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1173), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1173, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1173, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1173, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1173, m3), 1);
		dcStructField(at, 's', offsetof(struct A1173, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{c<pf>lcj}f{sdfcs}pi[6]i{sj}dscdp> */
union  A1174 { struct A1172 m0; f m1; struct A1173 m2; p m3; i m4[6]; i m5; struct A13 m6; d m7; s m8; c m9; d m10; p m11; };
void f_cpA1174(union  A1174 *x, const union  A1174 *y) { f_cpA1172(&x->m0, &y->m0); x->m1 = y->m1; f_cpA1173(&x->m2, &y->m2); x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m5 = y->m5; f_cpA13(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1174(const union  A1174 *x, const union  A1174 *y) { return f_cmpA1172(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA1173(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m5 == y->m5 && f_cmpA13(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1174() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1174), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1174, m0), 1, f_touchdcstA1172());
		dcStructField(at, 'f', offsetof(union  A1174, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1174, m2), 1, f_touchdcstA1173());
		dcStructField(at, 'p', offsetof(union  A1174, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1174, m4), 6);
		dcStructField(at, 'i', offsetof(union  A1174, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1174, m6), 1, f_touchdcstA13());
		dcStructField(at, 'd', offsetof(union  A1174, m7), 1);
		dcStructField(at, 's', offsetof(union  A1174, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1174, m9), 1);
		dcStructField(at, 'd', offsetof(union  A1174, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1174, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dlsf[11]scdfl> */
union  A1175 { d m0; l m1; s m2; f m3[11]; s m4; c m5; d m6; f m7; l m8; };
void f_cpA1175(union  A1175 *x, const union  A1175 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1175(const union  A1175 *x, const union  A1175 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1175() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1175), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1175, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1175, m1), 1);
		dcStructField(at, 's', offsetof(union  A1175, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1175, m3), 11);
		dcStructField(at, 's', offsetof(union  A1175, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1175, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1175, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1175, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1175, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ilcl[14]jspdcppi> */
union  A1176 { i m0; l m1; c m2; l m3[14]; j m4; s m5; p m6; d m7; c m8; p m9; p m10; i m11; };
void f_cpA1176(union  A1176 *x, const union  A1176 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m3[12] = y->m3[12]; x->m3[13] = y->m3[13]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1176(const union  A1176 *x, const union  A1176 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m3[12] == y->m3[12] && x->m3[13] == y->m3[13] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1176() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1176), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1176, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1176, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1176, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1176, m3), 14);
		dcStructField(at, 'j', offsetof(union  A1176, m4), 1);
		dcStructField(at, 's', offsetof(union  A1176, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1176, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1176, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1176, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1176, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1176, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1176, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ijdjlflijfjc} */
struct A1177 { i m0; j m1; d m2; j m3; l m4; f m5; l m6; i m7; j m8; f m9; j m10; c m11; };
void f_cpA1177(struct A1177 *x, const struct A1177 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1177(const struct A1177 *x, const struct A1177 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1177() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1177), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1177, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1177, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1177, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1177, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1177, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1177, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1177, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1177, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1177, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1177, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1177, m10), 1);
		dcStructField(at, 'c', offsetof(struct A1177, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jp<j><sc>i<ilcl[14]jspdcppi>jl{ijdjlflijfjc}jii} */
struct A1178 { j m0; p m1; union  A43 m2; union  A926 m3; i m4; union  A1176 m5; j m6; l m7; struct A1177 m8; j m9; i m10; i m11; };
void f_cpA1178(struct A1178 *x, const struct A1178 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA43(&x->m2, &y->m2); f_cpA926(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1176(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; f_cpA1177(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1178(const struct A1178 *x, const struct A1178 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA43(&x->m2, &y->m2) && f_cmpA926(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1176(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1177(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1178() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1178), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1178, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1178, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1178, m2), 1, f_touchdcstA43());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1178, m3), 1, f_touchdcstA926());
		dcStructField(at, 'i', offsetof(struct A1178, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1178, m5), 1, f_touchdcstA1176());
		dcStructField(at, 'j', offsetof(struct A1178, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1178, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1178, m8), 1, f_touchdcstA1177());
		dcStructField(at, 'j', offsetof(struct A1178, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1178, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1178, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sfdsdl} */
struct A1179 { s m0; f m1; d m2; s m3; d m4; l m5; };
void f_cpA1179(struct A1179 *x, const struct A1179 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1179(const struct A1179 *x, const struct A1179 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1179() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1179), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1179, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1179, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1179, m2), 1);
		dcStructField(at, 's', offsetof(struct A1179, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1179, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1179, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ppfdpljlfjd> */
union  A1180 { p m0; p m1; f m2; d m3; p m4; l m5; j m6; l m7; f m8; j m9; d m10; };
void f_cpA1180(union  A1180 *x, const union  A1180 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1180(const union  A1180 *x, const union  A1180 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1180() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1180), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1180, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1180, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1180, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1180, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1180, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1180, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1180, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1180, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1180, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1180, m9), 1);
		dcStructField(at, 'd', offsetof(union  A1180, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sjlldd{sfdsdl}<ppfdpljlfjd>ispj} */
struct A1181 { s m0; j m1; l m2; l m3; d m4; d m5; struct A1179 m6; union  A1180 m7; i m8; s m9; p m10; j m11; };
void f_cpA1181(struct A1181 *x, const struct A1181 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1179(&x->m6, &y->m6); f_cpA1180(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1181(const struct A1181 *x, const struct A1181 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1179(&x->m6, &y->m6) && f_cmpA1180(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1181() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1181), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1181, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1181, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1181, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1181, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1181, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1181, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1181, m6), 1, f_touchdcstA1179());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1181, m7), 1, f_touchdcstA1180());
		dcStructField(at, 'i', offsetof(struct A1181, m8), 1);
		dcStructField(at, 's', offsetof(struct A1181, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1181, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1181, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cfj} */
struct A1182 { c m0; f m1; j m2; };
void f_cpA1182(struct A1182 *x, const struct A1182 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1182(const struct A1182 *x, const struct A1182 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1182() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1182), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1182, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1182, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1182, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ssfscsdp{cfj}ipp> */
union  A1183 { s m0; s m1; f m2; s m3; c m4; s m5; d m6; p m7; struct A1182 m8; i m9; p m10; p m11; };
void f_cpA1183(union  A1183 *x, const union  A1183 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1182(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1183(const union  A1183 *x, const union  A1183 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1182(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1183() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1183), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1183, m0), 1);
		dcStructField(at, 's', offsetof(union  A1183, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1183, m2), 1);
		dcStructField(at, 's', offsetof(union  A1183, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1183, m4), 1);
		dcStructField(at, 's', offsetof(union  A1183, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1183, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1183, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1183, m8), 1, f_touchdcstA1182());
		dcStructField(at, 'i', offsetof(union  A1183, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1183, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1183, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ssfdf> */
union  A1184 { s m0; s m1; f m2; d m3; f m4; };
void f_cpA1184(union  A1184 *x, const union  A1184 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1184(const union  A1184 *x, const union  A1184 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1184() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1184), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1184, m0), 1);
		dcStructField(at, 's', offsetof(union  A1184, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1184, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1184, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1184, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <icf> */
union  A1185 { i m0; c m1; f m2; };
void f_cpA1185(union  A1185 *x, const union  A1185 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1185(const union  A1185 *x, const union  A1185 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1185() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1185), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1185, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1185, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1185, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpfpccl<ssfdf>j<icf>js> */
union  A1186 { c m0; p m1; f m2; p m3; c m4; c m5; l m6; union  A1184 m7; j m8; union  A1185 m9; j m10; s m11; };
void f_cpA1186(union  A1186 *x, const union  A1186 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1184(&x->m7, &y->m7); x->m8 = y->m8; f_cpA1185(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1186(const union  A1186 *x, const union  A1186 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1184(&x->m7, &y->m7) && x->m8 == y->m8 && f_cmpA1185(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1186() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1186), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1186, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1186, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1186, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1186, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1186, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1186, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1186, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1186, m7), 1, f_touchdcstA1184());
		dcStructField(at, 'j', offsetof(union  A1186, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1186, m9), 1, f_touchdcstA1185());
		dcStructField(at, 'j', offsetof(union  A1186, m10), 1);
		dcStructField(at, 's', offsetof(union  A1186, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fsp{jp<j><sc>i<ilcl[14]jspdcppi>jl{ijdjlflijfjc}jii}sicl[14]{sjlldd{sfdsdl}<ppfdpljlfjd>ispj}<ssfscsdp{cfj}ipp><cpfpccl<ssfdf>j<icf>js>f> */
union  A1187 { f m0; s m1; p m2; struct A1178 m3; s m4; i m5; c m6; l m7[14]; struct A1181 m8; union  A1183 m9; union  A1186 m10; f m11; };
void f_cpA1187(union  A1187 *x, const union  A1187 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1178(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; x->m7[7] = y->m7[7]; x->m7[8] = y->m7[8]; x->m7[9] = y->m7[9]; x->m7[10] = y->m7[10]; x->m7[11] = y->m7[11]; x->m7[12] = y->m7[12]; x->m7[13] = y->m7[13]; f_cpA1181(&x->m8, &y->m8); f_cpA1183(&x->m9, &y->m9); f_cpA1186(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1187(const union  A1187 *x, const union  A1187 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1178(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6] && x->m7[7] == y->m7[7] && x->m7[8] == y->m7[8] && x->m7[9] == y->m7[9] && x->m7[10] == y->m7[10] && x->m7[11] == y->m7[11] && x->m7[12] == y->m7[12] && x->m7[13] == y->m7[13] && f_cmpA1181(&x->m8, &y->m8) && f_cmpA1183(&x->m9, &y->m9) && f_cmpA1186(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1187() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1187), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1187, m0), 1);
		dcStructField(at, 's', offsetof(union  A1187, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1187, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1187, m3), 1, f_touchdcstA1178());
		dcStructField(at, 's', offsetof(union  A1187, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1187, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1187, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1187, m7), 14);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1187, m8), 1, f_touchdcstA1181());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1187, m9), 1, f_touchdcstA1183());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1187, m10), 1, f_touchdcstA1186());
		dcStructField(at, 'f', offsetof(union  A1187, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {psff} */
struct A1188 { p m0; s m1; f m2; f m3; };
void f_cpA1188(struct A1188 *x, const struct A1188 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1188(const struct A1188 *x, const struct A1188 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1188() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1188), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1188, m0), 1);
		dcStructField(at, 's', offsetof(struct A1188, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1188, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1188, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{psff}s} */
struct A1189 { struct A1188 m0; s m1; };
void f_cpA1189(struct A1189 *x, const struct A1189 *y) { f_cpA1188(&x->m0, &y->m0); x->m1 = y->m1; };
int f_cmpA1189(const struct A1189 *x, const struct A1189 *y) { return f_cmpA1188(&x->m0, &y->m0) && x->m1 == y->m1; };
DCstruct* f_touchdcstA1189() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1189), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1189, m0), 1, f_touchdcstA1188());
		dcStructField(at, 's', offsetof(struct A1189, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{d}i} */
struct A1190 { struct A47 m0; i m1; };
void f_cpA1190(struct A1190 *x, const struct A1190 *y) { f_cpA47(&x->m0, &y->m0); x->m1 = y->m1; };
int f_cmpA1190(const struct A1190 *x, const struct A1190 *y) { return f_cmpA47(&x->m0, &y->m0) && x->m1 == y->m1; };
DCstruct* f_touchdcstA1190() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1190), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1190, m0), 1, f_touchdcstA47());
		dcStructField(at, 'i', offsetof(struct A1190, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dfpjsfcspp> */
union  A1191 { d m0; f m1; p m2; j m3; s m4; f m5; c m6; s m7; p m8; p m9; };
void f_cpA1191(union  A1191 *x, const union  A1191 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1191(const union  A1191 *x, const union  A1191 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1191() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1191), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1191, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1191, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1191, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1191, m3), 1);
		dcStructField(at, 's', offsetof(union  A1191, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1191, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1191, m6), 1);
		dcStructField(at, 's', offsetof(union  A1191, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1191, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1191, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pp{i}<l><dfpjsfcspp>jjcpd} */
struct A1192 { p m0; p m1; struct A5 m2; union  A20 m3; union  A1191 m4; j m5; j m6; c m7; p m8; d m9; };
void f_cpA1192(struct A1192 *x, const struct A1192 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA5(&x->m2, &y->m2); f_cpA20(&x->m3, &y->m3); f_cpA1191(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1192(const struct A1192 *x, const struct A1192 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA5(&x->m2, &y->m2) && f_cmpA20(&x->m3, &y->m3) && f_cmpA1191(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1192() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1192), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1192, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1192, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1192, m2), 1, f_touchdcstA5());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1192, m3), 1, f_touchdcstA20());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1192, m4), 1, f_touchdcstA1191());
		dcStructField(at, 'j', offsetof(struct A1192, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1192, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1192, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1192, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1192, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {slifi} */
struct A1193 { s m0; l m1; i m2; f m3; i m4; };
void f_cpA1193(struct A1193 *x, const struct A1193 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1193(const struct A1193 *x, const struct A1193 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1193() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1193), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1193, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1193, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1193, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1193, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1193, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cffipsdcfipp} */
struct A1194 { c m0; f m1; f m2; i m3; p m4; s m5; d m6; c m7; f m8; i m9; p m10; p m11; };
void f_cpA1194(struct A1194 *x, const struct A1194 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1194(const struct A1194 *x, const struct A1194 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1194() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1194), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1194, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1194, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1194, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1194, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1194, m4), 1);
		dcStructField(at, 's', offsetof(struct A1194, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1194, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1194, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1194, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1194, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1194, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1194, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pl} */
struct A1195 { p m0; l m1; };
void f_cpA1195(struct A1195 *x, const struct A1195 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1195(const struct A1195 *x, const struct A1195 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1195() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1195), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1195, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1195, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ii[7]ii} */
struct A1196 { i m0; i m1[7]; i m2; i m3; };
void f_cpA1196(struct A1196 *x, const struct A1196 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1196(const struct A1196 *x, const struct A1196 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1196() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1196), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1196, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1196, m1), 7);
		dcStructField(at, 'i', offsetof(struct A1196, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1196, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <d{slifi}{cffipsdcfipp}sdffpp<s>{pl}{ii[7]ii}> */
union  A1197 { d m0; struct A1193 m1; struct A1194 m2; s m3; d m4; f m5; f m6; p m7; p m8; union  A179 m9; struct A1195 m10; struct A1196 m11; };
void f_cpA1197(union  A1197 *x, const union  A1197 *y) { x->m0 = y->m0; f_cpA1193(&x->m1, &y->m1); f_cpA1194(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA179(&x->m9, &y->m9); f_cpA1195(&x->m10, &y->m10); f_cpA1196(&x->m11, &y->m11); };
int f_cmpA1197(const union  A1197 *x, const union  A1197 *y) { return x->m0 == y->m0 && f_cmpA1193(&x->m1, &y->m1) && f_cmpA1194(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA179(&x->m9, &y->m9) && f_cmpA1195(&x->m10, &y->m10) && f_cmpA1196(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1197() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1197), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1197, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1197, m1), 1, f_touchdcstA1193());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1197, m2), 1, f_touchdcstA1194());
		dcStructField(at, 's', offsetof(union  A1197, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1197, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1197, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1197, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1197, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1197, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1197, m9), 1, f_touchdcstA179());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1197, m10), 1, f_touchdcstA1195());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1197, m11), 1, f_touchdcstA1196());
		dcCloseStruct(at);
	}
	return at;
};
/* {s[7]djdfjdcjjs} */
struct A1198 { s m0[7]; d m1; j m2; d m3; f m4; j m5; d m6; c m7; j m8; j m9; s m10; };
void f_cpA1198(struct A1198 *x, const struct A1198 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1198(const struct A1198 *x, const struct A1198 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1198() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1198), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1198, m0), 7);
		dcStructField(at, 'd', offsetof(struct A1198, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1198, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1198, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1198, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1198, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1198, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1198, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1198, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1198, m9), 1);
		dcStructField(at, 's', offsetof(struct A1198, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {c[12]ddccs} */
struct A1199 { c m0[12]; d m1; d m2; c m3; c m4; s m5; };
void f_cpA1199(struct A1199 *x, const struct A1199 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1199(const struct A1199 *x, const struct A1199 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1199() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1199), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1199, m0), 12);
		dcStructField(at, 'd', offsetof(struct A1199, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1199, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1199, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1199, m4), 1);
		dcStructField(at, 's', offsetof(struct A1199, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lfjsppssiilp} */
struct A1200 { l m0; f m1; j m2; s m3; p m4; p m5; s m6; s m7; i m8; i m9; l m10; p m11; };
void f_cpA1200(struct A1200 *x, const struct A1200 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1200(const struct A1200 *x, const struct A1200 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1200() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1200), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1200, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1200, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1200, m2), 1);
		dcStructField(at, 's', offsetof(struct A1200, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1200, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1200, m5), 1);
		dcStructField(at, 's', offsetof(struct A1200, m6), 1);
		dcStructField(at, 's', offsetof(struct A1200, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1200, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1200, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1200, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1200, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lfjd> */
union  A1201 { l m0; f m1; j m2; d m3; };
void f_cpA1201(union  A1201 *x, const union  A1201 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1201(const union  A1201 *x, const union  A1201 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1201() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1201), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1201, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1201, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1201, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1201, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {i{s[7]djdfjdcjjs}l{c[12]ddccs}pcii{lfjsppssiilp}pf<lfjd>} */
struct A1202 { i m0; struct A1198 m1; l m2; struct A1199 m3; p m4; c m5; i m6; i m7; struct A1200 m8; p m9; f m10; union  A1201 m11; };
void f_cpA1202(struct A1202 *x, const struct A1202 *y) { x->m0 = y->m0; f_cpA1198(&x->m1, &y->m1); x->m2 = y->m2; f_cpA1199(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1200(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; f_cpA1201(&x->m11, &y->m11); };
int f_cmpA1202(const struct A1202 *x, const struct A1202 *y) { return x->m0 == y->m0 && f_cmpA1198(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA1199(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1200(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1201(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1202() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1202), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1202, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1202, m1), 1, f_touchdcstA1198());
		dcStructField(at, 'l', offsetof(struct A1202, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1202, m3), 1, f_touchdcstA1199());
		dcStructField(at, 'p', offsetof(struct A1202, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1202, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1202, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1202, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1202, m8), 1, f_touchdcstA1200());
		dcStructField(at, 'p', offsetof(struct A1202, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1202, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1202, m11), 1, f_touchdcstA1201());
		dcCloseStruct(at);
	}
	return at;
};
/* <piccjpjf> */
union  A1203 { p m0; i m1; c m2; c m3; j m4; p m5; j m6; f m7; };
void f_cpA1203(union  A1203 *x, const union  A1203 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1203(const union  A1203 *x, const union  A1203 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1203() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1203), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1203, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1203, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1203, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1203, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1203, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1203, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1203, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1203, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {di} */
struct A1204 { d m0; i m1; };
void f_cpA1204(struct A1204 *x, const struct A1204 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1204(const struct A1204 *x, const struct A1204 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1204() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1204), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1204, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1204, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dl<piccjpjf>[5]l<s>cl{di}diid> */
union  A1205 { d m0; l m1; union  A1203 m2[5]; l m3; union  A179 m4; c m5; l m6; struct A1204 m7; d m8; i m9; i m10; d m11; };
void f_cpA1205(union  A1205 *x, const union  A1205 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1203(&x->m2[0], &y->m2[0]); f_cpA1203(&x->m2[1], &y->m2[1]); f_cpA1203(&x->m2[2], &y->m2[2]); f_cpA1203(&x->m2[3], &y->m2[3]); f_cpA1203(&x->m2[4], &y->m2[4]); x->m3 = y->m3; f_cpA179(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA1204(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1205(const union  A1205 *x, const union  A1205 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1203(&x->m2[0], &y->m2[0]) && f_cmpA1203(&x->m2[1], &y->m2[1]) && f_cmpA1203(&x->m2[2], &y->m2[2]) && f_cmpA1203(&x->m2[3], &y->m2[3]) && f_cmpA1203(&x->m2[4], &y->m2[4]) && x->m3 == y->m3 && f_cmpA179(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1204(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1205() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1205), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1205, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1205, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1205, m2), 5, f_touchdcstA1203());
		dcStructField(at, 'l', offsetof(union  A1205, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1205, m4), 1, f_touchdcstA179());
		dcStructField(at, 'c', offsetof(union  A1205, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1205, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1205, m7), 1, f_touchdcstA1204());
		dcStructField(at, 'd', offsetof(union  A1205, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1205, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1205, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1205, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pfiid> */
union  A1206 { p m0; f m1; i m2; i m3; d m4; };
void f_cpA1206(union  A1206 *x, const union  A1206 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1206(const union  A1206 *x, const union  A1206 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1206() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1206), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1206, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1206, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1206, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1206, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1206, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <c<pfiid>p> */
union  A1207 { c m0; union  A1206 m1; p m2; };
void f_cpA1207(union  A1207 *x, const union  A1207 *y) { x->m0 = y->m0; f_cpA1206(&x->m1, &y->m1); x->m2 = y->m2; };
int f_cmpA1207(const union  A1207 *x, const union  A1207 *y) { return x->m0 == y->m0 && f_cmpA1206(&x->m1, &y->m1) && x->m2 == y->m2; };
DCstruct* f_touchdcstA1207() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1207), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1207, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1207, m1), 1, f_touchdcstA1206());
		dcStructField(at, 'p', offsetof(union  A1207, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pdjffjsi} */
struct A1208 { p m0; d m1; j m2; f m3; f m4; j m5; s m6; i m7; };
void f_cpA1208(struct A1208 *x, const struct A1208 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1208(const struct A1208 *x, const struct A1208 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1208() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1208), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1208, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1208, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1208, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1208, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1208, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1208, m5), 1);
		dcStructField(at, 's', offsetof(struct A1208, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1208, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cf{pdjffjsi}ccl} */
struct A1209 { c m0; f m1; struct A1208 m2; c m3; c m4; l m5; };
void f_cpA1209(struct A1209 *x, const struct A1209 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1208(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1209(const struct A1209 *x, const struct A1209 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1208(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1209() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1209), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1209, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1209, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1209, m2), 1, f_touchdcstA1208());
		dcStructField(at, 'c', offsetof(struct A1209, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1209, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1209, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<d{slifi}{cffipsdcfipp}sdffpp<s>{pl}{ii[7]ii}>[5]l{i{s[7]djdfjdcjjs}l{c[12]ddccs}pcii{lfjsppssiilp}pf<lfjd>}idi<dl<piccjpjf>[5]l<s>cl{di}diid><c<pfiid>p>c{cf{pdjffjsi}ccl}cp} */
struct A1210 { union  A1197 m0[5]; l m1; struct A1202 m2; i m3; d m4; i m5; union  A1205 m6; union  A1207 m7; c m8; struct A1209 m9; c m10; p m11; };
void f_cpA1210(struct A1210 *x, const struct A1210 *y) { f_cpA1197(&x->m0[0], &y->m0[0]); f_cpA1197(&x->m0[1], &y->m0[1]); f_cpA1197(&x->m0[2], &y->m0[2]); f_cpA1197(&x->m0[3], &y->m0[3]); f_cpA1197(&x->m0[4], &y->m0[4]); x->m1 = y->m1; f_cpA1202(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1205(&x->m6, &y->m6); f_cpA1207(&x->m7, &y->m7); x->m8 = y->m8; f_cpA1209(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1210(const struct A1210 *x, const struct A1210 *y) { return f_cmpA1197(&x->m0[0], &y->m0[0]) && f_cmpA1197(&x->m0[1], &y->m0[1]) && f_cmpA1197(&x->m0[2], &y->m0[2]) && f_cmpA1197(&x->m0[3], &y->m0[3]) && f_cmpA1197(&x->m0[4], &y->m0[4]) && x->m1 == y->m1 && f_cmpA1202(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1205(&x->m6, &y->m6) && f_cmpA1207(&x->m7, &y->m7) && x->m8 == y->m8 && f_cmpA1209(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1210() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1210), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1210, m0), 5, f_touchdcstA1197());
		dcStructField(at, 'l', offsetof(struct A1210, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1210, m2), 1, f_touchdcstA1202());
		dcStructField(at, 'i', offsetof(struct A1210, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1210, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1210, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1210, m6), 1, f_touchdcstA1205());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1210, m7), 1, f_touchdcstA1207());
		dcStructField(at, 'c', offsetof(struct A1210, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1210, m9), 1, f_touchdcstA1209());
		dcStructField(at, 'c', offsetof(struct A1210, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1210, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dllcddllcsji> */
union  A1211 { d m0; l m1; l m2; c m3; d m4; d m5; l m6; l m7; c m8; s m9; j m10; i m11; };
void f_cpA1211(union  A1211 *x, const union  A1211 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1211(const union  A1211 *x, const union  A1211 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1211() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1211), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1211, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1211, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1211, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1211, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1211, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1211, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1211, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1211, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1211, m8), 1);
		dcStructField(at, 's', offsetof(union  A1211, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1211, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1211, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {s[3]d} */
struct A1212 { s m0[3]; d m1; };
void f_cpA1212(struct A1212 *x, const struct A1212 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m1 = y->m1; };
int f_cmpA1212(const struct A1212 *x, const struct A1212 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m1 == y->m1; };
DCstruct* f_touchdcstA1212() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1212), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1212, m0), 3);
		dcStructField(at, 'd', offsetof(struct A1212, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{j}cipidp> */
union  A1213 { struct A117 m0; c m1; i m2; p m3; i m4; d m5; p m6; };
void f_cpA1213(union  A1213 *x, const union  A1213 *y) { f_cpA117(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1213(const union  A1213 *x, const union  A1213 *y) { return f_cmpA117(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1213() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1213), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1213, m0), 1, f_touchdcstA117());
		dcStructField(at, 'c', offsetof(union  A1213, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1213, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1213, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1213, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1213, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1213, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dssfjcj{s[3]d}{c}i<{j}cipidp>f> */
union  A1214 { d m0; s m1; s m2; f m3; j m4; c m5; j m6; struct A1212 m7; struct A212 m8; i m9; union  A1213 m10; f m11; };
void f_cpA1214(union  A1214 *x, const union  A1214 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1212(&x->m7, &y->m7); f_cpA212(&x->m8, &y->m8); x->m9 = y->m9; f_cpA1213(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1214(const union  A1214 *x, const union  A1214 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1212(&x->m7, &y->m7) && f_cmpA212(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA1213(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1214() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1214), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1214, m0), 1);
		dcStructField(at, 's', offsetof(union  A1214, m1), 1);
		dcStructField(at, 's', offsetof(union  A1214, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1214, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1214, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1214, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1214, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1214, m7), 1, f_touchdcstA1212());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1214, m8), 1, f_touchdcstA212());
		dcStructField(at, 'i', offsetof(union  A1214, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1214, m10), 1, f_touchdcstA1213());
		dcStructField(at, 'f', offsetof(union  A1214, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dpsiddcfdddd} */
struct A1215 { d m0; p m1; s m2; i m3; d m4; d m5; c m6; f m7; d m8; d m9; d m10; d m11; };
void f_cpA1215(struct A1215 *x, const struct A1215 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1215(const struct A1215 *x, const struct A1215 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1215() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1215), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1215, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1215, m1), 1);
		dcStructField(at, 's', offsetof(struct A1215, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1215, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1215, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1215, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1215, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1215, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1215, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1215, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1215, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1215, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pjlp[13]difsiffs} */
struct A1216 { p m0; j m1; l m2; p m3[13]; d m4; i m5; f m6; s m7; i m8; f m9; f m10; s m11; };
void f_cpA1216(struct A1216 *x, const struct A1216 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m3[12] = y->m3[12]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1216(const struct A1216 *x, const struct A1216 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m3[12] == y->m3[12] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1216() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1216), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1216, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1216, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1216, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1216, m3), 13);
		dcStructField(at, 'd', offsetof(struct A1216, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1216, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1216, m6), 1);
		dcStructField(at, 's', offsetof(struct A1216, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1216, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1216, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1216, m10), 1);
		dcStructField(at, 's', offsetof(struct A1216, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ipdcp[13]ldljjl> */
union  A1217 { i m0; p m1; d m2; c m3; p m4[13]; l m5; d m6; l m7; j m8; j m9; l m10; };
void f_cpA1217(union  A1217 *x, const union  A1217 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m4[12] = y->m4[12]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1217(const union  A1217 *x, const union  A1217 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m4[12] == y->m4[12] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1217() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1217), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1217, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1217, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1217, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1217, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1217, m4), 13);
		dcStructField(at, 'l', offsetof(union  A1217, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1217, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1217, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1217, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1217, m9), 1);
		dcStructField(at, 'l', offsetof(union  A1217, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sjscpiisci> */
union  A1218 { s m0; j m1; s m2; c m3; p m4; i m5; i m6; s m7; c m8; i m9; };
void f_cpA1218(union  A1218 *x, const union  A1218 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1218(const union  A1218 *x, const union  A1218 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1218() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1218), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1218, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1218, m1), 1);
		dcStructField(at, 's', offsetof(union  A1218, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1218, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1218, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1218, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1218, m6), 1);
		dcStructField(at, 's', offsetof(union  A1218, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1218, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1218, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pldlfs> */
union  A1219 { p m0; l m1; d m2; l m3; f m4; s m5; };
void f_cpA1219(union  A1219 *x, const union  A1219 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1219(const union  A1219 *x, const union  A1219 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1219() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1219), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1219, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1219, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1219, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1219, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1219, m4), 1);
		dcStructField(at, 's', offsetof(union  A1219, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{pjlp[13]difsiffs}[16]<ipdcp[13]ldljjl>d<p>i<sjscpiisci>dlsp<pldlfs>f} */
struct A1220 { struct A1216 m0[16]; union  A1217 m1; d m2; union  A36 m3; i m4; union  A1218 m5; d m6; l m7; s m8; p m9; union  A1219 m10; f m11; };
void f_cpA1220(struct A1220 *x, const struct A1220 *y) { f_cpA1216(&x->m0[0], &y->m0[0]); f_cpA1216(&x->m0[1], &y->m0[1]); f_cpA1216(&x->m0[2], &y->m0[2]); f_cpA1216(&x->m0[3], &y->m0[3]); f_cpA1216(&x->m0[4], &y->m0[4]); f_cpA1216(&x->m0[5], &y->m0[5]); f_cpA1216(&x->m0[6], &y->m0[6]); f_cpA1216(&x->m0[7], &y->m0[7]); f_cpA1216(&x->m0[8], &y->m0[8]); f_cpA1216(&x->m0[9], &y->m0[9]); f_cpA1216(&x->m0[10], &y->m0[10]); f_cpA1216(&x->m0[11], &y->m0[11]); f_cpA1216(&x->m0[12], &y->m0[12]); f_cpA1216(&x->m0[13], &y->m0[13]); f_cpA1216(&x->m0[14], &y->m0[14]); f_cpA1216(&x->m0[15], &y->m0[15]); f_cpA1217(&x->m1, &y->m1); x->m2 = y->m2; f_cpA36(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1218(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1219(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1220(const struct A1220 *x, const struct A1220 *y) { return f_cmpA1216(&x->m0[0], &y->m0[0]) && f_cmpA1216(&x->m0[1], &y->m0[1]) && f_cmpA1216(&x->m0[2], &y->m0[2]) && f_cmpA1216(&x->m0[3], &y->m0[3]) && f_cmpA1216(&x->m0[4], &y->m0[4]) && f_cmpA1216(&x->m0[5], &y->m0[5]) && f_cmpA1216(&x->m0[6], &y->m0[6]) && f_cmpA1216(&x->m0[7], &y->m0[7]) && f_cmpA1216(&x->m0[8], &y->m0[8]) && f_cmpA1216(&x->m0[9], &y->m0[9]) && f_cmpA1216(&x->m0[10], &y->m0[10]) && f_cmpA1216(&x->m0[11], &y->m0[11]) && f_cmpA1216(&x->m0[12], &y->m0[12]) && f_cmpA1216(&x->m0[13], &y->m0[13]) && f_cmpA1216(&x->m0[14], &y->m0[14]) && f_cmpA1216(&x->m0[15], &y->m0[15]) && f_cmpA1217(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA36(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1218(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1219(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1220() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1220), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1220, m0), 16, f_touchdcstA1216());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1220, m1), 1, f_touchdcstA1217());
		dcStructField(at, 'd', offsetof(struct A1220, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1220, m3), 1, f_touchdcstA36());
		dcStructField(at, 'i', offsetof(struct A1220, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1220, m5), 1, f_touchdcstA1218());
		dcStructField(at, 'd', offsetof(struct A1220, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1220, m7), 1);
		dcStructField(at, 's', offsetof(struct A1220, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1220, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1220, m10), 1, f_touchdcstA1219());
		dcStructField(at, 'f', offsetof(struct A1220, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{{pjlp[13]difsiffs}[16]<ipdcp[13]ldljjl>d<p>i<sjscpiisci>dlsp<pldlfs>f}ps<p>jcsdd} */
struct A1221 { struct A1220 m0; p m1; s m2; union  A36 m3; j m4; c m5; s m6; d m7; d m8; };
void f_cpA1221(struct A1221 *x, const struct A1221 *y) { f_cpA1220(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA36(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1221(const struct A1221 *x, const struct A1221 *y) { return f_cmpA1220(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA36(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1221() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1221), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1221, m0), 1, f_touchdcstA1220());
		dcStructField(at, 'p', offsetof(struct A1221, m1), 1);
		dcStructField(at, 's', offsetof(struct A1221, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1221, m3), 1, f_touchdcstA36());
		dcStructField(at, 'j', offsetof(struct A1221, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1221, m5), 1);
		dcStructField(at, 's', offsetof(struct A1221, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1221, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1221, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ssfdpccsccis} */
struct A1222 { s m0; s m1; f m2; d m3; p m4; c m5; c m6; s m7; c m8; c m9; i m10; s m11; };
void f_cpA1222(struct A1222 *x, const struct A1222 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1222(const struct A1222 *x, const struct A1222 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1222() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1222), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1222, m0), 1);
		dcStructField(at, 's', offsetof(struct A1222, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1222, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1222, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1222, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1222, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1222, m6), 1);
		dcStructField(at, 's', offsetof(struct A1222, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1222, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1222, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1222, m10), 1);
		dcStructField(at, 's', offsetof(struct A1222, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cpljcijipsff} */
struct A1223 { c m0; p m1; l m2; j m3; c m4; i m5; j m6; i m7; p m8; s m9; f m10; f m11; };
void f_cpA1223(struct A1223 *x, const struct A1223 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1223(const struct A1223 *x, const struct A1223 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1223() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1223), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1223, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1223, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1223, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1223, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1223, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1223, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1223, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1223, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1223, m8), 1);
		dcStructField(at, 's', offsetof(struct A1223, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1223, m10), 1);
		dcStructField(at, 'f', offsetof(struct A1223, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lds} */
struct A1224 { l m0; d m1; s m2; };
void f_cpA1224(struct A1224 *x, const struct A1224 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1224(const struct A1224 *x, const struct A1224 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1224() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1224), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1224, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1224, m1), 1);
		dcStructField(at, 's', offsetof(struct A1224, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f<ccf>s{ssfdpccsccis}ii{cpljcijipsff}{lds}i[5]fp} */
struct A1225 { f m0; union  A727 m1; s m2; struct A1222 m3; i m4; i m5; struct A1223 m6; struct A1224 m7; i m8[5]; f m9; p m10; };
void f_cpA1225(struct A1225 *x, const struct A1225 *y) { x->m0 = y->m0; f_cpA727(&x->m1, &y->m1); x->m2 = y->m2; f_cpA1222(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; f_cpA1223(&x->m6, &y->m6); f_cpA1224(&x->m7, &y->m7); x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1225(const struct A1225 *x, const struct A1225 *y) { return x->m0 == y->m0 && f_cmpA727(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA1222(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1223(&x->m6, &y->m6) && f_cmpA1224(&x->m7, &y->m7) && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1225() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1225), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1225, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1225, m1), 1, f_touchdcstA727());
		dcStructField(at, 's', offsetof(struct A1225, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1225, m3), 1, f_touchdcstA1222());
		dcStructField(at, 'i', offsetof(struct A1225, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1225, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1225, m6), 1, f_touchdcstA1223());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1225, m7), 1, f_touchdcstA1224());
		dcStructField(at, 'i', offsetof(struct A1225, m8), 5);
		dcStructField(at, 'f', offsetof(struct A1225, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1225, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jdj[14]jllsij> */
union  A1226 { j m0; d m1; j m2[14]; j m3; l m4; l m5; s m6; i m7; j m8; };
void f_cpA1226(union  A1226 *x, const union  A1226 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m2[13] = y->m2[13]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1226(const union  A1226 *x, const union  A1226 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m2[13] == y->m2[13] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1226() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1226), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1226, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1226, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1226, m2), 14);
		dcStructField(at, 'j', offsetof(union  A1226, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1226, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1226, m5), 1);
		dcStructField(at, 's', offsetof(union  A1226, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1226, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1226, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sl<jdj[14]jllsij>pc} */
struct A1227 { s m0; l m1; union  A1226 m2; p m3; c m4; };
void f_cpA1227(struct A1227 *x, const struct A1227 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1226(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1227(const struct A1227 *x, const struct A1227 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1226(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1227() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1227), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1227, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1227, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1227, m2), 1, f_touchdcstA1226());
		dcStructField(at, 'p', offsetof(struct A1227, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1227, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ssj} */
struct A1228 { s m0; s m1; j m2; };
void f_cpA1228(struct A1228 *x, const struct A1228 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1228(const struct A1228 *x, const struct A1228 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1228() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1228), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1228, m0), 1);
		dcStructField(at, 's', offsetof(struct A1228, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1228, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {j<j>p} */
struct A1229 { j m0; union  A43 m1; p m2; };
void f_cpA1229(struct A1229 *x, const struct A1229 *y) { x->m0 = y->m0; f_cpA43(&x->m1, &y->m1); x->m2 = y->m2; };
int f_cmpA1229(const struct A1229 *x, const struct A1229 *y) { return x->m0 == y->m0 && f_cmpA43(&x->m1, &y->m1) && x->m2 == y->m2; };
DCstruct* f_touchdcstA1229() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1229), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1229, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1229, m1), 1, f_touchdcstA43());
		dcStructField(at, 'p', offsetof(struct A1229, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{f<ccf>s{ssfdpccsccis}ii{cpljcijipsff}{lds}i[5]fp}{sl<jdj[14]jllsij>pc}pl{ssj}clc{j<j>p}pjs> */
union  A1230 { struct A1225 m0; struct A1227 m1; p m2; l m3; struct A1228 m4; c m5; l m6; c m7; struct A1229 m8; p m9; j m10; s m11; };
void f_cpA1230(union  A1230 *x, const union  A1230 *y) { f_cpA1225(&x->m0, &y->m0); f_cpA1227(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; f_cpA1228(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1229(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1230(const union  A1230 *x, const union  A1230 *y) { return f_cmpA1225(&x->m0, &y->m0) && f_cmpA1227(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1228(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1229(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1230() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1230), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1230, m0), 1, f_touchdcstA1225());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1230, m1), 1, f_touchdcstA1227());
		dcStructField(at, 'p', offsetof(union  A1230, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1230, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1230, m4), 1, f_touchdcstA1228());
		dcStructField(at, 'c', offsetof(union  A1230, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1230, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1230, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1230, m8), 1, f_touchdcstA1229());
		dcStructField(at, 'p', offsetof(union  A1230, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1230, m10), 1);
		dcStructField(at, 's', offsetof(union  A1230, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dji{c}ij} */
struct A1231 { d m0; j m1; i m2; struct A212 m3; i m4; j m5; };
void f_cpA1231(struct A1231 *x, const struct A1231 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA212(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1231(const struct A1231 *x, const struct A1231 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA212(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1231() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1231), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1231, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1231, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1231, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1231, m3), 1, f_touchdcstA212());
		dcStructField(at, 'i', offsetof(struct A1231, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1231, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cip} */
struct A1232 { c m0; i m1; p m2; };
void f_cpA1232(struct A1232 *x, const struct A1232 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1232(const struct A1232 *x, const struct A1232 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1232() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1232), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1232, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1232, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1232, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cdpcpiljfsjs} */
struct A1233 { c m0; d m1; p m2; c m3; p m4; i m5; l m6; j m7; f m8; s m9; j m10; s m11; };
void f_cpA1233(struct A1233 *x, const struct A1233 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1233(const struct A1233 *x, const struct A1233 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1233() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1233), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1233, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1233, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1233, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1233, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1233, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1233, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1233, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1233, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1233, m8), 1);
		dcStructField(at, 's', offsetof(struct A1233, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1233, m10), 1);
		dcStructField(at, 's', offsetof(struct A1233, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {l[13]i} */
struct A1234 { l m0[13]; i m1; };
void f_cpA1234(struct A1234 *x, const struct A1234 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m0[12] = y->m0[12]; x->m1 = y->m1; };
int f_cmpA1234(const struct A1234 *x, const struct A1234 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m0[12] == y->m0[12] && x->m1 == y->m1; };
DCstruct* f_touchdcstA1234() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1234), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1234, m0), 13);
		dcStructField(at, 'i', offsetof(struct A1234, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <spjcd> */
union  A1235 { s m0; p m1; j m2; c m3; d m4; };
void f_cpA1235(union  A1235 *x, const union  A1235 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1235(const union  A1235 *x, const union  A1235 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1235() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1235), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1235, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1235, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1235, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1235, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1235, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {llpf{cdpcpiljfsjs}c{l[13]i}lpd<spjcd>l} */
struct A1236 { l m0; l m1; p m2; f m3; struct A1233 m4; c m5; struct A1234 m6; l m7; p m8; d m9; union  A1235 m10; l m11; };
void f_cpA1236(struct A1236 *x, const struct A1236 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1233(&x->m4, &y->m4); x->m5 = y->m5; f_cpA1234(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1235(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1236(const struct A1236 *x, const struct A1236 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1233(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA1234(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1235(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1236() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1236), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1236, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1236, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1236, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1236, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1236, m4), 1, f_touchdcstA1233());
		dcStructField(at, 'c', offsetof(struct A1236, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1236, m6), 1, f_touchdcstA1234());
		dcStructField(at, 'l', offsetof(struct A1236, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1236, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1236, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1236, m10), 1, f_touchdcstA1235());
		dcStructField(at, 'l', offsetof(struct A1236, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dc} */
struct A1237 { d m0; c m1; };
void f_cpA1237(struct A1237 *x, const struct A1237 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1237(const struct A1237 *x, const struct A1237 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1237() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1237), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1237, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1237, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ddflf{dji{c}ij}{cip}j{llpf{cdpcpiljfsjs}c{l[13]i}lpd<spjcd>l}{dc}fj> */
union  A1238 { d m0; d m1; f m2; l m3; f m4; struct A1231 m5; struct A1232 m6; j m7; struct A1236 m8; struct A1237 m9; f m10; j m11; };
void f_cpA1238(union  A1238 *x, const union  A1238 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1231(&x->m5, &y->m5); f_cpA1232(&x->m6, &y->m6); x->m7 = y->m7; f_cpA1236(&x->m8, &y->m8); f_cpA1237(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1238(const union  A1238 *x, const union  A1238 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1231(&x->m5, &y->m5) && f_cmpA1232(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA1236(&x->m8, &y->m8) && f_cmpA1237(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1238() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1238), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1238, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1238, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1238, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1238, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1238, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1238, m5), 1, f_touchdcstA1231());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1238, m6), 1, f_touchdcstA1232());
		dcStructField(at, 'j', offsetof(union  A1238, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1238, m8), 1, f_touchdcstA1236());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1238, m9), 1, f_touchdcstA1237());
		dcStructField(at, 'f', offsetof(union  A1238, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1238, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cdiscfscsfpf> */
union  A1239 { c m0; d m1; i m2; s m3; c m4; f m5; s m6; c m7; s m8; f m9; p m10; f m11; };
void f_cpA1239(union  A1239 *x, const union  A1239 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1239(const union  A1239 *x, const union  A1239 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1239() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1239), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1239, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1239, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1239, m2), 1);
		dcStructField(at, 's', offsetof(union  A1239, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1239, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1239, m5), 1);
		dcStructField(at, 's', offsetof(union  A1239, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1239, m7), 1);
		dcStructField(at, 's', offsetof(union  A1239, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1239, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1239, m10), 1);
		dcStructField(at, 'f', offsetof(union  A1239, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {slilldc[16]dsspj} */
struct A1240 { s m0; l m1; i m2; l m3; l m4; d m5; c m6[16]; d m7; s m8; s m9; p m10; j m11; };
void f_cpA1240(struct A1240 *x, const struct A1240 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m6[11] = y->m6[11]; x->m6[12] = y->m6[12]; x->m6[13] = y->m6[13]; x->m6[14] = y->m6[14]; x->m6[15] = y->m6[15]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1240(const struct A1240 *x, const struct A1240 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m6[11] == y->m6[11] && x->m6[12] == y->m6[12] && x->m6[13] == y->m6[13] && x->m6[14] == y->m6[14] && x->m6[15] == y->m6[15] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1240() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1240), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1240, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1240, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1240, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1240, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1240, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1240, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1240, m6), 16);
		dcStructField(at, 'd', offsetof(struct A1240, m7), 1);
		dcStructField(at, 's', offsetof(struct A1240, m8), 1);
		dcStructField(at, 's', offsetof(struct A1240, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1240, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1240, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jsi} */
struct A1241 { j m0; s m1; i m2; };
void f_cpA1241(struct A1241 *x, const struct A1241 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1241(const struct A1241 *x, const struct A1241 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1241() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1241), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1241, m0), 1);
		dcStructField(at, 's', offsetof(struct A1241, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1241, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {s<cdiscfscsfpf>didp{slilldc[16]dsspj}jpii{jsi}} */
struct A1242 { s m0; union  A1239 m1; d m2; i m3; d m4; p m5; struct A1240 m6; j m7; p m8; i m9; i m10; struct A1241 m11; };
void f_cpA1242(struct A1242 *x, const struct A1242 *y) { x->m0 = y->m0; f_cpA1239(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1240(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1241(&x->m11, &y->m11); };
int f_cmpA1242(const struct A1242 *x, const struct A1242 *y) { return x->m0 == y->m0 && f_cmpA1239(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1240(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1241(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1242() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1242), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1242, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1242, m1), 1, f_touchdcstA1239());
		dcStructField(at, 'd', offsetof(struct A1242, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1242, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1242, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1242, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1242, m6), 1, f_touchdcstA1240());
		dcStructField(at, 'j', offsetof(struct A1242, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1242, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1242, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1242, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1242, m11), 1, f_touchdcstA1241());
		dcCloseStruct(at);
	}
	return at;
};
/* <jsjlc> */
union  A1243 { j m0; s m1; j m2; l m3; c m4; };
void f_cpA1243(union  A1243 *x, const union  A1243 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1243(const union  A1243 *x, const union  A1243 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1243() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1243), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1243, m0), 1);
		dcStructField(at, 's', offsetof(union  A1243, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1243, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1243, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1243, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dfcllcpclsl[3]d} */
struct A1244 { d m0; f m1; c m2; l m3; l m4; c m5; p m6; c m7; l m8; s m9; l m10[3]; d m11; };
void f_cpA1244(struct A1244 *x, const struct A1244 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m11 = y->m11; };
int f_cmpA1244(const struct A1244 *x, const struct A1244 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m11 == y->m11; };
DCstruct* f_touchdcstA1244() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1244), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1244, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1244, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1244, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1244, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1244, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1244, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1244, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1244, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1244, m8), 1);
		dcStructField(at, 's', offsetof(struct A1244, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1244, m10), 3);
		dcStructField(at, 'd', offsetof(struct A1244, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <s[6]cjccls> */
union  A1245 { s m0[6]; c m1; j m2; c m3; c m4; l m5; s m6; };
void f_cpA1245(union  A1245 *x, const union  A1245 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1245(const union  A1245 *x, const union  A1245 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1245() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1245), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1245, m0), 6);
		dcStructField(at, 'c', offsetof(union  A1245, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1245, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1245, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1245, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1245, m5), 1);
		dcStructField(at, 's', offsetof(union  A1245, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pf<jsjlc>ijc{dfcllcpclsl[3]d}slcc<s[6]cjccls>} */
struct A1246 { p m0; f m1; union  A1243 m2; i m3; j m4; c m5; struct A1244 m6; s m7; l m8; c m9; c m10; union  A1245 m11; };
void f_cpA1246(struct A1246 *x, const struct A1246 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1243(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1244(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1245(&x->m11, &y->m11); };
int f_cmpA1246(const struct A1246 *x, const struct A1246 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1243(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1244(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1245(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1246() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1246), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1246, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1246, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1246, m2), 1, f_touchdcstA1243());
		dcStructField(at, 'i', offsetof(struct A1246, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1246, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1246, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1246, m6), 1, f_touchdcstA1244());
		dcStructField(at, 's', offsetof(struct A1246, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1246, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1246, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1246, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1246, m11), 1, f_touchdcstA1245());
		dcCloseStruct(at);
	}
	return at;
};
/* <ljlf{s<cdiscfscsfpf>didp{slilldc[16]dsspj}jpii{jsi}}{pf<jsjlc>ijc{dfcllcpclsl[3]d}slcc<s[6]cjccls>}jcdiii> */
union  A1247 { l m0; j m1; l m2; f m3; struct A1242 m4; struct A1246 m5; j m6; c m7; d m8; i m9; i m10; i m11; };
void f_cpA1247(union  A1247 *x, const union  A1247 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1242(&x->m4, &y->m4); f_cpA1246(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1247(const union  A1247 *x, const union  A1247 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1242(&x->m4, &y->m4) && f_cmpA1246(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1247() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1247), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1247, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1247, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1247, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1247, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1247, m4), 1, f_touchdcstA1242());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1247, m5), 1, f_touchdcstA1246());
		dcStructField(at, 'j', offsetof(union  A1247, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1247, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1247, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1247, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1247, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1247, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ccpj> */
union  A1248 { c m0; c m1; p m2; j m3; };
void f_cpA1248(union  A1248 *x, const union  A1248 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1248(const union  A1248 *x, const union  A1248 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1248() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1248), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1248, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1248, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1248, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1248, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fijsisfljsij> */
union  A1249 { f m0; i m1; j m2; s m3; i m4; s m5; f m6; l m7; j m8; s m9; i m10; j m11; };
void f_cpA1249(union  A1249 *x, const union  A1249 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1249(const union  A1249 *x, const union  A1249 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1249() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1249), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1249, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1249, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1249, m2), 1);
		dcStructField(at, 's', offsetof(union  A1249, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1249, m4), 1);
		dcStructField(at, 's', offsetof(union  A1249, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1249, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1249, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1249, m8), 1);
		dcStructField(at, 's', offsetof(union  A1249, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1249, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1249, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <l[13]dffpslslcsl[16]> */
union  A1250 { l m0[13]; d m1; f m2; f m3; p m4; s m5; l m6; s m7; l m8; c m9; s m10; l m11[16]; };
void f_cpA1250(union  A1250 *x, const union  A1250 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m0[12] = y->m0[12]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11[0] = y->m11[0]; x->m11[1] = y->m11[1]; x->m11[2] = y->m11[2]; x->m11[3] = y->m11[3]; x->m11[4] = y->m11[4]; x->m11[5] = y->m11[5]; x->m11[6] = y->m11[6]; x->m11[7] = y->m11[7]; x->m11[8] = y->m11[8]; x->m11[9] = y->m11[9]; x->m11[10] = y->m11[10]; x->m11[11] = y->m11[11]; x->m11[12] = y->m11[12]; x->m11[13] = y->m11[13]; x->m11[14] = y->m11[14]; x->m11[15] = y->m11[15]; };
int f_cmpA1250(const union  A1250 *x, const union  A1250 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m0[12] == y->m0[12] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11[0] == y->m11[0] && x->m11[1] == y->m11[1] && x->m11[2] == y->m11[2] && x->m11[3] == y->m11[3] && x->m11[4] == y->m11[4] && x->m11[5] == y->m11[5] && x->m11[6] == y->m11[6] && x->m11[7] == y->m11[7] && x->m11[8] == y->m11[8] && x->m11[9] == y->m11[9] && x->m11[10] == y->m11[10] && x->m11[11] == y->m11[11] && x->m11[12] == y->m11[12] && x->m11[13] == y->m11[13] && x->m11[14] == y->m11[14] && x->m11[15] == y->m11[15]; };
DCstruct* f_touchdcstA1250() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1250), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1250, m0), 13);
		dcStructField(at, 'd', offsetof(union  A1250, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1250, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1250, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1250, m4), 1);
		dcStructField(at, 's', offsetof(union  A1250, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1250, m6), 1);
		dcStructField(at, 's', offsetof(union  A1250, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1250, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1250, m9), 1);
		dcStructField(at, 's', offsetof(union  A1250, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1250, m11), 16);
		dcCloseStruct(at);
	}
	return at;
};
/* {dd<fijsisfljsij>f<l[13]dffpslslcsl[16]>} */
struct A1251 { d m0; d m1; union  A1249 m2; f m3; union  A1250 m4; };
void f_cpA1251(struct A1251 *x, const struct A1251 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1249(&x->m2, &y->m2); x->m3 = y->m3; f_cpA1250(&x->m4, &y->m4); };
int f_cmpA1251(const struct A1251 *x, const struct A1251 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1249(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA1250(&x->m4, &y->m4); };
DCstruct* f_touchdcstA1251() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1251), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1251, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1251, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1251, m2), 1, f_touchdcstA1249());
		dcStructField(at, 'f', offsetof(struct A1251, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1251, m4), 1, f_touchdcstA1250());
		dcCloseStruct(at);
	}
	return at;
};
/* {{dd<fijsisfljsij>f<l[13]dffpslslcsl[16]>}} */
struct A1252 { struct A1251 m0; };
void f_cpA1252(struct A1252 *x, const struct A1252 *y) { f_cpA1251(&x->m0, &y->m0); };
int f_cmpA1252(const struct A1252 *x, const struct A1252 *y) { return f_cmpA1251(&x->m0, &y->m0); };
DCstruct* f_touchdcstA1252() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A1252), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1252, m0), 1, f_touchdcstA1251());
		dcCloseStruct(at);
	}
	return at;
};
/* {lddjip} */
struct A1253 { l m0; d m1; d m2; j m3; i m4; p m5; };
void f_cpA1253(struct A1253 *x, const struct A1253 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1253(const struct A1253 *x, const struct A1253 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1253() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1253), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1253, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1253, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1253, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1253, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1253, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1253, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ifdc{lddjip}> */
union  A1254 { i m0; f m1; d m2; c m3; struct A1253 m4; };
void f_cpA1254(union  A1254 *x, const union  A1254 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1253(&x->m4, &y->m4); };
int f_cmpA1254(const union  A1254 *x, const union  A1254 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1253(&x->m4, &y->m4); };
DCstruct* f_touchdcstA1254() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1254), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1254, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1254, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1254, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1254, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1254, m4), 1, f_touchdcstA1253());
		dcCloseStruct(at);
	}
	return at;
};
/* {fdd} */
struct A1255 { f m0; d m1; d m2; };
void f_cpA1255(struct A1255 *x, const struct A1255 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1255(const struct A1255 *x, const struct A1255 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1255() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1255), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1255, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1255, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1255, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{fcs}ffccii{fdd}f> */
union  A1256 { struct A533 m0; f m1; f m2; c m3; c m4; i m5; i m6; struct A1255 m7; f m8; };
void f_cpA1256(union  A1256 *x, const union  A1256 *y) { f_cpA533(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1255(&x->m7, &y->m7); x->m8 = y->m8; };
int f_cmpA1256(const union  A1256 *x, const union  A1256 *y) { return f_cmpA533(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1255(&x->m7, &y->m7) && x->m8 == y->m8; };
DCstruct* f_touchdcstA1256() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1256), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1256, m0), 1, f_touchdcstA533());
		dcStructField(at, 'f', offsetof(union  A1256, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1256, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1256, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1256, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1256, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1256, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1256, m7), 1, f_touchdcstA1255());
		dcStructField(at, 'f', offsetof(union  A1256, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dis} */
struct A1257 { d m0; i m1; s m2; };
void f_cpA1257(struct A1257 *x, const struct A1257 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1257(const struct A1257 *x, const struct A1257 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1257() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1257), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1257, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1257, m1), 1);
		dcStructField(at, 's', offsetof(struct A1257, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p[2]fpdi[12]i} */
struct A1258 { p m0[2]; f m1; p m2; d m3; i m4[12]; i m5; };
void f_cpA1258(struct A1258 *x, const struct A1258 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m5 = y->m5; };
int f_cmpA1258(const struct A1258 *x, const struct A1258 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m5 == y->m5; };
DCstruct* f_touchdcstA1258() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1258), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1258, m0), 2);
		dcStructField(at, 'f', offsetof(struct A1258, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1258, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1258, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1258, m4), 12);
		dcStructField(at, 'i', offsetof(struct A1258, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fs[13]lf{p}pp{p[2]fpdi[12]i}fppl} */
struct A1259 { f m0; s m1[13]; l m2; f m3; struct A33 m4; p m5; p m6; struct A1258 m7; f m8; p m9; p m10; l m11; };
void f_cpA1259(struct A1259 *x, const struct A1259 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m1[10] = y->m1[10]; x->m1[11] = y->m1[11]; x->m1[12] = y->m1[12]; x->m2 = y->m2; x->m3 = y->m3; f_cpA33(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA1258(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1259(const struct A1259 *x, const struct A1259 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m1[10] == y->m1[10] && x->m1[11] == y->m1[11] && x->m1[12] == y->m1[12] && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA33(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1258(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1259() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1259), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1259, m0), 1);
		dcStructField(at, 's', offsetof(struct A1259, m1), 13);
		dcStructField(at, 'l', offsetof(struct A1259, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1259, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1259, m4), 1, f_touchdcstA33());
		dcStructField(at, 'p', offsetof(struct A1259, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1259, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1259, m7), 1, f_touchdcstA1258());
		dcStructField(at, 'f', offsetof(struct A1259, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1259, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1259, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1259, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pppcdcss} */
struct A1260 { p m0; p m1; p m2; c m3; d m4; c m5; s m6; s m7; };
void f_cpA1260(struct A1260 *x, const struct A1260 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1260(const struct A1260 *x, const struct A1260 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1260() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1260), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1260, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1260, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1260, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1260, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1260, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1260, m5), 1);
		dcStructField(at, 's', offsetof(struct A1260, m6), 1);
		dcStructField(at, 's', offsetof(struct A1260, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <spjfplp> */
union  A1261 { s m0; p m1; j m2; f m3; p m4; l m5; p m6; };
void f_cpA1261(union  A1261 *x, const union  A1261 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1261(const union  A1261 *x, const union  A1261 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1261() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1261), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1261, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1261, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1261, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1261, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1261, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1261, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1261, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dflsis<spjfplp>> */
union  A1262 { d m0; f m1; l m2; s m3; i m4; s m5; union  A1261 m6; };
void f_cpA1262(union  A1262 *x, const union  A1262 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1261(&x->m6, &y->m6); };
int f_cmpA1262(const union  A1262 *x, const union  A1262 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1261(&x->m6, &y->m6); };
DCstruct* f_touchdcstA1262() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1262), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1262, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1262, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1262, m2), 1);
		dcStructField(at, 's', offsetof(union  A1262, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1262, m4), 1);
		dcStructField(at, 's', offsetof(union  A1262, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1262, m6), 1, f_touchdcstA1261());
		dcCloseStruct(at);
	}
	return at;
};
/* <lpjs[3]illflppj> */
union  A1263 { l m0; p m1; j m2; s m3[3]; i m4; l m5; l m6; f m7; l m8; p m9; p m10; j m11; };
void f_cpA1263(union  A1263 *x, const union  A1263 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1263(const union  A1263 *x, const union  A1263 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1263() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1263), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1263, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1263, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1263, m2), 1);
		dcStructField(at, 's', offsetof(union  A1263, m3), 3);
		dcStructField(at, 'i', offsetof(union  A1263, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1263, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1263, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1263, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1263, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1263, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1263, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1263, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dicj[10]pccjs> */
union  A1264 { d m0; i m1; c m2; j m3[10]; p m4; c m5; c m6; j m7; s m8; };
void f_cpA1264(union  A1264 *x, const union  A1264 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1264(const union  A1264 *x, const union  A1264 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1264() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1264), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1264, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1264, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1264, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1264, m3), 10);
		dcStructField(at, 'p', offsetof(union  A1264, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1264, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1264, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1264, m7), 1);
		dcStructField(at, 's', offsetof(union  A1264, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dclscdpfc<lpjs[3]illflppj>s<dicj[10]pccjs>> */
union  A1265 { d m0; c m1; l m2; s m3; c m4; d m5; p m6; f m7; c m8; union  A1263 m9; s m10; union  A1264 m11; };
void f_cpA1265(union  A1265 *x, const union  A1265 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1263(&x->m9, &y->m9); x->m10 = y->m10; f_cpA1264(&x->m11, &y->m11); };
int f_cmpA1265(const union  A1265 *x, const union  A1265 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1263(&x->m9, &y->m9) && x->m10 == y->m10 && f_cmpA1264(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1265() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1265), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1265, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1265, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1265, m2), 1);
		dcStructField(at, 's', offsetof(union  A1265, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1265, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1265, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1265, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1265, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1265, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1265, m9), 1, f_touchdcstA1263());
		dcStructField(at, 's', offsetof(union  A1265, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1265, m11), 1, f_touchdcstA1264());
		dcCloseStruct(at);
	}
	return at;
};
/* <jd[6]> */
union  A1266 { j m0; d m1[6]; };
void f_cpA1266(union  A1266 *x, const union  A1266 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; };
int f_cmpA1266(const union  A1266 *x, const union  A1266 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5]; };
DCstruct* f_touchdcstA1266() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1266), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1266, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1266, m1), 6);
		dcCloseStruct(at);
	}
	return at;
};
/* <ils> */
union  A1267 { i m0; l m1; s m2; };
void f_cpA1267(union  A1267 *x, const union  A1267 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1267(const union  A1267 *x, const union  A1267 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1267() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1267), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1267, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1267, m1), 1);
		dcStructField(at, 's', offsetof(union  A1267, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sds> */
union  A1268 { s m0; d m1; s m2; };
void f_cpA1268(union  A1268 *x, const union  A1268 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1268(const union  A1268 *x, const union  A1268 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1268() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1268), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1268, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1268, m1), 1);
		dcStructField(at, 's', offsetof(union  A1268, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jsffcip> */
union  A1269 { j m0; s m1; f m2; f m3; c m4; i m5; p m6; };
void f_cpA1269(union  A1269 *x, const union  A1269 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1269(const union  A1269 *x, const union  A1269 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1269() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1269), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1269, m0), 1);
		dcStructField(at, 's', offsetof(union  A1269, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1269, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1269, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1269, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1269, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1269, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<ils><sds><jsffcip>ljdspjl} */
struct A1270 { union  A1267 m0; union  A1268 m1; union  A1269 m2; l m3; j m4; d m5; s m6; p m7; j m8; l m9; };
void f_cpA1270(struct A1270 *x, const struct A1270 *y) { f_cpA1267(&x->m0, &y->m0); f_cpA1268(&x->m1, &y->m1); f_cpA1269(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1270(const struct A1270 *x, const struct A1270 *y) { return f_cmpA1267(&x->m0, &y->m0) && f_cmpA1268(&x->m1, &y->m1) && f_cmpA1269(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1270() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1270), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1270, m0), 1, f_touchdcstA1267());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1270, m1), 1, f_touchdcstA1268());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1270, m2), 1, f_touchdcstA1269());
		dcStructField(at, 'l', offsetof(struct A1270, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1270, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1270, m5), 1);
		dcStructField(at, 's', offsetof(struct A1270, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1270, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1270, m8), 1);
		dcStructField(at, 'l', offsetof(struct A1270, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cfpp> */
union  A1271 { c m0; f m1; p m2; p m3; };
void f_cpA1271(union  A1271 *x, const union  A1271 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1271(const union  A1271 *x, const union  A1271 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1271() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1271), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1271, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1271, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1271, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1271, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jlsssippdcpp} */
struct A1272 { j m0; l m1; s m2; s m3; s m4; i m5; p m6; p m7; d m8; c m9; p m10; p m11; };
void f_cpA1272(struct A1272 *x, const struct A1272 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1272(const struct A1272 *x, const struct A1272 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1272() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1272), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1272, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1272, m1), 1);
		dcStructField(at, 's', offsetof(struct A1272, m2), 1);
		dcStructField(at, 's', offsetof(struct A1272, m3), 1);
		dcStructField(at, 's', offsetof(struct A1272, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1272, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1272, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1272, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1272, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1272, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1272, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1272, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{jlsssippdcpp}lcijpcifpc} */
struct A1273 { struct A1272 m0; l m1; c m2; i m3; j m4; p m5; c m6; i m7; f m8; p m9; c m10; };
void f_cpA1273(struct A1273 *x, const struct A1273 *y) { f_cpA1272(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1273(const struct A1273 *x, const struct A1273 *y) { return f_cmpA1272(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1273() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1273), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1273, m0), 1, f_touchdcstA1272());
		dcStructField(at, 'l', offsetof(struct A1273, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1273, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1273, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1273, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1273, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1273, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1273, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1273, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1273, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1273, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <slfd> */
union  A1274 { s m0; l m1; f m2; d m3; };
void f_cpA1274(union  A1274 *x, const union  A1274 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1274(const union  A1274 *x, const union  A1274 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1274() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1274), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1274, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1274, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1274, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1274, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {llpsjpdsijf} */
struct A1275 { l m0; l m1; p m2; s m3; j m4; p m5; d m6; s m7; i m8; j m9; f m10; };
void f_cpA1275(struct A1275 *x, const struct A1275 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1275(const struct A1275 *x, const struct A1275 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1275() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1275), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1275, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1275, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1275, m2), 1);
		dcStructField(at, 's', offsetof(struct A1275, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1275, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1275, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1275, m6), 1);
		dcStructField(at, 's', offsetof(struct A1275, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1275, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1275, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1275, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ls<sds>sdj{llpsjpdsijf}lfpsf} */
struct A1276 { l m0; s m1; union  A1268 m2; s m3; d m4; j m5; struct A1275 m6; l m7; f m8; p m9; s m10; f m11; };
void f_cpA1276(struct A1276 *x, const struct A1276 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1268(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1275(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1276(const struct A1276 *x, const struct A1276 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1268(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1275(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1276() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1276), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1276, m0), 1);
		dcStructField(at, 's', offsetof(struct A1276, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1276, m2), 1, f_touchdcstA1268());
		dcStructField(at, 's', offsetof(struct A1276, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1276, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1276, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1276, m6), 1, f_touchdcstA1275());
		dcStructField(at, 'l', offsetof(struct A1276, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1276, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1276, m9), 1);
		dcStructField(at, 's', offsetof(struct A1276, m10), 1);
		dcStructField(at, 'f', offsetof(struct A1276, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<slfd>cs{ls<sds>sdj{llpsjpdsijf}lfpsf}flp> */
union  A1277 { union  A1274 m0; c m1; s m2; struct A1276 m3; f m4; l m5; p m6; };
void f_cpA1277(union  A1277 *x, const union  A1277 *y) { f_cpA1274(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA1276(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1277(const union  A1277 *x, const union  A1277 *y) { return f_cmpA1274(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1276(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1277() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1277), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1277, m0), 1, f_touchdcstA1274());
		dcStructField(at, 'c', offsetof(union  A1277, m1), 1);
		dcStructField(at, 's', offsetof(union  A1277, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1277, m3), 1, f_touchdcstA1276());
		dcStructField(at, 'f', offsetof(union  A1277, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1277, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1277, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpfsjif[16]pj> */
union  A1278 { c m0; p m1; f m2; s m3; j m4; i m5; f m6[16]; p m7; j m8; };
void f_cpA1278(union  A1278 *x, const union  A1278 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m6[11] = y->m6[11]; x->m6[12] = y->m6[12]; x->m6[13] = y->m6[13]; x->m6[14] = y->m6[14]; x->m6[15] = y->m6[15]; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1278(const union  A1278 *x, const union  A1278 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m6[11] == y->m6[11] && x->m6[12] == y->m6[12] && x->m6[13] == y->m6[13] && x->m6[14] == y->m6[14] && x->m6[15] == y->m6[15] && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1278() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1278), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1278, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1278, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1278, m2), 1);
		dcStructField(at, 's', offsetof(union  A1278, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1278, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1278, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1278, m6), 16);
		dcStructField(at, 'p', offsetof(union  A1278, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1278, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <llplds[7]sccsdl> */
union  A1279 { l m0; l m1; p m2; l m3; d m4; s m5[7]; s m6; c m7; c m8; s m9; d m10; l m11; };
void f_cpA1279(union  A1279 *x, const union  A1279 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1279(const union  A1279 *x, const union  A1279 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1279() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1279), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1279, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1279, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1279, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1279, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1279, m4), 1);
		dcStructField(at, 's', offsetof(union  A1279, m5), 7);
		dcStructField(at, 's', offsetof(union  A1279, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1279, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1279, m8), 1);
		dcStructField(at, 's', offsetof(union  A1279, m9), 1);
		dcStructField(at, 'd', offsetof(union  A1279, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1279, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<cpfsjif[16]pj>pcffp<llplds[7]sccsdl>iccff} */
struct A1280 { union  A1278 m0; p m1; c m2; f m3; f m4; p m5; union  A1279 m6; i m7; c m8; c m9; f m10; f m11; };
void f_cpA1280(struct A1280 *x, const struct A1280 *y) { f_cpA1278(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1279(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1280(const struct A1280 *x, const struct A1280 *y) { return f_cmpA1278(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1279(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1280() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1280), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1280, m0), 1, f_touchdcstA1278());
		dcStructField(at, 'p', offsetof(struct A1280, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1280, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1280, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1280, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1280, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1280, m6), 1, f_touchdcstA1279());
		dcStructField(at, 'i', offsetof(struct A1280, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1280, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1280, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1280, m10), 1);
		dcStructField(at, 'f', offsetof(struct A1280, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ffpp{<cpfsjif[16]pj>pcffp<llplds[7]sccsdl>iccff}f} */
struct A1281 { f m0; f m1; p m2; p m3; struct A1280 m4; f m5; };
void f_cpA1281(struct A1281 *x, const struct A1281 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1280(&x->m4, &y->m4); x->m5 = y->m5; };
int f_cmpA1281(const struct A1281 *x, const struct A1281 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1280(&x->m4, &y->m4) && x->m5 == y->m5; };
DCstruct* f_touchdcstA1281() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1281), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1281, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1281, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1281, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1281, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1281, m4), 1, f_touchdcstA1280());
		dcStructField(at, 'f', offsetof(struct A1281, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <idcddfcfcfdd> */
union  A1282 { i m0; d m1; c m2; d m3; d m4; f m5; c m6; f m7; c m8; f m9; d m10; d m11; };
void f_cpA1282(union  A1282 *x, const union  A1282 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1282(const union  A1282 *x, const union  A1282 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1282() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1282), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1282, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1282, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1282, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1282, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1282, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1282, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1282, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1282, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1282, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1282, m9), 1);
		dcStructField(at, 'd', offsetof(union  A1282, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1282, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpsplfdsiil> */
union  A1283 { c m0; p m1; s m2; p m3; l m4; f m5; d m6; s m7; i m8; i m9; l m10; };
void f_cpA1283(union  A1283 *x, const union  A1283 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1283(const union  A1283 *x, const union  A1283 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1283() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1283), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1283, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1283, m1), 1);
		dcStructField(at, 's', offsetof(union  A1283, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1283, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1283, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1283, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1283, m6), 1);
		dcStructField(at, 's', offsetof(union  A1283, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1283, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1283, m9), 1);
		dcStructField(at, 'l', offsetof(union  A1283, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {flf} */
struct A1284 { f m0; l m1; f m2; };
void f_cpA1284(struct A1284 *x, const struct A1284 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1284(const struct A1284 *x, const struct A1284 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1284() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1284), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1284, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1284, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1284, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cdsc{flf}is> */
union  A1285 { c m0; d m1; s m2; c m3; struct A1284 m4; i m5; s m6; };
void f_cpA1285(union  A1285 *x, const union  A1285 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1284(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1285(const union  A1285 *x, const union  A1285 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1284(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1285() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1285), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1285, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1285, m1), 1);
		dcStructField(at, 's', offsetof(union  A1285, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1285, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1285, m4), 1, f_touchdcstA1284());
		dcStructField(at, 'i', offsetof(union  A1285, m5), 1);
		dcStructField(at, 's', offsetof(union  A1285, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ppipdjf[3]sssdp> */
union  A1286 { p m0; p m1; i m2; p m3; d m4; j m5; f m6[3]; s m7; s m8; s m9; d m10; p m11; };
void f_cpA1286(union  A1286 *x, const union  A1286 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1286(const union  A1286 *x, const union  A1286 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1286() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1286), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1286, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1286, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1286, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1286, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1286, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1286, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1286, m6), 3);
		dcStructField(at, 's', offsetof(union  A1286, m7), 1);
		dcStructField(at, 's', offsetof(union  A1286, m8), 1);
		dcStructField(at, 's', offsetof(union  A1286, m9), 1);
		dcStructField(at, 'd', offsetof(union  A1286, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1286, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jpljc} */
struct A1287 { j m0; p m1; l m2; j m3; c m4; };
void f_cpA1287(struct A1287 *x, const struct A1287 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1287(const struct A1287 *x, const struct A1287 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1287() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1287), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1287, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1287, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1287, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1287, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1287, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pl<ppipdjf[3]sssdp>{jpljc}} */
struct A1288 { p m0; l m1; union  A1286 m2; struct A1287 m3; };
void f_cpA1288(struct A1288 *x, const struct A1288 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1286(&x->m2, &y->m2); f_cpA1287(&x->m3, &y->m3); };
int f_cmpA1288(const struct A1288 *x, const struct A1288 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1286(&x->m2, &y->m2) && f_cmpA1287(&x->m3, &y->m3); };
DCstruct* f_touchdcstA1288() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1288), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1288, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1288, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1288, m2), 1, f_touchdcstA1286());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1288, m3), 1, f_touchdcstA1287());
		dcCloseStruct(at);
	}
	return at;
};
/* <dpcpfjsdlli[4]j> */
union  A1289 { d m0; p m1; c m2; p m3; f m4; j m5; s m6; d m7; l m8; l m9; i m10[4]; j m11; };
void f_cpA1289(union  A1289 *x, const union  A1289 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m11 = y->m11; };
int f_cmpA1289(const union  A1289 *x, const union  A1289 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m11 == y->m11; };
DCstruct* f_touchdcstA1289() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1289), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1289, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1289, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1289, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1289, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1289, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1289, m5), 1);
		dcStructField(at, 's', offsetof(union  A1289, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1289, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1289, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1289, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1289, m10), 4);
		dcStructField(at, 'j', offsetof(union  A1289, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<cdsc{flf}is>p[9]pp{pl<ppipdjf[3]sssdp>{jpljc}}pp<dpcpfjsdlli[4]j>dj> */
union  A1290 { union  A1285 m0; p m1[9]; p m2; p m3; struct A1288 m4; p m5; p m6; union  A1289 m7; d m8; j m9; };
void f_cpA1290(union  A1290 *x, const union  A1290 *y) { f_cpA1285(&x->m0, &y->m0); x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m2 = y->m2; x->m3 = y->m3; f_cpA1288(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA1289(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1290(const union  A1290 *x, const union  A1290 *y) { return f_cmpA1285(&x->m0, &y->m0) && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1288(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1289(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1290() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1290), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1290, m0), 1, f_touchdcstA1285());
		dcStructField(at, 'p', offsetof(union  A1290, m1), 9);
		dcStructField(at, 'p', offsetof(union  A1290, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1290, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1290, m4), 1, f_touchdcstA1288());
		dcStructField(at, 'p', offsetof(union  A1290, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1290, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1290, m7), 1, f_touchdcstA1289());
		dcStructField(at, 'd', offsetof(union  A1290, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1290, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pdpjlldp[8]cjpd> */
union  A1291 { p m0; d m1; p m2; j m3; l m4; l m5; d m6; p m7[8]; c m8; j m9; p m10; d m11; };
void f_cpA1291(union  A1291 *x, const union  A1291 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; x->m7[7] = y->m7[7]; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1291(const union  A1291 *x, const union  A1291 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6] && x->m7[7] == y->m7[7] && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1291() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1291), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1291, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1291, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1291, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1291, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1291, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1291, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1291, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1291, m7), 8);
		dcStructField(at, 'c', offsetof(union  A1291, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1291, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1291, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1291, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lfci} */
struct A1292 { l m0; f m1; c m2; i m3; };
void f_cpA1292(struct A1292 *x, const struct A1292 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1292(const struct A1292 *x, const struct A1292 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1292() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1292), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1292, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1292, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1292, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1292, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f<j>fcci<pdpjlldp[8]cjpd>ccs{lfci}c} */
struct A1293 { f m0; union  A43 m1; f m2; c m3; c m4; i m5; union  A1291 m6; c m7; c m8; s m9; struct A1292 m10; c m11; };
void f_cpA1293(struct A1293 *x, const struct A1293 *y) { x->m0 = y->m0; f_cpA43(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1291(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1292(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1293(const struct A1293 *x, const struct A1293 *y) { return x->m0 == y->m0 && f_cmpA43(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1291(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1292(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1293() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1293), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1293, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1293, m1), 1, f_touchdcstA43());
		dcStructField(at, 'f', offsetof(struct A1293, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1293, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1293, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1293, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1293, m6), 1, f_touchdcstA1291());
		dcStructField(at, 'c', offsetof(struct A1293, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1293, m8), 1);
		dcStructField(at, 's', offsetof(struct A1293, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1293, m10), 1, f_touchdcstA1292());
		dcStructField(at, 'c', offsetof(struct A1293, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ilplj> */
union  A1294 { i m0; l m1; p m2; l m3; j m4; };
void f_cpA1294(union  A1294 *x, const union  A1294 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1294(const union  A1294 *x, const union  A1294 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1294() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1294), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1294, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1294, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1294, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1294, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1294, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <c<ilplj>> */
union  A1295 { c m0; union  A1294 m1; };
void f_cpA1295(union  A1295 *x, const union  A1295 *y) { x->m0 = y->m0; f_cpA1294(&x->m1, &y->m1); };
int f_cmpA1295(const union  A1295 *x, const union  A1295 *y) { return x->m0 == y->m0 && f_cmpA1294(&x->m1, &y->m1); };
DCstruct* f_touchdcstA1295() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1295), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1295, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1295, m1), 1, f_touchdcstA1294());
		dcCloseStruct(at);
	}
	return at;
};
/* {slpcji} */
struct A1296 { s m0; l m1; p m2; c m3; j m4; i m5; };
void f_cpA1296(struct A1296 *x, const struct A1296 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1296(const struct A1296 *x, const struct A1296 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1296() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1296), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1296, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1296, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1296, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1296, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1296, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1296, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ldf{slpcji}<jjl>ipp> */
union  A1297 { l m0; d m1; f m2; struct A1296 m3; union  A226 m4; i m5; p m6; p m7; };
void f_cpA1297(union  A1297 *x, const union  A1297 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1296(&x->m3, &y->m3); f_cpA226(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1297(const union  A1297 *x, const union  A1297 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1296(&x->m3, &y->m3) && f_cmpA226(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1297() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1297), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1297, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1297, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1297, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1297, m3), 1, f_touchdcstA1296());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1297, m4), 1, f_touchdcstA226());
		dcStructField(at, 'i', offsetof(union  A1297, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1297, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1297, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ps<c<ilplj>>fflffjs<ldf{slpcji}<jjl>ipp>j> */
union  A1298 { p m0; s m1; union  A1295 m2; f m3; f m4; l m5; f m6; f m7; j m8; s m9; union  A1297 m10; j m11; };
void f_cpA1298(union  A1298 *x, const union  A1298 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1295(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1297(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1298(const union  A1298 *x, const union  A1298 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1295(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1297(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1298() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1298), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1298, m0), 1);
		dcStructField(at, 's', offsetof(union  A1298, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1298, m2), 1, f_touchdcstA1295());
		dcStructField(at, 'f', offsetof(union  A1298, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1298, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1298, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1298, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1298, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1298, m8), 1);
		dcStructField(at, 's', offsetof(union  A1298, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1298, m10), 1, f_touchdcstA1297());
		dcStructField(at, 'j', offsetof(union  A1298, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <slljcjljdsji> */
union  A1299 { s m0; l m1; l m2; j m3; c m4; j m5; l m6; j m7; d m8; s m9; j m10; i m11; };
void f_cpA1299(union  A1299 *x, const union  A1299 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1299(const union  A1299 *x, const union  A1299 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1299() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1299), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1299, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1299, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1299, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1299, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1299, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1299, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1299, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1299, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1299, m8), 1);
		dcStructField(at, 's', offsetof(union  A1299, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1299, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1299, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <d<slljcjljdsji>cjjcillf[9]jd> */
union  A1300 { d m0; union  A1299 m1; c m2; j m3; j m4; c m5; i m6; l m7; l m8; f m9[9]; j m10; d m11; };
void f_cpA1300(union  A1300 *x, const union  A1300 *y) { x->m0 = y->m0; f_cpA1299(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m9[8] = y->m9[8]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1300(const union  A1300 *x, const union  A1300 *y) { return x->m0 == y->m0 && f_cmpA1299(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m9[8] == y->m9[8] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1300() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1300), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1300, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1300, m1), 1, f_touchdcstA1299());
		dcStructField(at, 'c', offsetof(union  A1300, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1300, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1300, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1300, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1300, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1300, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1300, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1300, m9), 9);
		dcStructField(at, 'j', offsetof(union  A1300, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1300, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jspild> */
union  A1301 { j m0; s m1; p m2; i m3; l m4; d m5; };
void f_cpA1301(union  A1301 *x, const union  A1301 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1301(const union  A1301 *x, const union  A1301 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1301() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1301), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1301, m0), 1);
		dcStructField(at, 's', offsetof(union  A1301, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1301, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1301, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1301, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1301, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p[12]sii} */
struct A1302 { p m0[12]; s m1; i m2; i m3; };
void f_cpA1302(struct A1302 *x, const struct A1302 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1302(const struct A1302 *x, const struct A1302 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1302() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1302), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1302, m0), 12);
		dcStructField(at, 's', offsetof(struct A1302, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1302, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1302, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <didflis[14]ssfjs> */
union  A1303 { d m0; i m1; d m2; f m3; l m4; i m5; s m6[14]; s m7; s m8; f m9; j m10; s m11; };
void f_cpA1303(union  A1303 *x, const union  A1303 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m6[11] = y->m6[11]; x->m6[12] = y->m6[12]; x->m6[13] = y->m6[13]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1303(const union  A1303 *x, const union  A1303 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m6[11] == y->m6[11] && x->m6[12] == y->m6[12] && x->m6[13] == y->m6[13] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1303() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1303), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1303, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1303, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1303, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1303, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1303, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1303, m5), 1);
		dcStructField(at, 's', offsetof(union  A1303, m6), 14);
		dcStructField(at, 's', offsetof(union  A1303, m7), 1);
		dcStructField(at, 's', offsetof(union  A1303, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1303, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1303, m10), 1);
		dcStructField(at, 's', offsetof(union  A1303, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cilpli} */
struct A1304 { c m0; i m1; l m2; p m3; l m4; i m5; };
void f_cpA1304(struct A1304 *x, const struct A1304 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1304(const struct A1304 *x, const struct A1304 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1304() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1304), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1304, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1304, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1304, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1304, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1304, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1304, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pfffj} */
struct A1305 { p m0; f m1; f m2; f m3; j m4; };
void f_cpA1305(struct A1305 *x, const struct A1305 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1305(const struct A1305 *x, const struct A1305 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1305() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1305), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1305, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1305, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1305, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1305, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1305, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {plslcsdcs} */
struct A1306 { p m0; l m1; s m2; l m3; c m4; s m5; d m6; c m7; s m8; };
void f_cpA1306(struct A1306 *x, const struct A1306 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1306(const struct A1306 *x, const struct A1306 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1306() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1306), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1306, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1306, m1), 1);
		dcStructField(at, 's', offsetof(struct A1306, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1306, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1306, m4), 1);
		dcStructField(at, 's', offsetof(struct A1306, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1306, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1306, m7), 1);
		dcStructField(at, 's', offsetof(struct A1306, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dfifisj[3]c> */
union  A1307 { d m0; f m1; i m2; f m3; i m4; s m5; j m6[3]; c m7; };
void f_cpA1307(union  A1307 *x, const union  A1307 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m7 = y->m7; };
int f_cmpA1307(const union  A1307 *x, const union  A1307 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m7 == y->m7; };
DCstruct* f_touchdcstA1307() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1307), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1307, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1307, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1307, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1307, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1307, m4), 1);
		dcStructField(at, 's', offsetof(union  A1307, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1307, m6), 3);
		dcStructField(at, 'c', offsetof(union  A1307, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jiil<dfifisj[3]c>cppspl} */
struct A1308 { j m0; i m1; i m2; l m3; union  A1307 m4; c m5; p m6; p m7; s m8; p m9; l m10; };
void f_cpA1308(struct A1308 *x, const struct A1308 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1307(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1308(const struct A1308 *x, const struct A1308 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1307(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1308() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1308), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1308, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1308, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1308, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1308, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1308, m4), 1, f_touchdcstA1307());
		dcStructField(at, 'c', offsetof(struct A1308, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1308, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1308, m7), 1);
		dcStructField(at, 's', offsetof(struct A1308, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1308, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1308, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ljd{jiil<dfifisj[3]c>cppspl}cp} */
struct A1309 { l m0; j m1; d m2; struct A1308 m3; c m4; p m5; };
void f_cpA1309(struct A1309 *x, const struct A1309 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1308(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1309(const struct A1309 *x, const struct A1309 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1308(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1309() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1309), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1309, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1309, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1309, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1309, m3), 1, f_touchdcstA1308());
		dcStructField(at, 'c', offsetof(struct A1309, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1309, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jds[15]cp> */
union  A1310 { j m0; d m1; s m2[15]; c m3; p m4; };
void f_cpA1310(union  A1310 *x, const union  A1310 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m2[13] = y->m2[13]; x->m2[14] = y->m2[14]; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1310(const union  A1310 *x, const union  A1310 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m2[13] == y->m2[13] && x->m2[14] == y->m2[14] && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1310() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1310), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1310, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1310, m1), 1);
		dcStructField(at, 's', offsetof(union  A1310, m2), 15);
		dcStructField(at, 'c', offsetof(union  A1310, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1310, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sissfdiss} */
struct A1311 { s m0; i m1; s m2; s m3; f m4; d m5; i m6; s m7; s m8; };
void f_cpA1311(struct A1311 *x, const struct A1311 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1311(const struct A1311 *x, const struct A1311 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1311() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1311), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1311, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1311, m1), 1);
		dcStructField(at, 's', offsetof(struct A1311, m2), 1);
		dcStructField(at, 's', offsetof(struct A1311, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1311, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1311, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1311, m6), 1);
		dcStructField(at, 's', offsetof(struct A1311, m7), 1);
		dcStructField(at, 's', offsetof(struct A1311, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lfifpfdd[3]idci> */
union  A1312 { l m0; f m1; i m2; f m3; p m4; f m5; d m6; d m7[3]; i m8; d m9; c m10; i m11; };
void f_cpA1312(union  A1312 *x, const union  A1312 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1312(const union  A1312 *x, const union  A1312 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1312() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1312), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1312, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1312, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1312, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1312, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1312, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1312, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1312, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1312, m7), 3);
		dcStructField(at, 'i', offsetof(union  A1312, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1312, m9), 1);
		dcStructField(at, 'c', offsetof(union  A1312, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1312, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <c{sissfdiss}dl<lfifpfdd[3]idci>sii<ip>> */
union  A1313 { c m0; struct A1311 m1; d m2; l m3; union  A1312 m4; s m5; i m6; i m7; union  A416 m8; };
void f_cpA1313(union  A1313 *x, const union  A1313 *y) { x->m0 = y->m0; f_cpA1311(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; f_cpA1312(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA416(&x->m8, &y->m8); };
int f_cmpA1313(const union  A1313 *x, const union  A1313 *y) { return x->m0 == y->m0 && f_cmpA1311(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1312(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA416(&x->m8, &y->m8); };
DCstruct* f_touchdcstA1313() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1313), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1313, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1313, m1), 1, f_touchdcstA1311());
		dcStructField(at, 'd', offsetof(union  A1313, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1313, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1313, m4), 1, f_touchdcstA1312());
		dcStructField(at, 's', offsetof(union  A1313, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1313, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1313, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1313, m8), 1, f_touchdcstA416());
		dcCloseStruct(at);
	}
	return at;
};
/* <fidp> */
union  A1314 { f m0; i m1; d m2; p m3; };
void f_cpA1314(union  A1314 *x, const union  A1314 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1314(const union  A1314 *x, const union  A1314 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1314() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1314), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1314, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1314, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1314, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1314, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <icplljpfc> */
union  A1315 { i m0; c m1; p m2; l m3; l m4; j m5; p m6; f m7; c m8; };
void f_cpA1315(union  A1315 *x, const union  A1315 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1315(const union  A1315 *x, const union  A1315 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1315() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1315), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1315, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1315, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1315, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1315, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1315, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1315, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1315, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1315, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1315, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cdfsi> */
union  A1316 { c m0; d m1; f m2; s m3; i m4; };
void f_cpA1316(union  A1316 *x, const union  A1316 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1316(const union  A1316 *x, const union  A1316 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1316() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1316), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1316, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1316, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1316, m2), 1);
		dcStructField(at, 's', offsetof(union  A1316, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1316, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {s[13]} */
struct A1317 { s m0[13]; };
void f_cpA1317(struct A1317 *x, const struct A1317 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m0[12] = y->m0[12]; };
int f_cmpA1317(const struct A1317 *x, const struct A1317 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m0[12] == y->m0[12]; };
DCstruct* f_touchdcstA1317() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A1317), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1317, m0), 13);
		dcCloseStruct(at);
	}
	return at;
};
/* <dsi{s[13]}pj> */
union  A1318 { d m0; s m1; i m2; struct A1317 m3; p m4; j m5; };
void f_cpA1318(union  A1318 *x, const union  A1318 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1317(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1318(const union  A1318 *x, const union  A1318 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1317(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1318() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1318), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1318, m0), 1);
		dcStructField(at, 's', offsetof(union  A1318, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1318, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1318, m3), 1, f_touchdcstA1317());
		dcStructField(at, 'p', offsetof(union  A1318, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1318, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sf} */
struct A1319 { s m0; f m1; };
void f_cpA1319(struct A1319 *x, const struct A1319 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1319(const struct A1319 *x, const struct A1319 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1319() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1319), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1319, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1319, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jpslsdsfs} */
struct A1320 { j m0; p m1; s m2; l m3; s m4; d m5; s m6; f m7; s m8; };
void f_cpA1320(struct A1320 *x, const struct A1320 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1320(const struct A1320 *x, const struct A1320 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1320() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1320), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1320, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1320, m1), 1);
		dcStructField(at, 's', offsetof(struct A1320, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1320, m3), 1);
		dcStructField(at, 's', offsetof(struct A1320, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1320, m5), 1);
		dcStructField(at, 's', offsetof(struct A1320, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1320, m7), 1);
		dcStructField(at, 's', offsetof(struct A1320, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <s{jpslsdsfs}[14]spdpijfifc> */
union  A1321 { s m0; struct A1320 m1[14]; s m2; p m3; d m4; p m5; i m6; j m7; f m8; i m9; f m10; c m11; };
void f_cpA1321(union  A1321 *x, const union  A1321 *y) { x->m0 = y->m0; f_cpA1320(&x->m1[0], &y->m1[0]); f_cpA1320(&x->m1[1], &y->m1[1]); f_cpA1320(&x->m1[2], &y->m1[2]); f_cpA1320(&x->m1[3], &y->m1[3]); f_cpA1320(&x->m1[4], &y->m1[4]); f_cpA1320(&x->m1[5], &y->m1[5]); f_cpA1320(&x->m1[6], &y->m1[6]); f_cpA1320(&x->m1[7], &y->m1[7]); f_cpA1320(&x->m1[8], &y->m1[8]); f_cpA1320(&x->m1[9], &y->m1[9]); f_cpA1320(&x->m1[10], &y->m1[10]); f_cpA1320(&x->m1[11], &y->m1[11]); f_cpA1320(&x->m1[12], &y->m1[12]); f_cpA1320(&x->m1[13], &y->m1[13]); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1321(const union  A1321 *x, const union  A1321 *y) { return x->m0 == y->m0 && f_cmpA1320(&x->m1[0], &y->m1[0]) && f_cmpA1320(&x->m1[1], &y->m1[1]) && f_cmpA1320(&x->m1[2], &y->m1[2]) && f_cmpA1320(&x->m1[3], &y->m1[3]) && f_cmpA1320(&x->m1[4], &y->m1[4]) && f_cmpA1320(&x->m1[5], &y->m1[5]) && f_cmpA1320(&x->m1[6], &y->m1[6]) && f_cmpA1320(&x->m1[7], &y->m1[7]) && f_cmpA1320(&x->m1[8], &y->m1[8]) && f_cmpA1320(&x->m1[9], &y->m1[9]) && f_cmpA1320(&x->m1[10], &y->m1[10]) && f_cmpA1320(&x->m1[11], &y->m1[11]) && f_cmpA1320(&x->m1[12], &y->m1[12]) && f_cmpA1320(&x->m1[13], &y->m1[13]) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1321() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1321), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1321, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1321, m1), 14, f_touchdcstA1320());
		dcStructField(at, 's', offsetof(union  A1321, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1321, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1321, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1321, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1321, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1321, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1321, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1321, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1321, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1321, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ld> */
union  A1322 { l m0; d m1; };
void f_cpA1322(union  A1322 *x, const union  A1322 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1322(const union  A1322 *x, const union  A1322 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1322() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1322), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1322, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1322, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sjjcfss} */
struct A1323 { s m0; j m1; j m2; c m3; f m4; s m5; s m6; };
void f_cpA1323(struct A1323 *x, const struct A1323 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1323(const struct A1323 *x, const struct A1323 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1323() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1323), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1323, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1323, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1323, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1323, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1323, m4), 1);
		dcStructField(at, 's', offsetof(struct A1323, m5), 1);
		dcStructField(at, 's', offsetof(struct A1323, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {li} */
struct A1324 { l m0; i m1; };
void f_cpA1324(struct A1324 *x, const struct A1324 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1324(const struct A1324 *x, const struct A1324 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1324() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1324), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1324, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1324, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fjdlssjci} */
struct A1325 { f m0; j m1; d m2; l m3; s m4; s m5; j m6; c m7; i m8; };
void f_cpA1325(struct A1325 *x, const struct A1325 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1325(const struct A1325 *x, const struct A1325 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1325() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1325), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1325, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1325, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1325, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1325, m3), 1);
		dcStructField(at, 's', offsetof(struct A1325, m4), 1);
		dcStructField(at, 's', offsetof(struct A1325, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1325, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1325, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1325, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ccp<ld><sp><pp>ii{sjjcfss}{li}{fjdlssjci}s> */
union  A1326 { c m0; c m1; p m2; union  A1322 m3; union  A510 m4; union  A792 m5; i m6; i m7; struct A1323 m8; struct A1324 m9; struct A1325 m10; s m11; };
void f_cpA1326(union  A1326 *x, const union  A1326 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1322(&x->m3, &y->m3); f_cpA510(&x->m4, &y->m4); f_cpA792(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; f_cpA1323(&x->m8, &y->m8); f_cpA1324(&x->m9, &y->m9); f_cpA1325(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1326(const union  A1326 *x, const union  A1326 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1322(&x->m3, &y->m3) && f_cmpA510(&x->m4, &y->m4) && f_cmpA792(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1323(&x->m8, &y->m8) && f_cmpA1324(&x->m9, &y->m9) && f_cmpA1325(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1326() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1326), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1326, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1326, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1326, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1326, m3), 1, f_touchdcstA1322());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1326, m4), 1, f_touchdcstA510());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1326, m5), 1, f_touchdcstA792());
		dcStructField(at, 'i', offsetof(union  A1326, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1326, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1326, m8), 1, f_touchdcstA1323());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1326, m9), 1, f_touchdcstA1324());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1326, m10), 1, f_touchdcstA1325());
		dcStructField(at, 's', offsetof(union  A1326, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lj<c>ccpccll<l>d> */
union  A1327 { l m0; j m1; union  A116 m2; c m3; c m4; p m5; c m6; c m7; l m8; l m9; union  A20 m10; d m11; };
void f_cpA1327(union  A1327 *x, const union  A1327 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA116(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA20(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1327(const union  A1327 *x, const union  A1327 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA116(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA20(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1327() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1327), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1327, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1327, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1327, m2), 1, f_touchdcstA116());
		dcStructField(at, 'c', offsetof(union  A1327, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1327, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1327, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1327, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1327, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1327, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1327, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1327, m10), 1, f_touchdcstA20());
		dcStructField(at, 'd', offsetof(union  A1327, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fi<ccp<ld><sp><pp>ii{sjjcfss}{li}{fjdlssjci}s>fspc<lj<c>ccpccll<l>d>clss} */
struct A1328 { f m0; i m1; union  A1326 m2; f m3; s m4; p m5; c m6; union  A1327 m7; c m8; l m9; s m10; s m11; };
void f_cpA1328(struct A1328 *x, const struct A1328 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1326(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1327(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1328(const struct A1328 *x, const struct A1328 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1326(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1327(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1328() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1328), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1328, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1328, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1328, m2), 1, f_touchdcstA1326());
		dcStructField(at, 'f', offsetof(struct A1328, m3), 1);
		dcStructField(at, 's', offsetof(struct A1328, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1328, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1328, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1328, m7), 1, f_touchdcstA1327());
		dcStructField(at, 'c', offsetof(struct A1328, m8), 1);
		dcStructField(at, 'l', offsetof(struct A1328, m9), 1);
		dcStructField(at, 's', offsetof(struct A1328, m10), 1);
		dcStructField(at, 's', offsetof(struct A1328, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lfpis} */
struct A1329 { l m0; f m1; p m2; i m3; s m4; };
void f_cpA1329(struct A1329 *x, const struct A1329 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1329(const struct A1329 *x, const struct A1329 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1329() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1329), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1329, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1329, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1329, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1329, m3), 1);
		dcStructField(at, 's', offsetof(struct A1329, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pdsdpdl} */
struct A1330 { p m0; d m1; s m2; d m3; p m4; d m5; l m6; };
void f_cpA1330(struct A1330 *x, const struct A1330 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1330(const struct A1330 *x, const struct A1330 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1330() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1330), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1330, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1330, m1), 1);
		dcStructField(at, 's', offsetof(struct A1330, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1330, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1330, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1330, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1330, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ic[10]cccfl> */
union  A1331 { i m0; c m1[10]; c m2; c m3; c m4; f m5; l m6; };
void f_cpA1331(union  A1331 *x, const union  A1331 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1331(const union  A1331 *x, const union  A1331 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1331() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1331), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1331, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1331, m1), 10);
		dcStructField(at, 'c', offsetof(union  A1331, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1331, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1331, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1331, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1331, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {c[4]s} */
struct A1332 { c m0[4]; s m1; };
void f_cpA1332(struct A1332 *x, const struct A1332 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m1 = y->m1; };
int f_cmpA1332(const struct A1332 *x, const struct A1332 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m1 == y->m1; };
DCstruct* f_touchdcstA1332() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1332), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1332, m0), 4);
		dcStructField(at, 's', offsetof(struct A1332, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <c<ic[10]cccfl>ijpj{c[4]s}p{l}> */
union  A1333 { c m0; union  A1331 m1; i m2; j m3; p m4; j m5; struct A1332 m6; p m7; struct A141 m8; };
void f_cpA1333(union  A1333 *x, const union  A1333 *y) { x->m0 = y->m0; f_cpA1331(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1332(&x->m6, &y->m6); x->m7 = y->m7; f_cpA141(&x->m8, &y->m8); };
int f_cmpA1333(const union  A1333 *x, const union  A1333 *y) { return x->m0 == y->m0 && f_cmpA1331(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1332(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA141(&x->m8, &y->m8); };
DCstruct* f_touchdcstA1333() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1333), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1333, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1333, m1), 1, f_touchdcstA1331());
		dcStructField(at, 'i', offsetof(union  A1333, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1333, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1333, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1333, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1333, m6), 1, f_touchdcstA1332());
		dcStructField(at, 'p', offsetof(union  A1333, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1333, m8), 1, f_touchdcstA141());
		dcCloseStruct(at);
	}
	return at;
};
/* {pdsppsd} */
struct A1334 { p m0; d m1; s m2; p m3; p m4; s m5; d m6; };
void f_cpA1334(struct A1334 *x, const struct A1334 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1334(const struct A1334 *x, const struct A1334 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1334() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1334), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1334, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1334, m1), 1);
		dcStructField(at, 's', offsetof(struct A1334, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1334, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1334, m4), 1);
		dcStructField(at, 's', offsetof(struct A1334, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1334, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fsccifpffjfd> */
union  A1335 { f m0; s m1; c m2; c m3; i m4; f m5; p m6; f m7; f m8; j m9; f m10; d m11; };
void f_cpA1335(union  A1335 *x, const union  A1335 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1335(const union  A1335 *x, const union  A1335 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1335() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1335), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1335, m0), 1);
		dcStructField(at, 's', offsetof(union  A1335, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1335, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1335, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1335, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1335, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1335, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1335, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1335, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1335, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1335, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1335, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lsip} */
struct A1336 { l m0; s m1; i m2; p m3; };
void f_cpA1336(struct A1336 *x, const struct A1336 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1336(const struct A1336 *x, const struct A1336 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1336() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1336), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1336, m0), 1);
		dcStructField(at, 's', offsetof(struct A1336, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1336, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1336, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dfiiiijip[5]fpc} */
struct A1337 { d m0; f m1; i m2; i m3; i m4; i m5; j m6; i m7; p m8[5]; f m9; p m10; c m11; };
void f_cpA1337(struct A1337 *x, const struct A1337 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1337(const struct A1337 *x, const struct A1337 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1337() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1337), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1337, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1337, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1337, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1337, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1337, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1337, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1337, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1337, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1337, m8), 5);
		dcStructField(at, 'f', offsetof(struct A1337, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1337, m10), 1);
		dcStructField(at, 'c', offsetof(struct A1337, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{pdsppsd}p<fsccifpffjfd>d{lsip}csp{dfiiiijip[5]fpc}cil> */
union  A1338 { struct A1334 m0; p m1; union  A1335 m2; d m3; struct A1336 m4; c m5; s m6; p m7; struct A1337 m8; c m9; i m10; l m11; };
void f_cpA1338(union  A1338 *x, const union  A1338 *y) { f_cpA1334(&x->m0, &y->m0); x->m1 = y->m1; f_cpA1335(&x->m2, &y->m2); x->m3 = y->m3; f_cpA1336(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1337(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1338(const union  A1338 *x, const union  A1338 *y) { return f_cmpA1334(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA1335(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA1336(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1337(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1338() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1338), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1338, m0), 1, f_touchdcstA1334());
		dcStructField(at, 'p', offsetof(union  A1338, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1338, m2), 1, f_touchdcstA1335());
		dcStructField(at, 'd', offsetof(union  A1338, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1338, m4), 1, f_touchdcstA1336());
		dcStructField(at, 'c', offsetof(union  A1338, m5), 1);
		dcStructField(at, 's', offsetof(union  A1338, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1338, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1338, m8), 1, f_touchdcstA1337());
		dcStructField(at, 'c', offsetof(union  A1338, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1338, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1338, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fppc[9]illlfscl} */
struct A1339 { f m0; p m1; p m2; c m3[9]; i m4; l m5; l m6; l m7; f m8; s m9; c m10; l m11; };
void f_cpA1339(struct A1339 *x, const struct A1339 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1339(const struct A1339 *x, const struct A1339 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1339() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1339), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1339, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1339, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1339, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1339, m3), 9);
		dcStructField(at, 'i', offsetof(struct A1339, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1339, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1339, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1339, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1339, m8), 1);
		dcStructField(at, 's', offsetof(struct A1339, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1339, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1339, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fdlpcsfldsjl} */
struct A1340 { f m0; d m1; l m2; p m3; c m4; s m5; f m6; l m7; d m8; s m9; j m10; l m11; };
void f_cpA1340(struct A1340 *x, const struct A1340 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1340(const struct A1340 *x, const struct A1340 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1340() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1340), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1340, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1340, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1340, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1340, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1340, m4), 1);
		dcStructField(at, 's', offsetof(struct A1340, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1340, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1340, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1340, m8), 1);
		dcStructField(at, 's', offsetof(struct A1340, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1340, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1340, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{fdlpcsfldsjl}l[15]i[5]fc} */
struct A1341 { struct A1340 m0; l m1[15]; i m2[5]; f m3; c m4; };
void f_cpA1341(struct A1341 *x, const struct A1341 *y) { f_cpA1340(&x->m0, &y->m0); x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m1[10] = y->m1[10]; x->m1[11] = y->m1[11]; x->m1[12] = y->m1[12]; x->m1[13] = y->m1[13]; x->m1[14] = y->m1[14]; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1341(const struct A1341 *x, const struct A1341 *y) { return f_cmpA1340(&x->m0, &y->m0) && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m1[10] == y->m1[10] && x->m1[11] == y->m1[11] && x->m1[12] == y->m1[12] && x->m1[13] == y->m1[13] && x->m1[14] == y->m1[14] && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1341() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1341), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1341, m0), 1, f_touchdcstA1340());
		dcStructField(at, 'l', offsetof(struct A1341, m1), 15);
		dcStructField(at, 'i', offsetof(struct A1341, m2), 5);
		dcStructField(at, 'f', offsetof(struct A1341, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1341, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fjccdc[3]> */
union  A1342 { f m0; j m1; c m2; c m3; d m4; c m5[3]; };
void f_cpA1342(union  A1342 *x, const union  A1342 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; };
int f_cmpA1342(const union  A1342 *x, const union  A1342 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2]; };
DCstruct* f_touchdcstA1342() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1342), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1342, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1342, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1342, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1342, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1342, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1342, m5), 3);
		dcCloseStruct(at);
	}
	return at;
};
/* {{{fdlpcsfldsjl}l[15]i[5]fc}<fjccdc[3]>[1]icjf} */
struct A1343 { struct A1341 m0; union  A1342 m1[1]; i m2; c m3; j m4; f m5; };
void f_cpA1343(struct A1343 *x, const struct A1343 *y) { f_cpA1341(&x->m0, &y->m0); f_cpA1342(&x->m1[0], &y->m1[0]); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1343(const struct A1343 *x, const struct A1343 *y) { return f_cmpA1341(&x->m0, &y->m0) && f_cmpA1342(&x->m1[0], &y->m1[0]) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1343() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1343), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1343, m0), 1, f_touchdcstA1341());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1343, m1), 1, f_touchdcstA1342());
		dcStructField(at, 'i', offsetof(struct A1343, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1343, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1343, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1343, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sflcjlppjl[16]ij> */
union  A1344 { s m0; f m1; l m2; c m3; j m4; l m5; p m6; p m7; j m8; l m9[16]; i m10; j m11; };
void f_cpA1344(union  A1344 *x, const union  A1344 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m9[8] = y->m9[8]; x->m9[9] = y->m9[9]; x->m9[10] = y->m9[10]; x->m9[11] = y->m9[11]; x->m9[12] = y->m9[12]; x->m9[13] = y->m9[13]; x->m9[14] = y->m9[14]; x->m9[15] = y->m9[15]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1344(const union  A1344 *x, const union  A1344 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m9[8] == y->m9[8] && x->m9[9] == y->m9[9] && x->m9[10] == y->m9[10] && x->m9[11] == y->m9[11] && x->m9[12] == y->m9[12] && x->m9[13] == y->m9[13] && x->m9[14] == y->m9[14] && x->m9[15] == y->m9[15] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1344() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1344), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1344, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1344, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1344, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1344, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1344, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1344, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1344, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1344, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1344, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1344, m9), 16);
		dcStructField(at, 'i', offsetof(union  A1344, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1344, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fclslccfldcf} */
struct A1345 { f m0; c m1; l m2; s m3; l m4; c m5; c m6; f m7; l m8; d m9; c m10; f m11; };
void f_cpA1345(struct A1345 *x, const struct A1345 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1345(const struct A1345 *x, const struct A1345 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1345() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1345), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1345, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1345, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1345, m2), 1);
		dcStructField(at, 's', offsetof(struct A1345, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1345, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1345, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1345, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1345, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1345, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1345, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1345, m10), 1);
		dcStructField(at, 'f', offsetof(struct A1345, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jfcs> */
union  A1346 { j m0; f m1; c m2; s m3; };
void f_cpA1346(union  A1346 *x, const union  A1346 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1346(const union  A1346 *x, const union  A1346 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1346() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1346), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1346, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1346, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1346, m2), 1);
		dcStructField(at, 's', offsetof(union  A1346, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<sflcjlppjl[16]ij>fi{fclslccfldcf}<jfcs>f{i}cpj} */
struct A1347 { union  A1344 m0; f m1; i m2; struct A1345 m3; union  A1346 m4; f m5; struct A5 m6; c m7; p m8; j m9; };
void f_cpA1347(struct A1347 *x, const struct A1347 *y) { f_cpA1344(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA1345(&x->m3, &y->m3); f_cpA1346(&x->m4, &y->m4); x->m5 = y->m5; f_cpA5(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1347(const struct A1347 *x, const struct A1347 *y) { return f_cmpA1344(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1345(&x->m3, &y->m3) && f_cmpA1346(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA5(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1347() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1347), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1347, m0), 1, f_touchdcstA1344());
		dcStructField(at, 'f', offsetof(struct A1347, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1347, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1347, m3), 1, f_touchdcstA1345());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1347, m4), 1, f_touchdcstA1346());
		dcStructField(at, 'f', offsetof(struct A1347, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1347, m6), 1, f_touchdcstA5());
		dcStructField(at, 'c', offsetof(struct A1347, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1347, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1347, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{<sflcjlppjl[16]ij>fi{fclslccfldcf}<jfcs>f{i}cpj}spci} */
struct A1348 { struct A1347 m0; s m1; p m2; c m3; i m4; };
void f_cpA1348(struct A1348 *x, const struct A1348 *y) { f_cpA1347(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1348(const struct A1348 *x, const struct A1348 *y) { return f_cmpA1347(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1348() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1348), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1348, m0), 1, f_touchdcstA1347());
		dcStructField(at, 's', offsetof(struct A1348, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1348, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1348, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1348, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cics> */
union  A1349 { c m0; i m1; c m2; s m3; };
void f_cpA1349(union  A1349 *x, const union  A1349 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1349(const union  A1349 *x, const union  A1349 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1349() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1349), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1349, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1349, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1349, m2), 1);
		dcStructField(at, 's', offsetof(union  A1349, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dipsplljij> */
union  A1350 { d m0; i m1; p m2; s m3; p m4; l m5; l m6; j m7; i m8; j m9; };
void f_cpA1350(union  A1350 *x, const union  A1350 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1350(const union  A1350 *x, const union  A1350 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1350() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1350), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1350, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1350, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1350, m2), 1);
		dcStructField(at, 's', offsetof(union  A1350, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1350, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1350, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1350, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1350, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1350, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1350, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ipjjcd} */
struct A1351 { i m0; p m1; j m2; j m3; c m4; d m5; };
void f_cpA1351(struct A1351 *x, const struct A1351 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1351(const struct A1351 *x, const struct A1351 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1351() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1351), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1351, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1351, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1351, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1351, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1351, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1351, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p<cics><dipsplljij>jd{ipjjcd}flisil} */
struct A1352 { p m0; union  A1349 m1; union  A1350 m2; j m3; d m4; struct A1351 m5; f m6; l m7; i m8; s m9; i m10; l m11; };
void f_cpA1352(struct A1352 *x, const struct A1352 *y) { x->m0 = y->m0; f_cpA1349(&x->m1, &y->m1); f_cpA1350(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; f_cpA1351(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1352(const struct A1352 *x, const struct A1352 *y) { return x->m0 == y->m0 && f_cmpA1349(&x->m1, &y->m1) && f_cmpA1350(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1351(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1352() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1352), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1352, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1352, m1), 1, f_touchdcstA1349());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1352, m2), 1, f_touchdcstA1350());
		dcStructField(at, 'j', offsetof(struct A1352, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1352, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1352, m5), 1, f_touchdcstA1351());
		dcStructField(at, 'f', offsetof(struct A1352, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1352, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1352, m8), 1);
		dcStructField(at, 's', offsetof(struct A1352, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1352, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1352, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ldfij} */
struct A1353 { l m0; d m1; f m2; i m3; j m4; };
void f_cpA1353(struct A1353 *x, const struct A1353 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1353(const struct A1353 *x, const struct A1353 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1353() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1353), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1353, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1353, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1353, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1353, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1353, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <slfcllipcl> */
union  A1354 { s m0; l m1; f m2; c m3; l m4; l m5; i m6; p m7; c m8; l m9; };
void f_cpA1354(union  A1354 *x, const union  A1354 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1354(const union  A1354 *x, const union  A1354 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1354() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1354), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1354, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1354, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1354, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1354, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1354, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1354, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1354, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1354, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1354, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1354, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ds} */
struct A1355 { d m0; s m1; };
void f_cpA1355(struct A1355 *x, const struct A1355 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1355(const struct A1355 *x, const struct A1355 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1355() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1355), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1355, m0), 1);
		dcStructField(at, 's', offsetof(struct A1355, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ipjifdpf} */
struct A1356 { i m0; p m1; j m2; i m3; f m4; d m5; p m6; f m7; };
void f_cpA1356(struct A1356 *x, const struct A1356 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1356(const struct A1356 *x, const struct A1356 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1356() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1356), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1356, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1356, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1356, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1356, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1356, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1356, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1356, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1356, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lpisfllsc} */
struct A1357 { l m0; p m1; i m2; s m3; f m4; l m5; l m6; s m7; c m8; };
void f_cpA1357(struct A1357 *x, const struct A1357 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1357(const struct A1357 *x, const struct A1357 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1357() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1357), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1357, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1357, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1357, m2), 1);
		dcStructField(at, 's', offsetof(struct A1357, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1357, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1357, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1357, m6), 1);
		dcStructField(at, 's', offsetof(struct A1357, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1357, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{c}sc{ds}{ipjifdpf}cid[3]{lpisfllsc}jdf} */
struct A1358 { struct A212 m0; s m1; c m2; struct A1355 m3; struct A1356 m4; c m5; i m6; d m7[3]; struct A1357 m8; j m9; d m10; f m11; };
void f_cpA1358(struct A1358 *x, const struct A1358 *y) { f_cpA212(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA1355(&x->m3, &y->m3); f_cpA1356(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; f_cpA1357(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1358(const struct A1358 *x, const struct A1358 *y) { return f_cmpA212(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1355(&x->m3, &y->m3) && f_cmpA1356(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && f_cmpA1357(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1358() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1358), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1358, m0), 1, f_touchdcstA212());
		dcStructField(at, 's', offsetof(struct A1358, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1358, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1358, m3), 1, f_touchdcstA1355());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1358, m4), 1, f_touchdcstA1356());
		dcStructField(at, 'c', offsetof(struct A1358, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1358, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1358, m7), 3);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1358, m8), 1, f_touchdcstA1357());
		dcStructField(at, 'j', offsetof(struct A1358, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1358, m10), 1);
		dcStructField(at, 'f', offsetof(struct A1358, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jssf> */
union  A1359 { j m0; s m1; s m2; f m3; };
void f_cpA1359(union  A1359 *x, const union  A1359 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1359(const union  A1359 *x, const union  A1359 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1359() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1359), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1359, m0), 1);
		dcStructField(at, 's', offsetof(union  A1359, m1), 1);
		dcStructField(at, 's', offsetof(union  A1359, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1359, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pfjijfcfjpcj} */
struct A1360 { p m0; f m1; j m2; i m3; j m4; f m5; c m6; f m7; j m8; p m9; c m10; j m11; };
void f_cpA1360(struct A1360 *x, const struct A1360 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1360(const struct A1360 *x, const struct A1360 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1360() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1360), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1360, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1360, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1360, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1360, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1360, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1360, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1360, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1360, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1360, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1360, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1360, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1360, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sslccd[2]sl} */
struct A1361 { s m0; s m1; l m2; c m3; c m4; d m5[2]; s m6; l m7; };
void f_cpA1361(struct A1361 *x, const struct A1361 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1361(const struct A1361 *x, const struct A1361 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1361() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1361), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1361, m0), 1);
		dcStructField(at, 's', offsetof(struct A1361, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1361, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1361, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1361, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1361, m5), 2);
		dcStructField(at, 's', offsetof(struct A1361, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1361, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pfippsfsdifp> */
union  A1362 { p m0; f m1; i m2; p m3; p m4; s m5; f m6; s m7; d m8; i m9; f m10; p m11; };
void f_cpA1362(union  A1362 *x, const union  A1362 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1362(const union  A1362 *x, const union  A1362 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1362() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1362), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1362, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1362, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1362, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1362, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1362, m4), 1);
		dcStructField(at, 's', offsetof(union  A1362, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1362, m6), 1);
		dcStructField(at, 's', offsetof(union  A1362, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1362, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1362, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1362, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1362, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cfjjjidcp> */
union  A1363 { c m0; f m1; j m2; j m3; j m4; i m5; d m6; c m7; p m8; };
void f_cpA1363(union  A1363 *x, const union  A1363 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1363(const union  A1363 *x, const union  A1363 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1363() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1363), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1363, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1363, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1363, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1363, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1363, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1363, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1363, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1363, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1363, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p{pfjijfcfjpcj}i{sslccd[2]sl}cdsj<pfippsfsdifp>i<cfjjjidcp>p} */
struct A1364 { p m0; struct A1360 m1; i m2; struct A1361 m3; c m4; d m5; s m6; j m7; union  A1362 m8; i m9; union  A1363 m10; p m11; };
void f_cpA1364(struct A1364 *x, const struct A1364 *y) { x->m0 = y->m0; f_cpA1360(&x->m1, &y->m1); x->m2 = y->m2; f_cpA1361(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1362(&x->m8, &y->m8); x->m9 = y->m9; f_cpA1363(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1364(const struct A1364 *x, const struct A1364 *y) { return x->m0 == y->m0 && f_cmpA1360(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA1361(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1362(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA1363(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1364() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1364), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1364, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1364, m1), 1, f_touchdcstA1360());
		dcStructField(at, 'i', offsetof(struct A1364, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1364, m3), 1, f_touchdcstA1361());
		dcStructField(at, 'c', offsetof(struct A1364, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1364, m5), 1);
		dcStructField(at, 's', offsetof(struct A1364, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1364, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1364, m8), 1, f_touchdcstA1362());
		dcStructField(at, 'i', offsetof(struct A1364, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1364, m10), 1, f_touchdcstA1363());
		dcStructField(at, 'p', offsetof(struct A1364, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iddcfjspc> */
union  A1365 { i m0; d m1; d m2; c m3; f m4; j m5; s m6; p m7; c m8; };
void f_cpA1365(union  A1365 *x, const union  A1365 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1365(const union  A1365 *x, const union  A1365 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1365() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1365), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1365, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1365, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1365, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1365, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1365, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1365, m5), 1);
		dcStructField(at, 's', offsetof(union  A1365, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1365, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1365, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fljdpific[7]ps> */
union  A1366 { f m0; l m1; j m2; d m3; p m4; i m5; f m6; i m7; c m8[7]; p m9; s m10; };
void f_cpA1366(union  A1366 *x, const union  A1366 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1366(const union  A1366 *x, const union  A1366 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1366() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1366), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1366, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1366, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1366, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1366, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1366, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1366, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1366, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1366, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1366, m8), 7);
		dcStructField(at, 'p', offsetof(union  A1366, m9), 1);
		dcStructField(at, 's', offsetof(union  A1366, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cicdcsl<iddcfjspc>pf<fljdpific[7]ps>f} */
struct A1367 { c m0; i m1; c m2; d m3; c m4; s m5; l m6; union  A1365 m7; p m8; f m9; union  A1366 m10; f m11; };
void f_cpA1367(struct A1367 *x, const struct A1367 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1365(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; f_cpA1366(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1367(const struct A1367 *x, const struct A1367 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1365(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1366(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1367() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1367), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1367, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1367, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1367, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1367, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1367, m4), 1);
		dcStructField(at, 's', offsetof(struct A1367, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1367, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1367, m7), 1, f_touchdcstA1365());
		dcStructField(at, 'p', offsetof(struct A1367, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1367, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1367, m10), 1, f_touchdcstA1366());
		dcStructField(at, 'f', offsetof(struct A1367, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {flpplfsjjd{cicdcsl<iddcfjspc>pf<fljdpific[7]ps>f}i} */
struct A1368 { f m0; l m1; p m2; p m3; l m4; f m5; s m6; j m7; j m8; d m9; struct A1367 m10; i m11; };
void f_cpA1368(struct A1368 *x, const struct A1368 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1367(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1368(const struct A1368 *x, const struct A1368 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1367(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1368() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1368), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1368, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1368, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1368, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1368, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1368, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1368, m5), 1);
		dcStructField(at, 's', offsetof(struct A1368, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1368, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1368, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1368, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1368, m10), 1, f_touchdcstA1367());
		dcStructField(at, 'i', offsetof(struct A1368, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lfl[7]lljccdlsc} */
struct A1369 { l m0; f m1; l m2[7]; l m3; l m4; j m5; c m6; c m7; d m8; l m9; s m10; c m11; };
void f_cpA1369(struct A1369 *x, const struct A1369 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1369(const struct A1369 *x, const struct A1369 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1369() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1369), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1369, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1369, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1369, m2), 7);
		dcStructField(at, 'l', offsetof(struct A1369, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1369, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1369, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1369, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1369, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1369, m8), 1);
		dcStructField(at, 'l', offsetof(struct A1369, m9), 1);
		dcStructField(at, 's', offsetof(struct A1369, m10), 1);
		dcStructField(at, 'c', offsetof(struct A1369, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fipdplcillsi} */
struct A1370 { f m0; i m1; p m2; d m3; p m4; l m5; c m6; i m7; l m8; l m9; s m10; i m11; };
void f_cpA1370(struct A1370 *x, const struct A1370 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1370(const struct A1370 *x, const struct A1370 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1370() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1370), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1370, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1370, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1370, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1370, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1370, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1370, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1370, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1370, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1370, m8), 1);
		dcStructField(at, 'l', offsetof(struct A1370, m9), 1);
		dcStructField(at, 's', offsetof(struct A1370, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1370, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cdcdiiiidcp> */
union  A1371 { c m0; d m1; c m2; d m3; i m4; i m5; i m6; i m7; d m8; c m9; p m10; };
void f_cpA1371(union  A1371 *x, const union  A1371 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1371(const union  A1371 *x, const union  A1371 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1371() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1371), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1371, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1371, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1371, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1371, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1371, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1371, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1371, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1371, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1371, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1371, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1371, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ff[15]ffcf> */
union  A1372 { f m0; f m1[15]; f m2; f m3; c m4; f m5; };
void f_cpA1372(union  A1372 *x, const union  A1372 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m1[10] = y->m1[10]; x->m1[11] = y->m1[11]; x->m1[12] = y->m1[12]; x->m1[13] = y->m1[13]; x->m1[14] = y->m1[14]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1372(const union  A1372 *x, const union  A1372 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m1[10] == y->m1[10] && x->m1[11] == y->m1[11] && x->m1[12] == y->m1[12] && x->m1[13] == y->m1[13] && x->m1[14] == y->m1[14] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1372() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1372), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1372, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1372, m1), 15);
		dcStructField(at, 'f', offsetof(union  A1372, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1372, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1372, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1372, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cl} */
struct A1373 { c m0; l m1; };
void f_cpA1373(struct A1373 *x, const struct A1373 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1373(const struct A1373 *x, const struct A1373 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1373() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1373), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1373, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1373, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <difl{d}p> */
union  A1374 { d m0; i m1; f m2; l m3; struct A47 m4; p m5; };
void f_cpA1374(union  A1374 *x, const union  A1374 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA47(&x->m4, &y->m4); x->m5 = y->m5; };
int f_cmpA1374(const union  A1374 *x, const union  A1374 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA47(&x->m4, &y->m4) && x->m5 == y->m5; };
DCstruct* f_touchdcstA1374() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1374), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1374, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1374, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1374, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1374, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1374, m4), 1, f_touchdcstA47());
		dcStructField(at, 'p', offsetof(union  A1374, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cflllffjppjl> */
union  A1375 { c m0; f m1; l m2; l m3; l m4; f m5; f m6; j m7; p m8; p m9; j m10; l m11; };
void f_cpA1375(union  A1375 *x, const union  A1375 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1375(const union  A1375 *x, const union  A1375 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1375() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1375), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1375, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1375, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1375, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1375, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1375, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1375, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1375, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1375, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1375, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1375, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1375, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1375, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ljildjf> */
union  A1376 { l m0; j m1; i m2; l m3; d m4; j m5; f m6; };
void f_cpA1376(union  A1376 *x, const union  A1376 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1376(const union  A1376 *x, const union  A1376 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1376() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1376), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1376, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1376, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1376, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1376, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1376, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1376, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1376, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {d<cflllffjppjl>lpfpi<ljildjf>djll} */
struct A1377 { d m0; union  A1375 m1; l m2; p m3; f m4; p m5; i m6; union  A1376 m7; d m8; j m9; l m10; l m11; };
void f_cpA1377(struct A1377 *x, const struct A1377 *y) { x->m0 = y->m0; f_cpA1375(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1376(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1377(const struct A1377 *x, const struct A1377 *y) { return x->m0 == y->m0 && f_cmpA1375(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1376(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1377() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1377), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1377, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1377, m1), 1, f_touchdcstA1375());
		dcStructField(at, 'l', offsetof(struct A1377, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1377, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1377, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1377, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1377, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1377, m7), 1, f_touchdcstA1376());
		dcStructField(at, 'd', offsetof(struct A1377, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1377, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1377, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1377, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {if[15]ppsj{d<cflllffjppjl>lpfpi<ljildjf>djll}} */
struct A1378 { i m0; f m1[15]; p m2; p m3; s m4; j m5; struct A1377 m6; };
void f_cpA1378(struct A1378 *x, const struct A1378 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m1[10] = y->m1[10]; x->m1[11] = y->m1[11]; x->m1[12] = y->m1[12]; x->m1[13] = y->m1[13]; x->m1[14] = y->m1[14]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1377(&x->m6, &y->m6); };
int f_cmpA1378(const struct A1378 *x, const struct A1378 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m1[10] == y->m1[10] && x->m1[11] == y->m1[11] && x->m1[12] == y->m1[12] && x->m1[13] == y->m1[13] && x->m1[14] == y->m1[14] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1377(&x->m6, &y->m6); };
DCstruct* f_touchdcstA1378() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1378), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1378, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1378, m1), 15);
		dcStructField(at, 'p', offsetof(struct A1378, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1378, m3), 1);
		dcStructField(at, 's', offsetof(struct A1378, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1378, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1378, m6), 1, f_touchdcstA1377());
		dcCloseStruct(at);
	}
	return at;
};
/* {fpcs} */
struct A1379 { f m0; p m1; c m2; s m3; };
void f_cpA1379(struct A1379 *x, const struct A1379 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1379(const struct A1379 *x, const struct A1379 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1379() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1379), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1379, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1379, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1379, m2), 1);
		dcStructField(at, 's', offsetof(struct A1379, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{fpcs}d{l}> */
union  A1380 { struct A1379 m0; d m1; struct A141 m2; };
void f_cpA1380(union  A1380 *x, const union  A1380 *y) { f_cpA1379(&x->m0, &y->m0); x->m1 = y->m1; f_cpA141(&x->m2, &y->m2); };
int f_cmpA1380(const union  A1380 *x, const union  A1380 *y) { return f_cmpA1379(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA141(&x->m2, &y->m2); };
DCstruct* f_touchdcstA1380() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1380), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1380, m0), 1, f_touchdcstA1379());
		dcStructField(at, 'd', offsetof(union  A1380, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1380, m2), 1, f_touchdcstA141());
		dcCloseStruct(at);
	}
	return at;
};
/* <sdci[16]> */
union  A1381 { s m0; d m1; c m2; i m3[16]; };
void f_cpA1381(union  A1381 *x, const union  A1381 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m3[12] = y->m3[12]; x->m3[13] = y->m3[13]; x->m3[14] = y->m3[14]; x->m3[15] = y->m3[15]; };
int f_cmpA1381(const union  A1381 *x, const union  A1381 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m3[12] == y->m3[12] && x->m3[13] == y->m3[13] && x->m3[14] == y->m3[14] && x->m3[15] == y->m3[15]; };
DCstruct* f_touchdcstA1381() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1381), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1381, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1381, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1381, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1381, m3), 16);
		dcCloseStruct(at);
	}
	return at;
};
/* {<{fpcs}d{l}>fpfl<sdci[16]>lcfps} */
struct A1382 { union  A1380 m0; f m1; p m2; f m3; l m4; union  A1381 m5; l m6; c m7; f m8; p m9; s m10; };
void f_cpA1382(struct A1382 *x, const struct A1382 *y) { f_cpA1380(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1381(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1382(const struct A1382 *x, const struct A1382 *y) { return f_cmpA1380(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1381(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1382() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1382), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1382, m0), 1, f_touchdcstA1380());
		dcStructField(at, 'f', offsetof(struct A1382, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1382, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1382, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1382, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1382, m5), 1, f_touchdcstA1381());
		dcStructField(at, 'l', offsetof(struct A1382, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1382, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1382, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1382, m9), 1);
		dcStructField(at, 's', offsetof(struct A1382, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ilcsjpjj[9]plid} */
struct A1383 { i m0; l m1; c m2; s m3; j m4; p m5; j m6; j m7[9]; p m8; l m9; i m10; d m11; };
void f_cpA1383(struct A1383 *x, const struct A1383 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; x->m7[7] = y->m7[7]; x->m7[8] = y->m7[8]; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1383(const struct A1383 *x, const struct A1383 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6] && x->m7[7] == y->m7[7] && x->m7[8] == y->m7[8] && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1383() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1383), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1383, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1383, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1383, m2), 1);
		dcStructField(at, 's', offsetof(struct A1383, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1383, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1383, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1383, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1383, m7), 9);
		dcStructField(at, 'p', offsetof(struct A1383, m8), 1);
		dcStructField(at, 'l', offsetof(struct A1383, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1383, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1383, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dclcji> */
union  A1384 { d m0; c m1; l m2; c m3; j m4; i m5; };
void f_cpA1384(union  A1384 *x, const union  A1384 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1384(const union  A1384 *x, const union  A1384 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1384() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1384), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1384, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1384, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1384, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1384, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1384, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1384, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<dclcji>sflliffijf<p>> */
union  A1385 { union  A1384 m0; s m1; f m2; l m3; l m4; i m5; f m6; f m7; i m8; j m9; f m10; union  A36 m11; };
void f_cpA1385(union  A1385 *x, const union  A1385 *y) { f_cpA1384(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA36(&x->m11, &y->m11); };
int f_cmpA1385(const union  A1385 *x, const union  A1385 *y) { return f_cmpA1384(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA36(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1385() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1385), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1385, m0), 1, f_touchdcstA1384());
		dcStructField(at, 's', offsetof(union  A1385, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1385, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1385, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1385, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1385, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1385, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1385, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1385, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1385, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1385, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1385, m11), 1, f_touchdcstA36());
		dcCloseStruct(at);
	}
	return at;
};
/* <sd> */
union  A1386 { s m0; d m1; };
void f_cpA1386(union  A1386 *x, const union  A1386 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1386(const union  A1386 *x, const union  A1386 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1386() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1386), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1386, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1386, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ffl<sd>sp} */
struct A1387 { f m0; f m1; l m2; union  A1386 m3; s m4; p m5; };
void f_cpA1387(struct A1387 *x, const struct A1387 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1386(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1387(const struct A1387 *x, const struct A1387 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1386(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1387() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1387), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1387, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1387, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1387, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1387, m3), 1, f_touchdcstA1386());
		dcStructField(at, 's', offsetof(struct A1387, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1387, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jidjicd{ffl<sd>sp}jipj} */
struct A1388 { j m0; i m1; d m2; j m3; i m4; c m5; d m6; struct A1387 m7; j m8; i m9; p m10; j m11; };
void f_cpA1388(struct A1388 *x, const struct A1388 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1387(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1388(const struct A1388 *x, const struct A1388 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1387(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1388() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1388), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1388, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1388, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1388, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1388, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1388, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1388, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1388, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1388, m7), 1, f_touchdcstA1387());
		dcStructField(at, 'j', offsetof(struct A1388, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1388, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1388, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1388, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lp[8]iii> */
union  A1389 { l m0; p m1[8]; i m2; i m3; i m4; };
void f_cpA1389(union  A1389 *x, const union  A1389 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1389(const union  A1389 *x, const union  A1389 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1389() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1389), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1389, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1389, m1), 8);
		dcStructField(at, 'i', offsetof(union  A1389, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1389, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1389, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sl{p}<lp[8]iii>jjcfp[11]ifp> */
union  A1390 { s m0; l m1; struct A33 m2; union  A1389 m3; j m4; j m5; c m6; f m7; p m8[11]; i m9; f m10; p m11; };
void f_cpA1390(union  A1390 *x, const union  A1390 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA33(&x->m2, &y->m2); f_cpA1389(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m8[8] = y->m8[8]; x->m8[9] = y->m8[9]; x->m8[10] = y->m8[10]; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1390(const union  A1390 *x, const union  A1390 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA33(&x->m2, &y->m2) && f_cmpA1389(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m8[8] == y->m8[8] && x->m8[9] == y->m8[9] && x->m8[10] == y->m8[10] && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1390() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1390), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1390, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1390, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1390, m2), 1, f_touchdcstA33());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1390, m3), 1, f_touchdcstA1389());
		dcStructField(at, 'j', offsetof(union  A1390, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1390, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1390, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1390, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1390, m8), 11);
		dcStructField(at, 'i', offsetof(union  A1390, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1390, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1390, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ipdli} */
struct A1391 { i m0; p m1; d m2; l m3; i m4; };
void f_cpA1391(struct A1391 *x, const struct A1391 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1391(const struct A1391 *x, const struct A1391 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1391() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1391), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1391, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1391, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1391, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1391, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1391, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ssssj{ipdli}> */
union  A1392 { s m0; s m1; s m2; s m3; j m4; struct A1391 m5; };
void f_cpA1392(union  A1392 *x, const union  A1392 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1391(&x->m5, &y->m5); };
int f_cmpA1392(const union  A1392 *x, const union  A1392 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1391(&x->m5, &y->m5); };
DCstruct* f_touchdcstA1392() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1392), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1392, m0), 1);
		dcStructField(at, 's', offsetof(union  A1392, m1), 1);
		dcStructField(at, 's', offsetof(union  A1392, m2), 1);
		dcStructField(at, 's', offsetof(union  A1392, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1392, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1392, m5), 1, f_touchdcstA1391());
		dcCloseStruct(at);
	}
	return at;
};
/* <jpfcslppplfj> */
union  A1393 { j m0; p m1; f m2; c m3; s m4; l m5; p m6; p m7; p m8; l m9; f m10; j m11; };
void f_cpA1393(union  A1393 *x, const union  A1393 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1393(const union  A1393 *x, const union  A1393 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1393() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1393), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1393, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1393, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1393, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1393, m3), 1);
		dcStructField(at, 's', offsetof(union  A1393, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1393, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1393, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1393, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1393, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1393, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1393, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1393, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cdcfj} */
struct A1394 { c m0; d m1; c m2; f m3; j m4; };
void f_cpA1394(struct A1394 *x, const struct A1394 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1394(const struct A1394 *x, const struct A1394 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1394() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1394), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1394, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1394, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1394, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1394, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1394, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fssdl[14]lsls<jpfcslppplfj>c{cdcfj}} */
struct A1395 { f m0; s m1; s m2; d m3; l m4[14]; l m5; s m6; l m7; s m8; union  A1393 m9; c m10; struct A1394 m11; };
void f_cpA1395(struct A1395 *x, const struct A1395 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m4[12] = y->m4[12]; x->m4[13] = y->m4[13]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1393(&x->m9, &y->m9); x->m10 = y->m10; f_cpA1394(&x->m11, &y->m11); };
int f_cmpA1395(const struct A1395 *x, const struct A1395 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m4[12] == y->m4[12] && x->m4[13] == y->m4[13] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1393(&x->m9, &y->m9) && x->m10 == y->m10 && f_cmpA1394(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1395() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1395), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1395, m0), 1);
		dcStructField(at, 's', offsetof(struct A1395, m1), 1);
		dcStructField(at, 's', offsetof(struct A1395, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1395, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1395, m4), 14);
		dcStructField(at, 'l', offsetof(struct A1395, m5), 1);
		dcStructField(at, 's', offsetof(struct A1395, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1395, m7), 1);
		dcStructField(at, 's', offsetof(struct A1395, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1395, m9), 1, f_touchdcstA1393());
		dcStructField(at, 'c', offsetof(struct A1395, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1395, m11), 1, f_touchdcstA1394());
		dcCloseStruct(at);
	}
	return at;
};
/* {fccd[15]<sl{p}<lp[8]iii>jjcfp[11]ifp><ssssj{ipdli}>idcj{fssdl[14]lsls<jpfcslppplfj>c{cdcfj}}i} */
struct A1396 { f m0; c m1; c m2; d m3[15]; union  A1390 m4; union  A1392 m5; i m6; d m7; c m8; j m9; struct A1395 m10; i m11; };
void f_cpA1396(struct A1396 *x, const struct A1396 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m3[12] = y->m3[12]; x->m3[13] = y->m3[13]; x->m3[14] = y->m3[14]; f_cpA1390(&x->m4, &y->m4); f_cpA1392(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1395(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1396(const struct A1396 *x, const struct A1396 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m3[12] == y->m3[12] && x->m3[13] == y->m3[13] && x->m3[14] == y->m3[14] && f_cmpA1390(&x->m4, &y->m4) && f_cmpA1392(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1395(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1396() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1396), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1396, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1396, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1396, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1396, m3), 15);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1396, m4), 1, f_touchdcstA1390());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1396, m5), 1, f_touchdcstA1392());
		dcStructField(at, 'i', offsetof(struct A1396, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1396, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1396, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1396, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1396, m10), 1, f_touchdcstA1395());
		dcStructField(at, 'i', offsetof(struct A1396, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ljilcill[15]isij> */
union  A1397 { l m0; j m1; i m2; l m3; c m4; i m5; l m6; l m7[15]; i m8; s m9; i m10; j m11; };
void f_cpA1397(union  A1397 *x, const union  A1397 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; x->m7[7] = y->m7[7]; x->m7[8] = y->m7[8]; x->m7[9] = y->m7[9]; x->m7[10] = y->m7[10]; x->m7[11] = y->m7[11]; x->m7[12] = y->m7[12]; x->m7[13] = y->m7[13]; x->m7[14] = y->m7[14]; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1397(const union  A1397 *x, const union  A1397 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6] && x->m7[7] == y->m7[7] && x->m7[8] == y->m7[8] && x->m7[9] == y->m7[9] && x->m7[10] == y->m7[10] && x->m7[11] == y->m7[11] && x->m7[12] == y->m7[12] && x->m7[13] == y->m7[13] && x->m7[14] == y->m7[14] && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1397() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1397), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1397, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1397, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1397, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1397, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1397, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1397, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1397, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1397, m7), 15);
		dcStructField(at, 'i', offsetof(union  A1397, m8), 1);
		dcStructField(at, 's', offsetof(union  A1397, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1397, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1397, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pplfp<ljilcill[15]isij>csp> */
union  A1398 { p m0; p m1; l m2; f m3; p m4; union  A1397 m5; c m6; s m7; p m8; };
void f_cpA1398(union  A1398 *x, const union  A1398 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1397(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1398(const union  A1398 *x, const union  A1398 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1397(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1398() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1398), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1398, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1398, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1398, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1398, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1398, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1398, m5), 1, f_touchdcstA1397());
		dcStructField(at, 'c', offsetof(union  A1398, m6), 1);
		dcStructField(at, 's', offsetof(union  A1398, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1398, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iclsssdsfisd> */
union  A1399 { i m0; c m1; l m2; s m3; s m4; s m5; d m6; s m7; f m8; i m9; s m10; d m11; };
void f_cpA1399(union  A1399 *x, const union  A1399 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1399(const union  A1399 *x, const union  A1399 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1399() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1399), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1399, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1399, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1399, m2), 1);
		dcStructField(at, 's', offsetof(union  A1399, m3), 1);
		dcStructField(at, 's', offsetof(union  A1399, m4), 1);
		dcStructField(at, 's', offsetof(union  A1399, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1399, m6), 1);
		dcStructField(at, 's', offsetof(union  A1399, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1399, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1399, m9), 1);
		dcStructField(at, 's', offsetof(union  A1399, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1399, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {plsd} */
struct A1400 { p m0; l m1; s m2; d m3; };
void f_cpA1400(struct A1400 *x, const struct A1400 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1400(const struct A1400 *x, const struct A1400 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1400() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1400), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1400, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1400, m1), 1);
		dcStructField(at, 's', offsetof(struct A1400, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1400, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sjc} */
struct A1401 { s m0; j m1; c m2; };
void f_cpA1401(struct A1401 *x, const struct A1401 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1401(const struct A1401 *x, const struct A1401 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1401() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1401), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1401, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1401, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1401, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <spp[15]> */
union  A1402 { s m0; p m1; p m2[15]; };
void f_cpA1402(union  A1402 *x, const union  A1402 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m2[13] = y->m2[13]; x->m2[14] = y->m2[14]; };
int f_cmpA1402(const union  A1402 *x, const union  A1402 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m2[13] == y->m2[13] && x->m2[14] == y->m2[14]; };
DCstruct* f_touchdcstA1402() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1402), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1402, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1402, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1402, m2), 15);
		dcCloseStruct(at);
	}
	return at;
};
/* {ffppjlcp{sjc}i<spp[15]>f} */
struct A1403 { f m0; f m1; p m2; p m3; j m4; l m5; c m6; p m7; struct A1401 m8; i m9; union  A1402 m10; f m11; };
void f_cpA1403(struct A1403 *x, const struct A1403 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1401(&x->m8, &y->m8); x->m9 = y->m9; f_cpA1402(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1403(const struct A1403 *x, const struct A1403 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1401(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA1402(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1403() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1403), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1403, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1403, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1403, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1403, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1403, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1403, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1403, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1403, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1403, m8), 1, f_touchdcstA1401());
		dcStructField(at, 'i', offsetof(struct A1403, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1403, m10), 1, f_touchdcstA1402());
		dcStructField(at, 'f', offsetof(struct A1403, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lilsl} */
struct A1404 { l m0; i m1; l m2; s m3; l m4; };
void f_cpA1404(struct A1404 *x, const struct A1404 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1404(const struct A1404 *x, const struct A1404 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1404() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1404), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1404, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1404, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1404, m2), 1);
		dcStructField(at, 's', offsetof(struct A1404, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1404, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{lilsl}iildd} */
struct A1405 { struct A1404 m0; i m1; i m2; l m3; d m4; d m5; };
void f_cpA1405(struct A1405 *x, const struct A1405 *y) { f_cpA1404(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1405(const struct A1405 *x, const struct A1405 *y) { return f_cmpA1404(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1405() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1405), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1405, m0), 1, f_touchdcstA1404());
		dcStructField(at, 'i', offsetof(struct A1405, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1405, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1405, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1405, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1405, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <l[1]cifld{plsd}{ffppjlcp{sjc}i<spp[15]>f}df{{lilsl}iildd}s> */
union  A1406 { l m0[1]; c m1; i m2; f m3; l m4; d m5; struct A1400 m6; struct A1403 m7; d m8; f m9; struct A1405 m10; s m11; };
void f_cpA1406(union  A1406 *x, const union  A1406 *y) { x->m0[0] = y->m0[0]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1400(&x->m6, &y->m6); f_cpA1403(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; f_cpA1405(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1406(const union  A1406 *x, const union  A1406 *y) { return x->m0[0] == y->m0[0] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1400(&x->m6, &y->m6) && f_cmpA1403(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1405(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1406() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1406), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1406, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1406, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1406, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1406, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1406, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1406, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1406, m6), 1, f_touchdcstA1400());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1406, m7), 1, f_touchdcstA1403());
		dcStructField(at, 'd', offsetof(union  A1406, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1406, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1406, m10), 1, f_touchdcstA1405());
		dcStructField(at, 's', offsetof(union  A1406, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jcifsjjsipds} */
struct A1407 { j m0; c m1; i m2; f m3; s m4; j m5; j m6; s m7; i m8; p m9; d m10; s m11; };
void f_cpA1407(struct A1407 *x, const struct A1407 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1407(const struct A1407 *x, const struct A1407 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1407() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1407), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1407, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1407, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1407, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1407, m3), 1);
		dcStructField(at, 's', offsetof(struct A1407, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1407, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1407, m6), 1);
		dcStructField(at, 's', offsetof(struct A1407, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1407, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1407, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1407, m10), 1);
		dcStructField(at, 's', offsetof(struct A1407, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <djfplsc{jcifsjjsipds}<j>i> */
union  A1408 { d m0; j m1; f m2; p m3; l m4; s m5; c m6; struct A1407 m7; union  A43 m8; i m9; };
void f_cpA1408(union  A1408 *x, const union  A1408 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1407(&x->m7, &y->m7); f_cpA43(&x->m8, &y->m8); x->m9 = y->m9; };
int f_cmpA1408(const union  A1408 *x, const union  A1408 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1407(&x->m7, &y->m7) && f_cmpA43(&x->m8, &y->m8) && x->m9 == y->m9; };
DCstruct* f_touchdcstA1408() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1408), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1408, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1408, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1408, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1408, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1408, m4), 1);
		dcStructField(at, 's', offsetof(union  A1408, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1408, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1408, m7), 1, f_touchdcstA1407());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1408, m8), 1, f_touchdcstA43());
		dcStructField(at, 'i', offsetof(union  A1408, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <j[9]sjisppls> */
union  A1409 { j m0[9]; s m1; j m2; i m3; s m4; p m5; p m6; l m7; s m8; };
void f_cpA1409(union  A1409 *x, const union  A1409 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1409(const union  A1409 *x, const union  A1409 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1409() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1409), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1409, m0), 9);
		dcStructField(at, 's', offsetof(union  A1409, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1409, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1409, m3), 1);
		dcStructField(at, 's', offsetof(union  A1409, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1409, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1409, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1409, m7), 1);
		dcStructField(at, 's', offsetof(union  A1409, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lcfcj} */
struct A1410 { l m0; c m1; f m2; c m3; j m4; };
void f_cpA1410(struct A1410 *x, const struct A1410 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1410(const struct A1410 *x, const struct A1410 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1410() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1410), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1410, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1410, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1410, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1410, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1410, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jpdji[10]fdllidp} */
struct A1411 { j m0; p m1; d m2; j m3; i m4[10]; f m5; d m6; l m7; l m8; i m9; d m10; p m11; };
void f_cpA1411(struct A1411 *x, const struct A1411 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1411(const struct A1411 *x, const struct A1411 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1411() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1411), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1411, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1411, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1411, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1411, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1411, m4), 10);
		dcStructField(at, 'f', offsetof(struct A1411, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1411, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1411, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1411, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1411, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1411, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1411, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ljc<p>i{lcfcj}ccp{jpdji[10]fdllidp}fd} */
struct A1412 { l m0; j m1; c m2; union  A36 m3; i m4; struct A1410 m5; c m6; c m7; p m8; struct A1411 m9; f m10; d m11; };
void f_cpA1412(struct A1412 *x, const struct A1412 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA36(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1410(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1411(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1412(const struct A1412 *x, const struct A1412 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA36(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1410(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1411(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1412() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1412), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1412, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1412, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1412, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1412, m3), 1, f_touchdcstA36());
		dcStructField(at, 'i', offsetof(struct A1412, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1412, m5), 1, f_touchdcstA1410());
		dcStructField(at, 'c', offsetof(struct A1412, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1412, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1412, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1412, m9), 1, f_touchdcstA1411());
		dcStructField(at, 'f', offsetof(struct A1412, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1412, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pilijfcfplsi> */
union  A1413 { p m0; i m1; l m2; i m3; j m4; f m5; c m6; f m7; p m8; l m9; s m10; i m11; };
void f_cpA1413(union  A1413 *x, const union  A1413 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1413(const union  A1413 *x, const union  A1413 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1413() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1413), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1413, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1413, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1413, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1413, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1413, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1413, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1413, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1413, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1413, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1413, m9), 1);
		dcStructField(at, 's', offsetof(union  A1413, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1413, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ccl} */
struct A1414 { c m0; c m1; l m2; };
void f_cpA1414(struct A1414 *x, const struct A1414 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1414(const struct A1414 *x, const struct A1414 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1414() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1414), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1414, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1414, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1414, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ipfjijljpfsj> */
union  A1415 { i m0; p m1; f m2; j m3; i m4; j m5; l m6; j m7; p m8; f m9; s m10; j m11; };
void f_cpA1415(union  A1415 *x, const union  A1415 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1415(const union  A1415 *x, const union  A1415 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1415() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1415), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1415, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1415, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1415, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1415, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1415, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1415, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1415, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1415, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1415, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1415, m9), 1);
		dcStructField(at, 's', offsetof(union  A1415, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1415, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<pilijfcfplsi>{ccl}l<ipfjijljpfsj>> */
union  A1416 { union  A1413 m0; struct A1414 m1; l m2; union  A1415 m3; };
void f_cpA1416(union  A1416 *x, const union  A1416 *y) { f_cpA1413(&x->m0, &y->m0); f_cpA1414(&x->m1, &y->m1); x->m2 = y->m2; f_cpA1415(&x->m3, &y->m3); };
int f_cmpA1416(const union  A1416 *x, const union  A1416 *y) { return f_cmpA1413(&x->m0, &y->m0) && f_cmpA1414(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA1415(&x->m3, &y->m3); };
DCstruct* f_touchdcstA1416() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1416), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1416, m0), 1, f_touchdcstA1413());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1416, m1), 1, f_touchdcstA1414());
		dcStructField(at, 'l', offsetof(union  A1416, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1416, m3), 1, f_touchdcstA1415());
		dcCloseStruct(at);
	}
	return at;
};
/* <dcjcdccl> */
union  A1417 { d m0; c m1; j m2; c m3; d m4; c m5; c m6; l m7; };
void f_cpA1417(union  A1417 *x, const union  A1417 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1417(const union  A1417 *x, const union  A1417 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1417() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1417), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1417, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1417, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1417, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1417, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1417, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1417, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1417, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1417, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fcppp> */
union  A1418 { f m0; c m1; p m2; p m3; p m4; };
void f_cpA1418(union  A1418 *x, const union  A1418 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1418(const union  A1418 *x, const union  A1418 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1418() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1418), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1418, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1418, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1418, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1418, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1418, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fiic<dcjcdccl>ll<fcppp>cdsj} */
struct A1419 { f m0; i m1; i m2; c m3; union  A1417 m4; l m5; l m6; union  A1418 m7; c m8; d m9; s m10; j m11; };
void f_cpA1419(struct A1419 *x, const struct A1419 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1417(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA1418(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1419(const struct A1419 *x, const struct A1419 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1417(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1418(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1419() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1419), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1419, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1419, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1419, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1419, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1419, m4), 1, f_touchdcstA1417());
		dcStructField(at, 'l', offsetof(struct A1419, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1419, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1419, m7), 1, f_touchdcstA1418());
		dcStructField(at, 'c', offsetof(struct A1419, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1419, m9), 1);
		dcStructField(at, 's', offsetof(struct A1419, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1419, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <liip> */
union  A1420 { l m0; i m1; i m2; p m3; };
void f_cpA1420(union  A1420 *x, const union  A1420 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1420(const union  A1420 *x, const union  A1420 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1420() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1420), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1420, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1420, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1420, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1420, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jlspi> */
union  A1421 { j m0; l m1; s m2; p m3; i m4; };
void f_cpA1421(union  A1421 *x, const union  A1421 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1421(const union  A1421 *x, const union  A1421 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1421() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1421), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1421, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1421, m1), 1);
		dcStructField(at, 's', offsetof(union  A1421, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1421, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1421, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pspipjp<jlspi>icdp} */
struct A1422 { p m0; s m1; p m2; i m3; p m4; j m5; p m6; union  A1421 m7; i m8; c m9; d m10; p m11; };
void f_cpA1422(struct A1422 *x, const struct A1422 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1421(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1422(const struct A1422 *x, const struct A1422 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1421(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1422() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1422), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1422, m0), 1);
		dcStructField(at, 's', offsetof(struct A1422, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1422, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1422, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1422, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1422, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1422, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1422, m7), 1, f_touchdcstA1421());
		dcStructField(at, 'i', offsetof(struct A1422, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1422, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1422, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1422, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ifspiss{fiic<dcjcdccl>ll<fcppp>cdsj}<liip>c{pspipjp<jlspi>icdp}d> */
union  A1423 { i m0; f m1; s m2; p m3; i m4; s m5; s m6; struct A1419 m7; union  A1420 m8; c m9; struct A1422 m10; d m11; };
void f_cpA1423(union  A1423 *x, const union  A1423 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1419(&x->m7, &y->m7); f_cpA1420(&x->m8, &y->m8); x->m9 = y->m9; f_cpA1422(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1423(const union  A1423 *x, const union  A1423 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1419(&x->m7, &y->m7) && f_cmpA1420(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA1422(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1423() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1423), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1423, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1423, m1), 1);
		dcStructField(at, 's', offsetof(union  A1423, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1423, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1423, m4), 1);
		dcStructField(at, 's', offsetof(union  A1423, m5), 1);
		dcStructField(at, 's', offsetof(union  A1423, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1423, m7), 1, f_touchdcstA1419());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1423, m8), 1, f_touchdcstA1420());
		dcStructField(at, 'c', offsetof(union  A1423, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1423, m10), 1, f_touchdcstA1422());
		dcStructField(at, 'd', offsetof(union  A1423, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<fd>ilj> */
union  A1424 { union  A544 m0; i m1; l m2; j m3; };
void f_cpA1424(union  A1424 *x, const union  A1424 *y) { f_cpA544(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1424(const union  A1424 *x, const union  A1424 *y) { return f_cmpA544(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1424() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1424), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1424, m0), 1, f_touchdcstA544());
		dcStructField(at, 'i', offsetof(union  A1424, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1424, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1424, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pj<<fd>ilj>pf> */
union  A1425 { p m0; j m1; union  A1424 m2; p m3; f m4; };
void f_cpA1425(union  A1425 *x, const union  A1425 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1424(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1425(const union  A1425 *x, const union  A1425 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1424(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1425() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1425), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1425, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1425, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1425, m2), 1, f_touchdcstA1424());
		dcStructField(at, 'p', offsetof(union  A1425, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1425, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fdpdfdljjp> */
union  A1426 { f m0; d m1; p m2; d m3; f m4; d m5; l m6; j m7; j m8; p m9; };
void f_cpA1426(union  A1426 *x, const union  A1426 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1426(const union  A1426 *x, const union  A1426 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1426() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1426), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1426, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1426, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1426, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1426, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1426, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1426, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1426, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1426, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1426, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1426, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sfffsfcsd> */
union  A1427 { s m0; f m1; f m2; f m3; s m4; f m5; c m6; s m7; d m8; };
void f_cpA1427(union  A1427 *x, const union  A1427 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1427(const union  A1427 *x, const union  A1427 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1427() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1427), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1427, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1427, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1427, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1427, m3), 1);
		dcStructField(at, 's', offsetof(union  A1427, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1427, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1427, m6), 1);
		dcStructField(at, 's', offsetof(union  A1427, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1427, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ccpljjj[9]jilii> */
union  A1428 { c m0; c m1; p m2; l m3; j m4; j m5; j m6[9]; j m7; i m8; l m9; i m10; i m11; };
void f_cpA1428(union  A1428 *x, const union  A1428 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1428(const union  A1428 *x, const union  A1428 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1428() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1428), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1428, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1428, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1428, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1428, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1428, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1428, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1428, m6), 9);
		dcStructField(at, 'j', offsetof(union  A1428, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1428, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1428, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1428, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1428, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sis[6]f<fdpdfdljjp>cijjf<sfffsfcsd><ccpljjj[9]jilii>> */
union  A1429 { s m0; i m1; s m2[6]; f m3; union  A1426 m4; c m5; i m6; j m7; j m8; f m9; union  A1427 m10; union  A1428 m11; };
void f_cpA1429(union  A1429 *x, const union  A1429 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m3 = y->m3; f_cpA1426(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1427(&x->m10, &y->m10); f_cpA1428(&x->m11, &y->m11); };
int f_cmpA1429(const union  A1429 *x, const union  A1429 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m3 == y->m3 && f_cmpA1426(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1427(&x->m10, &y->m10) && f_cmpA1428(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1429() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1429), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1429, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1429, m1), 1);
		dcStructField(at, 's', offsetof(union  A1429, m2), 6);
		dcStructField(at, 'f', offsetof(union  A1429, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1429, m4), 1, f_touchdcstA1426());
		dcStructField(at, 'c', offsetof(union  A1429, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1429, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1429, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1429, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1429, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1429, m10), 1, f_touchdcstA1427());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1429, m11), 1, f_touchdcstA1428());
		dcCloseStruct(at);
	}
	return at;
};
/* {scp} */
struct A1430 { s m0; c m1; p m2; };
void f_cpA1430(struct A1430 *x, const struct A1430 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1430(const struct A1430 *x, const struct A1430 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1430() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1430), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1430, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1430, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1430, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pj{scp}pf> */
union  A1431 { p m0; j m1; struct A1430 m2; p m3; f m4; };
void f_cpA1431(union  A1431 *x, const union  A1431 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1430(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1431(const union  A1431 *x, const union  A1431 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1430(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1431() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1431), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1431, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1431, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1431, m2), 1, f_touchdcstA1430());
		dcStructField(at, 'p', offsetof(union  A1431, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1431, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <spfjjs[3]> */
union  A1432 { s m0; p m1; f m2; j m3; j m4; s m5[3]; };
void f_cpA1432(union  A1432 *x, const union  A1432 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; };
int f_cmpA1432(const union  A1432 *x, const union  A1432 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2]; };
DCstruct* f_touchdcstA1432() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1432), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1432, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1432, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1432, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1432, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1432, m4), 1);
		dcStructField(at, 's', offsetof(union  A1432, m5), 3);
		dcCloseStruct(at);
	}
	return at;
};
/* {sfjlsslddjlj} */
struct A1433 { s m0; f m1; j m2; l m3; s m4; s m5; l m6; d m7; d m8; j m9; l m10; j m11; };
void f_cpA1433(struct A1433 *x, const struct A1433 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1433(const struct A1433 *x, const struct A1433 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1433() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1433), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1433, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1433, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1433, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1433, m3), 1);
		dcStructField(at, 's', offsetof(struct A1433, m4), 1);
		dcStructField(at, 's', offsetof(struct A1433, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1433, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1433, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1433, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1433, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1433, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1433, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fdll{sfjlsslddjlj}l> */
union  A1434 { f m0; d m1; l m2; l m3; struct A1433 m4; l m5; };
void f_cpA1434(union  A1434 *x, const union  A1434 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1433(&x->m4, &y->m4); x->m5 = y->m5; };
int f_cmpA1434(const union  A1434 *x, const union  A1434 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1433(&x->m4, &y->m4) && x->m5 == y->m5; };
DCstruct* f_touchdcstA1434() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1434), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1434, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1434, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1434, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1434, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1434, m4), 1, f_touchdcstA1433());
		dcStructField(at, 'l', offsetof(union  A1434, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jcjcfdpd} */
struct A1435 { j m0; c m1; j m2; c m3; f m4; d m5; p m6; d m7; };
void f_cpA1435(struct A1435 *x, const struct A1435 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1435(const struct A1435 *x, const struct A1435 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1435() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1435), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1435, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1435, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1435, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1435, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1435, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1435, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1435, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1435, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pic> */
union  A1436 { p m0; i m1; c m2; };
void f_cpA1436(union  A1436 *x, const union  A1436 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1436(const union  A1436 *x, const union  A1436 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1436() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1436), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1436, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1436, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1436, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fsjic[6]sidfpfp} */
struct A1437 { f m0; s m1; j m2; i m3; c m4[6]; s m5; i m6; d m7; f m8; p m9; f m10; p m11; };
void f_cpA1437(struct A1437 *x, const struct A1437 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1437(const struct A1437 *x, const struct A1437 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1437() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1437), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1437, m0), 1);
		dcStructField(at, 's', offsetof(struct A1437, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1437, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1437, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1437, m4), 6);
		dcStructField(at, 's', offsetof(struct A1437, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1437, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1437, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1437, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1437, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1437, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1437, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sd[8]jsi{jcjcfdpd}<pic>l{fsjic[6]sidfpfp}psl} */
struct A1438 { s m0; d m1[8]; j m2; s m3; i m4; struct A1435 m5; union  A1436 m6; l m7; struct A1437 m8; p m9; s m10; l m11; };
void f_cpA1438(struct A1438 *x, const struct A1438 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1435(&x->m5, &y->m5); f_cpA1436(&x->m6, &y->m6); x->m7 = y->m7; f_cpA1437(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1438(const struct A1438 *x, const struct A1438 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1435(&x->m5, &y->m5) && f_cmpA1436(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA1437(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1438() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1438), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1438, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1438, m1), 8);
		dcStructField(at, 'j', offsetof(struct A1438, m2), 1);
		dcStructField(at, 's', offsetof(struct A1438, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1438, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1438, m5), 1, f_touchdcstA1435());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1438, m6), 1, f_touchdcstA1436());
		dcStructField(at, 'l', offsetof(struct A1438, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1438, m8), 1, f_touchdcstA1437());
		dcStructField(at, 'p', offsetof(struct A1438, m9), 1);
		dcStructField(at, 's', offsetof(struct A1438, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1438, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iifpli} */
struct A1439 { i m0; i m1; f m2; p m3; l m4; i m5; };
void f_cpA1439(struct A1439 *x, const struct A1439 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1439(const struct A1439 *x, const struct A1439 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1439() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1439), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1439, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1439, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1439, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1439, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1439, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1439, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sdd} */
struct A1440 { s m0; d m1; d m2; };
void f_cpA1440(struct A1440 *x, const struct A1440 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1440(const struct A1440 *x, const struct A1440 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1440() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1440), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1440, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1440, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1440, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <s<d>ij> */
union  A1441 { s m0; union  A317 m1; i m2; j m3; };
void f_cpA1441(union  A1441 *x, const union  A1441 *y) { x->m0 = y->m0; f_cpA317(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1441(const union  A1441 *x, const union  A1441 *y) { return x->m0 == y->m0 && f_cmpA317(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1441() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1441), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1441, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1441, m1), 1, f_touchdcstA317());
		dcStructField(at, 'i', offsetof(union  A1441, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1441, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <djlc> */
union  A1442 { d m0; j m1; l m2; c m3; };
void f_cpA1442(union  A1442 *x, const union  A1442 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1442(const union  A1442 *x, const union  A1442 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1442() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1442), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1442, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1442, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1442, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1442, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <spc<djlc>jplc> */
union  A1443 { s m0; p m1; c m2; union  A1442 m3; j m4; p m5; l m6; c m7; };
void f_cpA1443(union  A1443 *x, const union  A1443 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1442(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1443(const union  A1443 *x, const union  A1443 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1442(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1443() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1443), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1443, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1443, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1443, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1443, m3), 1, f_touchdcstA1442());
		dcStructField(at, 'j', offsetof(union  A1443, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1443, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1443, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1443, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jii} */
struct A1444 { j m0; i m1; i m2; };
void f_cpA1444(struct A1444 *x, const struct A1444 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1444(const struct A1444 *x, const struct A1444 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1444() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1444), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1444, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1444, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1444, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dcpp} */
struct A1445 { d m0; c m1; p m2; p m3; };
void f_cpA1445(struct A1445 *x, const struct A1445 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1445(const struct A1445 *x, const struct A1445 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1445() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1445), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1445, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1445, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1445, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1445, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fijdfsl> */
union  A1446 { f m0; i m1; j m2; d m3; f m4; s m5; l m6; };
void f_cpA1446(union  A1446 *x, const union  A1446 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1446(const union  A1446 *x, const union  A1446 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1446() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1446), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1446, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1446, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1446, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1446, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1446, m4), 1);
		dcStructField(at, 's', offsetof(union  A1446, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1446, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{jii}fij{dcpp}<fijdfsl>il[12]jc> */
union  A1447 { struct A1444 m0; f m1; i m2; j m3; struct A1445 m4; union  A1446 m5; i m6; l m7[12]; j m8; c m9; };
void f_cpA1447(union  A1447 *x, const union  A1447 *y) { f_cpA1444(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1445(&x->m4, &y->m4); f_cpA1446(&x->m5, &y->m5); x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; x->m7[7] = y->m7[7]; x->m7[8] = y->m7[8]; x->m7[9] = y->m7[9]; x->m7[10] = y->m7[10]; x->m7[11] = y->m7[11]; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1447(const union  A1447 *x, const union  A1447 *y) { return f_cmpA1444(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1445(&x->m4, &y->m4) && f_cmpA1446(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6] && x->m7[7] == y->m7[7] && x->m7[8] == y->m7[8] && x->m7[9] == y->m7[9] && x->m7[10] == y->m7[10] && x->m7[11] == y->m7[11] && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1447() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1447), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1447, m0), 1, f_touchdcstA1444());
		dcStructField(at, 'f', offsetof(union  A1447, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1447, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1447, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1447, m4), 1, f_touchdcstA1445());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1447, m5), 1, f_touchdcstA1446());
		dcStructField(at, 'i', offsetof(union  A1447, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1447, m7), 12);
		dcStructField(at, 'j', offsetof(union  A1447, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1447, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fdidsiddp> */
union  A1448 { f m0; d m1; i m2; d m3; s m4; i m5; d m6; d m7; p m8; };
void f_cpA1448(union  A1448 *x, const union  A1448 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1448(const union  A1448 *x, const union  A1448 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1448() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1448), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1448, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1448, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1448, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1448, m3), 1);
		dcStructField(at, 's', offsetof(union  A1448, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1448, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1448, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1448, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1448, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lfdpdd{l}<fdidsiddp>} */
struct A1449 { l m0; f m1; d m2; p m3; d m4; d m5; struct A141 m6; union  A1448 m7; };
void f_cpA1449(struct A1449 *x, const struct A1449 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA141(&x->m6, &y->m6); f_cpA1448(&x->m7, &y->m7); };
int f_cmpA1449(const struct A1449 *x, const struct A1449 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA141(&x->m6, &y->m6) && f_cmpA1448(&x->m7, &y->m7); };
DCstruct* f_touchdcstA1449() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1449), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1449, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1449, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1449, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1449, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1449, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1449, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1449, m6), 1, f_touchdcstA141());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1449, m7), 1, f_touchdcstA1448());
		dcCloseStruct(at);
	}
	return at;
};
/* <flfjfs<{jii}fij{dcpp}<fijdfsl>il[12]jc><dj>c{lfdpdd{l}<fdidsiddp>}sf[9]> */
union  A1450 { f m0; l m1; f m2; j m3; f m4; s m5; union  A1447 m6; union  A101 m7; c m8; struct A1449 m9; s m10; f m11[9]; };
void f_cpA1450(union  A1450 *x, const union  A1450 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1447(&x->m6, &y->m6); f_cpA101(&x->m7, &y->m7); x->m8 = y->m8; f_cpA1449(&x->m9, &y->m9); x->m10 = y->m10; x->m11[0] = y->m11[0]; x->m11[1] = y->m11[1]; x->m11[2] = y->m11[2]; x->m11[3] = y->m11[3]; x->m11[4] = y->m11[4]; x->m11[5] = y->m11[5]; x->m11[6] = y->m11[6]; x->m11[7] = y->m11[7]; x->m11[8] = y->m11[8]; };
int f_cmpA1450(const union  A1450 *x, const union  A1450 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1447(&x->m6, &y->m6) && f_cmpA101(&x->m7, &y->m7) && x->m8 == y->m8 && f_cmpA1449(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11[0] == y->m11[0] && x->m11[1] == y->m11[1] && x->m11[2] == y->m11[2] && x->m11[3] == y->m11[3] && x->m11[4] == y->m11[4] && x->m11[5] == y->m11[5] && x->m11[6] == y->m11[6] && x->m11[7] == y->m11[7] && x->m11[8] == y->m11[8]; };
DCstruct* f_touchdcstA1450() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1450), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1450, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1450, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1450, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1450, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1450, m4), 1);
		dcStructField(at, 's', offsetof(union  A1450, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1450, m6), 1, f_touchdcstA1447());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1450, m7), 1, f_touchdcstA101());
		dcStructField(at, 'c', offsetof(union  A1450, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1450, m9), 1, f_touchdcstA1449());
		dcStructField(at, 's', offsetof(union  A1450, m10), 1);
		dcStructField(at, 'f', offsetof(union  A1450, m11), 9);
		dcCloseStruct(at);
	}
	return at;
};
/* {sidijc} */
struct A1451 { s m0; i m1; d m2; i m3; j m4; c m5; };
void f_cpA1451(struct A1451 *x, const struct A1451 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1451(const struct A1451 *x, const struct A1451 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1451() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1451), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1451, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1451, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1451, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1451, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1451, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1451, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dffpii{fdd}<s>p{sidijc}fs> */
union  A1452 { d m0; f m1; f m2; p m3; i m4; i m5; struct A1255 m6; union  A179 m7; p m8; struct A1451 m9; f m10; s m11; };
void f_cpA1452(union  A1452 *x, const union  A1452 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1255(&x->m6, &y->m6); f_cpA179(&x->m7, &y->m7); x->m8 = y->m8; f_cpA1451(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1452(const union  A1452 *x, const union  A1452 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1255(&x->m6, &y->m6) && f_cmpA179(&x->m7, &y->m7) && x->m8 == y->m8 && f_cmpA1451(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1452() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1452), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1452, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1452, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1452, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1452, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1452, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1452, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1452, m6), 1, f_touchdcstA1255());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1452, m7), 1, f_touchdcstA179());
		dcStructField(at, 'p', offsetof(union  A1452, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1452, m9), 1, f_touchdcstA1451());
		dcStructField(at, 'f', offsetof(union  A1452, m10), 1);
		dcStructField(at, 's', offsetof(union  A1452, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<dffpii{fdd}<s>p{sidijc}fs>fs} */
struct A1453 { union  A1452 m0; f m1; s m2; };
void f_cpA1453(struct A1453 *x, const struct A1453 *y) { f_cpA1452(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1453(const struct A1453 *x, const struct A1453 *y) { return f_cmpA1452(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1453() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1453), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1453, m0), 1, f_touchdcstA1452());
		dcStructField(at, 'f', offsetof(struct A1453, m1), 1);
		dcStructField(at, 's', offsetof(struct A1453, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pff} */
struct A1454 { p m0; f m1; f m2; };
void f_cpA1454(struct A1454 *x, const struct A1454 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1454(const struct A1454 *x, const struct A1454 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1454() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1454), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1454, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1454, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1454, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lpsljljjicf{pff}> */
union  A1455 { l m0; p m1; s m2; l m3; j m4; l m5; j m6; j m7; i m8; c m9; f m10; struct A1454 m11; };
void f_cpA1455(union  A1455 *x, const union  A1455 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1454(&x->m11, &y->m11); };
int f_cmpA1455(const union  A1455 *x, const union  A1455 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1454(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1455() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1455), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1455, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1455, m1), 1);
		dcStructField(at, 's', offsetof(union  A1455, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1455, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1455, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1455, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1455, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1455, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1455, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1455, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1455, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1455, m11), 1, f_touchdcstA1454());
		dcCloseStruct(at);
	}
	return at;
};
/* {cisji} */
struct A1456 { c m0; i m1; s m2; j m3; i m4; };
void f_cpA1456(struct A1456 *x, const struct A1456 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1456(const struct A1456 *x, const struct A1456 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1456() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1456), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1456, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1456, m1), 1);
		dcStructField(at, 's', offsetof(struct A1456, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1456, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1456, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jsfppclpllfd} */
struct A1457 { j m0; s m1; f m2; p m3; p m4; c m5; l m6; p m7; l m8; l m9; f m10; d m11; };
void f_cpA1457(struct A1457 *x, const struct A1457 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1457(const struct A1457 *x, const struct A1457 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1457() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1457), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1457, m0), 1);
		dcStructField(at, 's', offsetof(struct A1457, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1457, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1457, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1457, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1457, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1457, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1457, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1457, m8), 1);
		dcStructField(at, 'l', offsetof(struct A1457, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1457, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1457, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pjlippj{cisji}{jsfppclpllfd}[15]ij{f}> */
union  A1458 { p m0; j m1; l m2; i m3; p m4; p m5; j m6; struct A1456 m7; struct A1457 m8[15]; i m9; j m10; struct A195 m11; };
void f_cpA1458(union  A1458 *x, const union  A1458 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1456(&x->m7, &y->m7); f_cpA1457(&x->m8[0], &y->m8[0]); f_cpA1457(&x->m8[1], &y->m8[1]); f_cpA1457(&x->m8[2], &y->m8[2]); f_cpA1457(&x->m8[3], &y->m8[3]); f_cpA1457(&x->m8[4], &y->m8[4]); f_cpA1457(&x->m8[5], &y->m8[5]); f_cpA1457(&x->m8[6], &y->m8[6]); f_cpA1457(&x->m8[7], &y->m8[7]); f_cpA1457(&x->m8[8], &y->m8[8]); f_cpA1457(&x->m8[9], &y->m8[9]); f_cpA1457(&x->m8[10], &y->m8[10]); f_cpA1457(&x->m8[11], &y->m8[11]); f_cpA1457(&x->m8[12], &y->m8[12]); f_cpA1457(&x->m8[13], &y->m8[13]); f_cpA1457(&x->m8[14], &y->m8[14]); x->m9 = y->m9; x->m10 = y->m10; f_cpA195(&x->m11, &y->m11); };
int f_cmpA1458(const union  A1458 *x, const union  A1458 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1456(&x->m7, &y->m7) && f_cmpA1457(&x->m8[0], &y->m8[0]) && f_cmpA1457(&x->m8[1], &y->m8[1]) && f_cmpA1457(&x->m8[2], &y->m8[2]) && f_cmpA1457(&x->m8[3], &y->m8[3]) && f_cmpA1457(&x->m8[4], &y->m8[4]) && f_cmpA1457(&x->m8[5], &y->m8[5]) && f_cmpA1457(&x->m8[6], &y->m8[6]) && f_cmpA1457(&x->m8[7], &y->m8[7]) && f_cmpA1457(&x->m8[8], &y->m8[8]) && f_cmpA1457(&x->m8[9], &y->m8[9]) && f_cmpA1457(&x->m8[10], &y->m8[10]) && f_cmpA1457(&x->m8[11], &y->m8[11]) && f_cmpA1457(&x->m8[12], &y->m8[12]) && f_cmpA1457(&x->m8[13], &y->m8[13]) && f_cmpA1457(&x->m8[14], &y->m8[14]) && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA195(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1458() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1458), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1458, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1458, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1458, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1458, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1458, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1458, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1458, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1458, m7), 1, f_touchdcstA1456());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1458, m8), 15, f_touchdcstA1457());
		dcStructField(at, 'i', offsetof(union  A1458, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1458, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1458, m11), 1, f_touchdcstA195());
		dcCloseStruct(at);
	}
	return at;
};
/* {picijpdp} */
struct A1459 { p m0; i m1; c m2; i m3; j m4; p m5; d m6; p m7; };
void f_cpA1459(struct A1459 *x, const struct A1459 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1459(const struct A1459 *x, const struct A1459 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1459() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1459), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1459, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1459, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1459, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1459, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1459, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1459, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1459, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1459, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dcifdi} */
struct A1460 { d m0; c m1; i m2; f m3; d m4; i m5; };
void f_cpA1460(struct A1460 *x, const struct A1460 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1460(const struct A1460 *x, const struct A1460 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1460() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1460), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1460, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1460, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1460, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1460, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1460, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1460, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lcs} */
struct A1461 { l m0; c m1; s m2; };
void f_cpA1461(struct A1461 *x, const struct A1461 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1461(const struct A1461 *x, const struct A1461 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1461() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1461), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1461, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1461, m1), 1);
		dcStructField(at, 's', offsetof(struct A1461, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pcdjjc> */
union  A1462 { p m0; c m1; d m2; j m3; j m4; c m5; };
void f_cpA1462(union  A1462 *x, const union  A1462 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1462(const union  A1462 *x, const union  A1462 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1462() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1462), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1462, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1462, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1462, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1462, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1462, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1462, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pj{picijpdp}dic{dcifdi}c{lcs}d<pcdjjc>[15]d> */
union  A1463 { p m0; j m1; struct A1459 m2; d m3; i m4; c m5; struct A1460 m6; c m7; struct A1461 m8; d m9; union  A1462 m10[15]; d m11; };
void f_cpA1463(union  A1463 *x, const union  A1463 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1459(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1460(&x->m6, &y->m6); x->m7 = y->m7; f_cpA1461(&x->m8, &y->m8); x->m9 = y->m9; f_cpA1462(&x->m10[0], &y->m10[0]); f_cpA1462(&x->m10[1], &y->m10[1]); f_cpA1462(&x->m10[2], &y->m10[2]); f_cpA1462(&x->m10[3], &y->m10[3]); f_cpA1462(&x->m10[4], &y->m10[4]); f_cpA1462(&x->m10[5], &y->m10[5]); f_cpA1462(&x->m10[6], &y->m10[6]); f_cpA1462(&x->m10[7], &y->m10[7]); f_cpA1462(&x->m10[8], &y->m10[8]); f_cpA1462(&x->m10[9], &y->m10[9]); f_cpA1462(&x->m10[10], &y->m10[10]); f_cpA1462(&x->m10[11], &y->m10[11]); f_cpA1462(&x->m10[12], &y->m10[12]); f_cpA1462(&x->m10[13], &y->m10[13]); f_cpA1462(&x->m10[14], &y->m10[14]); x->m11 = y->m11; };
int f_cmpA1463(const union  A1463 *x, const union  A1463 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1459(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1460(&x->m6, &y->m6) && x->m7 == y->m7 && f_cmpA1461(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA1462(&x->m10[0], &y->m10[0]) && f_cmpA1462(&x->m10[1], &y->m10[1]) && f_cmpA1462(&x->m10[2], &y->m10[2]) && f_cmpA1462(&x->m10[3], &y->m10[3]) && f_cmpA1462(&x->m10[4], &y->m10[4]) && f_cmpA1462(&x->m10[5], &y->m10[5]) && f_cmpA1462(&x->m10[6], &y->m10[6]) && f_cmpA1462(&x->m10[7], &y->m10[7]) && f_cmpA1462(&x->m10[8], &y->m10[8]) && f_cmpA1462(&x->m10[9], &y->m10[9]) && f_cmpA1462(&x->m10[10], &y->m10[10]) && f_cmpA1462(&x->m10[11], &y->m10[11]) && f_cmpA1462(&x->m10[12], &y->m10[12]) && f_cmpA1462(&x->m10[13], &y->m10[13]) && f_cmpA1462(&x->m10[14], &y->m10[14]) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1463() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1463), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1463, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1463, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1463, m2), 1, f_touchdcstA1459());
		dcStructField(at, 'd', offsetof(union  A1463, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1463, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1463, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1463, m6), 1, f_touchdcstA1460());
		dcStructField(at, 'c', offsetof(union  A1463, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1463, m8), 1, f_touchdcstA1461());
		dcStructField(at, 'd', offsetof(union  A1463, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1463, m10), 15, f_touchdcstA1462());
		dcStructField(at, 'd', offsetof(union  A1463, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{ff}d} */
struct A1464 { struct A125 m0; d m1; };
void f_cpA1464(struct A1464 *x, const struct A1464 *y) { f_cpA125(&x->m0, &y->m0); x->m1 = y->m1; };
int f_cmpA1464(const struct A1464 *x, const struct A1464 *y) { return f_cmpA125(&x->m0, &y->m0) && x->m1 == y->m1; };
DCstruct* f_touchdcstA1464() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1464), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1464, m0), 1, f_touchdcstA125());
		dcStructField(at, 'd', offsetof(struct A1464, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ilfjficidfpp} */
struct A1465 { i m0; l m1; f m2; j m3; f m4; i m5; c m6; i m7; d m8; f m9; p m10; p m11; };
void f_cpA1465(struct A1465 *x, const struct A1465 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1465(const struct A1465 *x, const struct A1465 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1465() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1465), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1465, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1465, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1465, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1465, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1465, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1465, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1465, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1465, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1465, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1465, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1465, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1465, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fddi{ilfjficidfpp}isjijff> */
union  A1466 { f m0; d m1; d m2; i m3; struct A1465 m4; i m5; s m6; j m7; i m8; j m9; f m10; f m11; };
void f_cpA1466(union  A1466 *x, const union  A1466 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1465(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1466(const union  A1466 *x, const union  A1466 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1465(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1466() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1466), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1466, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1466, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1466, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1466, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1466, m4), 1, f_touchdcstA1465());
		dcStructField(at, 'i', offsetof(union  A1466, m5), 1);
		dcStructField(at, 's', offsetof(union  A1466, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1466, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1466, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1466, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1466, m10), 1);
		dcStructField(at, 'f', offsetof(union  A1466, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fp<lpsljljjicf{pff}>l<pjlippj{cisji}{jsfppclpllfd}[15]ij{f}><pj{picijpdp}dic{dcifdi}c{lcs}d<pcdjjc>[15]d>l{{ff}d}ff<fddi{ilfjficidfpp}isjijff>p> */
union  A1467 { f m0; p m1; union  A1455 m2; l m3; union  A1458 m4; union  A1463 m5; l m6; struct A1464 m7; f m8; f m9; union  A1466 m10; p m11; };
void f_cpA1467(union  A1467 *x, const union  A1467 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1455(&x->m2, &y->m2); x->m3 = y->m3; f_cpA1458(&x->m4, &y->m4); f_cpA1463(&x->m5, &y->m5); x->m6 = y->m6; f_cpA1464(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; f_cpA1466(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1467(const union  A1467 *x, const union  A1467 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1455(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA1458(&x->m4, &y->m4) && f_cmpA1463(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA1464(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1466(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1467() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1467), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1467, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1467, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1467, m2), 1, f_touchdcstA1455());
		dcStructField(at, 'l', offsetof(union  A1467, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1467, m4), 1, f_touchdcstA1458());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1467, m5), 1, f_touchdcstA1463());
		dcStructField(at, 'l', offsetof(union  A1467, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1467, m7), 1, f_touchdcstA1464());
		dcStructField(at, 'f', offsetof(union  A1467, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1467, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1467, m10), 1, f_touchdcstA1466());
		dcStructField(at, 'p', offsetof(union  A1467, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fpcj> */
union  A1468 { f m0; p m1; c m2; j m3; };
void f_cpA1468(union  A1468 *x, const union  A1468 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1468(const union  A1468 *x, const union  A1468 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1468() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1468), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1468, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1468, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1468, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1468, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ifdi} */
struct A1469 { i m0; f m1; d m2; i m3; };
void f_cpA1469(struct A1469 *x, const struct A1469 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1469(const struct A1469 *x, const struct A1469 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1469() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1469), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1469, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1469, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1469, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1469, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cc[7]cs} */
struct A1470 { c m0; c m1[7]; c m2; s m3; };
void f_cpA1470(struct A1470 *x, const struct A1470 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1470(const struct A1470 *x, const struct A1470 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1470() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1470), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1470, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1470, m1), 7);
		dcStructField(at, 'c', offsetof(struct A1470, m2), 1);
		dcStructField(at, 's', offsetof(struct A1470, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<fpcj>{s}ijs[3]c{ifdi}cd{cc[7]cs}l[1]} */
struct A1471 { union  A1468 m0; struct A162 m1; i m2; j m3; s m4[3]; c m5; struct A1469 m6; c m7; d m8; struct A1470 m9; l m10[1]; };
void f_cpA1471(struct A1471 *x, const struct A1471 *y) { f_cpA1468(&x->m0, &y->m0); f_cpA162(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m5 = y->m5; f_cpA1469(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; f_cpA1470(&x->m9, &y->m9); x->m10[0] = y->m10[0]; };
int f_cmpA1471(const struct A1471 *x, const struct A1471 *y) { return f_cmpA1468(&x->m0, &y->m0) && f_cmpA162(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m5 == y->m5 && f_cmpA1469(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1470(&x->m9, &y->m9) && x->m10[0] == y->m10[0]; };
DCstruct* f_touchdcstA1471() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1471), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1471, m0), 1, f_touchdcstA1468());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1471, m1), 1, f_touchdcstA162());
		dcStructField(at, 'i', offsetof(struct A1471, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1471, m3), 1);
		dcStructField(at, 's', offsetof(struct A1471, m4), 3);
		dcStructField(at, 'c', offsetof(struct A1471, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1471, m6), 1, f_touchdcstA1469());
		dcStructField(at, 'c', offsetof(struct A1471, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1471, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1471, m9), 1, f_touchdcstA1470());
		dcStructField(at, 'l', offsetof(struct A1471, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ccpc} */
struct A1472 { c m0; c m1; p m2; c m3; };
void f_cpA1472(struct A1472 *x, const struct A1472 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1472(const struct A1472 *x, const struct A1472 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1472() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1472), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1472, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1472, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1472, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1472, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ldfj> */
union  A1473 { l m0; d m1; f m2; j m3; };
void f_cpA1473(union  A1473 *x, const union  A1473 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1473(const union  A1473 *x, const union  A1473 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1473() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1473), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1473, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1473, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1473, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1473, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ddijclfjsjjl} */
struct A1474 { d m0; d m1; i m2; j m3; c m4; l m5; f m6; j m7; s m8; j m9; j m10; l m11; };
void f_cpA1474(struct A1474 *x, const struct A1474 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1474(const struct A1474 *x, const struct A1474 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1474() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1474), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1474, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1474, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1474, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1474, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1474, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1474, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1474, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1474, m7), 1);
		dcStructField(at, 's', offsetof(struct A1474, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1474, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1474, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1474, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pip} */
struct A1475 { p m0; i m1; p m2; };
void f_cpA1475(struct A1475 *x, const struct A1475 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1475(const struct A1475 *x, const struct A1475 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1475() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1475), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1475, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1475, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1475, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{ddijclfjsjjl}cl<s>c{pip}dlii} */
struct A1476 { struct A1474 m0; c m1; l m2; union  A179 m3; c m4; struct A1475 m5; d m6; l m7; i m8; i m9; };
void f_cpA1476(struct A1476 *x, const struct A1476 *y) { f_cpA1474(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA179(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1475(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1476(const struct A1476 *x, const struct A1476 *y) { return f_cmpA1474(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA179(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1475(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1476() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1476), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1476, m0), 1, f_touchdcstA1474());
		dcStructField(at, 'c', offsetof(struct A1476, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1476, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1476, m3), 1, f_touchdcstA179());
		dcStructField(at, 'c', offsetof(struct A1476, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1476, m5), 1, f_touchdcstA1475());
		dcStructField(at, 'd', offsetof(struct A1476, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1476, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1476, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1476, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sfj[13]fpcdfilfp} */
struct A1477 { s m0; f m1; j m2[13]; f m3; p m4; c m5; d m6; f m7; i m8; l m9; f m10; p m11; };
void f_cpA1477(struct A1477 *x, const struct A1477 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1477(const struct A1477 *x, const struct A1477 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1477() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1477), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1477, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1477, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1477, m2), 13);
		dcStructField(at, 'f', offsetof(struct A1477, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1477, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1477, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1477, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1477, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1477, m8), 1);
		dcStructField(at, 'l', offsetof(struct A1477, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1477, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1477, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ssj> */
union  A1478 { s m0; s m1; j m2; };
void f_cpA1478(union  A1478 *x, const union  A1478 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1478(const union  A1478 *x, const union  A1478 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1478() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1478), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1478, m0), 1);
		dcStructField(at, 's', offsetof(union  A1478, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1478, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ljcfi<ssj>pf} */
struct A1479 { l m0; j m1; c m2; f m3; i m4; union  A1478 m5; p m6; f m7; };
void f_cpA1479(struct A1479 *x, const struct A1479 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1478(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1479(const struct A1479 *x, const struct A1479 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1478(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1479() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1479), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1479, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1479, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1479, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1479, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1479, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1479, m5), 1, f_touchdcstA1478());
		dcStructField(at, 'p', offsetof(struct A1479, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1479, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pfjsji} */
struct A1480 { p m0; f m1; j m2; s m3; j m4; i m5; };
void f_cpA1480(struct A1480 *x, const struct A1480 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1480(const struct A1480 *x, const struct A1480 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1480() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1480), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1480, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1480, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1480, m2), 1);
		dcStructField(at, 's', offsetof(struct A1480, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1480, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1480, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pdsllpsfddfl} */
struct A1481 { p m0; d m1; s m2; l m3; l m4; p m5; s m6; f m7; d m8; d m9; f m10; l m11; };
void f_cpA1481(struct A1481 *x, const struct A1481 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1481(const struct A1481 *x, const struct A1481 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1481() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1481), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1481, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1481, m1), 1);
		dcStructField(at, 's', offsetof(struct A1481, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1481, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1481, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1481, m5), 1);
		dcStructField(at, 's', offsetof(struct A1481, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1481, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1481, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1481, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1481, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1481, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{cldc}jddj{pdsllpsfddfl}jssc> */
union  A1482 { struct A694 m0; j m1; d m2; d m3; j m4; struct A1481 m5; j m6; s m7; s m8; c m9; };
void f_cpA1482(union  A1482 *x, const union  A1482 *y) { f_cpA694(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1481(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1482(const union  A1482 *x, const union  A1482 *y) { return f_cmpA694(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1481(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1482() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1482), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1482, m0), 1, f_touchdcstA694());
		dcStructField(at, 'j', offsetof(union  A1482, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1482, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1482, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1482, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1482, m5), 1, f_touchdcstA1481());
		dcStructField(at, 'j', offsetof(union  A1482, m6), 1);
		dcStructField(at, 's', offsetof(union  A1482, m7), 1);
		dcStructField(at, 's', offsetof(union  A1482, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1482, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lccp{pfjsji}iili<{cldc}jddj{pdsllpsfddfl}jssc>ff} */
struct A1483 { l m0; c m1; c m2; p m3; struct A1480 m4; i m5; i m6; l m7; i m8; union  A1482 m9; f m10; f m11; };
void f_cpA1483(struct A1483 *x, const struct A1483 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1480(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1482(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1483(const struct A1483 *x, const struct A1483 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1480(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1482(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1483() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1483), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1483, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1483, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1483, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1483, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1483, m4), 1, f_touchdcstA1480());
		dcStructField(at, 'i', offsetof(struct A1483, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1483, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1483, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1483, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1483, m9), 1, f_touchdcstA1482());
		dcStructField(at, 'f', offsetof(struct A1483, m10), 1);
		dcStructField(at, 'f', offsetof(struct A1483, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p[5]fldcdilcdcs} */
struct A1484 { p m0[5]; f m1; l m2; d m3; c m4; d m5; i m6; l m7; c m8; d m9; c m10; s m11; };
void f_cpA1484(struct A1484 *x, const struct A1484 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1484(const struct A1484 *x, const struct A1484 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1484() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1484), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1484, m0), 5);
		dcStructField(at, 'f', offsetof(struct A1484, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1484, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1484, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1484, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1484, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1484, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1484, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1484, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1484, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1484, m10), 1);
		dcStructField(at, 's', offsetof(struct A1484, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ccc} */
struct A1485 { c m0; c m1; c m2; };
void f_cpA1485(struct A1485 *x, const struct A1485 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1485(const struct A1485 *x, const struct A1485 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1485() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1485), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1485, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1485, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1485, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pfs{p[5]fldcdilcdcs}{if}<d>p{ccc}d[11]ifi> */
union  A1486 { p m0; f m1; s m2; struct A1484 m3; struct A556 m4; union  A317 m5; p m6; struct A1485 m7; d m8[11]; i m9; f m10; i m11; };
void f_cpA1486(union  A1486 *x, const union  A1486 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1484(&x->m3, &y->m3); f_cpA556(&x->m4, &y->m4); f_cpA317(&x->m5, &y->m5); x->m6 = y->m6; f_cpA1485(&x->m7, &y->m7); x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m8[8] = y->m8[8]; x->m8[9] = y->m8[9]; x->m8[10] = y->m8[10]; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1486(const union  A1486 *x, const union  A1486 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1484(&x->m3, &y->m3) && f_cmpA556(&x->m4, &y->m4) && f_cmpA317(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA1485(&x->m7, &y->m7) && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m8[8] == y->m8[8] && x->m8[9] == y->m8[9] && x->m8[10] == y->m8[10] && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1486() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1486), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1486, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1486, m1), 1);
		dcStructField(at, 's', offsetof(union  A1486, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1486, m3), 1, f_touchdcstA1484());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1486, m4), 1, f_touchdcstA556());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1486, m5), 1, f_touchdcstA317());
		dcStructField(at, 'p', offsetof(union  A1486, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1486, m7), 1, f_touchdcstA1485());
		dcStructField(at, 'd', offsetof(union  A1486, m8), 11);
		dcStructField(at, 'i', offsetof(union  A1486, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1486, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1486, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jpcsi<pfs{p[5]fldcdilcdcs}{if}<d>p{ccc}d[11]ifi>cfpffs} */
struct A1487 { j m0; p m1; c m2; s m3; i m4; union  A1486 m5; c m6; f m7; p m8; f m9; f m10; s m11; };
void f_cpA1487(struct A1487 *x, const struct A1487 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1486(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1487(const struct A1487 *x, const struct A1487 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1486(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1487() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1487), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1487, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1487, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1487, m2), 1);
		dcStructField(at, 's', offsetof(struct A1487, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1487, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1487, m5), 1, f_touchdcstA1486());
		dcStructField(at, 'c', offsetof(struct A1487, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1487, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1487, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1487, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1487, m10), 1);
		dcStructField(at, 's', offsetof(struct A1487, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <flscpll[10]pp[11]cpd> */
union  A1488 { f m0; l m1; s m2; c m3; p m4; l m5; l m6[10]; p m7; p m8[11]; c m9; p m10; d m11; };
void f_cpA1488(union  A1488 *x, const union  A1488 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m8[8] = y->m8[8]; x->m8[9] = y->m8[9]; x->m8[10] = y->m8[10]; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1488(const union  A1488 *x, const union  A1488 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m8[8] == y->m8[8] && x->m8[9] == y->m8[9] && x->m8[10] == y->m8[10] && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1488() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1488), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1488, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1488, m1), 1);
		dcStructField(at, 's', offsetof(union  A1488, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1488, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1488, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1488, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1488, m6), 10);
		dcStructField(at, 'p', offsetof(union  A1488, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1488, m8), 11);
		dcStructField(at, 'c', offsetof(union  A1488, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1488, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1488, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cis[14]ldsscji[8]pi} */
struct A1489 { c m0; i m1; s m2[14]; l m3; d m4; s m5; s m6; c m7; j m8; i m9[8]; p m10; i m11; };
void f_cpA1489(struct A1489 *x, const struct A1489 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m2[13] = y->m2[13]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1489(const struct A1489 *x, const struct A1489 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m2[13] == y->m2[13] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1489() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1489), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1489, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1489, m1), 1);
		dcStructField(at, 's', offsetof(struct A1489, m2), 14);
		dcStructField(at, 'l', offsetof(struct A1489, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1489, m4), 1);
		dcStructField(at, 's', offsetof(struct A1489, m5), 1);
		dcStructField(at, 's', offsetof(struct A1489, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1489, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1489, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1489, m9), 8);
		dcStructField(at, 'p', offsetof(struct A1489, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1489, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {idjspfdc} */
struct A1490 { i m0; d m1; j m2; s m3; p m4; f m5; d m6; c m7; };
void f_cpA1490(struct A1490 *x, const struct A1490 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1490(const struct A1490 *x, const struct A1490 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1490() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1490), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1490, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1490, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1490, m2), 1);
		dcStructField(at, 's', offsetof(struct A1490, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1490, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1490, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1490, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1490, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <c{l}sc{cis[14]ldsscji[8]pi}ld{idjspfdc}p> */
union  A1491 { c m0; struct A141 m1; s m2; c m3; struct A1489 m4; l m5; d m6; struct A1490 m7; p m8; };
void f_cpA1491(union  A1491 *x, const union  A1491 *y) { x->m0 = y->m0; f_cpA141(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; f_cpA1489(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA1490(&x->m7, &y->m7); x->m8 = y->m8; };
int f_cmpA1491(const union  A1491 *x, const union  A1491 *y) { return x->m0 == y->m0 && f_cmpA141(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1489(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1490(&x->m7, &y->m7) && x->m8 == y->m8; };
DCstruct* f_touchdcstA1491() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1491), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1491, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1491, m1), 1, f_touchdcstA141());
		dcStructField(at, 's', offsetof(union  A1491, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1491, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1491, m4), 1, f_touchdcstA1489());
		dcStructField(at, 'l', offsetof(union  A1491, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1491, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1491, m7), 1, f_touchdcstA1490());
		dcStructField(at, 'p', offsetof(union  A1491, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pj[1]> */
union  A1492 { p m0; j m1[1]; };
void f_cpA1492(union  A1492 *x, const union  A1492 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; };
int f_cmpA1492(const union  A1492 *x, const union  A1492 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0]; };
DCstruct* f_touchdcstA1492() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1492), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1492, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1492, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iddldp> */
union  A1493 { i m0; d m1; d m2; l m3; d m4; p m5; };
void f_cpA1493(union  A1493 *x, const union  A1493 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1493(const union  A1493 *x, const union  A1493 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1493() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1493), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1493, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1493, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1493, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1493, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1493, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1493, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jsfllpispfcl> */
union  A1494 { j m0; s m1; f m2; l m3; l m4; p m5; i m6; s m7; p m8; f m9; c m10; l m11; };
void f_cpA1494(union  A1494 *x, const union  A1494 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1494(const union  A1494 *x, const union  A1494 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1494() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1494), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1494, m0), 1);
		dcStructField(at, 's', offsetof(union  A1494, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1494, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1494, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1494, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1494, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1494, m6), 1);
		dcStructField(at, 's', offsetof(union  A1494, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1494, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1494, m9), 1);
		dcStructField(at, 'c', offsetof(union  A1494, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1494, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iip} */
struct A1495 { i m0; i m1; p m2; };
void f_cpA1495(struct A1495 *x, const struct A1495 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1495(const struct A1495 *x, const struct A1495 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1495() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1495), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1495, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1495, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1495, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ipdi[14]cjld> */
union  A1496 { i m0; p m1; d m2; i m3[14]; c m4; j m5; l m6; d m7; };
void f_cpA1496(union  A1496 *x, const union  A1496 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m3[12] = y->m3[12]; x->m3[13] = y->m3[13]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1496(const union  A1496 *x, const union  A1496 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m3[12] == y->m3[12] && x->m3[13] == y->m3[13] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1496() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1496), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1496, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1496, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1496, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1496, m3), 14);
		dcStructField(at, 'c', offsetof(union  A1496, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1496, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1496, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1496, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<i>i<iddldp>jlp<jsfllpispfcl>{iip}[14]sif<ipdi[14]cjld>> */
union  A1497 { union  A62 m0; i m1; union  A1493 m2; j m3; l m4; p m5; union  A1494 m6; struct A1495 m7[14]; s m8; i m9; f m10; union  A1496 m11; };
void f_cpA1497(union  A1497 *x, const union  A1497 *y) { f_cpA62(&x->m0, &y->m0); x->m1 = y->m1; f_cpA1493(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1494(&x->m6, &y->m6); f_cpA1495(&x->m7[0], &y->m7[0]); f_cpA1495(&x->m7[1], &y->m7[1]); f_cpA1495(&x->m7[2], &y->m7[2]); f_cpA1495(&x->m7[3], &y->m7[3]); f_cpA1495(&x->m7[4], &y->m7[4]); f_cpA1495(&x->m7[5], &y->m7[5]); f_cpA1495(&x->m7[6], &y->m7[6]); f_cpA1495(&x->m7[7], &y->m7[7]); f_cpA1495(&x->m7[8], &y->m7[8]); f_cpA1495(&x->m7[9], &y->m7[9]); f_cpA1495(&x->m7[10], &y->m7[10]); f_cpA1495(&x->m7[11], &y->m7[11]); f_cpA1495(&x->m7[12], &y->m7[12]); f_cpA1495(&x->m7[13], &y->m7[13]); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1496(&x->m11, &y->m11); };
int f_cmpA1497(const union  A1497 *x, const union  A1497 *y) { return f_cmpA62(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA1493(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1494(&x->m6, &y->m6) && f_cmpA1495(&x->m7[0], &y->m7[0]) && f_cmpA1495(&x->m7[1], &y->m7[1]) && f_cmpA1495(&x->m7[2], &y->m7[2]) && f_cmpA1495(&x->m7[3], &y->m7[3]) && f_cmpA1495(&x->m7[4], &y->m7[4]) && f_cmpA1495(&x->m7[5], &y->m7[5]) && f_cmpA1495(&x->m7[6], &y->m7[6]) && f_cmpA1495(&x->m7[7], &y->m7[7]) && f_cmpA1495(&x->m7[8], &y->m7[8]) && f_cmpA1495(&x->m7[9], &y->m7[9]) && f_cmpA1495(&x->m7[10], &y->m7[10]) && f_cmpA1495(&x->m7[11], &y->m7[11]) && f_cmpA1495(&x->m7[12], &y->m7[12]) && f_cmpA1495(&x->m7[13], &y->m7[13]) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1496(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1497() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1497), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1497, m0), 1, f_touchdcstA62());
		dcStructField(at, 'i', offsetof(union  A1497, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1497, m2), 1, f_touchdcstA1493());
		dcStructField(at, 'j', offsetof(union  A1497, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1497, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1497, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1497, m6), 1, f_touchdcstA1494());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1497, m7), 14, f_touchdcstA1495());
		dcStructField(at, 's', offsetof(union  A1497, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1497, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1497, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1497, m11), 1, f_touchdcstA1496());
		dcCloseStruct(at);
	}
	return at;
};
/* <cdfsij[13]ss> */
union  A1498 { c m0; d m1; f m2; s m3; i m4; j m5[13]; s m6; s m7; };
void f_cpA1498(union  A1498 *x, const union  A1498 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m5[11] = y->m5[11]; x->m5[12] = y->m5[12]; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1498(const union  A1498 *x, const union  A1498 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m5[11] == y->m5[11] && x->m5[12] == y->m5[12] && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1498() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1498), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1498, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1498, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1498, m2), 1);
		dcStructField(at, 's', offsetof(union  A1498, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1498, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1498, m5), 13);
		dcStructField(at, 's', offsetof(union  A1498, m6), 1);
		dcStructField(at, 's', offsetof(union  A1498, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {d<<i>i<iddldp>jlp<jsfllpispfcl>{iip}[14]sif<ipdi[14]cjld>><cdfsij[13]ss>} */
struct A1499 { d m0; union  A1497 m1; union  A1498 m2; };
void f_cpA1499(struct A1499 *x, const struct A1499 *y) { x->m0 = y->m0; f_cpA1497(&x->m1, &y->m1); f_cpA1498(&x->m2, &y->m2); };
int f_cmpA1499(const struct A1499 *x, const struct A1499 *y) { return x->m0 == y->m0 && f_cmpA1497(&x->m1, &y->m1) && f_cmpA1498(&x->m2, &y->m2); };
DCstruct* f_touchdcstA1499() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1499), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1499, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1499, m1), 1, f_touchdcstA1497());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1499, m2), 1, f_touchdcstA1498());
		dcCloseStruct(at);
	}
	return at;
};
/* <ccppisj> */
union  A1500 { c m0; c m1; p m2; p m3; i m4; s m5; j m6; };
void f_cpA1500(union  A1500 *x, const union  A1500 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1500(const union  A1500 *x, const union  A1500 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1500() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1500), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1500, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1500, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1500, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1500, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1500, m4), 1);
		dcStructField(at, 's', offsetof(union  A1500, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1500, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cldjj> */
union  A1501 { c m0; l m1; d m2; j m3; j m4; };
void f_cpA1501(union  A1501 *x, const union  A1501 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1501(const union  A1501 *x, const union  A1501 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1501() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1501), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1501, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1501, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1501, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1501, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1501, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sfll<i><cldjj>llcdci} */
struct A1502 { s m0; f m1; l m2; l m3; union  A62 m4; union  A1501 m5; l m6; l m7; c m8; d m9; c m10; i m11; };
void f_cpA1502(struct A1502 *x, const struct A1502 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA62(&x->m4, &y->m4); f_cpA1501(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1502(const struct A1502 *x, const struct A1502 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA62(&x->m4, &y->m4) && f_cmpA1501(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1502() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1502), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1502, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1502, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1502, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1502, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1502, m4), 1, f_touchdcstA62());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1502, m5), 1, f_touchdcstA1501());
		dcStructField(at, 'l', offsetof(struct A1502, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1502, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1502, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1502, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1502, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1502, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ildfjiccps} */
struct A1503 { i m0; l m1; d m2; f m3; j m4; i m5; c m6; c m7; p m8; s m9; };
void f_cpA1503(struct A1503 *x, const struct A1503 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1503(const struct A1503 *x, const struct A1503 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1503() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1503), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1503, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1503, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1503, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1503, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1503, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1503, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1503, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1503, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1503, m8), 1);
		dcStructField(at, 's', offsetof(struct A1503, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <j[2]lp> */
union  A1504 { j m0[2]; l m1; p m2; };
void f_cpA1504(union  A1504 *x, const union  A1504 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1504(const union  A1504 *x, const union  A1504 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1504() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1504), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1504, m0), 2);
		dcStructField(at, 'l', offsetof(union  A1504, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1504, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lpsf} */
struct A1505 { l m0; p m1; s m2; f m3; };
void f_cpA1505(struct A1505 *x, const struct A1505 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1505(const struct A1505 *x, const struct A1505 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1505() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1505), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1505, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1505, m1), 1);
		dcStructField(at, 's', offsetof(struct A1505, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1505, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jlj<j[2]lp>ljsj[6]f{lpsf}sf} */
struct A1506 { j m0; l m1; j m2; union  A1504 m3; l m4; j m5; s m6; j m7[6]; f m8; struct A1505 m9; s m10; f m11; };
void f_cpA1506(struct A1506 *x, const struct A1506 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1504(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m8 = y->m8; f_cpA1505(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1506(const struct A1506 *x, const struct A1506 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1504(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m8 == y->m8 && f_cmpA1505(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1506() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1506), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1506, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1506, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1506, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1506, m3), 1, f_touchdcstA1504());
		dcStructField(at, 'l', offsetof(struct A1506, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1506, m5), 1);
		dcStructField(at, 's', offsetof(struct A1506, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1506, m7), 6);
		dcStructField(at, 'f', offsetof(struct A1506, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1506, m9), 1, f_touchdcstA1505());
		dcStructField(at, 's', offsetof(struct A1506, m10), 1);
		dcStructField(at, 'f', offsetof(struct A1506, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {if{jlj<j[2]lp>ljsj[6]f{lpsf}sf}pcpc} */
struct A1507 { i m0; f m1; struct A1506 m2; p m3; c m4; p m5; c m6; };
void f_cpA1507(struct A1507 *x, const struct A1507 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1506(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1507(const struct A1507 *x, const struct A1507 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1506(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1507() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1507), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1507, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1507, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1507, m2), 1, f_touchdcstA1506());
		dcStructField(at, 'p', offsetof(struct A1507, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1507, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1507, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1507, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fpf> */
union  A1508 { f m0; p m1; f m2; };
void f_cpA1508(union  A1508 *x, const union  A1508 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1508(const union  A1508 *x, const union  A1508 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1508() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1508), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1508, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1508, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1508, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ifiddjlj} */
struct A1509 { i m0; f m1; i m2; d m3; d m4; j m5; l m6; j m7; };
void f_cpA1509(struct A1509 *x, const struct A1509 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1509(const struct A1509 *x, const struct A1509 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1509() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1509), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1509, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1509, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1509, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1509, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1509, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1509, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1509, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1509, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<sc>dlpflcflsl{ifiddjlj}} */
struct A1510 { union  A926 m0; d m1; l m2; p m3; f m4; l m5; c m6; f m7; l m8; s m9; l m10; struct A1509 m11; };
void f_cpA1510(struct A1510 *x, const struct A1510 *y) { f_cpA926(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1509(&x->m11, &y->m11); };
int f_cmpA1510(const struct A1510 *x, const struct A1510 *y) { return f_cmpA926(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1509(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1510() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1510), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1510, m0), 1, f_touchdcstA926());
		dcStructField(at, 'd', offsetof(struct A1510, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1510, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1510, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1510, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1510, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1510, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1510, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1510, m8), 1);
		dcStructField(at, 's', offsetof(struct A1510, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1510, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1510, m11), 1, f_touchdcstA1509());
		dcCloseStruct(at);
	}
	return at;
};
/* <scflsis> */
union  A1511 { s m0; c m1; f m2; l m3; s m4; i m5; s m6; };
void f_cpA1511(union  A1511 *x, const union  A1511 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1511(const union  A1511 *x, const union  A1511 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1511() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1511), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1511, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1511, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1511, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1511, m3), 1);
		dcStructField(at, 's', offsetof(union  A1511, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1511, m5), 1);
		dcStructField(at, 's', offsetof(union  A1511, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jipdc> */
union  A1512 { j m0; i m1; p m2; d m3; c m4; };
void f_cpA1512(union  A1512 *x, const union  A1512 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1512(const union  A1512 *x, const union  A1512 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1512() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1512), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1512, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1512, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1512, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1512, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1512, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cijclpfjjdpj} */
struct A1513 { c m0; i m1; j m2; c m3; l m4; p m5; f m6; j m7; j m8; d m9; p m10; j m11; };
void f_cpA1513(struct A1513 *x, const struct A1513 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1513(const struct A1513 *x, const struct A1513 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1513() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1513), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1513, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1513, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1513, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1513, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1513, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1513, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1513, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1513, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1513, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1513, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1513, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1513, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dsljf> */
union  A1514 { d m0; s m1; l m2; j m3; f m4; };
void f_cpA1514(union  A1514 *x, const union  A1514 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1514(const union  A1514 *x, const union  A1514 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1514() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1514), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1514, m0), 1);
		dcStructField(at, 's', offsetof(union  A1514, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1514, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1514, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1514, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dlll[7]l{cijclpfjjdpj}lif<dsljf>pd} */
struct A1515 { d m0; l m1; l m2; l m3[7]; l m4; struct A1513 m5; l m6; i m7; f m8; union  A1514 m9; p m10; d m11; };
void f_cpA1515(struct A1515 *x, const struct A1515 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m4 = y->m4; f_cpA1513(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1514(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1515(const struct A1515 *x, const struct A1515 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m4 == y->m4 && f_cmpA1513(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1514(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1515() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1515), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1515, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1515, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1515, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1515, m3), 7);
		dcStructField(at, 'l', offsetof(struct A1515, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1515, m5), 1, f_touchdcstA1513());
		dcStructField(at, 'l', offsetof(struct A1515, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1515, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1515, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1515, m9), 1, f_touchdcstA1514());
		dcStructField(at, 'p', offsetof(struct A1515, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1515, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sjdpicid} */
struct A1516 { s m0; j m1; d m2; p m3; i m4; c m5; i m6; d m7; };
void f_cpA1516(struct A1516 *x, const struct A1516 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1516(const struct A1516 *x, const struct A1516 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1516() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1516), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1516, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1516, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1516, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1516, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1516, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1516, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1516, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1516, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jpiipfcfc} */
struct A1517 { j m0; p m1; i m2; i m3; p m4; f m5; c m6; f m7; c m8; };
void f_cpA1517(struct A1517 *x, const struct A1517 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1517(const struct A1517 *x, const struct A1517 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1517() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1517), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1517, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1517, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1517, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1517, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1517, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1517, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1517, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1517, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1517, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <d<jf>jl[11]lsj{jc}{sjdpicid}{jpiipfcfc}> */
union  A1518 { d m0; union  A679 m1; j m2; l m3[11]; l m4; s m5; j m6; struct A634 m7; struct A1516 m8; struct A1517 m9; };
void f_cpA1518(union  A1518 *x, const union  A1518 *y) { x->m0 = y->m0; f_cpA679(&x->m1, &y->m1); x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA634(&x->m7, &y->m7); f_cpA1516(&x->m8, &y->m8); f_cpA1517(&x->m9, &y->m9); };
int f_cmpA1518(const union  A1518 *x, const union  A1518 *y) { return x->m0 == y->m0 && f_cmpA679(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA634(&x->m7, &y->m7) && f_cmpA1516(&x->m8, &y->m8) && f_cmpA1517(&x->m9, &y->m9); };
DCstruct* f_touchdcstA1518() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1518), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1518, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1518, m1), 1, f_touchdcstA679());
		dcStructField(at, 'j', offsetof(union  A1518, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1518, m3), 11);
		dcStructField(at, 'l', offsetof(union  A1518, m4), 1);
		dcStructField(at, 's', offsetof(union  A1518, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1518, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1518, m7), 1, f_touchdcstA634());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1518, m8), 1, f_touchdcstA1516());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1518, m9), 1, f_touchdcstA1517());
		dcCloseStruct(at);
	}
	return at;
};
/* <pffccc> */
union  A1519 { p m0; f m1; f m2; c m3; c m4; c m5; };
void f_cpA1519(union  A1519 *x, const union  A1519 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1519(const union  A1519 *x, const union  A1519 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1519() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1519), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1519, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1519, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1519, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1519, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1519, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1519, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fsl> */
union  A1520 { f m0; s m1; l m2; };
void f_cpA1520(union  A1520 *x, const union  A1520 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1520(const union  A1520 *x, const union  A1520 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1520() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1520), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1520, m0), 1);
		dcStructField(at, 's', offsetof(union  A1520, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1520, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fdcdjpi> */
union  A1521 { f m0; d m1; c m2; d m3; j m4; p m5; i m6; };
void f_cpA1521(union  A1521 *x, const union  A1521 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1521(const union  A1521 *x, const union  A1521 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1521() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1521), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1521, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1521, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1521, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1521, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1521, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1521, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1521, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f<pffccc><fsl><fdcdjpi>psj} */
struct A1522 { f m0; union  A1519 m1; union  A1520 m2; union  A1521 m3; p m4; s m5; j m6; };
void f_cpA1522(struct A1522 *x, const struct A1522 *y) { x->m0 = y->m0; f_cpA1519(&x->m1, &y->m1); f_cpA1520(&x->m2, &y->m2); f_cpA1521(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1522(const struct A1522 *x, const struct A1522 *y) { return x->m0 == y->m0 && f_cmpA1519(&x->m1, &y->m1) && f_cmpA1520(&x->m2, &y->m2) && f_cmpA1521(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1522() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1522), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1522, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1522, m1), 1, f_touchdcstA1519());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1522, m2), 1, f_touchdcstA1520());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1522, m3), 1, f_touchdcstA1521());
		dcStructField(at, 'p', offsetof(struct A1522, m4), 1);
		dcStructField(at, 's', offsetof(struct A1522, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1522, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<jipdc>ii[3]i{dlll[7]l{cijclpfjjdpj}lif<dsljf>pd}cs<d<jf>jl[11]lsj{jc}{sjdpicid}{jpiipfcfc}>jjj{f<pffccc><fsl><fdcdjpi>psj}} */
struct A1523 { union  A1512 m0; i m1; i m2[3]; i m3; struct A1515 m4; c m5; s m6; union  A1518 m7; j m8; j m9; j m10; struct A1522 m11; };
void f_cpA1523(struct A1523 *x, const struct A1523 *y) { f_cpA1512(&x->m0, &y->m0); x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m3 = y->m3; f_cpA1515(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA1518(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1522(&x->m11, &y->m11); };
int f_cmpA1523(const struct A1523 *x, const struct A1523 *y) { return f_cmpA1512(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m3 == y->m3 && f_cmpA1515(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1518(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1522(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1523() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1523), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1523, m0), 1, f_touchdcstA1512());
		dcStructField(at, 'i', offsetof(struct A1523, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1523, m2), 3);
		dcStructField(at, 'i', offsetof(struct A1523, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1523, m4), 1, f_touchdcstA1515());
		dcStructField(at, 'c', offsetof(struct A1523, m5), 1);
		dcStructField(at, 's', offsetof(struct A1523, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1523, m7), 1, f_touchdcstA1518());
		dcStructField(at, 'j', offsetof(struct A1523, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1523, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1523, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1523, m11), 1, f_touchdcstA1522());
		dcCloseStruct(at);
	}
	return at;
};
/* {pljp[6]jijfcddi} */
struct A1524 { p m0; l m1; j m2; p m3[6]; j m4; i m5; j m6; f m7; c m8; d m9; d m10; i m11; };
void f_cpA1524(struct A1524 *x, const struct A1524 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1524(const struct A1524 *x, const struct A1524 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1524() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1524), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1524, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1524, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1524, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1524, m3), 6);
		dcStructField(at, 'j', offsetof(struct A1524, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1524, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1524, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1524, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1524, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1524, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1524, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1524, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <flscsfjdlcpp> */
union  A1525 { f m0; l m1; s m2; c m3; s m4; f m5; j m6; d m7; l m8; c m9; p m10; p m11; };
void f_cpA1525(union  A1525 *x, const union  A1525 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1525(const union  A1525 *x, const union  A1525 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1525() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1525), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1525, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1525, m1), 1);
		dcStructField(at, 's', offsetof(union  A1525, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1525, m3), 1);
		dcStructField(at, 's', offsetof(union  A1525, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1525, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1525, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1525, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1525, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1525, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1525, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1525, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{pljp[6]jijfcddi}<flscsfjdlcpp>> */
union  A1526 { struct A1524 m0; union  A1525 m1; };
void f_cpA1526(union  A1526 *x, const union  A1526 *y) { f_cpA1524(&x->m0, &y->m0); f_cpA1525(&x->m1, &y->m1); };
int f_cmpA1526(const union  A1526 *x, const union  A1526 *y) { return f_cmpA1524(&x->m0, &y->m0) && f_cmpA1525(&x->m1, &y->m1); };
DCstruct* f_touchdcstA1526() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1526), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1526, m0), 1, f_touchdcstA1524());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1526, m1), 1, f_touchdcstA1525());
		dcCloseStruct(at);
	}
	return at;
};
/* <ff> */
union  A1527 { f m0; f m1; };
void f_cpA1527(union  A1527 *x, const union  A1527 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1527(const union  A1527 *x, const union  A1527 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1527() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1527), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1527, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1527, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jj} */
struct A1528 { j m0; j m1; };
void f_cpA1528(struct A1528 *x, const struct A1528 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1528(const struct A1528 *x, const struct A1528 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1528() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1528), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1528, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1528, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{jj}cccfl> */
union  A1529 { struct A1528 m0; c m1; c m2; c m3; f m4; l m5; };
void f_cpA1529(union  A1529 *x, const union  A1529 *y) { f_cpA1528(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1529(const union  A1529 *x, const union  A1529 *y) { return f_cmpA1528(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1529() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1529), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1529, m0), 1, f_touchdcstA1528());
		dcStructField(at, 'c', offsetof(union  A1529, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1529, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1529, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1529, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1529, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jfpl} */
struct A1530 { j m0; f m1; p m2; l m3; };
void f_cpA1530(struct A1530 *x, const struct A1530 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1530(const struct A1530 *x, const struct A1530 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1530() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1530), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1530, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1530, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1530, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1530, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cllpfifcp} */
struct A1531 { c m0; l m1; l m2; p m3; f m4; i m5; f m6; c m7; p m8; };
void f_cpA1531(struct A1531 *x, const struct A1531 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1531(const struct A1531 *x, const struct A1531 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1531() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1531), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1531, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1531, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1531, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1531, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1531, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1531, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1531, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1531, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1531, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ds{ci}{cllpfifcp}ssplijfj> */
union  A1532 { d m0; s m1; struct A970 m2; struct A1531 m3; s m4; s m5; p m6; l m7; i m8; j m9; f m10; j m11; };
void f_cpA1532(union  A1532 *x, const union  A1532 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA970(&x->m2, &y->m2); f_cpA1531(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1532(const union  A1532 *x, const union  A1532 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA970(&x->m2, &y->m2) && f_cmpA1531(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1532() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1532), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1532, m0), 1);
		dcStructField(at, 's', offsetof(union  A1532, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1532, m2), 1, f_touchdcstA970());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1532, m3), 1, f_touchdcstA1531());
		dcStructField(at, 's', offsetof(union  A1532, m4), 1);
		dcStructField(at, 's', offsetof(union  A1532, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1532, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1532, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1532, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1532, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1532, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1532, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ijilfiipfscc> */
union  A1533 { i m0; j m1; i m2; l m3; f m4; i m5; i m6; p m7; f m8; s m9; c m10; c m11; };
void f_cpA1533(union  A1533 *x, const union  A1533 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1533(const union  A1533 *x, const union  A1533 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1533() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1533), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1533, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1533, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1533, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1533, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1533, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1533, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1533, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1533, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1533, m8), 1);
		dcStructField(at, 's', offsetof(union  A1533, m9), 1);
		dcStructField(at, 'c', offsetof(union  A1533, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1533, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cflic<ijilfiipfscc>cipij> */
union  A1534 { c m0; f m1; l m2; i m3; c m4; union  A1533 m5; c m6; i m7; p m8; i m9; j m10; };
void f_cpA1534(union  A1534 *x, const union  A1534 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1533(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1534(const union  A1534 *x, const union  A1534 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1533(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1534() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1534), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1534, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1534, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1534, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1534, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1534, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1534, m5), 1, f_touchdcstA1533());
		dcStructField(at, 'c', offsetof(union  A1534, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1534, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1534, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1534, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1534, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{jfpl}dflcil<ds{ci}{cllpfifcp}ssplijfj><cflic<ijilfiipfscc>cipij>> */
union  A1535 { struct A1530 m0; d m1; f m2; l m3; c m4; i m5; l m6; union  A1532 m7; union  A1534 m8; };
void f_cpA1535(union  A1535 *x, const union  A1535 *y) { f_cpA1530(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1532(&x->m7, &y->m7); f_cpA1534(&x->m8, &y->m8); };
int f_cmpA1535(const union  A1535 *x, const union  A1535 *y) { return f_cmpA1530(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1532(&x->m7, &y->m7) && f_cmpA1534(&x->m8, &y->m8); };
DCstruct* f_touchdcstA1535() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1535), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1535, m0), 1, f_touchdcstA1530());
		dcStructField(at, 'd', offsetof(union  A1535, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1535, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1535, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1535, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1535, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1535, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1535, m7), 1, f_touchdcstA1532());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1535, m8), 1, f_touchdcstA1534());
		dcCloseStruct(at);
	}
	return at;
};
/* <jsfpsffdccc> */
union  A1536 { j m0; s m1; f m2; p m3; s m4; f m5; f m6; d m7; c m8; c m9; c m10; };
void f_cpA1536(union  A1536 *x, const union  A1536 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1536(const union  A1536 *x, const union  A1536 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1536() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1536), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1536, m0), 1);
		dcStructField(at, 's', offsetof(union  A1536, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1536, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1536, m3), 1);
		dcStructField(at, 's', offsetof(union  A1536, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1536, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1536, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1536, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1536, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1536, m9), 1);
		dcStructField(at, 'c', offsetof(union  A1536, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lfcfliisscs> */
union  A1537 { l m0; f m1; c m2; f m3; l m4; i m5; i m6; s m7; s m8; c m9; s m10; };
void f_cpA1537(union  A1537 *x, const union  A1537 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1537(const union  A1537 *x, const union  A1537 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1537() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1537), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1537, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1537, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1537, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1537, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1537, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1537, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1537, m6), 1);
		dcStructField(at, 's', offsetof(union  A1537, m7), 1);
		dcStructField(at, 's', offsetof(union  A1537, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1537, m9), 1);
		dcStructField(at, 's', offsetof(union  A1537, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iddpfljpjp> */
union  A1538 { i m0; d m1; d m2; p m3; f m4; l m5; j m6; p m7; j m8; p m9; };
void f_cpA1538(union  A1538 *x, const union  A1538 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1538(const union  A1538 *x, const union  A1538 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1538() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1538), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1538, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1538, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1538, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1538, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1538, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1538, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1538, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1538, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1538, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1538, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<lfcfliisscs>jjicfsjd{l}f<iddpfljpjp>> */
union  A1539 { union  A1537 m0; j m1; j m2; i m3; c m4; f m5; s m6; j m7; d m8; struct A141 m9; f m10; union  A1538 m11; };
void f_cpA1539(union  A1539 *x, const union  A1539 *y) { f_cpA1537(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA141(&x->m9, &y->m9); x->m10 = y->m10; f_cpA1538(&x->m11, &y->m11); };
int f_cmpA1539(const union  A1539 *x, const union  A1539 *y) { return f_cmpA1537(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA141(&x->m9, &y->m9) && x->m10 == y->m10 && f_cmpA1538(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1539() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1539), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1539, m0), 1, f_touchdcstA1537());
		dcStructField(at, 'j', offsetof(union  A1539, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1539, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1539, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1539, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1539, m5), 1);
		dcStructField(at, 's', offsetof(union  A1539, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1539, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1539, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1539, m9), 1, f_touchdcstA141());
		dcStructField(at, 'f', offsetof(union  A1539, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1539, m11), 1, f_touchdcstA1538());
		dcCloseStruct(at);
	}
	return at;
};
/* {pfccfjcscijj} */
struct A1540 { p m0; f m1; c m2; c m3; f m4; j m5; c m6; s m7; c m8; i m9; j m10; j m11; };
void f_cpA1540(struct A1540 *x, const struct A1540 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1540(const struct A1540 *x, const struct A1540 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1540() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1540), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1540, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1540, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1540, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1540, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1540, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1540, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1540, m6), 1);
		dcStructField(at, 's', offsetof(struct A1540, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1540, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1540, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1540, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1540, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jpfsd> */
union  A1541 { j m0; p m1; f m2; s m3; d m4; };
void f_cpA1541(union  A1541 *x, const union  A1541 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1541(const union  A1541 *x, const union  A1541 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1541() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1541), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1541, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1541, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1541, m2), 1);
		dcStructField(at, 's', offsetof(union  A1541, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1541, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f{pfccfjcscijj}<jpfsd>lpd} */
struct A1542 { f m0; struct A1540 m1; union  A1541 m2; l m3; p m4; d m5; };
void f_cpA1542(struct A1542 *x, const struct A1542 *y) { x->m0 = y->m0; f_cpA1540(&x->m1, &y->m1); f_cpA1541(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1542(const struct A1542 *x, const struct A1542 *y) { return x->m0 == y->m0 && f_cmpA1540(&x->m1, &y->m1) && f_cmpA1541(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1542() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1542), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1542, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1542, m1), 1, f_touchdcstA1540());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1542, m2), 1, f_touchdcstA1541());
		dcStructField(at, 'l', offsetof(struct A1542, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1542, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1542, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jilcfji{f{pfccfjcscijj}<jpfsd>lpd}> */
union  A1543 { j m0; i m1; l m2; c m3; f m4; j m5; i m6; struct A1542 m7; };
void f_cpA1543(union  A1543 *x, const union  A1543 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1542(&x->m7, &y->m7); };
int f_cmpA1543(const union  A1543 *x, const union  A1543 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1542(&x->m7, &y->m7); };
DCstruct* f_touchdcstA1543() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1543), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1543, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1543, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1543, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1543, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1543, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1543, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1543, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1543, m7), 1, f_touchdcstA1542());
		dcCloseStruct(at);
	}
	return at;
};
/* {cpiljldidf} */
struct A1544 { c m0; p m1; i m2; l m3; j m4; l m5; d m6; i m7; d m8; f m9; };
void f_cpA1544(struct A1544 *x, const struct A1544 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1544(const struct A1544 *x, const struct A1544 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1544() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1544), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1544, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1544, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1544, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1544, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1544, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1544, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1544, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1544, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1544, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1544, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pdjlij[9]fcpfjd> */
union  A1545 { p m0; d m1; j m2; l m3; i m4; j m5[9]; f m6; c m7; p m8; f m9; j m10; d m11; };
void f_cpA1545(union  A1545 *x, const union  A1545 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1545(const union  A1545 *x, const union  A1545 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1545() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1545), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1545, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1545, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1545, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1545, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1545, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1545, m5), 9);
		dcStructField(at, 'f', offsetof(union  A1545, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1545, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1545, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1545, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1545, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1545, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<pdjlij[9]fcpfjd>lp} */
struct A1546 { union  A1545 m0; l m1; p m2; };
void f_cpA1546(struct A1546 *x, const struct A1546 *y) { f_cpA1545(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1546(const struct A1546 *x, const struct A1546 *y) { return f_cmpA1545(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1546() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1546), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1546, m0), 1, f_touchdcstA1545());
		dcStructField(at, 'l', offsetof(struct A1546, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1546, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sp{<pdjlij[9]fcpfjd>lp}p} */
struct A1547 { s m0; p m1; struct A1546 m2; p m3; };
void f_cpA1547(struct A1547 *x, const struct A1547 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1546(&x->m2, &y->m2); x->m3 = y->m3; };
int f_cmpA1547(const struct A1547 *x, const struct A1547 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1546(&x->m2, &y->m2) && x->m3 == y->m3; };
DCstruct* f_touchdcstA1547() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1547), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1547, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1547, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1547, m2), 1, f_touchdcstA1546());
		dcStructField(at, 'p', offsetof(struct A1547, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <l[15]icl> */
union  A1548 { l m0[15]; i m1; c m2; l m3; };
void f_cpA1548(union  A1548 *x, const union  A1548 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m0[12] = y->m0[12]; x->m0[13] = y->m0[13]; x->m0[14] = y->m0[14]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1548(const union  A1548 *x, const union  A1548 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m0[12] == y->m0[12] && x->m0[13] == y->m0[13] && x->m0[14] == y->m0[14] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1548() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1548), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1548, m0), 15);
		dcStructField(at, 'i', offsetof(union  A1548, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1548, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1548, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jds} */
struct A1549 { j m0; d m1; s m2; };
void f_cpA1549(struct A1549 *x, const struct A1549 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1549(const struct A1549 *x, const struct A1549 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1549() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1549), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1549, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1549, m1), 1);
		dcStructField(at, 's', offsetof(struct A1549, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fdcpssf[11]cd{jds}sp} */
struct A1550 { f m0; d m1; c m2; p m3; s m4; s m5; f m6[11]; c m7; d m8; struct A1549 m9; s m10; p m11; };
void f_cpA1550(struct A1550 *x, const struct A1550 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m7 = y->m7; x->m8 = y->m8; f_cpA1549(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1550(const struct A1550 *x, const struct A1550 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1549(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1550() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1550), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1550, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1550, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1550, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1550, m3), 1);
		dcStructField(at, 's', offsetof(struct A1550, m4), 1);
		dcStructField(at, 's', offsetof(struct A1550, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1550, m6), 11);
		dcStructField(at, 'c', offsetof(struct A1550, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1550, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1550, m9), 1, f_touchdcstA1549());
		dcStructField(at, 's', offsetof(struct A1550, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1550, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sc<f>sdi} */
struct A1551 { s m0; c m1; union  A438 m2; s m3; d m4; i m5; };
void f_cpA1551(struct A1551 *x, const struct A1551 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA438(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1551(const struct A1551 *x, const struct A1551 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA438(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1551() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1551), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1551, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1551, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1551, m2), 1, f_touchdcstA438());
		dcStructField(at, 's', offsetof(struct A1551, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1551, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1551, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sislpjsidjid} */
struct A1552 { s m0; i m1; s m2; l m3; p m4; j m5; s m6; i m7; d m8; j m9; i m10; d m11; };
void f_cpA1552(struct A1552 *x, const struct A1552 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1552(const struct A1552 *x, const struct A1552 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1552() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1552), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1552, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1552, m1), 1);
		dcStructField(at, 's', offsetof(struct A1552, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1552, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1552, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1552, m5), 1);
		dcStructField(at, 's', offsetof(struct A1552, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1552, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1552, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1552, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1552, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1552, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pclssisilfll} */
struct A1553 { p m0; c m1; l m2; s m3; s m4; i m5; s m6; i m7; l m8; f m9; l m10; l m11; };
void f_cpA1553(struct A1553 *x, const struct A1553 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1553(const struct A1553 *x, const struct A1553 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1553() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1553), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1553, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1553, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1553, m2), 1);
		dcStructField(at, 's', offsetof(struct A1553, m3), 1);
		dcStructField(at, 's', offsetof(struct A1553, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1553, m5), 1);
		dcStructField(at, 's', offsetof(struct A1553, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1553, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1553, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1553, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1553, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1553, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sldijflljjsl} */
struct A1554 { s m0; l m1; d m2; i m3; j m4; f m5; l m6; l m7; j m8; j m9; s m10; l m11; };
void f_cpA1554(struct A1554 *x, const struct A1554 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1554(const struct A1554 *x, const struct A1554 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1554() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1554), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1554, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1554, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1554, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1554, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1554, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1554, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1554, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1554, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1554, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1554, m9), 1);
		dcStructField(at, 's', offsetof(struct A1554, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1554, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fs> */
union  A1555 { f m0; s m1; };
void f_cpA1555(union  A1555 *x, const union  A1555 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1555(const union  A1555 *x, const union  A1555 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1555() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1555), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1555, m0), 1);
		dcStructField(at, 's', offsetof(union  A1555, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ipf[1]fi{sislpjsidjid}d[1]c{pclssisilfll}l{sldijflljjsl}<fs>> */
union  A1556 { i m0; p m1; f m2[1]; f m3; i m4; struct A1552 m5; d m6[1]; c m7; struct A1553 m8; l m9; struct A1554 m10; union  A1555 m11; };
void f_cpA1556(union  A1556 *x, const union  A1556 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m3 = y->m3; x->m4 = y->m4; f_cpA1552(&x->m5, &y->m5); x->m6[0] = y->m6[0]; x->m7 = y->m7; f_cpA1553(&x->m8, &y->m8); x->m9 = y->m9; f_cpA1554(&x->m10, &y->m10); f_cpA1555(&x->m11, &y->m11); };
int f_cmpA1556(const union  A1556 *x, const union  A1556 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1552(&x->m5, &y->m5) && x->m6[0] == y->m6[0] && x->m7 == y->m7 && f_cmpA1553(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA1554(&x->m10, &y->m10) && f_cmpA1555(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1556() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1556), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1556, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1556, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1556, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1556, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1556, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1556, m5), 1, f_touchdcstA1552());
		dcStructField(at, 'd', offsetof(union  A1556, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1556, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1556, m8), 1, f_touchdcstA1553());
		dcStructField(at, 'l', offsetof(union  A1556, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1556, m10), 1, f_touchdcstA1554());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1556, m11), 1, f_touchdcstA1555());
		dcCloseStruct(at);
	}
	return at;
};
/* {lcspf} */
struct A1557 { l m0; c m1; s m2; p m3; f m4; };
void f_cpA1557(struct A1557 *x, const struct A1557 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1557(const struct A1557 *x, const struct A1557 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1557() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1557), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1557, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1557, m1), 1);
		dcStructField(at, 's', offsetof(struct A1557, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1557, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1557, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <s{lcspf}jj> */
union  A1558 { s m0; struct A1557 m1; j m2; j m3; };
void f_cpA1558(union  A1558 *x, const union  A1558 *y) { x->m0 = y->m0; f_cpA1557(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1558(const union  A1558 *x, const union  A1558 *y) { return x->m0 == y->m0 && f_cmpA1557(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1558() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1558), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1558, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1558, m1), 1, f_touchdcstA1557());
		dcStructField(at, 'j', offsetof(union  A1558, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1558, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {d{if}l} */
struct A1559 { d m0; struct A556 m1; l m2; };
void f_cpA1559(struct A1559 *x, const struct A1559 *y) { x->m0 = y->m0; f_cpA556(&x->m1, &y->m1); x->m2 = y->m2; };
int f_cmpA1559(const struct A1559 *x, const struct A1559 *y) { return x->m0 == y->m0 && f_cmpA556(&x->m1, &y->m1) && x->m2 == y->m2; };
DCstruct* f_touchdcstA1559() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1559), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1559, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1559, m1), 1, f_touchdcstA556());
		dcStructField(at, 'l', offsetof(struct A1559, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pljf> */
union  A1560 { p m0; l m1; j m2; f m3; };
void f_cpA1560(union  A1560 *x, const union  A1560 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1560(const union  A1560 *x, const union  A1560 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1560() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1560), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1560, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1560, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1560, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1560, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ljjiiidipc> */
union  A1561 { l m0; j m1; j m2; i m3; i m4; i m5; d m6; i m7; p m8; c m9; };
void f_cpA1561(union  A1561 *x, const union  A1561 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1561(const union  A1561 *x, const union  A1561 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1561() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1561), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1561, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1561, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1561, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1561, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1561, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1561, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1561, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1561, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1561, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1561, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lsdissdscspp> */
union  A1562 { l m0; s m1; d m2; i m3; s m4; s m5; d m6; s m7; c m8; s m9; p m10; p m11; };
void f_cpA1562(union  A1562 *x, const union  A1562 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1562(const union  A1562 *x, const union  A1562 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1562() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1562), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1562, m0), 1);
		dcStructField(at, 's', offsetof(union  A1562, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1562, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1562, m3), 1);
		dcStructField(at, 's', offsetof(union  A1562, m4), 1);
		dcStructField(at, 's', offsetof(union  A1562, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1562, m6), 1);
		dcStructField(at, 's', offsetof(union  A1562, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1562, m8), 1);
		dcStructField(at, 's', offsetof(union  A1562, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1562, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1562, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {llcjcpdispsc} */
struct A1563 { l m0; l m1; c m2; j m3; c m4; p m5; d m6; i m7; s m8; p m9; s m10; c m11; };
void f_cpA1563(struct A1563 *x, const struct A1563 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1563(const struct A1563 *x, const struct A1563 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1563() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1563), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1563, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1563, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1563, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1563, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1563, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1563, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1563, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1563, m7), 1);
		dcStructField(at, 's', offsetof(struct A1563, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1563, m9), 1);
		dcStructField(at, 's', offsetof(struct A1563, m10), 1);
		dcStructField(at, 'c', offsetof(struct A1563, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cicjldli> */
union  A1564 { c m0; i m1; c m2; j m3; l m4; d m5; l m6; i m7; };
void f_cpA1564(union  A1564 *x, const union  A1564 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1564(const union  A1564 *x, const union  A1564 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1564() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1564), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1564, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1564, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1564, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1564, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1564, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1564, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1564, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1564, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<ljjiiidipc>sscs<lsdissdscspp>s{llcjcpdispsc}l[10]<cicjldli>id} */
struct A1565 { union  A1561 m0; s m1; s m2; c m3; s m4; union  A1562 m5; s m6; struct A1563 m7; l m8[10]; union  A1564 m9; i m10; d m11; };
void f_cpA1565(struct A1565 *x, const struct A1565 *y) { f_cpA1561(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1562(&x->m5, &y->m5); x->m6 = y->m6; f_cpA1563(&x->m7, &y->m7); x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m8[8] = y->m8[8]; x->m8[9] = y->m8[9]; f_cpA1564(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1565(const struct A1565 *x, const struct A1565 *y) { return f_cmpA1561(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1562(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA1563(&x->m7, &y->m7) && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m8[8] == y->m8[8] && x->m8[9] == y->m8[9] && f_cmpA1564(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1565() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1565), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1565, m0), 1, f_touchdcstA1561());
		dcStructField(at, 's', offsetof(struct A1565, m1), 1);
		dcStructField(at, 's', offsetof(struct A1565, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1565, m3), 1);
		dcStructField(at, 's', offsetof(struct A1565, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1565, m5), 1, f_touchdcstA1562());
		dcStructField(at, 's', offsetof(struct A1565, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1565, m7), 1, f_touchdcstA1563());
		dcStructField(at, 'l', offsetof(struct A1565, m8), 10);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1565, m9), 1, f_touchdcstA1564());
		dcStructField(at, 'i', offsetof(struct A1565, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1565, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sddsj[6]illjdfi> */
union  A1566 { s m0; d m1; d m2; s m3; j m4[6]; i m5; l m6; l m7; j m8; d m9; f m10; i m11; };
void f_cpA1566(union  A1566 *x, const union  A1566 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1566(const union  A1566 *x, const union  A1566 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1566() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1566), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1566, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1566, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1566, m2), 1);
		dcStructField(at, 's', offsetof(union  A1566, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1566, m4), 6);
		dcStructField(at, 'i', offsetof(union  A1566, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1566, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1566, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1566, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1566, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1566, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1566, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sipdcfff} */
struct A1567 { s m0; i m1; p m2; d m3; c m4; f m5; f m6; f m7; };
void f_cpA1567(struct A1567 *x, const struct A1567 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1567(const struct A1567 *x, const struct A1567 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1567() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1567), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1567, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1567, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1567, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1567, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1567, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1567, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1567, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1567, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {s<sddsj[6]illjdfi>sjd{sipdcfff}ssspid} */
struct A1568 { s m0; union  A1566 m1; s m2; j m3; d m4; struct A1567 m5; s m6; s m7; s m8; p m9; i m10; d m11; };
void f_cpA1568(struct A1568 *x, const struct A1568 *y) { x->m0 = y->m0; f_cpA1566(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1567(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1568(const struct A1568 *x, const struct A1568 *y) { return x->m0 == y->m0 && f_cmpA1566(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1567(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1568() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1568), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1568, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1568, m1), 1, f_touchdcstA1566());
		dcStructField(at, 's', offsetof(struct A1568, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1568, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1568, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1568, m5), 1, f_touchdcstA1567());
		dcStructField(at, 's', offsetof(struct A1568, m6), 1);
		dcStructField(at, 's', offsetof(struct A1568, m7), 1);
		dcStructField(at, 's', offsetof(struct A1568, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1568, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1568, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1568, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jljj<pljf>{<ljjiiidipc>sscs<lsdissdscspp>s{llcjcpdispsc}l[10]<cicjldli>id}i{s<sddsj[6]illjdfi>sjd{sipdcfff}ssspid}islc> */
union  A1569 { j m0; l m1; j m2; j m3; union  A1560 m4; struct A1565 m5; i m6; struct A1568 m7; i m8; s m9; l m10; c m11; };
void f_cpA1569(union  A1569 *x, const union  A1569 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1560(&x->m4, &y->m4); f_cpA1565(&x->m5, &y->m5); x->m6 = y->m6; f_cpA1568(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1569(const union  A1569 *x, const union  A1569 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1560(&x->m4, &y->m4) && f_cmpA1565(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA1568(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1569() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1569), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1569, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1569, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1569, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1569, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1569, m4), 1, f_touchdcstA1560());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1569, m5), 1, f_touchdcstA1565());
		dcStructField(at, 'i', offsetof(union  A1569, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1569, m7), 1, f_touchdcstA1568());
		dcStructField(at, 'i', offsetof(union  A1569, m8), 1);
		dcStructField(at, 's', offsetof(union  A1569, m9), 1);
		dcStructField(at, 'l', offsetof(union  A1569, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1569, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <idjjpsdijfij> */
union  A1570 { i m0; d m1; j m2; j m3; p m4; s m5; d m6; i m7; j m8; f m9; i m10; j m11; };
void f_cpA1570(union  A1570 *x, const union  A1570 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1570(const union  A1570 *x, const union  A1570 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1570() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1570), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1570, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1570, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1570, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1570, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1570, m4), 1);
		dcStructField(at, 's', offsetof(union  A1570, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1570, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1570, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1570, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1570, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1570, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1570, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fpl> */
union  A1571 { f m0; p m1; l m2; };
void f_cpA1571(union  A1571 *x, const union  A1571 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1571(const union  A1571 *x, const union  A1571 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1571() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1571), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1571, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1571, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1571, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cfpiifjf[9]sfsj> */
union  A1572 { c m0; f m1; p m2; i m3; i m4; f m5; j m6; f m7[9]; s m8; f m9; s m10; j m11; };
void f_cpA1572(union  A1572 *x, const union  A1572 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; x->m7[7] = y->m7[7]; x->m7[8] = y->m7[8]; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1572(const union  A1572 *x, const union  A1572 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6] && x->m7[7] == y->m7[7] && x->m7[8] == y->m7[8] && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1572() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1572), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1572, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1572, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1572, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1572, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1572, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1572, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1572, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1572, m7), 9);
		dcStructField(at, 's', offsetof(union  A1572, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1572, m9), 1);
		dcStructField(at, 's', offsetof(union  A1572, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1572, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dd> */
union  A1573 { d m0; d m1; };
void f_cpA1573(union  A1573 *x, const union  A1573 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1573(const union  A1573 *x, const union  A1573 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1573() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1573), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1573, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1573, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<idjjpsdijfij><fpl>i<cfpiifjf[9]sfsj>sjp<dd>pf> */
union  A1574 { union  A1570 m0; union  A1571 m1; i m2; union  A1572 m3; s m4; j m5; p m6; union  A1573 m7; p m8; f m9; };
void f_cpA1574(union  A1574 *x, const union  A1574 *y) { f_cpA1570(&x->m0, &y->m0); f_cpA1571(&x->m1, &y->m1); x->m2 = y->m2; f_cpA1572(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1573(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1574(const union  A1574 *x, const union  A1574 *y) { return f_cmpA1570(&x->m0, &y->m0) && f_cmpA1571(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA1572(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1573(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1574() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1574), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1574, m0), 1, f_touchdcstA1570());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1574, m1), 1, f_touchdcstA1571());
		dcStructField(at, 'i', offsetof(union  A1574, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1574, m3), 1, f_touchdcstA1572());
		dcStructField(at, 's', offsetof(union  A1574, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1574, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1574, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1574, m7), 1, f_touchdcstA1573());
		dcStructField(at, 'p', offsetof(union  A1574, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1574, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iccs} */
struct A1575 { i m0; c m1; c m2; s m3; };
void f_cpA1575(struct A1575 *x, const struct A1575 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1575(const struct A1575 *x, const struct A1575 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1575() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1575), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1575, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1575, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1575, m2), 1);
		dcStructField(at, 's', offsetof(struct A1575, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cilpjjlci> */
union  A1576 { c m0; i m1; l m2; p m3; j m4; j m5; l m6; c m7; i m8; };
void f_cpA1576(union  A1576 *x, const union  A1576 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1576(const union  A1576 *x, const union  A1576 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1576() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1576), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1576, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1576, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1576, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1576, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1576, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1576, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1576, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1576, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1576, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f<cilpjjlci>j} */
struct A1577 { f m0; union  A1576 m1; j m2; };
void f_cpA1577(struct A1577 *x, const struct A1577 *y) { x->m0 = y->m0; f_cpA1576(&x->m1, &y->m1); x->m2 = y->m2; };
int f_cmpA1577(const struct A1577 *x, const struct A1577 *y) { return x->m0 == y->m0 && f_cmpA1576(&x->m1, &y->m1) && x->m2 == y->m2; };
DCstruct* f_touchdcstA1577() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1577), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1577, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1577, m1), 1, f_touchdcstA1576());
		dcStructField(at, 'j', offsetof(struct A1577, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p{f<cilpjjlci>j}s> */
union  A1578 { p m0; struct A1577 m1; s m2; };
void f_cpA1578(union  A1578 *x, const union  A1578 *y) { x->m0 = y->m0; f_cpA1577(&x->m1, &y->m1); x->m2 = y->m2; };
int f_cmpA1578(const union  A1578 *x, const union  A1578 *y) { return x->m0 == y->m0 && f_cmpA1577(&x->m1, &y->m1) && x->m2 == y->m2; };
DCstruct* f_touchdcstA1578() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1578), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1578, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1578, m1), 1, f_touchdcstA1577());
		dcStructField(at, 's', offsetof(union  A1578, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pidjljcfidds} */
struct A1579 { p m0; i m1; d m2; j m3; l m4; j m5; c m6; f m7; i m8; d m9; d m10; s m11; };
void f_cpA1579(struct A1579 *x, const struct A1579 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1579(const struct A1579 *x, const struct A1579 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1579() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1579), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1579, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1579, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1579, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1579, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1579, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1579, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1579, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1579, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1579, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1579, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1579, m10), 1);
		dcStructField(at, 's', offsetof(struct A1579, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sljdjjidssfd} */
struct A1580 { s m0; l m1; j m2; d m3; j m4; j m5; i m6; d m7; s m8; s m9; f m10; d m11; };
void f_cpA1580(struct A1580 *x, const struct A1580 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1580(const struct A1580 *x, const struct A1580 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1580() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1580), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1580, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1580, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1580, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1580, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1580, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1580, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1580, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1580, m7), 1);
		dcStructField(at, 's', offsetof(struct A1580, m8), 1);
		dcStructField(at, 's', offsetof(struct A1580, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1580, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1580, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jllj> */
union  A1581 { j m0; l m1; l m2; j m3; };
void f_cpA1581(union  A1581 *x, const union  A1581 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1581(const union  A1581 *x, const union  A1581 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1581() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1581), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1581, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1581, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1581, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1581, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jc> */
union  A1582 { j m0; c m1; };
void f_cpA1582(union  A1582 *x, const union  A1582 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1582(const union  A1582 *x, const union  A1582 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1582() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1582), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1582, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1582, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cddlsddjfc} */
struct A1583 { c m0; d m1; d m2; l m3; s m4; d m5; d m6; j m7; f m8; c m9; };
void f_cpA1583(struct A1583 *x, const struct A1583 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1583(const struct A1583 *x, const struct A1583 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1583() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1583), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1583, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1583, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1583, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1583, m3), 1);
		dcStructField(at, 's', offsetof(struct A1583, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1583, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1583, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1583, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1583, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1583, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ic{pidjljcfidds}{sljdjjidssfd}d<jllj><jc>ljis{cddlsddjfc}> */
union  A1584 { i m0; c m1; struct A1579 m2; struct A1580 m3; d m4; union  A1581 m5; union  A1582 m6; l m7; j m8; i m9; s m10; struct A1583 m11; };
void f_cpA1584(union  A1584 *x, const union  A1584 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1579(&x->m2, &y->m2); f_cpA1580(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1581(&x->m5, &y->m5); f_cpA1582(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1583(&x->m11, &y->m11); };
int f_cmpA1584(const union  A1584 *x, const union  A1584 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1579(&x->m2, &y->m2) && f_cmpA1580(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1581(&x->m5, &y->m5) && f_cmpA1582(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1583(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1584() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1584), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1584, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1584, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1584, m2), 1, f_touchdcstA1579());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1584, m3), 1, f_touchdcstA1580());
		dcStructField(at, 'd', offsetof(union  A1584, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1584, m5), 1, f_touchdcstA1581());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1584, m6), 1, f_touchdcstA1582());
		dcStructField(at, 'l', offsetof(union  A1584, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1584, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1584, m9), 1);
		dcStructField(at, 's', offsetof(union  A1584, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1584, m11), 1, f_touchdcstA1583());
		dcCloseStruct(at);
	}
	return at;
};
/* {sspdfsi} */
struct A1585 { s m0; s m1; p m2; d m3; f m4; s m5; i m6; };
void f_cpA1585(struct A1585 *x, const struct A1585 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1585(const struct A1585 *x, const struct A1585 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1585() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1585), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1585, m0), 1);
		dcStructField(at, 's', offsetof(struct A1585, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1585, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1585, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1585, m4), 1);
		dcStructField(at, 's', offsetof(struct A1585, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1585, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {s{sspdfsi}<jf>} */
struct A1586 { s m0; struct A1585 m1; union  A679 m2; };
void f_cpA1586(struct A1586 *x, const struct A1586 *y) { x->m0 = y->m0; f_cpA1585(&x->m1, &y->m1); f_cpA679(&x->m2, &y->m2); };
int f_cmpA1586(const struct A1586 *x, const struct A1586 *y) { return x->m0 == y->m0 && f_cmpA1585(&x->m1, &y->m1) && f_cmpA679(&x->m2, &y->m2); };
DCstruct* f_touchdcstA1586() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1586), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1586, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1586, m1), 1, f_touchdcstA1585());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1586, m2), 1, f_touchdcstA679());
		dcCloseStruct(at);
	}
	return at;
};
/* <fjf> */
union  A1587 { f m0; j m1; f m2; };
void f_cpA1587(union  A1587 *x, const union  A1587 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1587(const union  A1587 *x, const union  A1587 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1587() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1587), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1587, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1587, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1587, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fpjf> */
union  A1588 { f m0; p m1; j m2; f m3; };
void f_cpA1588(union  A1588 *x, const union  A1588 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1588(const union  A1588 *x, const union  A1588 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1588() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1588), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1588, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1588, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1588, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1588, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<l>{jl}<sc>dcc<fpjf>csf> */
union  A1589 { union  A20 m0; struct A432 m1; union  A926 m2; d m3; c m4; c m5; union  A1588 m6; c m7; s m8; f m9; };
void f_cpA1589(union  A1589 *x, const union  A1589 *y) { f_cpA20(&x->m0, &y->m0); f_cpA432(&x->m1, &y->m1); f_cpA926(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1588(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1589(const union  A1589 *x, const union  A1589 *y) { return f_cmpA20(&x->m0, &y->m0) && f_cmpA432(&x->m1, &y->m1) && f_cmpA926(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1588(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1589() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1589), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1589, m0), 1, f_touchdcstA20());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1589, m1), 1, f_touchdcstA432());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1589, m2), 1, f_touchdcstA926());
		dcStructField(at, 'd', offsetof(union  A1589, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1589, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1589, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1589, m6), 1, f_touchdcstA1588());
		dcStructField(at, 'c', offsetof(union  A1589, m7), 1);
		dcStructField(at, 's', offsetof(union  A1589, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1589, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {psj} */
struct A1590 { p m0; s m1; j m2; };
void f_cpA1590(struct A1590 *x, const struct A1590 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1590(const struct A1590 *x, const struct A1590 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1590() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1590), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1590, m0), 1);
		dcStructField(at, 's', offsetof(struct A1590, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1590, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lp> */
union  A1591 { l m0; p m1; };
void f_cpA1591(union  A1591 *x, const union  A1591 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1591(const union  A1591 *x, const union  A1591 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1591() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1591), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1591, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1591, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fiiilfcspcsp> */
union  A1592 { f m0; i m1; i m2; i m3; l m4; f m5; c m6; s m7; p m8; c m9; s m10; p m11; };
void f_cpA1592(union  A1592 *x, const union  A1592 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1592(const union  A1592 *x, const union  A1592 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1592() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1592), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1592, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1592, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1592, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1592, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1592, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1592, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1592, m6), 1);
		dcStructField(at, 's', offsetof(union  A1592, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1592, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1592, m9), 1);
		dcStructField(at, 's', offsetof(union  A1592, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1592, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ds[4]<i><fiiilfcspcsp>> */
union  A1593 { d m0; s m1[4]; union  A62 m2; union  A1592 m3; };
void f_cpA1593(union  A1593 *x, const union  A1593 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; f_cpA62(&x->m2, &y->m2); f_cpA1592(&x->m3, &y->m3); };
int f_cmpA1593(const union  A1593 *x, const union  A1593 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && f_cmpA62(&x->m2, &y->m2) && f_cmpA1592(&x->m3, &y->m3); };
DCstruct* f_touchdcstA1593() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1593), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1593, m0), 1);
		dcStructField(at, 's', offsetof(union  A1593, m1), 4);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1593, m2), 1, f_touchdcstA62());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1593, m3), 1, f_touchdcstA1592());
		dcCloseStruct(at);
	}
	return at;
};
/* <jjpdccildiii> */
union  A1594 { j m0; j m1; p m2; d m3; c m4; c m5; i m6; l m7; d m8; i m9; i m10; i m11; };
void f_cpA1594(union  A1594 *x, const union  A1594 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1594(const union  A1594 *x, const union  A1594 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1594() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1594), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1594, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1594, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1594, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1594, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1594, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1594, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1594, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1594, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1594, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1594, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1594, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1594, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ijsj} */
struct A1595 { i m0; j m1; s m2; j m3; };
void f_cpA1595(struct A1595 *x, const struct A1595 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1595(const struct A1595 *x, const struct A1595 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1595() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1595), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1595, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1595, m1), 1);
		dcStructField(at, 's', offsetof(struct A1595, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1595, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cpjplcfd} */
struct A1596 { c m0; p m1; j m2; p m3; l m4; c m5; f m6; d m7; };
void f_cpA1596(struct A1596 *x, const struct A1596 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1596(const struct A1596 *x, const struct A1596 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1596() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1596), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1596, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1596, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1596, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1596, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1596, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1596, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1596, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1596, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f[12]cfi<jjpdccildiii>{ijsj}p{cpjplcfd}lljs} */
struct A1597 { f m0[12]; c m1; f m2; i m3; union  A1594 m4; struct A1595 m5; p m6; struct A1596 m7; l m8; l m9; j m10; s m11; };
void f_cpA1597(struct A1597 *x, const struct A1597 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1594(&x->m4, &y->m4); f_cpA1595(&x->m5, &y->m5); x->m6 = y->m6; f_cpA1596(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1597(const struct A1597 *x, const struct A1597 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1594(&x->m4, &y->m4) && f_cmpA1595(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA1596(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1597() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1597), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1597, m0), 12);
		dcStructField(at, 'c', offsetof(struct A1597, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1597, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1597, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1597, m4), 1, f_touchdcstA1594());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1597, m5), 1, f_touchdcstA1595());
		dcStructField(at, 'p', offsetof(struct A1597, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1597, m7), 1, f_touchdcstA1596());
		dcStructField(at, 'l', offsetof(struct A1597, m8), 1);
		dcStructField(at, 'l', offsetof(struct A1597, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1597, m10), 1);
		dcStructField(at, 's', offsetof(struct A1597, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{f[12]cfi<jjpdccildiii>{ijsj}p{cpjplcfd}lljs}iiij> */
union  A1598 { struct A1597 m0; i m1; i m2; i m3; j m4; };
void f_cpA1598(union  A1598 *x, const union  A1598 *y) { f_cpA1597(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1598(const union  A1598 *x, const union  A1598 *y) { return f_cmpA1597(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1598() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1598), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1598, m0), 1, f_touchdcstA1597());
		dcStructField(at, 'i', offsetof(union  A1598, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1598, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1598, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1598, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pppcfssdcfl> */
union  A1599 { p m0; p m1; p m2; c m3; f m4; s m5; s m6; d m7; c m8; f m9; l m10; };
void f_cpA1599(union  A1599 *x, const union  A1599 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1599(const union  A1599 *x, const union  A1599 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1599() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1599), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1599, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1599, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1599, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1599, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1599, m4), 1);
		dcStructField(at, 's', offsetof(union  A1599, m5), 1);
		dcStructField(at, 's', offsetof(union  A1599, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1599, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1599, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1599, m9), 1);
		dcStructField(at, 'l', offsetof(union  A1599, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<pppcfssdcfl>} */
struct A1600 { union  A1599 m0; };
void f_cpA1600(struct A1600 *x, const struct A1600 *y) { f_cpA1599(&x->m0, &y->m0); };
int f_cmpA1600(const struct A1600 *x, const struct A1600 *y) { return f_cmpA1599(&x->m0, &y->m0); };
DCstruct* f_touchdcstA1600() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A1600), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1600, m0), 1, f_touchdcstA1599());
		dcCloseStruct(at);
	}
	return at;
};
/* <ddjlpsddj> */
union  A1601 { d m0; d m1; j m2; l m3; p m4; s m5; d m6; d m7; j m8; };
void f_cpA1601(union  A1601 *x, const union  A1601 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1601(const union  A1601 *x, const union  A1601 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1601() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1601), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1601, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1601, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1601, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1601, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1601, m4), 1);
		dcStructField(at, 's', offsetof(union  A1601, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1601, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1601, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1601, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cfp> */
union  A1602 { c m0; f m1; p m2; };
void f_cpA1602(union  A1602 *x, const union  A1602 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1602(const union  A1602 *x, const union  A1602 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1602() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1602), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1602, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1602, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1602, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f[2]cjpspf<ddjlpsddj>sj<cfp>i} */
struct A1603 { f m0[2]; c m1; j m2; p m3; s m4; p m5; f m6; union  A1601 m7; s m8; j m9; union  A1602 m10; i m11; };
void f_cpA1603(struct A1603 *x, const struct A1603 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1601(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; f_cpA1602(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1603(const struct A1603 *x, const struct A1603 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1601(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1602(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1603() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1603), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1603, m0), 2);
		dcStructField(at, 'c', offsetof(struct A1603, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1603, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1603, m3), 1);
		dcStructField(at, 's', offsetof(struct A1603, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1603, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1603, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1603, m7), 1, f_touchdcstA1601());
		dcStructField(at, 's', offsetof(struct A1603, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1603, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1603, m10), 1, f_touchdcstA1602());
		dcStructField(at, 'i', offsetof(struct A1603, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ljlpl} */
struct A1604 { l m0; j m1; l m2; p m3; l m4; };
void f_cpA1604(struct A1604 *x, const struct A1604 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1604(const struct A1604 *x, const struct A1604 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1604() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1604), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1604, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1604, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1604, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1604, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1604, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djdcpdfsf} */
struct A1605 { d m0; j m1; d m2; c m3; p m4; d m5; f m6; s m7; f m8; };
void f_cpA1605(struct A1605 *x, const struct A1605 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1605(const struct A1605 *x, const struct A1605 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1605() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1605), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1605, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1605, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1605, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1605, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1605, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1605, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1605, m6), 1);
		dcStructField(at, 's', offsetof(struct A1605, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1605, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jcccc[13]l> */
union  A1606 { j m0; c m1; c m2; c m3; c m4[13]; l m5; };
void f_cpA1606(union  A1606 *x, const union  A1606 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m4[12] = y->m4[12]; x->m5 = y->m5; };
int f_cmpA1606(const union  A1606 *x, const union  A1606 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m4[12] == y->m4[12] && x->m5 == y->m5; };
DCstruct* f_touchdcstA1606() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1606), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1606, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1606, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1606, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1606, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1606, m4), 13);
		dcStructField(at, 'l', offsetof(union  A1606, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p{ljlpl}dlpc{djdcpdfsf}[9]<jcccc[13]l>lp> */
union  A1607 { p m0; struct A1604 m1; d m2; l m3; p m4; c m5; struct A1605 m6[9]; union  A1606 m7; l m8; p m9; };
void f_cpA1607(union  A1607 *x, const union  A1607 *y) { x->m0 = y->m0; f_cpA1604(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1605(&x->m6[0], &y->m6[0]); f_cpA1605(&x->m6[1], &y->m6[1]); f_cpA1605(&x->m6[2], &y->m6[2]); f_cpA1605(&x->m6[3], &y->m6[3]); f_cpA1605(&x->m6[4], &y->m6[4]); f_cpA1605(&x->m6[5], &y->m6[5]); f_cpA1605(&x->m6[6], &y->m6[6]); f_cpA1605(&x->m6[7], &y->m6[7]); f_cpA1605(&x->m6[8], &y->m6[8]); f_cpA1606(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1607(const union  A1607 *x, const union  A1607 *y) { return x->m0 == y->m0 && f_cmpA1604(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1605(&x->m6[0], &y->m6[0]) && f_cmpA1605(&x->m6[1], &y->m6[1]) && f_cmpA1605(&x->m6[2], &y->m6[2]) && f_cmpA1605(&x->m6[3], &y->m6[3]) && f_cmpA1605(&x->m6[4], &y->m6[4]) && f_cmpA1605(&x->m6[5], &y->m6[5]) && f_cmpA1605(&x->m6[6], &y->m6[6]) && f_cmpA1605(&x->m6[7], &y->m6[7]) && f_cmpA1605(&x->m6[8], &y->m6[8]) && f_cmpA1606(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1607() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1607), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1607, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1607, m1), 1, f_touchdcstA1604());
		dcStructField(at, 'd', offsetof(union  A1607, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1607, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1607, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1607, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1607, m6), 9, f_touchdcstA1605());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1607, m7), 1, f_touchdcstA1606());
		dcStructField(at, 'l', offsetof(union  A1607, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1607, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cccclii} */
struct A1608 { c m0; c m1; c m2; c m3; l m4; i m5; i m6; };
void f_cpA1608(struct A1608 *x, const struct A1608 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1608(const struct A1608 *x, const struct A1608 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1608() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1608), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1608, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1608, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1608, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1608, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1608, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1608, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1608, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <picjjj{cccclii}p> */
union  A1609 { p m0; i m1; c m2; j m3; j m4; j m5; struct A1608 m6; p m7; };
void f_cpA1609(union  A1609 *x, const union  A1609 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1608(&x->m6, &y->m6); x->m7 = y->m7; };
int f_cmpA1609(const union  A1609 *x, const union  A1609 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1608(&x->m6, &y->m6) && x->m7 == y->m7; };
DCstruct* f_touchdcstA1609() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1609), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1609, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1609, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1609, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1609, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1609, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1609, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1609, m6), 1, f_touchdcstA1608());
		dcStructField(at, 'p', offsetof(union  A1609, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dijfdfp} */
struct A1610 { d m0; i m1; j m2; f m3; d m4; f m5; p m6; };
void f_cpA1610(struct A1610 *x, const struct A1610 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1610(const struct A1610 *x, const struct A1610 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1610() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1610), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1610, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1610, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1610, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1610, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1610, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1610, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1610, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pps} */
struct A1611 { p m0; p m1; s m2; };
void f_cpA1611(struct A1611 *x, const struct A1611 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1611(const struct A1611 *x, const struct A1611 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1611() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1611), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1611, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1611, m1), 1);
		dcStructField(at, 's', offsetof(struct A1611, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pdcjifcdl} */
struct A1612 { p m0; d m1; c m2; j m3; i m4; f m5; c m6; d m7; l m8; };
void f_cpA1612(struct A1612 *x, const struct A1612 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1612(const struct A1612 *x, const struct A1612 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1612() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1612), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1612, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1612, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1612, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1612, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1612, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1612, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1612, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1612, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1612, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{dijfdfp}s<f>{pps}lc{pdcjifcdl}lpcds} */
struct A1613 { struct A1610 m0; s m1; union  A438 m2; struct A1611 m3; l m4; c m5; struct A1612 m6; l m7; p m8; c m9; d m10; s m11; };
void f_cpA1613(struct A1613 *x, const struct A1613 *y) { f_cpA1610(&x->m0, &y->m0); x->m1 = y->m1; f_cpA438(&x->m2, &y->m2); f_cpA1611(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; f_cpA1612(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1613(const struct A1613 *x, const struct A1613 *y) { return f_cmpA1610(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA438(&x->m2, &y->m2) && f_cmpA1611(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1612(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1613() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1613), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1613, m0), 1, f_touchdcstA1610());
		dcStructField(at, 's', offsetof(struct A1613, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1613, m2), 1, f_touchdcstA438());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1613, m3), 1, f_touchdcstA1611());
		dcStructField(at, 'l', offsetof(struct A1613, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1613, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1613, m6), 1, f_touchdcstA1612());
		dcStructField(at, 'l', offsetof(struct A1613, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1613, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1613, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1613, m10), 1);
		dcStructField(at, 's', offsetof(struct A1613, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jii{f[2]cjpspf<ddjlpsddj>sj<cfp>i}<p{ljlpl}dlpc{djdcpdfsf}[9]<jcccc[13]l>lp>lpic<picjjj{cccclii}p>j{{dijfdfp}s<f>{pps}lc{pdcjifcdl}lpcds}> */
union  A1614 { j m0; i m1; i m2; struct A1603 m3; union  A1607 m4; l m5; p m6; i m7; c m8; union  A1609 m9; j m10; struct A1613 m11; };
void f_cpA1614(union  A1614 *x, const union  A1614 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1603(&x->m3, &y->m3); f_cpA1607(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1609(&x->m9, &y->m9); x->m10 = y->m10; f_cpA1613(&x->m11, &y->m11); };
int f_cmpA1614(const union  A1614 *x, const union  A1614 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1603(&x->m3, &y->m3) && f_cmpA1607(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1609(&x->m9, &y->m9) && x->m10 == y->m10 && f_cmpA1613(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1614() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1614), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1614, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1614, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1614, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1614, m3), 1, f_touchdcstA1603());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1614, m4), 1, f_touchdcstA1607());
		dcStructField(at, 'l', offsetof(union  A1614, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1614, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1614, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1614, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1614, m9), 1, f_touchdcstA1609());
		dcStructField(at, 'j', offsetof(union  A1614, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1614, m11), 1, f_touchdcstA1613());
		dcCloseStruct(at);
	}
	return at;
};
/* <pil> */
union  A1615 { p m0; i m1; l m2; };
void f_cpA1615(union  A1615 *x, const union  A1615 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1615(const union  A1615 *x, const union  A1615 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1615() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1615), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1615, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1615, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1615, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {si} */
struct A1616 { s m0; i m1; };
void f_cpA1616(struct A1616 *x, const struct A1616 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1616(const struct A1616 *x, const struct A1616 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1616() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1616), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1616, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1616, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <di> */
union  A1617 { d m0; i m1; };
void f_cpA1617(union  A1617 *x, const union  A1617 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1617(const union  A1617 *x, const union  A1617 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1617() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1617), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1617, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1617, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{si}{si}<di>fc> */
union  A1618 { struct A1616 m0; struct A1616 m1; union  A1617 m2; f m3; c m4; };
void f_cpA1618(union  A1618 *x, const union  A1618 *y) { f_cpA1616(&x->m0, &y->m0); f_cpA1616(&x->m1, &y->m1); f_cpA1617(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1618(const union  A1618 *x, const union  A1618 *y) { return f_cmpA1616(&x->m0, &y->m0) && f_cmpA1616(&x->m1, &y->m1) && f_cmpA1617(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1618() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1618), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1618, m0), 1, f_touchdcstA1616());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1618, m1), 1, f_touchdcstA1616());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1618, m2), 1, f_touchdcstA1617());
		dcStructField(at, 'f', offsetof(union  A1618, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1618, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {if<pil>llcls<{si}{si}<di>fc>fds} */
struct A1619 { i m0; f m1; union  A1615 m2; l m3; l m4; c m5; l m6; s m7; union  A1618 m8; f m9; d m10; s m11; };
void f_cpA1619(struct A1619 *x, const struct A1619 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1615(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1618(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1619(const struct A1619 *x, const struct A1619 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1615(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1618(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1619() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1619), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1619, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1619, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1619, m2), 1, f_touchdcstA1615());
		dcStructField(at, 'l', offsetof(struct A1619, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1619, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1619, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1619, m6), 1);
		dcStructField(at, 's', offsetof(struct A1619, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1619, m8), 1, f_touchdcstA1618());
		dcStructField(at, 'f', offsetof(struct A1619, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1619, m10), 1);
		dcStructField(at, 's', offsetof(struct A1619, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <diiscpcfpjpj> */
union  A1620 { d m0; i m1; i m2; s m3; c m4; p m5; c m6; f m7; p m8; j m9; p m10; j m11; };
void f_cpA1620(union  A1620 *x, const union  A1620 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1620(const union  A1620 *x, const union  A1620 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1620() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1620), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1620, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1620, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1620, m2), 1);
		dcStructField(at, 's', offsetof(union  A1620, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1620, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1620, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1620, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1620, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1620, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1620, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1620, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1620, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fddc} */
struct A1621 { f m0; d m1; d m2; c m3; };
void f_cpA1621(struct A1621 *x, const struct A1621 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1621(const struct A1621 *x, const struct A1621 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1621() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1621), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1621, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1621, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1621, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1621, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pc{fddc}lcdcp> */
union  A1622 { p m0; c m1; struct A1621 m2; l m3; c m4; d m5; c m6; p m7; };
void f_cpA1622(union  A1622 *x, const union  A1622 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1621(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1622(const union  A1622 *x, const union  A1622 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1621(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1622() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1622), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1622, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1622, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1622, m2), 1, f_touchdcstA1621());
		dcStructField(at, 'l', offsetof(union  A1622, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1622, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1622, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1622, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1622, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<d>s> */
union  A1623 { union  A317 m0; s m1; };
void f_cpA1623(union  A1623 *x, const union  A1623 *y) { f_cpA317(&x->m0, &y->m0); x->m1 = y->m1; };
int f_cmpA1623(const union  A1623 *x, const union  A1623 *y) { return f_cmpA317(&x->m0, &y->m0) && x->m1 == y->m1; };
DCstruct* f_touchdcstA1623() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1623), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1623, m0), 1, f_touchdcstA317());
		dcStructField(at, 's', offsetof(union  A1623, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sslip} */
struct A1624 { s m0; s m1; l m2; i m3; p m4; };
void f_cpA1624(struct A1624 *x, const struct A1624 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1624(const struct A1624 *x, const struct A1624 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1624() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1624), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1624, m0), 1);
		dcStructField(at, 's', offsetof(struct A1624, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1624, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1624, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1624, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pdc<pc{fddc}lcdcp>i<<d>s>cfsfs{sslip}> */
union  A1625 { p m0; d m1; c m2; union  A1622 m3; i m4; union  A1623 m5; c m6; f m7; s m8; f m9; s m10; struct A1624 m11; };
void f_cpA1625(union  A1625 *x, const union  A1625 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1622(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1623(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1624(&x->m11, &y->m11); };
int f_cmpA1625(const union  A1625 *x, const union  A1625 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1622(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1623(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1624(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1625() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1625), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1625, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1625, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1625, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1625, m3), 1, f_touchdcstA1622());
		dcStructField(at, 'i', offsetof(union  A1625, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1625, m5), 1, f_touchdcstA1623());
		dcStructField(at, 'c', offsetof(union  A1625, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1625, m7), 1);
		dcStructField(at, 's', offsetof(union  A1625, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1625, m9), 1);
		dcStructField(at, 's', offsetof(union  A1625, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1625, m11), 1, f_touchdcstA1624());
		dcCloseStruct(at);
	}
	return at;
};
/* <diidildiljid> */
union  A1626 { d m0; i m1; i m2; d m3; i m4; l m5; d m6; i m7; l m8; j m9; i m10; d m11; };
void f_cpA1626(union  A1626 *x, const union  A1626 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1626(const union  A1626 *x, const union  A1626 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1626() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1626), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1626, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1626, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1626, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1626, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1626, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1626, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1626, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1626, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1626, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1626, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1626, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1626, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ssflff} */
struct A1627 { s m0; s m1; f m2; l m3; f m4; f m5; };
void f_cpA1627(struct A1627 *x, const struct A1627 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1627(const struct A1627 *x, const struct A1627 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1627() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1627), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1627, m0), 1);
		dcStructField(at, 's', offsetof(struct A1627, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1627, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1627, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1627, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1627, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iisjppfpsdfs} */
struct A1628 { i m0; i m1; s m2; j m3; p m4; p m5; f m6; p m7; s m8; d m9; f m10; s m11; };
void f_cpA1628(struct A1628 *x, const struct A1628 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1628(const struct A1628 *x, const struct A1628 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1628() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1628), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1628, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1628, m1), 1);
		dcStructField(at, 's', offsetof(struct A1628, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1628, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1628, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1628, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1628, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1628, m7), 1);
		dcStructField(at, 's', offsetof(struct A1628, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1628, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1628, m10), 1);
		dcStructField(at, 's', offsetof(struct A1628, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pd{ssflff}{ls}c{iisjppfpsdfs}p} */
struct A1629 { p m0; d m1; struct A1627 m2; struct A1110 m3; c m4; struct A1628 m5; p m6; };
void f_cpA1629(struct A1629 *x, const struct A1629 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1627(&x->m2, &y->m2); f_cpA1110(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1628(&x->m5, &y->m5); x->m6 = y->m6; };
int f_cmpA1629(const struct A1629 *x, const struct A1629 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1627(&x->m2, &y->m2) && f_cmpA1110(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1628(&x->m5, &y->m5) && x->m6 == y->m6; };
DCstruct* f_touchdcstA1629() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1629), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1629, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1629, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1629, m2), 1, f_touchdcstA1627());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1629, m3), 1, f_touchdcstA1110());
		dcStructField(at, 'c', offsetof(struct A1629, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1629, m5), 1, f_touchdcstA1628());
		dcStructField(at, 'p', offsetof(struct A1629, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{j}f<diidildiljid>pd{pd{ssflff}{ls}c{iisjppfpsdfs}p}sfiidd} */
struct A1630 { struct A117 m0; f m1; union  A1626 m2; p m3; d m4; struct A1629 m5; s m6; f m7; i m8; i m9; d m10; d m11; };
void f_cpA1630(struct A1630 *x, const struct A1630 *y) { f_cpA117(&x->m0, &y->m0); x->m1 = y->m1; f_cpA1626(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; f_cpA1629(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1630(const struct A1630 *x, const struct A1630 *y) { return f_cmpA117(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA1626(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1629(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1630() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1630), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1630, m0), 1, f_touchdcstA117());
		dcStructField(at, 'f', offsetof(struct A1630, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1630, m2), 1, f_touchdcstA1626());
		dcStructField(at, 'p', offsetof(struct A1630, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1630, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1630, m5), 1, f_touchdcstA1629());
		dcStructField(at, 's', offsetof(struct A1630, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1630, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1630, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1630, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1630, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1630, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ccfccp} */
struct A1631 { c m0; c m1; f m2; c m3; c m4; p m5; };
void f_cpA1631(struct A1631 *x, const struct A1631 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1631(const struct A1631 *x, const struct A1631 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1631() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1631), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1631, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1631, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1631, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1631, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1631, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1631, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ippjll> */
union  A1632 { i m0; p m1; p m2; j m3; l m4; l m5; };
void f_cpA1632(union  A1632 *x, const union  A1632 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1632(const union  A1632 *x, const union  A1632 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1632() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1632), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1632, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1632, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1632, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1632, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1632, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1632, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <psdscislllpi> */
union  A1633 { p m0; s m1; d m2; s m3; c m4; i m5; s m6; l m7; l m8; l m9; p m10; i m11; };
void f_cpA1633(union  A1633 *x, const union  A1633 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1633(const union  A1633 *x, const union  A1633 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1633() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1633), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1633, m0), 1);
		dcStructField(at, 's', offsetof(union  A1633, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1633, m2), 1);
		dcStructField(at, 's', offsetof(union  A1633, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1633, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1633, m5), 1);
		dcStructField(at, 's', offsetof(union  A1633, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1633, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1633, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1633, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1633, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1633, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <p{f}<ippjll><psdscislllpi>> */
union  A1634 { p m0; struct A195 m1; union  A1632 m2; union  A1633 m3; };
void f_cpA1634(union  A1634 *x, const union  A1634 *y) { x->m0 = y->m0; f_cpA195(&x->m1, &y->m1); f_cpA1632(&x->m2, &y->m2); f_cpA1633(&x->m3, &y->m3); };
int f_cmpA1634(const union  A1634 *x, const union  A1634 *y) { return x->m0 == y->m0 && f_cmpA195(&x->m1, &y->m1) && f_cmpA1632(&x->m2, &y->m2) && f_cmpA1633(&x->m3, &y->m3); };
DCstruct* f_touchdcstA1634() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1634), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1634, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1634, m1), 1, f_touchdcstA195());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1634, m2), 1, f_touchdcstA1632());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1634, m3), 1, f_touchdcstA1633());
		dcCloseStruct(at);
	}
	return at;
};
/* <fpdd> */
union  A1635 { f m0; p m1; d m2; d m3; };
void f_cpA1635(union  A1635 *x, const union  A1635 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1635(const union  A1635 *x, const union  A1635 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1635() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1635), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1635, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1635, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1635, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1635, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {scs<fpdd>d} */
struct A1636 { s m0; c m1; s m2; union  A1635 m3; d m4; };
void f_cpA1636(struct A1636 *x, const struct A1636 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1635(&x->m3, &y->m3); x->m4 = y->m4; };
int f_cmpA1636(const struct A1636 *x, const struct A1636 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1635(&x->m3, &y->m3) && x->m4 == y->m4; };
DCstruct* f_touchdcstA1636() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1636), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1636, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1636, m1), 1);
		dcStructField(at, 's', offsetof(struct A1636, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1636, m3), 1, f_touchdcstA1635());
		dcStructField(at, 'd', offsetof(struct A1636, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sfi} */
struct A1637 { s m0; f m1; i m2; };
void f_cpA1637(struct A1637 *x, const struct A1637 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1637(const struct A1637 *x, const struct A1637 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1637() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1637), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1637, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1637, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1637, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <c{sfi}ldcclflpli[7]> */
union  A1638 { c m0; struct A1637 m1; l m2; d m3; c m4; c m5; l m6; f m7; l m8; p m9; l m10; i m11[7]; };
void f_cpA1638(union  A1638 *x, const union  A1638 *y) { x->m0 = y->m0; f_cpA1637(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11[0] = y->m11[0]; x->m11[1] = y->m11[1]; x->m11[2] = y->m11[2]; x->m11[3] = y->m11[3]; x->m11[4] = y->m11[4]; x->m11[5] = y->m11[5]; x->m11[6] = y->m11[6]; };
int f_cmpA1638(const union  A1638 *x, const union  A1638 *y) { return x->m0 == y->m0 && f_cmpA1637(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11[0] == y->m11[0] && x->m11[1] == y->m11[1] && x->m11[2] == y->m11[2] && x->m11[3] == y->m11[3] && x->m11[4] == y->m11[4] && x->m11[5] == y->m11[5] && x->m11[6] == y->m11[6]; };
DCstruct* f_touchdcstA1638() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1638), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1638, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1638, m1), 1, f_touchdcstA1637());
		dcStructField(at, 'l', offsetof(union  A1638, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1638, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1638, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1638, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1638, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1638, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1638, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1638, m9), 1);
		dcStructField(at, 'l', offsetof(union  A1638, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1638, m11), 7);
		dcCloseStruct(at);
	}
	return at;
};
/* <pid> */
union  A1639 { p m0; i m1; d m2; };
void f_cpA1639(union  A1639 *x, const union  A1639 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1639(const union  A1639 *x, const union  A1639 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1639() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1639), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1639, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1639, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1639, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pcffplpsfjlp> */
union  A1640 { p m0; c m1; f m2; f m3; p m4; l m5; p m6; s m7; f m8; j m9; l m10; p m11; };
void f_cpA1640(union  A1640 *x, const union  A1640 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1640(const union  A1640 *x, const union  A1640 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1640() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1640), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1640, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1640, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1640, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1640, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1640, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1640, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1640, m6), 1);
		dcStructField(at, 's', offsetof(union  A1640, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1640, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1640, m9), 1);
		dcStructField(at, 'l', offsetof(union  A1640, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1640, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lii} */
struct A1641 { l m0; i m1; i m2; };
void f_cpA1641(struct A1641 *x, const struct A1641 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1641(const struct A1641 *x, const struct A1641 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1641() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1641), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1641, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1641, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1641, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dld> */
union  A1642 { d m0; l m1; d m2; };
void f_cpA1642(union  A1642 *x, const union  A1642 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1642(const union  A1642 *x, const union  A1642 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1642() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1642), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1642, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1642, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1642, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pppp> */
union  A1643 { p m0; p m1; p m2; p m3; };
void f_cpA1643(union  A1643 *x, const union  A1643 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1643(const union  A1643 *x, const union  A1643 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1643() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1643), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1643, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1643, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1643, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1643, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {d[8]psp} */
struct A1644 { d m0[8]; p m1; s m2; p m3; };
void f_cpA1644(struct A1644 *x, const struct A1644 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1644(const struct A1644 *x, const struct A1644 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1644() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1644), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1644, m0), 8);
		dcStructField(at, 'p', offsetof(struct A1644, m1), 1);
		dcStructField(at, 's', offsetof(struct A1644, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1644, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<pid><pcffplpsfjlp>s[13]p{lii}<dld><pppp>jijj{d[8]psp}} */
struct A1645 { union  A1639 m0; union  A1640 m1; s m2[13]; p m3; struct A1641 m4; union  A1642 m5; union  A1643 m6; j m7; i m8; j m9; j m10; struct A1644 m11; };
void f_cpA1645(struct A1645 *x, const struct A1645 *y) { f_cpA1639(&x->m0, &y->m0); f_cpA1640(&x->m1, &y->m1); x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m3 = y->m3; f_cpA1641(&x->m4, &y->m4); f_cpA1642(&x->m5, &y->m5); f_cpA1643(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1644(&x->m11, &y->m11); };
int f_cmpA1645(const struct A1645 *x, const struct A1645 *y) { return f_cmpA1639(&x->m0, &y->m0) && f_cmpA1640(&x->m1, &y->m1) && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m3 == y->m3 && f_cmpA1641(&x->m4, &y->m4) && f_cmpA1642(&x->m5, &y->m5) && f_cmpA1643(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1644(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1645() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1645), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1645, m0), 1, f_touchdcstA1639());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1645, m1), 1, f_touchdcstA1640());
		dcStructField(at, 's', offsetof(struct A1645, m2), 13);
		dcStructField(at, 'p', offsetof(struct A1645, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1645, m4), 1, f_touchdcstA1641());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1645, m5), 1, f_touchdcstA1642());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1645, m6), 1, f_touchdcstA1643());
		dcStructField(at, 'j', offsetof(struct A1645, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1645, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1645, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1645, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1645, m11), 1, f_touchdcstA1644());
		dcCloseStruct(at);
	}
	return at;
};
/* <jl> */
union  A1646 { j m0; l m1; };
void f_cpA1646(union  A1646 *x, const union  A1646 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1646(const union  A1646 *x, const union  A1646 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1646() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1646), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1646, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1646, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jsscjlpljf[15]} */
struct A1647 { j m0; s m1; s m2; c m3; j m4; l m5; p m6; l m7; j m8; f m9[15]; };
void f_cpA1647(struct A1647 *x, const struct A1647 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m9[8] = y->m9[8]; x->m9[9] = y->m9[9]; x->m9[10] = y->m9[10]; x->m9[11] = y->m9[11]; x->m9[12] = y->m9[12]; x->m9[13] = y->m9[13]; x->m9[14] = y->m9[14]; };
int f_cmpA1647(const struct A1647 *x, const struct A1647 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m9[8] == y->m9[8] && x->m9[9] == y->m9[9] && x->m9[10] == y->m9[10] && x->m9[11] == y->m9[11] && x->m9[12] == y->m9[12] && x->m9[13] == y->m9[13] && x->m9[14] == y->m9[14]; };
DCstruct* f_touchdcstA1647() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1647), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1647, m0), 1);
		dcStructField(at, 's', offsetof(struct A1647, m1), 1);
		dcStructField(at, 's', offsetof(struct A1647, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1647, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1647, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1647, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1647, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1647, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1647, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1647, m9), 15);
		dcCloseStruct(at);
	}
	return at;
};
/* {<jl>{jsscjlpljf[15]}jcj} */
struct A1648 { union  A1646 m0; struct A1647 m1; j m2; c m3; j m4; };
void f_cpA1648(struct A1648 *x, const struct A1648 *y) { f_cpA1646(&x->m0, &y->m0); f_cpA1647(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1648(const struct A1648 *x, const struct A1648 *y) { return f_cmpA1646(&x->m0, &y->m0) && f_cmpA1647(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1648() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1648), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1648, m0), 1, f_touchdcstA1646());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1648, m1), 1, f_touchdcstA1647());
		dcStructField(at, 'j', offsetof(struct A1648, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1648, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1648, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jdlscsc<c{sfi}ldcclflpli[7]>{<pid><pcffplpsfjlp>s[13]p{lii}<dld><pppp>jijj{d[8]psp}}cd{<jl>{jsscjlpljf[15]}jcj}} */
struct A1649 { j m0; d m1; l m2; s m3; c m4; s m5; c m6; union  A1638 m7; struct A1645 m8; c m9; d m10; struct A1648 m11; };
void f_cpA1649(struct A1649 *x, const struct A1649 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1638(&x->m7, &y->m7); f_cpA1645(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; f_cpA1648(&x->m11, &y->m11); };
int f_cmpA1649(const struct A1649 *x, const struct A1649 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1638(&x->m7, &y->m7) && f_cmpA1645(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1648(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1649() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1649), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1649, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1649, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1649, m2), 1);
		dcStructField(at, 's', offsetof(struct A1649, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1649, m4), 1);
		dcStructField(at, 's', offsetof(struct A1649, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1649, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1649, m7), 1, f_touchdcstA1638());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1649, m8), 1, f_touchdcstA1645());
		dcStructField(at, 'c', offsetof(struct A1649, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1649, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1649, m11), 1, f_touchdcstA1648());
		dcCloseStruct(at);
	}
	return at;
};
/* <pdcfl> */
union  A1650 { p m0; d m1; c m2; f m3; l m4; };
void f_cpA1650(union  A1650 *x, const union  A1650 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1650(const union  A1650 *x, const union  A1650 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1650() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1650), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1650, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1650, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1650, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1650, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1650, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fdccfjjs} */
struct A1651 { f m0; d m1; c m2; c m3; f m4; j m5; j m6; s m7; };
void f_cpA1651(struct A1651 *x, const struct A1651 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1651(const struct A1651 *x, const struct A1651 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1651() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1651), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1651, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1651, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1651, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1651, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1651, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1651, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1651, m6), 1);
		dcStructField(at, 's', offsetof(struct A1651, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sl} */
struct A1652 { s m0; l m1; };
void f_cpA1652(struct A1652 *x, const struct A1652 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1652(const struct A1652 *x, const struct A1652 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1652() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1652), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1652, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1652, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fcllddpc} */
struct A1653 { f m0; c m1; l m2; l m3; d m4; d m5; p m6; c m7; };
void f_cpA1653(struct A1653 *x, const struct A1653 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1653(const struct A1653 *x, const struct A1653 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1653() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1653), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1653, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1653, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1653, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1653, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1653, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1653, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1653, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1653, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <il<pdcfl>j{fdccfjjs}{sl}djcl{fcllddpc}s> */
union  A1654 { i m0; l m1; union  A1650 m2; j m3; struct A1651 m4; struct A1652 m5; d m6; j m7; c m8; l m9; struct A1653 m10; s m11; };
void f_cpA1654(union  A1654 *x, const union  A1654 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1650(&x->m2, &y->m2); x->m3 = y->m3; f_cpA1651(&x->m4, &y->m4); f_cpA1652(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1653(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1654(const union  A1654 *x, const union  A1654 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1650(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA1651(&x->m4, &y->m4) && f_cmpA1652(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1653(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1654() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1654), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1654, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1654, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1654, m2), 1, f_touchdcstA1650());
		dcStructField(at, 'j', offsetof(union  A1654, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1654, m4), 1, f_touchdcstA1651());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1654, m5), 1, f_touchdcstA1652());
		dcStructField(at, 'd', offsetof(union  A1654, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1654, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1654, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1654, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1654, m10), 1, f_touchdcstA1653());
		dcStructField(at, 's', offsetof(union  A1654, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <plciiljc> */
union  A1655 { p m0; l m1; c m2; i m3; i m4; l m5; j m6; c m7; };
void f_cpA1655(union  A1655 *x, const union  A1655 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1655(const union  A1655 *x, const union  A1655 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1655() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1655), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1655, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1655, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1655, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1655, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1655, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1655, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1655, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1655, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {s<plciiljc>fjfij} */
struct A1656 { s m0; union  A1655 m1; f m2; j m3; f m4; i m5; j m6; };
void f_cpA1656(struct A1656 *x, const struct A1656 *y) { x->m0 = y->m0; f_cpA1655(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1656(const struct A1656 *x, const struct A1656 *y) { return x->m0 == y->m0 && f_cmpA1655(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1656() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1656), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1656, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1656, m1), 1, f_touchdcstA1655());
		dcStructField(at, 'f', offsetof(struct A1656, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1656, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1656, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1656, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1656, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dj<il<pdcfl>j{fdccfjjs}{sl}djcl{fcllddpc}s>s{s<plciiljc>fjfij}sljlfpf> */
union  A1657 { d m0; j m1; union  A1654 m2; s m3; struct A1656 m4; s m5; l m6; j m7; l m8; f m9; p m10; f m11; };
void f_cpA1657(union  A1657 *x, const union  A1657 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1654(&x->m2, &y->m2); x->m3 = y->m3; f_cpA1656(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1657(const union  A1657 *x, const union  A1657 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1654(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA1656(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1657() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1657), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1657, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1657, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1657, m2), 1, f_touchdcstA1654());
		dcStructField(at, 's', offsetof(union  A1657, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1657, m4), 1, f_touchdcstA1656());
		dcStructField(at, 's', offsetof(union  A1657, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1657, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1657, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1657, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1657, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1657, m10), 1);
		dcStructField(at, 'f', offsetof(union  A1657, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sfpcfidcd[3]fsd} */
struct A1658 { s m0; f m1; p m2; c m3; f m4; i m5; d m6; c m7; d m8[3]; f m9; s m10; d m11; };
void f_cpA1658(struct A1658 *x, const struct A1658 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1658(const struct A1658 *x, const struct A1658 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1658() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1658), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1658, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1658, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1658, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1658, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1658, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1658, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1658, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1658, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1658, m8), 3);
		dcStructField(at, 'f', offsetof(struct A1658, m9), 1);
		dcStructField(at, 's', offsetof(struct A1658, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1658, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ccpldllcf{sfpcfidcd[3]fsd}i} */
struct A1659 { c m0; c m1; p m2; l m3; d m4; l m5; l m6; c m7; f m8; struct A1658 m9; i m10; };
void f_cpA1659(struct A1659 *x, const struct A1659 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1658(&x->m9, &y->m9); x->m10 = y->m10; };
int f_cmpA1659(const struct A1659 *x, const struct A1659 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1658(&x->m9, &y->m9) && x->m10 == y->m10; };
DCstruct* f_touchdcstA1659() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1659), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1659, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1659, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1659, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1659, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1659, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1659, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1659, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1659, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1659, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1659, m9), 1, f_touchdcstA1658());
		dcStructField(at, 'i', offsetof(struct A1659, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ij[8]iip} */
struct A1660 { i m0; j m1[8]; i m2; i m3; p m4; };
void f_cpA1660(struct A1660 *x, const struct A1660 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1660(const struct A1660 *x, const struct A1660 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1660() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1660), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1660, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1660, m1), 8);
		dcStructField(at, 'i', offsetof(struct A1660, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1660, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1660, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jlpfdpdjpisp} */
struct A1661 { j m0; l m1; p m2; f m3; d m4; p m5; d m6; j m7; p m8; i m9; s m10; p m11; };
void f_cpA1661(struct A1661 *x, const struct A1661 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1661(const struct A1661 *x, const struct A1661 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1661() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1661), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1661, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1661, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1661, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1661, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1661, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1661, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1661, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1661, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1661, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1661, m9), 1);
		dcStructField(at, 's', offsetof(struct A1661, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1661, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{ij[8]iip}sc{jlpfdpdjpisp}csfijjjc} */
struct A1662 { struct A1660 m0; s m1; c m2; struct A1661 m3; c m4; s m5; f m6; i m7; j m8; j m9; j m10; c m11; };
void f_cpA1662(struct A1662 *x, const struct A1662 *y) { f_cpA1660(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA1661(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1662(const struct A1662 *x, const struct A1662 *y) { return f_cmpA1660(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1661(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1662() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1662), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1662, m0), 1, f_touchdcstA1660());
		dcStructField(at, 's', offsetof(struct A1662, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1662, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1662, m3), 1, f_touchdcstA1661());
		dcStructField(at, 'c', offsetof(struct A1662, m4), 1);
		dcStructField(at, 's', offsetof(struct A1662, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1662, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1662, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1662, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1662, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1662, m10), 1);
		dcStructField(at, 'c', offsetof(struct A1662, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jjpcl{{ij[8]iip}sc{jlpfdpdjpisp}csfijjjc}sfslji> */
union  A1663 { j m0; j m1; p m2; c m3; l m4; struct A1662 m5; s m6; f m7; s m8; l m9; j m10; i m11; };
void f_cpA1663(union  A1663 *x, const union  A1663 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1662(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1663(const union  A1663 *x, const union  A1663 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1662(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1663() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1663), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1663, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1663, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1663, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1663, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1663, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1663, m5), 1, f_touchdcstA1662());
		dcStructField(at, 's', offsetof(union  A1663, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1663, m7), 1);
		dcStructField(at, 's', offsetof(union  A1663, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1663, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1663, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1663, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jcdcjlpdiiid} */
struct A1664 { j m0; c m1; d m2; c m3; j m4; l m5; p m6; d m7; i m8; i m9; i m10; d m11; };
void f_cpA1664(struct A1664 *x, const struct A1664 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1664(const struct A1664 *x, const struct A1664 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1664() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1664), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1664, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1664, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1664, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1664, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1664, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1664, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1664, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1664, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1664, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1664, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1664, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1664, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lissj> */
union  A1665 { l m0; i m1; s m2; s m3; j m4; };
void f_cpA1665(union  A1665 *x, const union  A1665 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1665(const union  A1665 *x, const union  A1665 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1665() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1665), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1665, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1665, m1), 1);
		dcStructField(at, 's', offsetof(union  A1665, m2), 1);
		dcStructField(at, 's', offsetof(union  A1665, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1665, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f{jcdcjlpdiiid}p<lissj>fi} */
struct A1666 { f m0; struct A1664 m1; p m2; union  A1665 m3; f m4; i m5; };
void f_cpA1666(struct A1666 *x, const struct A1666 *y) { x->m0 = y->m0; f_cpA1664(&x->m1, &y->m1); x->m2 = y->m2; f_cpA1665(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1666(const struct A1666 *x, const struct A1666 *y) { return x->m0 == y->m0 && f_cmpA1664(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA1665(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1666() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1666), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1666, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1666, m1), 1, f_touchdcstA1664());
		dcStructField(at, 'p', offsetof(struct A1666, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1666, m3), 1, f_touchdcstA1665());
		dcStructField(at, 'f', offsetof(struct A1666, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1666, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fisfpsfiffcs} */
struct A1667 { f m0; i m1; s m2; f m3; p m4; s m5; f m6; i m7; f m8; f m9; c m10; s m11; };
void f_cpA1667(struct A1667 *x, const struct A1667 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1667(const struct A1667 *x, const struct A1667 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1667() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1667), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1667, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1667, m1), 1);
		dcStructField(at, 's', offsetof(struct A1667, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1667, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1667, m4), 1);
		dcStructField(at, 's', offsetof(struct A1667, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1667, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1667, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1667, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1667, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1667, m10), 1);
		dcStructField(at, 's', offsetof(struct A1667, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{fisfpsfiffcs}djjd} */
struct A1668 { struct A1667 m0; d m1; j m2; j m3; d m4; };
void f_cpA1668(struct A1668 *x, const struct A1668 *y) { f_cpA1667(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1668(const struct A1668 *x, const struct A1668 *y) { return f_cmpA1667(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1668() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1668), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1668, m0), 1, f_touchdcstA1667());
		dcStructField(at, 'd', offsetof(struct A1668, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1668, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1668, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1668, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lci[14]dcppj} */
struct A1669 { l m0; c m1; i m2[14]; d m3; c m4; p m5; p m6; j m7; };
void f_cpA1669(struct A1669 *x, const struct A1669 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m2[13] = y->m2[13]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1669(const struct A1669 *x, const struct A1669 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m2[13] == y->m2[13] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1669() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1669), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1669, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1669, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1669, m2), 14);
		dcStructField(at, 'd', offsetof(struct A1669, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1669, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1669, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1669, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1669, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{s}{c}{jd}ccsdilcf} */
struct A1670 { struct A162 m0; struct A212 m1; struct A811 m2; c m3; c m4; s m5; d m6; i m7; l m8; c m9; f m10; };
void f_cpA1670(struct A1670 *x, const struct A1670 *y) { f_cpA162(&x->m0, &y->m0); f_cpA212(&x->m1, &y->m1); f_cpA811(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1670(const struct A1670 *x, const struct A1670 *y) { return f_cmpA162(&x->m0, &y->m0) && f_cmpA212(&x->m1, &y->m1) && f_cmpA811(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1670() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1670), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1670, m0), 1, f_touchdcstA162());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1670, m1), 1, f_touchdcstA212());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1670, m2), 1, f_touchdcstA811());
		dcStructField(at, 'c', offsetof(struct A1670, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1670, m4), 1);
		dcStructField(at, 's', offsetof(struct A1670, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1670, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1670, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1670, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1670, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1670, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cfcpp} */
struct A1671 { c m0; f m1; c m2; p m3; p m4; };
void f_cpA1671(struct A1671 *x, const struct A1671 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1671(const struct A1671 *x, const struct A1671 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1671() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1671), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1671, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1671, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1671, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1671, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1671, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jfsd} */
struct A1672 { j m0; f m1; s m2; d m3; };
void f_cpA1672(struct A1672 *x, const struct A1672 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1672(const struct A1672 *x, const struct A1672 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1672() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1672), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1672, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1672, m1), 1);
		dcStructField(at, 's', offsetof(struct A1672, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1672, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jc[7]lspcci} */
struct A1673 { j m0; c m1[7]; l m2; s m3; p m4; c m5; c m6; i m7; };
void f_cpA1673(struct A1673 *x, const struct A1673 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1673(const struct A1673 *x, const struct A1673 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1673() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1673), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1673, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1673, m1), 7);
		dcStructField(at, 'l', offsetof(struct A1673, m2), 1);
		dcStructField(at, 's', offsetof(struct A1673, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1673, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1673, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1673, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1673, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dl{cfcpp}lf{jfsd}jjss{jc[7]lspcci}c} */
struct A1674 { d m0; l m1; struct A1671 m2; l m3; f m4; struct A1672 m5; j m6; j m7; s m8; s m9; struct A1673 m10; c m11; };
void f_cpA1674(struct A1674 *x, const struct A1674 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1671(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; f_cpA1672(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1673(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1674(const struct A1674 *x, const struct A1674 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1671(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1672(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1673(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1674() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1674), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1674, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1674, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1674, m2), 1, f_touchdcstA1671());
		dcStructField(at, 'l', offsetof(struct A1674, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1674, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1674, m5), 1, f_touchdcstA1672());
		dcStructField(at, 'j', offsetof(struct A1674, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1674, m7), 1);
		dcStructField(at, 's', offsetof(struct A1674, m8), 1);
		dcStructField(at, 's', offsetof(struct A1674, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1674, m10), 1, f_touchdcstA1673());
		dcStructField(at, 'c', offsetof(struct A1674, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <icd> */
union  A1675 { i m0; c m1; d m2; };
void f_cpA1675(union  A1675 *x, const union  A1675 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1675(const union  A1675 *x, const union  A1675 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1675() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1675), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1675, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1675, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1675, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ijpsj<s><icd>} */
struct A1676 { i m0; j m1; p m2; s m3; j m4; union  A179 m5; union  A1675 m6; };
void f_cpA1676(struct A1676 *x, const struct A1676 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA179(&x->m5, &y->m5); f_cpA1675(&x->m6, &y->m6); };
int f_cmpA1676(const struct A1676 *x, const struct A1676 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA179(&x->m5, &y->m5) && f_cmpA1675(&x->m6, &y->m6); };
DCstruct* f_touchdcstA1676() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1676), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1676, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1676, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1676, m2), 1);
		dcStructField(at, 's', offsetof(struct A1676, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1676, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1676, m5), 1, f_touchdcstA179());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1676, m6), 1, f_touchdcstA1675());
		dcCloseStruct(at);
	}
	return at;
};
/* <cdjsflc> */
union  A1677 { c m0; d m1; j m2; s m3; f m4; l m5; c m6; };
void f_cpA1677(union  A1677 *x, const union  A1677 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1677(const union  A1677 *x, const union  A1677 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1677() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1677), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1677, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1677, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1677, m2), 1);
		dcStructField(at, 's', offsetof(union  A1677, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1677, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1677, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1677, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dllildp> */
union  A1678 { d m0; l m1; l m2; i m3; l m4; d m5; p m6; };
void f_cpA1678(union  A1678 *x, const union  A1678 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1678(const union  A1678 *x, const union  A1678 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1678() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1678), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1678, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1678, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1678, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1678, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1678, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1678, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1678, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{f}fcis> */
union  A1679 { struct A195 m0; f m1; c m2; i m3; s m4; };
void f_cpA1679(union  A1679 *x, const union  A1679 *y) { f_cpA195(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1679(const union  A1679 *x, const union  A1679 *y) { return f_cmpA195(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1679() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1679), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1679, m0), 1, f_touchdcstA195());
		dcStructField(at, 'f', offsetof(union  A1679, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1679, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1679, m3), 1);
		dcStructField(at, 's', offsetof(union  A1679, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jj[1]> */
union  A1680 { j m0; j m1[1]; };
void f_cpA1680(union  A1680 *x, const union  A1680 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; };
int f_cmpA1680(const union  A1680 *x, const union  A1680 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0]; };
DCstruct* f_touchdcstA1680() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1680), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1680, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1680, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sjpjiljccij<jj[1]>> */
union  A1681 { s m0; j m1; p m2; j m3; i m4; l m5; j m6; c m7; c m8; i m9; j m10; union  A1680 m11; };
void f_cpA1681(union  A1681 *x, const union  A1681 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1680(&x->m11, &y->m11); };
int f_cmpA1681(const union  A1681 *x, const union  A1681 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1680(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1681() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1681), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1681, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1681, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1681, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1681, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1681, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1681, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1681, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1681, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1681, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1681, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1681, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1681, m11), 1, f_touchdcstA1680());
		dcCloseStruct(at);
	}
	return at;
};
/* {s[7]i} */
struct A1682 { s m0[7]; i m1; };
void f_cpA1682(struct A1682 *x, const struct A1682 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m1 = y->m1; };
int f_cmpA1682(const struct A1682 *x, const struct A1682 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m1 == y->m1; };
DCstruct* f_touchdcstA1682() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1682), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1682, m0), 7);
		dcStructField(at, 'i', offsetof(struct A1682, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lscjljss} */
struct A1683 { l m0; s m1; c m2; j m3; l m4; j m5; s m6; s m7; };
void f_cpA1683(struct A1683 *x, const struct A1683 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1683(const struct A1683 *x, const struct A1683 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1683() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1683), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1683, m0), 1);
		dcStructField(at, 's', offsetof(struct A1683, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1683, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1683, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1683, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1683, m5), 1);
		dcStructField(at, 's', offsetof(struct A1683, m6), 1);
		dcStructField(at, 's', offsetof(struct A1683, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pppfsjjsd> */
union  A1684 { p m0; p m1; p m2; f m3; s m4; j m5; j m6; s m7; d m8; };
void f_cpA1684(union  A1684 *x, const union  A1684 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1684(const union  A1684 *x, const union  A1684 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1684() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1684), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1684, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1684, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1684, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1684, m3), 1);
		dcStructField(at, 's', offsetof(union  A1684, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1684, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1684, m6), 1);
		dcStructField(at, 's', offsetof(union  A1684, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1684, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{lscjljss}<pppfsjjsd>d} */
struct A1685 { struct A1683 m0; union  A1684 m1; d m2; };
void f_cpA1685(struct A1685 *x, const struct A1685 *y) { f_cpA1683(&x->m0, &y->m0); f_cpA1684(&x->m1, &y->m1); x->m2 = y->m2; };
int f_cmpA1685(const struct A1685 *x, const struct A1685 *y) { return f_cmpA1683(&x->m0, &y->m0) && f_cmpA1684(&x->m1, &y->m1) && x->m2 == y->m2; };
DCstruct* f_touchdcstA1685() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1685), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1685, m0), 1, f_touchdcstA1683());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1685, m1), 1, f_touchdcstA1684());
		dcStructField(at, 'd', offsetof(struct A1685, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djif{{lscjljss}<pppfsjjsd>d}dcjdfij} */
struct A1686 { d m0; j m1; i m2; f m3; struct A1685 m4; d m5; c m6; j m7; d m8; f m9; i m10; j m11; };
void f_cpA1686(struct A1686 *x, const struct A1686 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1685(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1686(const struct A1686 *x, const struct A1686 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1685(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1686() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1686), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1686, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1686, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1686, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1686, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1686, m4), 1, f_touchdcstA1685());
		dcStructField(at, 'd', offsetof(struct A1686, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1686, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1686, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1686, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1686, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1686, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1686, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {j[2]pjfjs} */
struct A1687 { j m0[2]; p m1; j m2; f m3; j m4; s m5; };
void f_cpA1687(struct A1687 *x, const struct A1687 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1687(const struct A1687 *x, const struct A1687 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1687() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1687), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1687, m0), 2);
		dcStructField(at, 'p', offsetof(struct A1687, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1687, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1687, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1687, m4), 1);
		dcStructField(at, 's', offsetof(struct A1687, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ccf{j[2]pjfjs}pi} */
struct A1688 { c m0; c m1; f m2; struct A1687 m3; p m4; i m5; };
void f_cpA1688(struct A1688 *x, const struct A1688 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1687(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1688(const struct A1688 *x, const struct A1688 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1687(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1688() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1688), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1688, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1688, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1688, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1688, m3), 1, f_touchdcstA1687());
		dcStructField(at, 'p', offsetof(struct A1688, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1688, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pspij} */
struct A1689 { p m0; s m1; p m2; i m3; j m4; };
void f_cpA1689(struct A1689 *x, const struct A1689 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1689(const struct A1689 *x, const struct A1689 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1689() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1689), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1689, m0), 1);
		dcStructField(at, 's', offsetof(struct A1689, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1689, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1689, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1689, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jjsfidjsppli> */
union  A1690 { j m0; j m1; s m2; f m3; i m4; d m5; j m6; s m7; p m8; p m9; l m10; i m11; };
void f_cpA1690(union  A1690 *x, const union  A1690 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1690(const union  A1690 *x, const union  A1690 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1690() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1690), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1690, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1690, m1), 1);
		dcStructField(at, 's', offsetof(union  A1690, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1690, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1690, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1690, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1690, m6), 1);
		dcStructField(at, 's', offsetof(union  A1690, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1690, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1690, m9), 1);
		dcStructField(at, 'l', offsetof(union  A1690, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1690, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cji<jjsfidjsppli>fjpi} */
struct A1691 { c m0; j m1; i m2; union  A1690 m3; f m4; j m5; p m6; i m7; };
void f_cpA1691(struct A1691 *x, const struct A1691 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1690(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1691(const struct A1691 *x, const struct A1691 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1690(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1691() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1691), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1691, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1691, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1691, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1691, m3), 1, f_touchdcstA1690());
		dcStructField(at, 'f', offsetof(struct A1691, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1691, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1691, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1691, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pjpc} */
struct A1692 { p m0; j m1; p m2; c m3; };
void f_cpA1692(struct A1692 *x, const struct A1692 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1692(const struct A1692 *x, const struct A1692 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1692() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1692), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1692, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1692, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1692, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1692, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ilcs} */
struct A1693 { i m0; l m1; c m2; s m3; };
void f_cpA1693(struct A1693 *x, const struct A1693 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1693(const struct A1693 *x, const struct A1693 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1693() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1693), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1693, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1693, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1693, m2), 1);
		dcStructField(at, 's', offsetof(struct A1693, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <d{pjpc}{ilcs}> */
union  A1694 { d m0; struct A1692 m1; struct A1693 m2; };
void f_cpA1694(union  A1694 *x, const union  A1694 *y) { x->m0 = y->m0; f_cpA1692(&x->m1, &y->m1); f_cpA1693(&x->m2, &y->m2); };
int f_cmpA1694(const union  A1694 *x, const union  A1694 *y) { return x->m0 == y->m0 && f_cmpA1692(&x->m1, &y->m1) && f_cmpA1693(&x->m2, &y->m2); };
DCstruct* f_touchdcstA1694() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1694), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1694, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1694, m1), 1, f_touchdcstA1692());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1694, m2), 1, f_touchdcstA1693());
		dcCloseStruct(at);
	}
	return at;
};
/* <djfsii[2]scfdcd> */
union  A1695 { d m0; j m1; f m2; s m3; i m4; i m5[2]; s m6; c m7; f m8; d m9; c m10; d m11; };
void f_cpA1695(union  A1695 *x, const union  A1695 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1695(const union  A1695 *x, const union  A1695 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1695() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1695), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1695, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1695, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1695, m2), 1);
		dcStructField(at, 's', offsetof(union  A1695, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1695, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1695, m5), 2);
		dcStructField(at, 's', offsetof(union  A1695, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1695, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1695, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1695, m9), 1);
		dcStructField(at, 'c', offsetof(union  A1695, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1695, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <llds> */
union  A1696 { l m0; l m1; d m2; s m3; };
void f_cpA1696(union  A1696 *x, const union  A1696 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1696(const union  A1696 *x, const union  A1696 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1696() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1696), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1696, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1696, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1696, m2), 1);
		dcStructField(at, 's', offsetof(union  A1696, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <i<llds>dc> */
union  A1697 { i m0; union  A1696 m1; d m2; c m3; };
void f_cpA1697(union  A1697 *x, const union  A1697 *y) { x->m0 = y->m0; f_cpA1696(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1697(const union  A1697 *x, const union  A1697 *y) { return x->m0 == y->m0 && f_cmpA1696(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1697() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1697), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1697, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1697, m1), 1, f_touchdcstA1696());
		dcStructField(at, 'd', offsetof(union  A1697, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1697, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f[2]j} */
struct A1698 { f m0[2]; j m1; };
void f_cpA1698(struct A1698 *x, const struct A1698 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m1 = y->m1; };
int f_cmpA1698(const struct A1698 *x, const struct A1698 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m1 == y->m1; };
DCstruct* f_touchdcstA1698() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1698), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1698, m0), 2);
		dcStructField(at, 'j', offsetof(struct A1698, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <d{f[2]j}> */
union  A1699 { d m0; struct A1698 m1; };
void f_cpA1699(union  A1699 *x, const union  A1699 *y) { x->m0 = y->m0; f_cpA1698(&x->m1, &y->m1); };
int f_cmpA1699(const union  A1699 *x, const union  A1699 *y) { return x->m0 == y->m0 && f_cmpA1698(&x->m1, &y->m1); };
DCstruct* f_touchdcstA1699() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1699), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1699, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1699, m1), 1, f_touchdcstA1698());
		dcCloseStruct(at);
	}
	return at;
};
/* <ljidpppcifff> */
union  A1700 { l m0; j m1; i m2; d m3; p m4; p m5; p m6; c m7; i m8; f m9; f m10; f m11; };
void f_cpA1700(union  A1700 *x, const union  A1700 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1700(const union  A1700 *x, const union  A1700 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1700() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1700), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1700, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1700, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1700, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1700, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1700, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1700, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1700, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1700, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1700, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1700, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1700, m10), 1);
		dcStructField(at, 'f', offsetof(union  A1700, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <id<ljidpppcifff>jip> */
union  A1701 { i m0; d m1; union  A1700 m2; j m3; i m4; p m5; };
void f_cpA1701(union  A1701 *x, const union  A1701 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1700(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1701(const union  A1701 *x, const union  A1701 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1700(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1701() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1701), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1701, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1701, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1701, m2), 1, f_touchdcstA1700());
		dcStructField(at, 'j', offsetof(union  A1701, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1701, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1701, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dcjp<i<llds>dc><d{f[2]j}>jsi<id<ljidpppcifff>jip>fi> */
union  A1702 { d m0; c m1; j m2; p m3; union  A1697 m4; union  A1699 m5; j m6; s m7; i m8; union  A1701 m9; f m10; i m11; };
void f_cpA1702(union  A1702 *x, const union  A1702 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1697(&x->m4, &y->m4); f_cpA1699(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1701(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1702(const union  A1702 *x, const union  A1702 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1697(&x->m4, &y->m4) && f_cmpA1699(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1701(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1702() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1702), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1702, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1702, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1702, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1702, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1702, m4), 1, f_touchdcstA1697());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1702, m5), 1, f_touchdcstA1699());
		dcStructField(at, 'j', offsetof(union  A1702, m6), 1);
		dcStructField(at, 's', offsetof(union  A1702, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1702, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1702, m9), 1, f_touchdcstA1701());
		dcStructField(at, 'f', offsetof(union  A1702, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1702, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <idllfc> */
union  A1703 { i m0; d m1; l m2; l m3; f m4; c m5; };
void f_cpA1703(union  A1703 *x, const union  A1703 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1703(const union  A1703 *x, const union  A1703 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1703() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1703), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1703, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1703, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1703, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1703, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1703, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1703, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ji<idllfc>sfpcsff{c}{p}} */
struct A1704 { j m0; i m1; union  A1703 m2; s m3; f m4; p m5; c m6; s m7; f m8; f m9; struct A212 m10; struct A33 m11; };
void f_cpA1704(struct A1704 *x, const struct A1704 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1703(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA212(&x->m10, &y->m10); f_cpA33(&x->m11, &y->m11); };
int f_cmpA1704(const struct A1704 *x, const struct A1704 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1703(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA212(&x->m10, &y->m10) && f_cmpA33(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1704() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1704), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1704, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1704, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1704, m2), 1, f_touchdcstA1703());
		dcStructField(at, 's', offsetof(struct A1704, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1704, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1704, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1704, m6), 1);
		dcStructField(at, 's', offsetof(struct A1704, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1704, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1704, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1704, m10), 1, f_touchdcstA212());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1704, m11), 1, f_touchdcstA33());
		dcCloseStruct(at);
	}
	return at;
};
/* {<dl>jc{ji<idllfc>sfpcsff{c}{p}}<f>pldi} */
struct A1705 { union  A474 m0; j m1; c m2; struct A1704 m3; union  A438 m4; p m5; l m6; d m7; i m8; };
void f_cpA1705(struct A1705 *x, const struct A1705 *y) { f_cpA474(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA1704(&x->m3, &y->m3); f_cpA438(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1705(const struct A1705 *x, const struct A1705 *y) { return f_cmpA474(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1704(&x->m3, &y->m3) && f_cmpA438(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1705() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1705), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1705, m0), 1, f_touchdcstA474());
		dcStructField(at, 'j', offsetof(struct A1705, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1705, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1705, m3), 1, f_touchdcstA1704());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1705, m4), 1, f_touchdcstA438());
		dcStructField(at, 'p', offsetof(struct A1705, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1705, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1705, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1705, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ccjf} */
struct A1706 { c m0; c m1; j m2; f m3; };
void f_cpA1706(struct A1706 *x, const struct A1706 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1706(const struct A1706 *x, const struct A1706 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1706() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1706), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1706, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1706, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1706, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1706, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dl[10]ifdi[14]i} */
struct A1707 { d m0; l m1[10]; i m2; f m3; d m4; i m5[14]; i m6; };
void f_cpA1707(struct A1707 *x, const struct A1707 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m5[11] = y->m5[11]; x->m5[12] = y->m5[12]; x->m5[13] = y->m5[13]; x->m6 = y->m6; };
int f_cmpA1707(const struct A1707 *x, const struct A1707 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m5[11] == y->m5[11] && x->m5[12] == y->m5[12] && x->m5[13] == y->m5[13] && x->m6 == y->m6; };
DCstruct* f_touchdcstA1707() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1707), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1707, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1707, m1), 10);
		dcStructField(at, 'i', offsetof(struct A1707, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1707, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1707, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1707, m5), 14);
		dcStructField(at, 'i', offsetof(struct A1707, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ldjjjpj<c>ii{ccjf}{dl[10]ifdi[14]i}> */
union  A1708 { l m0; d m1; j m2; j m3; j m4; p m5; j m6; union  A116 m7; i m8; i m9; struct A1706 m10; struct A1707 m11; };
void f_cpA1708(union  A1708 *x, const union  A1708 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA116(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; f_cpA1706(&x->m10, &y->m10); f_cpA1707(&x->m11, &y->m11); };
int f_cmpA1708(const union  A1708 *x, const union  A1708 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA116(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1706(&x->m10, &y->m10) && f_cmpA1707(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1708() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1708), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1708, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1708, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1708, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1708, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1708, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1708, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1708, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1708, m7), 1, f_touchdcstA116());
		dcStructField(at, 'i', offsetof(union  A1708, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1708, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1708, m10), 1, f_touchdcstA1706());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1708, m11), 1, f_touchdcstA1707());
		dcCloseStruct(at);
	}
	return at;
};
/* {lcdi<ldjjjpj<c>ii{ccjf}{dl[10]ifdi[14]i}>dd{if}ljfc} */
struct A1709 { l m0; c m1; d m2; i m3; union  A1708 m4; d m5; d m6; struct A556 m7; l m8; j m9; f m10; c m11; };
void f_cpA1709(struct A1709 *x, const struct A1709 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1708(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; f_cpA556(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1709(const struct A1709 *x, const struct A1709 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1708(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA556(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1709() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1709), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1709, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1709, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1709, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1709, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1709, m4), 1, f_touchdcstA1708());
		dcStructField(at, 'd', offsetof(struct A1709, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1709, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1709, m7), 1, f_touchdcstA556());
		dcStructField(at, 'l', offsetof(struct A1709, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1709, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1709, m10), 1);
		dcStructField(at, 'c', offsetof(struct A1709, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pid<i>> */
union  A1710 { p m0; i m1; d m2; union  A62 m3; };
void f_cpA1710(union  A1710 *x, const union  A1710 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA62(&x->m3, &y->m3); };
int f_cmpA1710(const union  A1710 *x, const union  A1710 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA62(&x->m3, &y->m3); };
DCstruct* f_touchdcstA1710() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1710), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1710, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1710, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1710, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1710, m3), 1, f_touchdcstA62());
		dcCloseStruct(at);
	}
	return at;
};
/* <pjllfdslf> */
union  A1711 { p m0; j m1; l m2; l m3; f m4; d m5; s m6; l m7; f m8; };
void f_cpA1711(union  A1711 *x, const union  A1711 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1711(const union  A1711 *x, const union  A1711 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1711() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1711), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1711, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1711, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1711, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1711, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1711, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1711, m5), 1);
		dcStructField(at, 's', offsetof(union  A1711, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1711, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1711, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {s<pjllfdslf>ci} */
struct A1712 { s m0; union  A1711 m1; c m2; i m3; };
void f_cpA1712(struct A1712 *x, const struct A1712 *y) { x->m0 = y->m0; f_cpA1711(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1712(const struct A1712 *x, const struct A1712 *y) { return x->m0 == y->m0 && f_cmpA1711(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1712() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1712), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1712, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1712, m1), 1, f_touchdcstA1711());
		dcStructField(at, 'c', offsetof(struct A1712, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1712, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <li{p}p<pid<i>>{s<pjllfdslf>ci}cdijjl> */
union  A1713 { l m0; i m1; struct A33 m2; p m3; union  A1710 m4; struct A1712 m5; c m6; d m7; i m8; j m9; j m10; l m11; };
void f_cpA1713(union  A1713 *x, const union  A1713 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA33(&x->m2, &y->m2); x->m3 = y->m3; f_cpA1710(&x->m4, &y->m4); f_cpA1712(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1713(const union  A1713 *x, const union  A1713 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA33(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA1710(&x->m4, &y->m4) && f_cmpA1712(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1713() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1713), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1713, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1713, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1713, m2), 1, f_touchdcstA33());
		dcStructField(at, 'p', offsetof(union  A1713, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1713, m4), 1, f_touchdcstA1710());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1713, m5), 1, f_touchdcstA1712());
		dcStructField(at, 'c', offsetof(union  A1713, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1713, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1713, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1713, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1713, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1713, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lscffpdfcdip> */
union  A1714 { l m0; s m1; c m2; f m3; f m4; p m5; d m6; f m7; c m8; d m9; i m10; p m11; };
void f_cpA1714(union  A1714 *x, const union  A1714 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1714(const union  A1714 *x, const union  A1714 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1714() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1714), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1714, m0), 1);
		dcStructField(at, 's', offsetof(union  A1714, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1714, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1714, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1714, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1714, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1714, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1714, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1714, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1714, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1714, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1714, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ffll<lscffpdfcdip><s>sdcdjc> */
union  A1715 { f m0; f m1; l m2; l m3; union  A1714 m4; union  A179 m5; s m6; d m7; c m8; d m9; j m10; c m11; };
void f_cpA1715(union  A1715 *x, const union  A1715 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1714(&x->m4, &y->m4); f_cpA179(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1715(const union  A1715 *x, const union  A1715 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1714(&x->m4, &y->m4) && f_cmpA179(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1715() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1715), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1715, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1715, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1715, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1715, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1715, m4), 1, f_touchdcstA1714());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1715, m5), 1, f_touchdcstA179());
		dcStructField(at, 's', offsetof(union  A1715, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1715, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1715, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1715, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1715, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1715, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ppdpciddddjl} */
struct A1716 { p m0; p m1; d m2; p m3; c m4; i m5; d m6; d m7; d m8; d m9; j m10; l m11; };
void f_cpA1716(struct A1716 *x, const struct A1716 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1716(const struct A1716 *x, const struct A1716 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1716() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1716), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1716, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1716, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1716, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1716, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1716, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1716, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1716, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1716, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1716, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1716, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1716, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1716, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <l<i><ic>c[8]{ppdpciddddjl}l> */
union  A1717 { l m0; union  A62 m1; union  A1085 m2; c m3[8]; struct A1716 m4; l m5; };
void f_cpA1717(union  A1717 *x, const union  A1717 *y) { x->m0 = y->m0; f_cpA62(&x->m1, &y->m1); f_cpA1085(&x->m2, &y->m2); x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; f_cpA1716(&x->m4, &y->m4); x->m5 = y->m5; };
int f_cmpA1717(const union  A1717 *x, const union  A1717 *y) { return x->m0 == y->m0 && f_cmpA62(&x->m1, &y->m1) && f_cmpA1085(&x->m2, &y->m2) && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && f_cmpA1716(&x->m4, &y->m4) && x->m5 == y->m5; };
DCstruct* f_touchdcstA1717() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1717), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1717, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1717, m1), 1, f_touchdcstA62());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1717, m2), 1, f_touchdcstA1085());
		dcStructField(at, 'c', offsetof(union  A1717, m3), 8);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1717, m4), 1, f_touchdcstA1716());
		dcStructField(at, 'l', offsetof(union  A1717, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jfljidsd[7]jp> */
union  A1718 { j m0; f m1; l m2; j m3; i m4; d m5; s m6; d m7[7]; j m8; p m9; };
void f_cpA1718(union  A1718 *x, const union  A1718 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m7[6] = y->m7[6]; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1718(const union  A1718 *x, const union  A1718 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m7[6] == y->m7[6] && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1718() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1718), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1718, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1718, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1718, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1718, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1718, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1718, m5), 1);
		dcStructField(at, 's', offsetof(union  A1718, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1718, m7), 7);
		dcStructField(at, 'j', offsetof(union  A1718, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1718, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<l<i><ic>c[8]{ppdpciddddjl}l>ldjcfjcp<jfljidsd[7]jp>i} */
struct A1719 { union  A1717 m0; l m1; d m2; j m3; c m4; f m5; j m6; c m7; p m8; union  A1718 m9; i m10; };
void f_cpA1719(struct A1719 *x, const struct A1719 *y) { f_cpA1717(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1718(&x->m9, &y->m9); x->m10 = y->m10; };
int f_cmpA1719(const struct A1719 *x, const struct A1719 *y) { return f_cmpA1717(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1718(&x->m9, &y->m9) && x->m10 == y->m10; };
DCstruct* f_touchdcstA1719() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1719), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1719, m0), 1, f_touchdcstA1717());
		dcStructField(at, 'l', offsetof(struct A1719, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1719, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1719, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1719, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1719, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1719, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1719, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1719, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1719, m9), 1, f_touchdcstA1718());
		dcStructField(at, 'i', offsetof(struct A1719, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pd[16]fffdpsffdp} */
struct A1720 { p m0; d m1[16]; f m2; f m3; f m4; d m5; p m6; s m7; f m8; f m9; d m10; p m11; };
void f_cpA1720(struct A1720 *x, const struct A1720 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m1[10] = y->m1[10]; x->m1[11] = y->m1[11]; x->m1[12] = y->m1[12]; x->m1[13] = y->m1[13]; x->m1[14] = y->m1[14]; x->m1[15] = y->m1[15]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1720(const struct A1720 *x, const struct A1720 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m1[10] == y->m1[10] && x->m1[11] == y->m1[11] && x->m1[12] == y->m1[12] && x->m1[13] == y->m1[13] && x->m1[14] == y->m1[14] && x->m1[15] == y->m1[15] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1720() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1720), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1720, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1720, m1), 16);
		dcStructField(at, 'f', offsetof(struct A1720, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1720, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1720, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1720, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1720, m6), 1);
		dcStructField(at, 's', offsetof(struct A1720, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1720, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1720, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1720, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1720, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fcifdcsds[3]{pd[16]fffdpsffdp}jp} */
struct A1721 { f m0; c m1; i m2; f m3; d m4; c m5; s m6; d m7; s m8[3]; struct A1720 m9; j m10; p m11; };
void f_cpA1721(struct A1721 *x, const struct A1721 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; f_cpA1720(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1721(const struct A1721 *x, const struct A1721 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && f_cmpA1720(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1721() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1721), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1721, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1721, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1721, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1721, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1721, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1721, m5), 1);
		dcStructField(at, 's', offsetof(struct A1721, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1721, m7), 1);
		dcStructField(at, 's', offsetof(struct A1721, m8), 3);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1721, m9), 1, f_touchdcstA1720());
		dcStructField(at, 'j', offsetof(struct A1721, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1721, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lfdjcsf} */
struct A1722 { l m0; f m1; d m2; j m3; c m4; s m5; f m6; };
void f_cpA1722(struct A1722 *x, const struct A1722 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1722(const struct A1722 *x, const struct A1722 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1722() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1722), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1722, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1722, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1722, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1722, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1722, m4), 1);
		dcStructField(at, 's', offsetof(struct A1722, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1722, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sjid[4]} */
struct A1723 { s m0; j m1; i m2; d m3[4]; };
void f_cpA1723(struct A1723 *x, const struct A1723 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; };
int f_cmpA1723(const struct A1723 *x, const struct A1723 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3]; };
DCstruct* f_touchdcstA1723() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1723), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1723, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1723, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1723, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1723, m3), 4);
		dcCloseStruct(at);
	}
	return at;
};
/* <jfjpijdlspcj> */
union  A1724 { j m0; f m1; j m2; p m3; i m4; j m5; d m6; l m7; s m8; p m9; c m10; j m11; };
void f_cpA1724(union  A1724 *x, const union  A1724 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1724(const union  A1724 *x, const union  A1724 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1724() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1724), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1724, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1724, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1724, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1724, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1724, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1724, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1724, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1724, m7), 1);
		dcStructField(at, 's', offsetof(union  A1724, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1724, m9), 1);
		dcStructField(at, 'c', offsetof(union  A1724, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1724, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cci> */
union  A1725 { c m0; c m1; i m2; };
void f_cpA1725(union  A1725 *x, const union  A1725 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1725(const union  A1725 *x, const union  A1725 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1725() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1725), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1725, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1725, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1725, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ipl} */
struct A1726 { i m0; p m1; l m2; };
void f_cpA1726(struct A1726 *x, const struct A1726 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1726(const struct A1726 *x, const struct A1726 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1726() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1726), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1726, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1726, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1726, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {f{sjid[4]}c<jfjpijdlspcj>jf[2]l<cci>dj{ipl}d} */
struct A1727 { f m0; struct A1723 m1; c m2; union  A1724 m3; j m4; f m5[2]; l m6; union  A1725 m7; d m8; j m9; struct A1726 m10; d m11; };
void f_cpA1727(struct A1727 *x, const struct A1727 *y) { x->m0 = y->m0; f_cpA1723(&x->m1, &y->m1); x->m2 = y->m2; f_cpA1724(&x->m3, &y->m3); x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m6 = y->m6; f_cpA1725(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; f_cpA1726(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1727(const struct A1727 *x, const struct A1727 *y) { return x->m0 == y->m0 && f_cmpA1723(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA1724(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m6 == y->m6 && f_cmpA1725(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1726(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1727() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1727), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1727, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1727, m1), 1, f_touchdcstA1723());
		dcStructField(at, 'c', offsetof(struct A1727, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1727, m3), 1, f_touchdcstA1724());
		dcStructField(at, 'j', offsetof(struct A1727, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1727, m5), 2);
		dcStructField(at, 'l', offsetof(struct A1727, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1727, m7), 1, f_touchdcstA1725());
		dcStructField(at, 'd', offsetof(struct A1727, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1727, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1727, m10), 1, f_touchdcstA1726());
		dcStructField(at, 'd', offsetof(struct A1727, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpsiss> */
union  A1728 { c m0; p m1; s m2; i m3; s m4; s m5; };
void f_cpA1728(union  A1728 *x, const union  A1728 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1728(const union  A1728 *x, const union  A1728 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1728() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1728), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1728, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1728, m1), 1);
		dcStructField(at, 's', offsetof(union  A1728, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1728, m3), 1);
		dcStructField(at, 's', offsetof(union  A1728, m4), 1);
		dcStructField(at, 's', offsetof(union  A1728, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lipccjsdfij> */
union  A1729 { l m0; i m1; p m2; c m3; c m4; j m5; s m6; d m7; f m8; i m9; j m10; };
void f_cpA1729(union  A1729 *x, const union  A1729 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1729(const union  A1729 *x, const union  A1729 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1729() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1729), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1729, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1729, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1729, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1729, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1729, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1729, m5), 1);
		dcStructField(at, 's', offsetof(union  A1729, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1729, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1729, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1729, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1729, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jipplf> */
union  A1730 { j m0; i m1; p m2; p m3; l m4; f m5; };
void f_cpA1730(union  A1730 *x, const union  A1730 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1730(const union  A1730 *x, const union  A1730 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1730() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1730), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1730, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1730, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1730, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1730, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1730, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1730, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<lipccjsdfij>fcf<jipplf>sifi} */
struct A1731 { union  A1729 m0; f m1; c m2; f m3; union  A1730 m4; s m5; i m6; f m7; i m8; };
void f_cpA1731(struct A1731 *x, const struct A1731 *y) { f_cpA1729(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1730(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1731(const struct A1731 *x, const struct A1731 *y) { return f_cmpA1729(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1730(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1731() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1731), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1731, m0), 1, f_touchdcstA1729());
		dcStructField(at, 'f', offsetof(struct A1731, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1731, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1731, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1731, m4), 1, f_touchdcstA1730());
		dcStructField(at, 's', offsetof(struct A1731, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1731, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1731, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1731, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dpsid> */
union  A1732 { d m0; p m1; s m2; i m3; d m4; };
void f_cpA1732(union  A1732 *x, const union  A1732 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1732(const union  A1732 *x, const union  A1732 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1732() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1732), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1732, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1732, m1), 1);
		dcStructField(at, 's', offsetof(union  A1732, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1732, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1732, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<dpsid>ipc> */
union  A1733 { union  A1732 m0; i m1; p m2; c m3; };
void f_cpA1733(union  A1733 *x, const union  A1733 *y) { f_cpA1732(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1733(const union  A1733 *x, const union  A1733 *y) { return f_cmpA1732(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1733() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1733), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1733, m0), 1, f_touchdcstA1732());
		dcStructField(at, 'i', offsetof(union  A1733, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1733, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1733, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djlpi} */
struct A1734 { d m0; j m1; l m2; p m3; i m4; };
void f_cpA1734(struct A1734 *x, const struct A1734 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1734(const struct A1734 *x, const struct A1734 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1734() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1734), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1734, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1734, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1734, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1734, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1734, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fsilccp[12]sdf[13]jc> */
union  A1735 { f m0; s m1; i m2; l m3; c m4; c m5; p m6[12]; s m7; d m8; f m9[13]; j m10; c m11; };
void f_cpA1735(union  A1735 *x, const union  A1735 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m6[11] = y->m6[11]; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m9[8] = y->m9[8]; x->m9[9] = y->m9[9]; x->m9[10] = y->m9[10]; x->m9[11] = y->m9[11]; x->m9[12] = y->m9[12]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1735(const union  A1735 *x, const union  A1735 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m6[11] == y->m6[11] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m9[8] == y->m9[8] && x->m9[9] == y->m9[9] && x->m9[10] == y->m9[10] && x->m9[11] == y->m9[11] && x->m9[12] == y->m9[12] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1735() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1735), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1735, m0), 1);
		dcStructField(at, 's', offsetof(union  A1735, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1735, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1735, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1735, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1735, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1735, m6), 12);
		dcStructField(at, 's', offsetof(union  A1735, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1735, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1735, m9), 13);
		dcStructField(at, 'j', offsetof(union  A1735, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1735, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cpfd} */
struct A1736 { c m0; p m1; f m2; d m3; };
void f_cpA1736(struct A1736 *x, const struct A1736 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1736(const struct A1736 *x, const struct A1736 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1736() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1736), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1736, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1736, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1736, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1736, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <j{cpfd}> */
union  A1737 { j m0; struct A1736 m1; };
void f_cpA1737(union  A1737 *x, const union  A1737 *y) { x->m0 = y->m0; f_cpA1736(&x->m1, &y->m1); };
int f_cmpA1737(const union  A1737 *x, const union  A1737 *y) { return x->m0 == y->m0 && f_cmpA1736(&x->m1, &y->m1); };
DCstruct* f_touchdcstA1737() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1737), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1737, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1737, m1), 1, f_touchdcstA1736());
		dcCloseStruct(at);
	}
	return at;
};
/* <ffpiji[16]pfcppc> */
union  A1738 { f m0; f m1; p m2; i m3; j m4; i m5[16]; p m6; f m7; c m8; p m9; p m10; c m11; };
void f_cpA1738(union  A1738 *x, const union  A1738 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m5[11] = y->m5[11]; x->m5[12] = y->m5[12]; x->m5[13] = y->m5[13]; x->m5[14] = y->m5[14]; x->m5[15] = y->m5[15]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1738(const union  A1738 *x, const union  A1738 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m5[11] == y->m5[11] && x->m5[12] == y->m5[12] && x->m5[13] == y->m5[13] && x->m5[14] == y->m5[14] && x->m5[15] == y->m5[15] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1738() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1738), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1738, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1738, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1738, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1738, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1738, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1738, m5), 16);
		dcStructField(at, 'p', offsetof(union  A1738, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1738, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1738, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1738, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1738, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1738, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jdl<s>pps<ffpiji[16]pfcppc>ijdj} */
struct A1739 { j m0; d m1; l m2; union  A179 m3; p m4; p m5; s m6; union  A1738 m7; i m8; j m9; d m10; j m11; };
void f_cpA1739(struct A1739 *x, const struct A1739 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA179(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1738(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1739(const struct A1739 *x, const struct A1739 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA179(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1738(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1739() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1739), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1739, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1739, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1739, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1739, m3), 1, f_touchdcstA179());
		dcStructField(at, 'p', offsetof(struct A1739, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1739, m5), 1);
		dcStructField(at, 's', offsetof(struct A1739, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1739, m7), 1, f_touchdcstA1738());
		dcStructField(at, 'i', offsetof(struct A1739, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1739, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1739, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1739, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ccijl> */
union  A1740 { c m0; c m1; i m2; j m3; l m4; };
void f_cpA1740(union  A1740 *x, const union  A1740 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1740(const union  A1740 *x, const union  A1740 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1740() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1740), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1740, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1740, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1740, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1740, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1740, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jjcscisi> */
union  A1741 { j m0; j m1; c m2; s m3; c m4; i m5; s m6; i m7; };
void f_cpA1741(union  A1741 *x, const union  A1741 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1741(const union  A1741 *x, const union  A1741 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1741() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1741), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1741, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1741, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1741, m2), 1);
		dcStructField(at, 's', offsetof(union  A1741, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1741, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1741, m5), 1);
		dcStructField(at, 's', offsetof(union  A1741, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1741, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {c<jjcscisi>} */
struct A1742 { c m0; union  A1741 m1; };
void f_cpA1742(struct A1742 *x, const struct A1742 *y) { x->m0 = y->m0; f_cpA1741(&x->m1, &y->m1); };
int f_cmpA1742(const struct A1742 *x, const struct A1742 *y) { return x->m0 == y->m0 && f_cmpA1741(&x->m1, &y->m1); };
DCstruct* f_touchdcstA1742() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1742), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1742, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1742, m1), 1, f_touchdcstA1741());
		dcCloseStruct(at);
	}
	return at;
};
/* <{d}clfpjpclcdi> */
union  A1743 { struct A47 m0; c m1; l m2; f m3; p m4; j m5; p m6; c m7; l m8; c m9; d m10; i m11; };
void f_cpA1743(union  A1743 *x, const union  A1743 *y) { f_cpA47(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1743(const union  A1743 *x, const union  A1743 *y) { return f_cmpA47(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1743() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1743), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1743, m0), 1, f_touchdcstA47());
		dcStructField(at, 'c', offsetof(union  A1743, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1743, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1743, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1743, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1743, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1743, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1743, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1743, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1743, m9), 1);
		dcStructField(at, 'd', offsetof(union  A1743, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1743, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fpjilpss> */
union  A1744 { f m0; p m1; j m2; i m3; l m4; p m5; s m6; s m7; };
void f_cpA1744(union  A1744 *x, const union  A1744 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1744(const union  A1744 *x, const union  A1744 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1744() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1744), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1744, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1744, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1744, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1744, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1744, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1744, m5), 1);
		dcStructField(at, 's', offsetof(union  A1744, m6), 1);
		dcStructField(at, 's', offsetof(union  A1744, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<d>ff<fpjilpss>s> */
union  A1745 { union  A317 m0; f m1; f m2; union  A1744 m3; s m4; };
void f_cpA1745(union  A1745 *x, const union  A1745 *y) { f_cpA317(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA1744(&x->m3, &y->m3); x->m4 = y->m4; };
int f_cmpA1745(const union  A1745 *x, const union  A1745 *y) { return f_cmpA317(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1744(&x->m3, &y->m3) && x->m4 == y->m4; };
DCstruct* f_touchdcstA1745() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1745), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1745, m0), 1, f_touchdcstA317());
		dcStructField(at, 'f', offsetof(union  A1745, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1745, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1745, m3), 1, f_touchdcstA1744());
		dcStructField(at, 's', offsetof(union  A1745, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <s<<d>ff<fpjilpss>s>clfdi> */
union  A1746 { s m0; union  A1745 m1; c m2; l m3; f m4; d m5; i m6; };
void f_cpA1746(union  A1746 *x, const union  A1746 *y) { x->m0 = y->m0; f_cpA1745(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1746(const union  A1746 *x, const union  A1746 *y) { return x->m0 == y->m0 && f_cmpA1745(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1746() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1746), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1746, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1746, m1), 1, f_touchdcstA1745());
		dcStructField(at, 'c', offsetof(union  A1746, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1746, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1746, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1746, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1746, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fldpsjcj> */
union  A1747 { f m0; l m1; d m2; p m3; s m4; j m5; c m6; j m7; };
void f_cpA1747(union  A1747 *x, const union  A1747 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1747(const union  A1747 *x, const union  A1747 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1747() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1747), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1747, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1747, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1747, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1747, m3), 1);
		dcStructField(at, 's', offsetof(union  A1747, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1747, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1747, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1747, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<fldpsjcj>l> */
union  A1748 { union  A1747 m0; l m1; };
void f_cpA1748(union  A1748 *x, const union  A1748 *y) { f_cpA1747(&x->m0, &y->m0); x->m1 = y->m1; };
int f_cmpA1748(const union  A1748 *x, const union  A1748 *y) { return f_cmpA1747(&x->m0, &y->m0) && x->m1 == y->m1; };
DCstruct* f_touchdcstA1748() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1748), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1748, m0), 1, f_touchdcstA1747());
		dcStructField(at, 'l', offsetof(union  A1748, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fcdjjll> */
union  A1749 { f m0; c m1; d m2; j m3; j m4; l m5; l m6; };
void f_cpA1749(union  A1749 *x, const union  A1749 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1749(const union  A1749 *x, const union  A1749 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1749() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1749), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1749, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1749, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1749, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1749, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1749, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1749, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1749, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pfjcdfdcd[2]> */
union  A1750 { p m0; f m1; j m2; c m3; d m4; f m5; d m6; c m7; d m8[2]; };
void f_cpA1750(union  A1750 *x, const union  A1750 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; };
int f_cmpA1750(const union  A1750 *x, const union  A1750 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1]; };
DCstruct* f_touchdcstA1750() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1750), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1750, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1750, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1750, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1750, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1750, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1750, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1750, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1750, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1750, m8), 2);
		dcCloseStruct(at);
	}
	return at;
};
/* {<pfjcdfdcd[2]>cl} */
struct A1751 { union  A1750 m0; c m1; l m2; };
void f_cpA1751(struct A1751 *x, const struct A1751 *y) { f_cpA1750(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1751(const struct A1751 *x, const struct A1751 *y) { return f_cmpA1750(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1751() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1751), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1751, m0), 1, f_touchdcstA1750());
		dcStructField(at, 'c', offsetof(struct A1751, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1751, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fccpjsscljsf> */
union  A1752 { f m0; c m1; c m2; p m3; j m4; s m5; s m6; c m7; l m8; j m9; s m10; f m11; };
void f_cpA1752(union  A1752 *x, const union  A1752 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1752(const union  A1752 *x, const union  A1752 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1752() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1752), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1752, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1752, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1752, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1752, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1752, m4), 1);
		dcStructField(at, 's', offsetof(union  A1752, m5), 1);
		dcStructField(at, 's', offsetof(union  A1752, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1752, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1752, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1752, m9), 1);
		dcStructField(at, 's', offsetof(union  A1752, m10), 1);
		dcStructField(at, 'f', offsetof(union  A1752, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <j[14]c> */
union  A1753 { j m0[14]; c m1; };
void f_cpA1753(union  A1753 *x, const union  A1753 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m0[12] = y->m0[12]; x->m0[13] = y->m0[13]; x->m1 = y->m1; };
int f_cmpA1753(const union  A1753 *x, const union  A1753 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m0[12] == y->m0[12] && x->m0[13] == y->m0[13] && x->m1 == y->m1; };
DCstruct* f_touchdcstA1753() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1753), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1753, m0), 14);
		dcStructField(at, 'c', offsetof(union  A1753, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jcssfcll> */
union  A1754 { j m0; c m1; s m2; s m3; f m4; c m5; l m6; l m7; };
void f_cpA1754(union  A1754 *x, const union  A1754 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1754(const union  A1754 *x, const union  A1754 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1754() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1754), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1754, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1754, m1), 1);
		dcStructField(at, 's', offsetof(union  A1754, m2), 1);
		dcStructField(at, 's', offsetof(union  A1754, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1754, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1754, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1754, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1754, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <djls> */
union  A1755 { d m0; j m1; l m2; s m3; };
void f_cpA1755(union  A1755 *x, const union  A1755 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1755(const union  A1755 *x, const union  A1755 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1755() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1755), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1755, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1755, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1755, m2), 1);
		dcStructField(at, 's', offsetof(union  A1755, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fdci} */
struct A1756 { f m0; d m1; c m2; i m3; };
void f_cpA1756(struct A1756 *x, const struct A1756 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1756(const struct A1756 *x, const struct A1756 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1756() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1756), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1756, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1756, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1756, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1756, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jfjl> */
union  A1757 { j m0; f m1; j m2; l m3; };
void f_cpA1757(union  A1757 *x, const union  A1757 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1757(const union  A1757 *x, const union  A1757 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1757() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1757), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1757, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1757, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1757, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1757, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<jfjl>> */
union  A1758 { union  A1757 m0; };
void f_cpA1758(union  A1758 *x, const union  A1758 *y) { f_cpA1757(&x->m0, &y->m0); };
int f_cmpA1758(const union  A1758 *x, const union  A1758 *y) { return f_cmpA1757(&x->m0, &y->m0); };
DCstruct* f_touchdcstA1758() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A1758), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1758, m0), 1, f_touchdcstA1757());
		dcCloseStruct(at);
	}
	return at;
};
/* {lcsjsilsfsdl} */
struct A1759 { l m0; c m1; s m2; j m3; s m4; i m5; l m6; s m7; f m8; s m9; d m10; l m11; };
void f_cpA1759(struct A1759 *x, const struct A1759 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1759(const struct A1759 *x, const struct A1759 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1759() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1759), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1759, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1759, m1), 1);
		dcStructField(at, 's', offsetof(struct A1759, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1759, m3), 1);
		dcStructField(at, 's', offsetof(struct A1759, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1759, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1759, m6), 1);
		dcStructField(at, 's', offsetof(struct A1759, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1759, m8), 1);
		dcStructField(at, 's', offsetof(struct A1759, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1759, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1759, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ill} */
struct A1760 { i m0; l m1; l m2; };
void f_cpA1760(struct A1760 *x, const struct A1760 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1760(const struct A1760 *x, const struct A1760 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1760() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1760), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1760, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1760, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1760, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jd{lcsjsilsfsdl}dclll{ill}if<sj>> */
union  A1761 { j m0; d m1; struct A1759 m2; d m3; c m4; l m5; l m6; l m7; struct A1760 m8; i m9; f m10; union  A923 m11; };
void f_cpA1761(union  A1761 *x, const union  A1761 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1759(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1760(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; f_cpA923(&x->m11, &y->m11); };
int f_cmpA1761(const union  A1761 *x, const union  A1761 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1759(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1760(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA923(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1761() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1761), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1761, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1761, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1761, m2), 1, f_touchdcstA1759());
		dcStructField(at, 'd', offsetof(union  A1761, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1761, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1761, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1761, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1761, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1761, m8), 1, f_touchdcstA1760());
		dcStructField(at, 'i', offsetof(union  A1761, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1761, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1761, m11), 1, f_touchdcstA923());
		dcCloseStruct(at);
	}
	return at;
};
/* <lcd<jd{lcsjsilsfsdl}dclll{ill}if<sj>>ccddip> */
union  A1762 { l m0; c m1; d m2; union  A1761 m3; c m4; c m5; d m6; d m7; i m8; p m9; };
void f_cpA1762(union  A1762 *x, const union  A1762 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1761(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1762(const union  A1762 *x, const union  A1762 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1761(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1762() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1762), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1762, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1762, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1762, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1762, m3), 1, f_touchdcstA1761());
		dcStructField(at, 'c', offsetof(union  A1762, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1762, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1762, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1762, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1762, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1762, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <isj> */
union  A1763 { i m0; s m1; j m2; };
void f_cpA1763(union  A1763 *x, const union  A1763 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1763(const union  A1763 *x, const union  A1763 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1763() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1763), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1763, m0), 1);
		dcStructField(at, 's', offsetof(union  A1763, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1763, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {silpssili<isj>} */
struct A1764 { s m0; i m1; l m2; p m3; s m4; s m5; i m6; l m7; i m8; union  A1763 m9; };
void f_cpA1764(struct A1764 *x, const struct A1764 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1763(&x->m9, &y->m9); };
int f_cmpA1764(const struct A1764 *x, const struct A1764 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1763(&x->m9, &y->m9); };
DCstruct* f_touchdcstA1764() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1764), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1764, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1764, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1764, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1764, m3), 1);
		dcStructField(at, 's', offsetof(struct A1764, m4), 1);
		dcStructField(at, 's', offsetof(struct A1764, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1764, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1764, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1764, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1764, m9), 1, f_touchdcstA1763());
		dcCloseStruct(at);
	}
	return at;
};
/* <dfjsdd> */
union  A1765 { d m0; f m1; j m2; s m3; d m4; d m5; };
void f_cpA1765(union  A1765 *x, const union  A1765 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1765(const union  A1765 *x, const union  A1765 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1765() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1765), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1765, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1765, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1765, m2), 1);
		dcStructField(at, 's', offsetof(union  A1765, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1765, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1765, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ps> */
union  A1766 { p m0; s m1; };
void f_cpA1766(union  A1766 *x, const union  A1766 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1766(const union  A1766 *x, const union  A1766 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1766() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1766), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1766, m0), 1);
		dcStructField(at, 's', offsetof(union  A1766, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<ps>pifl[15]si> */
union  A1767 { union  A1766 m0; p m1; i m2; f m3; l m4[15]; s m5; i m6; };
void f_cpA1767(union  A1767 *x, const union  A1767 *y) { f_cpA1766(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m4[12] = y->m4[12]; x->m4[13] = y->m4[13]; x->m4[14] = y->m4[14]; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1767(const union  A1767 *x, const union  A1767 *y) { return f_cmpA1766(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m4[12] == y->m4[12] && x->m4[13] == y->m4[13] && x->m4[14] == y->m4[14] && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1767() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1767), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1767, m0), 1, f_touchdcstA1766());
		dcStructField(at, 'p', offsetof(union  A1767, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1767, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1767, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1767, m4), 15);
		dcStructField(at, 's', offsetof(union  A1767, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1767, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jcccfsildjdd} */
struct A1768 { j m0; c m1; c m2; c m3; f m4; s m5; i m6; l m7; d m8; j m9; d m10; d m11; };
void f_cpA1768(struct A1768 *x, const struct A1768 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1768(const struct A1768 *x, const struct A1768 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1768() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1768), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1768, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1768, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1768, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1768, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1768, m4), 1);
		dcStructField(at, 's', offsetof(struct A1768, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1768, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1768, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1768, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1768, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1768, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1768, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ppspsfjlfpip> */
union  A1769 { p m0; p m1; s m2; p m3; s m4; f m5; j m6; l m7; f m8; p m9; i m10; p m11; };
void f_cpA1769(union  A1769 *x, const union  A1769 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1769(const union  A1769 *x, const union  A1769 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1769() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1769), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1769, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1769, m1), 1);
		dcStructField(at, 's', offsetof(union  A1769, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1769, m3), 1);
		dcStructField(at, 's', offsetof(union  A1769, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1769, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1769, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1769, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1769, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1769, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1769, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1769, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djlfjpldfi[2]jj} */
struct A1770 { d m0; j m1; l m2; f m3; j m4; p m5; l m6; d m7; f m8; i m9[2]; j m10; j m11; };
void f_cpA1770(struct A1770 *x, const struct A1770 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1770(const struct A1770 *x, const struct A1770 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1770() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1770), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1770, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1770, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1770, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1770, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1770, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1770, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1770, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1770, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1770, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1770, m9), 2);
		dcStructField(at, 'j', offsetof(struct A1770, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1770, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ipcsccdfljcj> */
union  A1771 { i m0; p m1; c m2; s m3; c m4; c m5; d m6; f m7; l m8; j m9; c m10; j m11; };
void f_cpA1771(union  A1771 *x, const union  A1771 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1771(const union  A1771 *x, const union  A1771 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1771() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1771), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1771, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1771, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1771, m2), 1);
		dcStructField(at, 's', offsetof(union  A1771, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1771, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1771, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1771, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1771, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1771, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1771, m9), 1);
		dcStructField(at, 'c', offsetof(union  A1771, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1771, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ijcisf} */
struct A1772 { i m0; j m1; c m2; i m3; s m4; f m5; };
void f_cpA1772(struct A1772 *x, const struct A1772 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1772(const struct A1772 *x, const struct A1772 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1772() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1772), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1772, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1772, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1772, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1772, m3), 1);
		dcStructField(at, 's', offsetof(struct A1772, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1772, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pi<ipcsccdfljcj>siidfclp{ijcisf}> */
union  A1773 { p m0; i m1; union  A1771 m2; s m3; i m4; i m5; d m6; f m7; c m8; l m9; p m10; struct A1772 m11; };
void f_cpA1773(union  A1773 *x, const union  A1773 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1771(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1772(&x->m11, &y->m11); };
int f_cmpA1773(const union  A1773 *x, const union  A1773 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1771(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1772(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1773() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1773), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1773, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1773, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1773, m2), 1, f_touchdcstA1771());
		dcStructField(at, 's', offsetof(union  A1773, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1773, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1773, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1773, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1773, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1773, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1773, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1773, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1773, m11), 1, f_touchdcstA1772());
		dcCloseStruct(at);
	}
	return at;
};
/* {dss<c>{si}{djlfjpldfi[2]jj}si<pi<ipcsccdfljcj>siidfclp{ijcisf}>cjl} */
struct A1774 { d m0; s m1; s m2; union  A116 m3; struct A1616 m4; struct A1770 m5; s m6; i m7; union  A1773 m8; c m9; j m10; l m11; };
void f_cpA1774(struct A1774 *x, const struct A1774 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA116(&x->m3, &y->m3); f_cpA1616(&x->m4, &y->m4); f_cpA1770(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; f_cpA1773(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1774(const struct A1774 *x, const struct A1774 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA116(&x->m3, &y->m3) && f_cmpA1616(&x->m4, &y->m4) && f_cmpA1770(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1773(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1774() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1774), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1774, m0), 1);
		dcStructField(at, 's', offsetof(struct A1774, m1), 1);
		dcStructField(at, 's', offsetof(struct A1774, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1774, m3), 1, f_touchdcstA116());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1774, m4), 1, f_touchdcstA1616());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1774, m5), 1, f_touchdcstA1770());
		dcStructField(at, 's', offsetof(struct A1774, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1774, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1774, m8), 1, f_touchdcstA1773());
		dcStructField(at, 'c', offsetof(struct A1774, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1774, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1774, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pj> */
union  A1775 { p m0; j m1; };
void f_cpA1775(union  A1775 *x, const union  A1775 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1775(const union  A1775 *x, const union  A1775 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1775() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1775), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1775, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1775, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fcpljf} */
struct A1776 { f m0; c m1; p m2; l m3; j m4; f m5; };
void f_cpA1776(struct A1776 *x, const struct A1776 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1776(const struct A1776 *x, const struct A1776 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1776() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1776), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1776, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1776, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1776, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1776, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1776, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1776, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cjis} */
struct A1777 { c m0; j m1; i m2; s m3; };
void f_cpA1777(struct A1777 *x, const struct A1777 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1777(const struct A1777 *x, const struct A1777 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1777() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1777), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1777, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1777, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1777, m2), 1);
		dcStructField(at, 's', offsetof(struct A1777, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {didcs[14]i[2]jisp} */
struct A1778 { d m0; i m1; d m2; c m3; s m4[14]; i m5[2]; j m6; i m7; s m8; p m9; };
void f_cpA1778(struct A1778 *x, const struct A1778 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m4[12] = y->m4[12]; x->m4[13] = y->m4[13]; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1778(const struct A1778 *x, const struct A1778 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m4[12] == y->m4[12] && x->m4[13] == y->m4[13] && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1778() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1778), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1778, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1778, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1778, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1778, m3), 1);
		dcStructField(at, 's', offsetof(struct A1778, m4), 14);
		dcStructField(at, 'i', offsetof(struct A1778, m5), 2);
		dcStructField(at, 'j', offsetof(struct A1778, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1778, m7), 1);
		dcStructField(at, 's', offsetof(struct A1778, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1778, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <icjjlffjjl[15]id> */
union  A1779 { i m0; c m1; j m2; j m3; l m4; f m5; f m6; j m7; j m8; l m9[15]; i m10; d m11; };
void f_cpA1779(union  A1779 *x, const union  A1779 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m9[4] = y->m9[4]; x->m9[5] = y->m9[5]; x->m9[6] = y->m9[6]; x->m9[7] = y->m9[7]; x->m9[8] = y->m9[8]; x->m9[9] = y->m9[9]; x->m9[10] = y->m9[10]; x->m9[11] = y->m9[11]; x->m9[12] = y->m9[12]; x->m9[13] = y->m9[13]; x->m9[14] = y->m9[14]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1779(const union  A1779 *x, const union  A1779 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m9[4] == y->m9[4] && x->m9[5] == y->m9[5] && x->m9[6] == y->m9[6] && x->m9[7] == y->m9[7] && x->m9[8] == y->m9[8] && x->m9[9] == y->m9[9] && x->m9[10] == y->m9[10] && x->m9[11] == y->m9[11] && x->m9[12] == y->m9[12] && x->m9[13] == y->m9[13] && x->m9[14] == y->m9[14] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1779() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1779), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1779, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1779, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1779, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1779, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1779, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1779, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1779, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1779, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1779, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1779, m9), 15);
		dcStructField(at, 'i', offsetof(union  A1779, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1779, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dplpfpjsiijp> */
union  A1780 { d m0; p m1; l m2; p m3; f m4; p m5; j m6; s m7; i m8; i m9; j m10; p m11; };
void f_cpA1780(union  A1780 *x, const union  A1780 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1780(const union  A1780 *x, const union  A1780 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1780() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1780), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1780, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1780, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1780, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1780, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1780, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1780, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1780, m6), 1);
		dcStructField(at, 's', offsetof(union  A1780, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1780, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1780, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1780, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1780, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{didcs[14]i[2]jisp}pfj<icjjlffjjl[15]id>{j}d<dplpfpjsiijp>c> */
union  A1781 { struct A1778 m0; p m1; f m2; j m3; union  A1779 m4; struct A117 m5; d m6; union  A1780 m7; c m8; };
void f_cpA1781(union  A1781 *x, const union  A1781 *y) { f_cpA1778(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1779(&x->m4, &y->m4); f_cpA117(&x->m5, &y->m5); x->m6 = y->m6; f_cpA1780(&x->m7, &y->m7); x->m8 = y->m8; };
int f_cmpA1781(const union  A1781 *x, const union  A1781 *y) { return f_cmpA1778(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1779(&x->m4, &y->m4) && f_cmpA117(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA1780(&x->m7, &y->m7) && x->m8 == y->m8; };
DCstruct* f_touchdcstA1781() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1781), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1781, m0), 1, f_touchdcstA1778());
		dcStructField(at, 'p', offsetof(union  A1781, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1781, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1781, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1781, m4), 1, f_touchdcstA1779());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1781, m5), 1, f_touchdcstA117());
		dcStructField(at, 'd', offsetof(union  A1781, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1781, m7), 1, f_touchdcstA1780());
		dcStructField(at, 'c', offsetof(union  A1781, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<{didcs[14]i[2]jisp}pfj<icjjlffjjl[15]id>{j}d<dplpfpjsiijp>c>jf} */
struct A1782 { union  A1781 m0; j m1; f m2; };
void f_cpA1782(struct A1782 *x, const struct A1782 *y) { f_cpA1781(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1782(const struct A1782 *x, const struct A1782 *y) { return f_cmpA1781(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1782() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1782), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1782, m0), 1, f_touchdcstA1781());
		dcStructField(at, 'j', offsetof(struct A1782, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1782, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dcppsp[12]jdffjl> */
union  A1783 { d m0; c m1; p m2; p m3; s m4; p m5[12]; j m6; d m7; f m8; f m9; j m10; l m11; };
void f_cpA1783(union  A1783 *x, const union  A1783 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m5[11] = y->m5[11]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1783(const union  A1783 *x, const union  A1783 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m5[11] == y->m5[11] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1783() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1783), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1783, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1783, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1783, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1783, m3), 1);
		dcStructField(at, 's', offsetof(union  A1783, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1783, m5), 12);
		dcStructField(at, 'j', offsetof(union  A1783, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1783, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1783, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1783, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1783, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1783, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lcsfi<dcppsp[12]jdffjl>iijpcd} */
struct A1784 { l m0; c m1; s m2; f m3; i m4; union  A1783 m5; i m6; i m7; j m8; p m9; c m10; d m11; };
void f_cpA1784(struct A1784 *x, const struct A1784 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1783(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1784(const struct A1784 *x, const struct A1784 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1783(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1784() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1784), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1784, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1784, m1), 1);
		dcStructField(at, 's', offsetof(struct A1784, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1784, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1784, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1784, m5), 1, f_touchdcstA1783());
		dcStructField(at, 'i', offsetof(struct A1784, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1784, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1784, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1784, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1784, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1784, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fl> */
union  A1785 { f m0; l m1; };
void f_cpA1785(union  A1785 *x, const union  A1785 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1785(const union  A1785 *x, const union  A1785 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1785() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1785), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1785, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1785, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dipdijd> */
union  A1786 { d m0; i m1; p m2; d m3; i m4; j m5; d m6; };
void f_cpA1786(union  A1786 *x, const union  A1786 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1786(const union  A1786 *x, const union  A1786 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1786() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1786), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1786, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1786, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1786, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1786, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1786, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1786, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1786, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pljljis} */
struct A1787 { p m0; l m1; j m2; l m3; j m4; i m5; s m6; };
void f_cpA1787(struct A1787 *x, const struct A1787 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1787(const struct A1787 *x, const struct A1787 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1787() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1787), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1787, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1787, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1787, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1787, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1787, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1787, m5), 1);
		dcStructField(at, 's', offsetof(struct A1787, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fpii{pljljis}[3]pcispfj} */
struct A1788 { f m0; p m1; i m2; i m3; struct A1787 m4[3]; p m5; c m6; i m7; s m8; p m9; f m10; j m11; };
void f_cpA1788(struct A1788 *x, const struct A1788 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1787(&x->m4[0], &y->m4[0]); f_cpA1787(&x->m4[1], &y->m4[1]); f_cpA1787(&x->m4[2], &y->m4[2]); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1788(const struct A1788 *x, const struct A1788 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1787(&x->m4[0], &y->m4[0]) && f_cmpA1787(&x->m4[1], &y->m4[1]) && f_cmpA1787(&x->m4[2], &y->m4[2]) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1788() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1788), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1788, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1788, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1788, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1788, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1788, m4), 3, f_touchdcstA1787());
		dcStructField(at, 'p', offsetof(struct A1788, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1788, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1788, m7), 1);
		dcStructField(at, 's', offsetof(struct A1788, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1788, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1788, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1788, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <j[16]> */
union  A1789 { j m0[16]; };
void f_cpA1789(union  A1789 *x, const union  A1789 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m0[12] = y->m0[12]; x->m0[13] = y->m0[13]; x->m0[14] = y->m0[14]; x->m0[15] = y->m0[15]; };
int f_cmpA1789(const union  A1789 *x, const union  A1789 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m0[12] == y->m0[12] && x->m0[13] == y->m0[13] && x->m0[14] == y->m0[14] && x->m0[15] == y->m0[15]; };
DCstruct* f_touchdcstA1789() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A1789), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1789, m0), 16);
		dcCloseStruct(at);
	}
	return at;
};
/* {siclcid} */
struct A1790 { s m0; i m1; c m2; l m3; c m4; i m5; d m6; };
void f_cpA1790(struct A1790 *x, const struct A1790 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1790(const struct A1790 *x, const struct A1790 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1790() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1790), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1790, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1790, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1790, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1790, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1790, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1790, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1790, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<j[16]>{siclcid}} */
struct A1791 { union  A1789 m0; struct A1790 m1; };
void f_cpA1791(struct A1791 *x, const struct A1791 *y) { f_cpA1789(&x->m0, &y->m0); f_cpA1790(&x->m1, &y->m1); };
int f_cmpA1791(const struct A1791 *x, const struct A1791 *y) { return f_cmpA1789(&x->m0, &y->m0) && f_cmpA1790(&x->m1, &y->m1); };
DCstruct* f_touchdcstA1791() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1791), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1791, m0), 1, f_touchdcstA1789());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1791, m1), 1, f_touchdcstA1790());
		dcCloseStruct(at);
	}
	return at;
};
/* {sf<i>{fpii{pljljis}[3]pcispfj}dcscc{<j[16]>{siclcid}}ls} */
struct A1792 { s m0; f m1; union  A62 m2; struct A1788 m3; d m4; c m5; s m6; c m7; c m8; struct A1791 m9; l m10; s m11; };
void f_cpA1792(struct A1792 *x, const struct A1792 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA62(&x->m2, &y->m2); f_cpA1788(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1791(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1792(const struct A1792 *x, const struct A1792 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA62(&x->m2, &y->m2) && f_cmpA1788(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1791(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1792() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1792), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1792, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1792, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1792, m2), 1, f_touchdcstA62());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1792, m3), 1, f_touchdcstA1788());
		dcStructField(at, 'd', offsetof(struct A1792, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1792, m5), 1);
		dcStructField(at, 's', offsetof(struct A1792, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1792, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1792, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1792, m9), 1, f_touchdcstA1791());
		dcStructField(at, 'l', offsetof(struct A1792, m10), 1);
		dcStructField(at, 's', offsetof(struct A1792, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dijcscclslfj> */
union  A1793 { d m0; i m1; j m2; c m3; s m4; c m5; c m6; l m7; s m8; l m9; f m10; j m11; };
void f_cpA1793(union  A1793 *x, const union  A1793 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1793(const union  A1793 *x, const union  A1793 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1793() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1793), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1793, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1793, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1793, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1793, m3), 1);
		dcStructField(at, 's', offsetof(union  A1793, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1793, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1793, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1793, m7), 1);
		dcStructField(at, 's', offsetof(union  A1793, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1793, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1793, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1793, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lflccfcpfdp> */
union  A1794 { l m0; f m1; l m2; c m3; c m4; f m5; c m6; p m7; f m8; d m9; p m10; };
void f_cpA1794(union  A1794 *x, const union  A1794 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1794(const union  A1794 *x, const union  A1794 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1794() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1794), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1794, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1794, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1794, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1794, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1794, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1794, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1794, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1794, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1794, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1794, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1794, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ccsddcddpcps} */
struct A1795 { c m0; c m1; s m2; d m3; d m4; c m5; d m6; d m7; p m8; c m9; p m10; s m11; };
void f_cpA1795(struct A1795 *x, const struct A1795 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1795(const struct A1795 *x, const struct A1795 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1795() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1795), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1795, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1795, m1), 1);
		dcStructField(at, 's', offsetof(struct A1795, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1795, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1795, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1795, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1795, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1795, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1795, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1795, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1795, m10), 1);
		dcStructField(at, 's', offsetof(struct A1795, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{ccsddcddpcps}> */
union  A1796 { struct A1795 m0; };
void f_cpA1796(union  A1796 *x, const union  A1796 *y) { f_cpA1795(&x->m0, &y->m0); };
int f_cmpA1796(const union  A1796 *x, const union  A1796 *y) { return f_cmpA1795(&x->m0, &y->m0); };
DCstruct* f_touchdcstA1796() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A1796), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1796, m0), 1, f_touchdcstA1795());
		dcCloseStruct(at);
	}
	return at;
};
/* <spscdjdis[11]sci> */
union  A1797 { s m0; p m1; s m2; c m3; d m4; j m5; d m6; i m7; s m8[11]; s m9; c m10; i m11; };
void f_cpA1797(union  A1797 *x, const union  A1797 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8[0] = y->m8[0]; x->m8[1] = y->m8[1]; x->m8[2] = y->m8[2]; x->m8[3] = y->m8[3]; x->m8[4] = y->m8[4]; x->m8[5] = y->m8[5]; x->m8[6] = y->m8[6]; x->m8[7] = y->m8[7]; x->m8[8] = y->m8[8]; x->m8[9] = y->m8[9]; x->m8[10] = y->m8[10]; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1797(const union  A1797 *x, const union  A1797 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8[0] == y->m8[0] && x->m8[1] == y->m8[1] && x->m8[2] == y->m8[2] && x->m8[3] == y->m8[3] && x->m8[4] == y->m8[4] && x->m8[5] == y->m8[5] && x->m8[6] == y->m8[6] && x->m8[7] == y->m8[7] && x->m8[8] == y->m8[8] && x->m8[9] == y->m8[9] && x->m8[10] == y->m8[10] && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1797() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1797), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1797, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1797, m1), 1);
		dcStructField(at, 's', offsetof(union  A1797, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1797, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1797, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1797, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1797, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1797, m7), 1);
		dcStructField(at, 's', offsetof(union  A1797, m8), 11);
		dcStructField(at, 's', offsetof(union  A1797, m9), 1);
		dcStructField(at, 'c', offsetof(union  A1797, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1797, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ppj} */
struct A1798 { p m0; p m1; j m2; };
void f_cpA1798(struct A1798 *x, const struct A1798 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1798(const struct A1798 *x, const struct A1798 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1798() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1798), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1798, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1798, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1798, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pfcflcs[5]plf> */
union  A1799 { p m0; f m1; c m2; f m3; l m4; c m5; s m6[5]; p m7; l m8; f m9; };
void f_cpA1799(union  A1799 *x, const union  A1799 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1799(const union  A1799 *x, const union  A1799 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1799() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1799), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1799, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1799, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1799, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1799, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1799, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1799, m5), 1);
		dcStructField(at, 's', offsetof(union  A1799, m6), 5);
		dcStructField(at, 'p', offsetof(union  A1799, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1799, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1799, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ipilisi[7]pjldp> */
union  A1800 { i m0; p m1; i m2; l m3; i m4; s m5; i m6[7]; p m7; j m8; l m9; d m10; p m11; };
void f_cpA1800(union  A1800 *x, const union  A1800 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1800(const union  A1800 *x, const union  A1800 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1800() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1800), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1800, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1800, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1800, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1800, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1800, m4), 1);
		dcStructField(at, 's', offsetof(union  A1800, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1800, m6), 7);
		dcStructField(at, 'p', offsetof(union  A1800, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1800, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1800, m9), 1);
		dcStructField(at, 'd', offsetof(union  A1800, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1800, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jjp<l>{ppj}<pfcflcs[5]plf>i<ipilisi[7]pjldp>dics} */
struct A1801 { j m0; j m1; p m2; union  A20 m3; struct A1798 m4; union  A1799 m5; i m6; union  A1800 m7; d m8; i m9; c m10; s m11; };
void f_cpA1801(struct A1801 *x, const struct A1801 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA20(&x->m3, &y->m3); f_cpA1798(&x->m4, &y->m4); f_cpA1799(&x->m5, &y->m5); x->m6 = y->m6; f_cpA1800(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1801(const struct A1801 *x, const struct A1801 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA20(&x->m3, &y->m3) && f_cmpA1798(&x->m4, &y->m4) && f_cmpA1799(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA1800(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1801() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1801), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1801, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1801, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1801, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1801, m3), 1, f_touchdcstA20());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1801, m4), 1, f_touchdcstA1798());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1801, m5), 1, f_touchdcstA1799());
		dcStructField(at, 'i', offsetof(struct A1801, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1801, m7), 1, f_touchdcstA1800());
		dcStructField(at, 'd', offsetof(struct A1801, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1801, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1801, m10), 1);
		dcStructField(at, 's', offsetof(struct A1801, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dddpscdif> */
union  A1802 { d m0; d m1; d m2; p m3; s m4; c m5; d m6; i m7; f m8; };
void f_cpA1802(union  A1802 *x, const union  A1802 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1802(const union  A1802 *x, const union  A1802 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1802() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1802), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1802, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1802, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1802, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1802, m3), 1);
		dcStructField(at, 's', offsetof(union  A1802, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1802, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1802, m6), 1);
		dcStructField(at, 'i', offsetof(union  A1802, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1802, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cjfccpjdj<l>ip> */
union  A1803 { c m0; j m1; f m2; c m3; c m4; p m5; j m6; d m7; j m8; union  A20 m9; i m10; p m11; };
void f_cpA1803(union  A1803 *x, const union  A1803 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA20(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1803(const union  A1803 *x, const union  A1803 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA20(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1803() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1803), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1803, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1803, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1803, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1803, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1803, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1803, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1803, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1803, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1803, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1803, m9), 1, f_touchdcstA20());
		dcStructField(at, 'i', offsetof(union  A1803, m10), 1);
		dcStructField(at, 'p', offsetof(union  A1803, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jjdl} */
struct A1804 { j m0; j m1; d m2; l m3; };
void f_cpA1804(struct A1804 *x, const struct A1804 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1804(const struct A1804 *x, const struct A1804 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1804() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1804), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1804, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1804, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1804, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1804, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ifdjs[3]spjsfij} */
struct A1805 { i m0; f m1; d m2; j m3; s m4[3]; s m5; p m6; j m7; s m8; f m9; i m10; j m11; };
void f_cpA1805(struct A1805 *x, const struct A1805 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1805(const struct A1805 *x, const struct A1805 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1805() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1805), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1805, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1805, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1805, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1805, m3), 1);
		dcStructField(at, 's', offsetof(struct A1805, m4), 3);
		dcStructField(at, 's', offsetof(struct A1805, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1805, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1805, m7), 1);
		dcStructField(at, 's', offsetof(struct A1805, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1805, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1805, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1805, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iic} */
struct A1806 { i m0; i m1; c m2; };
void f_cpA1806(struct A1806 *x, const struct A1806 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1806(const struct A1806 *x, const struct A1806 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1806() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1806), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1806, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1806, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1806, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {csdjj{iic}ss[6]j} */
struct A1807 { c m0; s m1; d m2; j m3; j m4; struct A1806 m5; s m6; s m7[6]; j m8; };
void f_cpA1807(struct A1807 *x, const struct A1807 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1806(&x->m5, &y->m5); x->m6 = y->m6; x->m7[0] = y->m7[0]; x->m7[1] = y->m7[1]; x->m7[2] = y->m7[2]; x->m7[3] = y->m7[3]; x->m7[4] = y->m7[4]; x->m7[5] = y->m7[5]; x->m8 = y->m8; };
int f_cmpA1807(const struct A1807 *x, const struct A1807 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1806(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7[0] == y->m7[0] && x->m7[1] == y->m7[1] && x->m7[2] == y->m7[2] && x->m7[3] == y->m7[3] && x->m7[4] == y->m7[4] && x->m7[5] == y->m7[5] && x->m8 == y->m8; };
DCstruct* f_touchdcstA1807() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1807), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1807, m0), 1);
		dcStructField(at, 's', offsetof(struct A1807, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1807, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1807, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1807, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1807, m5), 1, f_touchdcstA1806());
		dcStructField(at, 's', offsetof(struct A1807, m6), 1);
		dcStructField(at, 's', offsetof(struct A1807, m7), 6);
		dcStructField(at, 'j', offsetof(struct A1807, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jdf[3]s} */
struct A1808 { j m0; d m1; f m2[3]; s m3; };
void f_cpA1808(struct A1808 *x, const struct A1808 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m3 = y->m3; };
int f_cmpA1808(const struct A1808 *x, const struct A1808 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m3 == y->m3; };
DCstruct* f_touchdcstA1808() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1808), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1808, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1808, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1808, m2), 3);
		dcStructField(at, 's', offsetof(struct A1808, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pcsfj[14]fjsipcl> */
union  A1809 { p m0; c m1; s m2; f m3; j m4[14]; f m5; j m6; s m7; i m8; p m9; c m10; l m11; };
void f_cpA1809(union  A1809 *x, const union  A1809 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m4[12] = y->m4[12]; x->m4[13] = y->m4[13]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1809(const union  A1809 *x, const union  A1809 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m4[12] == y->m4[12] && x->m4[13] == y->m4[13] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1809() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1809), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1809, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1809, m1), 1);
		dcStructField(at, 's', offsetof(union  A1809, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1809, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1809, m4), 14);
		dcStructField(at, 'f', offsetof(union  A1809, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1809, m6), 1);
		dcStructField(at, 's', offsetof(union  A1809, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1809, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1809, m9), 1);
		dcStructField(at, 'c', offsetof(union  A1809, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1809, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lj{jdf[3]s}c<pcsfj[14]fjsipcl>> */
union  A1810 { l m0; j m1; struct A1808 m2; c m3; union  A1809 m4; };
void f_cpA1810(union  A1810 *x, const union  A1810 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1808(&x->m2, &y->m2); x->m3 = y->m3; f_cpA1809(&x->m4, &y->m4); };
int f_cmpA1810(const union  A1810 *x, const union  A1810 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1808(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA1809(&x->m4, &y->m4); };
DCstruct* f_touchdcstA1810() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1810), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1810, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1810, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1810, m2), 1, f_touchdcstA1808());
		dcStructField(at, 'c', offsetof(union  A1810, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1810, m4), 1, f_touchdcstA1809());
		dcCloseStruct(at);
	}
	return at;
};
/* {icsjcj} */
struct A1811 { i m0; c m1; s m2; j m3; c m4; j m5; };
void f_cpA1811(struct A1811 *x, const struct A1811 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1811(const struct A1811 *x, const struct A1811 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1811() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1811), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1811, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1811, m1), 1);
		dcStructField(at, 's', offsetof(struct A1811, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1811, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1811, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1811, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pscdpisji} */
struct A1812 { p m0; s m1; c m2; d m3; p m4; i m5; s m6; j m7; i m8; };
void f_cpA1812(struct A1812 *x, const struct A1812 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1812(const struct A1812 *x, const struct A1812 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1812() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1812), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1812, m0), 1);
		dcStructField(at, 's', offsetof(struct A1812, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1812, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1812, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1812, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1812, m5), 1);
		dcStructField(at, 's', offsetof(struct A1812, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1812, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1812, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ldli} */
struct A1813 { l m0; d m1; l m2; i m3; };
void f_cpA1813(struct A1813 *x, const struct A1813 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1813(const struct A1813 *x, const struct A1813 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1813() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1813), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1813, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1813, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1813, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1813, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p{ldli}{if}f<f>d<dj>pdiii} */
struct A1814 { p m0; struct A1813 m1; struct A556 m2; f m3; union  A438 m4; d m5; union  A101 m6; p m7; d m8; i m9; i m10; i m11; };
void f_cpA1814(struct A1814 *x, const struct A1814 *y) { x->m0 = y->m0; f_cpA1813(&x->m1, &y->m1); f_cpA556(&x->m2, &y->m2); x->m3 = y->m3; f_cpA438(&x->m4, &y->m4); x->m5 = y->m5; f_cpA101(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1814(const struct A1814 *x, const struct A1814 *y) { return x->m0 == y->m0 && f_cmpA1813(&x->m1, &y->m1) && f_cmpA556(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA438(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA101(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1814() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1814), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1814, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1814, m1), 1, f_touchdcstA1813());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1814, m2), 1, f_touchdcstA556());
		dcStructField(at, 'f', offsetof(struct A1814, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1814, m4), 1, f_touchdcstA438());
		dcStructField(at, 'd', offsetof(struct A1814, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1814, m6), 1, f_touchdcstA101());
		dcStructField(at, 'p', offsetof(struct A1814, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1814, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1814, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1814, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1814, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{p{ldli}{if}f<f>d<dj>pdiii}sdddfs} */
struct A1815 { struct A1814 m0; s m1; d m2; d m3; d m4; f m5; s m6; };
void f_cpA1815(struct A1815 *x, const struct A1815 *y) { f_cpA1814(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1815(const struct A1815 *x, const struct A1815 *y) { return f_cmpA1814(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1815() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1815), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1815, m0), 1, f_touchdcstA1814());
		dcStructField(at, 's', offsetof(struct A1815, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1815, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1815, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1815, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1815, m5), 1);
		dcStructField(at, 's', offsetof(struct A1815, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pfjsflcdlcfs} */
struct A1816 { p m0; f m1; j m2; s m3; f m4; l m5; c m6; d m7; l m8; c m9; f m10; s m11; };
void f_cpA1816(struct A1816 *x, const struct A1816 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1816(const struct A1816 *x, const struct A1816 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1816() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1816), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1816, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1816, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1816, m2), 1);
		dcStructField(at, 's', offsetof(struct A1816, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1816, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1816, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1816, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1816, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1816, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1816, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1816, m10), 1);
		dcStructField(at, 's', offsetof(struct A1816, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fl{jj}pci> */
union  A1817 { f m0; l m1; struct A1528 m2; p m3; c m4; i m5; };
void f_cpA1817(union  A1817 *x, const union  A1817 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1528(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1817(const union  A1817 *x, const union  A1817 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1528(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1817() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1817), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1817, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1817, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1817, m2), 1, f_touchdcstA1528());
		dcStructField(at, 'p', offsetof(union  A1817, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1817, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1817, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ljd} */
struct A1818 { l m0; j m1; d m2; };
void f_cpA1818(struct A1818 *x, const struct A1818 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1818(const struct A1818 *x, const struct A1818 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1818() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1818), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1818, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1818, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1818, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ffp{ljd}ldcfs> */
union  A1819 { f m0; f m1; p m2; struct A1818 m3; l m4; d m5; c m6; f m7; s m8; };
void f_cpA1819(union  A1819 *x, const union  A1819 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1818(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1819(const union  A1819 *x, const union  A1819 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1818(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1819() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1819), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1819, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1819, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1819, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1819, m3), 1, f_touchdcstA1818());
		dcStructField(at, 'l', offsetof(union  A1819, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1819, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1819, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1819, m7), 1);
		dcStructField(at, 's', offsetof(union  A1819, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jdil[2]<ffp{ljd}ldcfs>fsp> */
union  A1820 { j m0; d m1; i m2; l m3[2]; union  A1819 m4; f m5; s m6; p m7; };
void f_cpA1820(union  A1820 *x, const union  A1820 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; f_cpA1819(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1820(const union  A1820 *x, const union  A1820 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && f_cmpA1819(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1820() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1820), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1820, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1820, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1820, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1820, m3), 2);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1820, m4), 1, f_touchdcstA1819());
		dcStructField(at, 'f', offsetof(union  A1820, m5), 1);
		dcStructField(at, 's', offsetof(union  A1820, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1820, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cddcdjlli> */
union  A1821 { c m0; d m1; d m2; c m3; d m4; j m5; l m6; l m7; i m8; };
void f_cpA1821(union  A1821 *x, const union  A1821 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1821(const union  A1821 *x, const union  A1821 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1821() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1821), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1821, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1821, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1821, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1821, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1821, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1821, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1821, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1821, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1821, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sifdlc} */
struct A1822 { s m0; i m1; f m2; d m3; l m4; c m5; };
void f_cpA1822(struct A1822 *x, const struct A1822 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1822(const struct A1822 *x, const struct A1822 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1822() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1822), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1822, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1822, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1822, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1822, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1822, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1822, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {s{sifdlc}ifc} */
struct A1823 { s m0; struct A1822 m1; i m2; f m3; c m4; };
void f_cpA1823(struct A1823 *x, const struct A1823 *y) { x->m0 = y->m0; f_cpA1822(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1823(const struct A1823 *x, const struct A1823 *y) { return x->m0 == y->m0 && f_cmpA1822(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1823() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1823), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1823, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1823, m1), 1, f_touchdcstA1822());
		dcStructField(at, 'i', offsetof(struct A1823, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1823, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1823, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fc} */
struct A1824 { f m0; c m1; };
void f_cpA1824(struct A1824 *x, const struct A1824 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1824(const struct A1824 *x, const struct A1824 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1824() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1824), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1824, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1824, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fpfcfc> */
union  A1825 { f m0; p m1; f m2; c m3; f m4; c m5; };
void f_cpA1825(union  A1825 *x, const union  A1825 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1825(const union  A1825 *x, const union  A1825 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1825() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1825), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1825, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1825, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1825, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1825, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1825, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1825, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <disficcl> */
union  A1826 { d m0; i m1; s m2; f m3; i m4; c m5; c m6; l m7; };
void f_cpA1826(union  A1826 *x, const union  A1826 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1826(const union  A1826 *x, const union  A1826 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1826() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1826), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1826, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1826, m1), 1);
		dcStructField(at, 's', offsetof(union  A1826, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1826, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1826, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1826, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1826, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1826, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <isplpcscp> */
union  A1827 { i m0; s m1; p m2; l m3; p m4; c m5; s m6; c m7; p m8; };
void f_cpA1827(union  A1827 *x, const union  A1827 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1827(const union  A1827 *x, const union  A1827 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1827() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1827), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1827, m0), 1);
		dcStructField(at, 's', offsetof(union  A1827, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1827, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1827, m3), 1);
		dcStructField(at, 'p', offsetof(union  A1827, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1827, m5), 1);
		dcStructField(at, 's', offsetof(union  A1827, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1827, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1827, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <clcpdjcjic> */
union  A1828 { c m0; l m1; c m2; p m3; d m4; j m5; c m6; j m7; i m8; c m9; };
void f_cpA1828(union  A1828 *x, const union  A1828 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1828(const union  A1828 *x, const union  A1828 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1828() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1828), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1828, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1828, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1828, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1828, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1828, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1828, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1828, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1828, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1828, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1828, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ljdpj} */
struct A1829 { l m0; j m1; d m2; p m3; j m4; };
void f_cpA1829(struct A1829 *x, const struct A1829 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1829(const struct A1829 *x, const struct A1829 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1829() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1829), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1829, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1829, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1829, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1829, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1829, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sidl<s><fpfcfc><disficcl>sd<isplpcscp><clcpdjcjic>{ljdpj}} */
struct A1830 { s m0; i m1; d m2; l m3; union  A179 m4; union  A1825 m5; union  A1826 m6; s m7; d m8; union  A1827 m9; union  A1828 m10; struct A1829 m11; };
void f_cpA1830(struct A1830 *x, const struct A1830 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA179(&x->m4, &y->m4); f_cpA1825(&x->m5, &y->m5); f_cpA1826(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; f_cpA1827(&x->m9, &y->m9); f_cpA1828(&x->m10, &y->m10); f_cpA1829(&x->m11, &y->m11); };
int f_cmpA1830(const struct A1830 *x, const struct A1830 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA179(&x->m4, &y->m4) && f_cmpA1825(&x->m5, &y->m5) && f_cmpA1826(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1827(&x->m9, &y->m9) && f_cmpA1828(&x->m10, &y->m10) && f_cmpA1829(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1830() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1830), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1830, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1830, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1830, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1830, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1830, m4), 1, f_touchdcstA179());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1830, m5), 1, f_touchdcstA1825());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1830, m6), 1, f_touchdcstA1826());
		dcStructField(at, 's', offsetof(struct A1830, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1830, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1830, m9), 1, f_touchdcstA1827());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1830, m10), 1, f_touchdcstA1828());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1830, m11), 1, f_touchdcstA1829());
		dcCloseStruct(at);
	}
	return at;
};
/* {cflfjiflcfcf} */
struct A1831 { c m0; f m1; l m2; f m3; j m4; i m5; f m6; l m7; c m8; f m9; c m10; f m11; };
void f_cpA1831(struct A1831 *x, const struct A1831 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1831(const struct A1831 *x, const struct A1831 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1831() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1831), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1831, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1831, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1831, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1831, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1831, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1831, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1831, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1831, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1831, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1831, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1831, m10), 1);
		dcStructField(at, 'f', offsetof(struct A1831, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{cflfjiflcfcf}li} */
struct A1832 { struct A1831 m0; l m1; i m2; };
void f_cpA1832(struct A1832 *x, const struct A1832 *y) { f_cpA1831(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1832(const struct A1832 *x, const struct A1832 *y) { return f_cmpA1831(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1832() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1832), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1832, m0), 1, f_touchdcstA1831());
		dcStructField(at, 'l', offsetof(struct A1832, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1832, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ccdissii} */
struct A1833 { c m0; c m1; d m2; i m3; s m4; s m5; i m6; i m7; };
void f_cpA1833(struct A1833 *x, const struct A1833 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1833(const struct A1833 *x, const struct A1833 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1833() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1833), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1833, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1833, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1833, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1833, m3), 1);
		dcStructField(at, 's', offsetof(struct A1833, m4), 1);
		dcStructField(at, 's', offsetof(struct A1833, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1833, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1833, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dp{ccdissii}picdsfpd{d}> */
union  A1834 { d m0; p m1; struct A1833 m2; p m3; i m4; c m5; d m6; s m7; f m8; p m9; d m10; struct A47 m11; };
void f_cpA1834(union  A1834 *x, const union  A1834 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1833(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA47(&x->m11, &y->m11); };
int f_cmpA1834(const union  A1834 *x, const union  A1834 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1833(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA47(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1834() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1834), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1834, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1834, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1834, m2), 1, f_touchdcstA1833());
		dcStructField(at, 'p', offsetof(union  A1834, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1834, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1834, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1834, m6), 1);
		dcStructField(at, 's', offsetof(union  A1834, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1834, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1834, m9), 1);
		dcStructField(at, 'd', offsetof(union  A1834, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1834, m11), 1, f_touchdcstA47());
		dcCloseStruct(at);
	}
	return at;
};
/* <ldsss{{cflfjiflcfcf}li}f<dp{ccdissii}picdsfpd{d}>clpl> */
union  A1835 { l m0; d m1; s m2; s m3; s m4; struct A1832 m5; f m6; union  A1834 m7; c m8; l m9; p m10; l m11; };
void f_cpA1835(union  A1835 *x, const union  A1835 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1832(&x->m5, &y->m5); x->m6 = y->m6; f_cpA1834(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1835(const union  A1835 *x, const union  A1835 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1832(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA1834(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1835() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1835), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1835, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1835, m1), 1);
		dcStructField(at, 's', offsetof(union  A1835, m2), 1);
		dcStructField(at, 's', offsetof(union  A1835, m3), 1);
		dcStructField(at, 's', offsetof(union  A1835, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1835, m5), 1, f_touchdcstA1832());
		dcStructField(at, 'f', offsetof(union  A1835, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1835, m7), 1, f_touchdcstA1834());
		dcStructField(at, 'c', offsetof(union  A1835, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1835, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1835, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1835, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ilfdscsipsfs} */
struct A1836 { i m0; l m1; f m2; d m3; s m4; c m5; s m6; i m7; p m8; s m9; f m10; s m11; };
void f_cpA1836(struct A1836 *x, const struct A1836 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1836(const struct A1836 *x, const struct A1836 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1836() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1836), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1836, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1836, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1836, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1836, m3), 1);
		dcStructField(at, 's', offsetof(struct A1836, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1836, m5), 1);
		dcStructField(at, 's', offsetof(struct A1836, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1836, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1836, m8), 1);
		dcStructField(at, 's', offsetof(struct A1836, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1836, m10), 1);
		dcStructField(at, 's', offsetof(struct A1836, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sljldpdscdpj> */
union  A1837 { s m0; l m1; j m2; l m3; d m4; p m5; d m6; s m7; c m8; d m9; p m10; j m11; };
void f_cpA1837(union  A1837 *x, const union  A1837 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1837(const union  A1837 *x, const union  A1837 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1837() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1837), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1837, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1837, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1837, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1837, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1837, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1837, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1837, m6), 1);
		dcStructField(at, 's', offsetof(union  A1837, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1837, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1837, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1837, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1837, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dldc{i}<sljldpdscdpj>dpld<di>c} */
struct A1838 { d m0; l m1; d m2; c m3; struct A5 m4; union  A1837 m5; d m6; p m7; l m8; d m9; union  A1617 m10; c m11; };
void f_cpA1838(struct A1838 *x, const struct A1838 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA5(&x->m4, &y->m4); f_cpA1837(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1617(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1838(const struct A1838 *x, const struct A1838 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA5(&x->m4, &y->m4) && f_cmpA1837(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1617(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1838() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1838), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1838, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1838, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1838, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1838, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1838, m4), 1, f_touchdcstA5());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1838, m5), 1, f_touchdcstA1837());
		dcStructField(at, 'd', offsetof(struct A1838, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1838, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1838, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1838, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1838, m10), 1, f_touchdcstA1617());
		dcStructField(at, 'c', offsetof(struct A1838, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <f[8]s> */
union  A1839 { f m0[8]; s m1; };
void f_cpA1839(union  A1839 *x, const union  A1839 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m1 = y->m1; };
int f_cmpA1839(const union  A1839 *x, const union  A1839 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m1 == y->m1; };
DCstruct* f_touchdcstA1839() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1839), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1839, m0), 8);
		dcStructField(at, 's', offsetof(union  A1839, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jjllilfdiljd> */
union  A1840 { j m0; j m1; l m2; l m3; i m4; l m5; f m6; d m7; i m8; l m9; j m10; d m11; };
void f_cpA1840(union  A1840 *x, const union  A1840 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1840(const union  A1840 *x, const union  A1840 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1840() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1840), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1840, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1840, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1840, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1840, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1840, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1840, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1840, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1840, m7), 1);
		dcStructField(at, 'i', offsetof(union  A1840, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1840, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1840, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1840, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dplfddp[13]lcjpi> */
union  A1841 { d m0; p m1; l m2; f m3; d m4; d m5; p m6[13]; l m7; c m8; j m9; p m10; i m11; };
void f_cpA1841(union  A1841 *x, const union  A1841 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m6[11] = y->m6[11]; x->m6[12] = y->m6[12]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1841(const union  A1841 *x, const union  A1841 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m6[11] == y->m6[11] && x->m6[12] == y->m6[12] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1841() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1841), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1841, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1841, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1841, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1841, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1841, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1841, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1841, m6), 13);
		dcStructField(at, 'l', offsetof(union  A1841, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1841, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1841, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1841, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1841, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lilccsjlsjjl> */
union  A1842 { l m0; i m1; l m2; c m3; c m4; s m5; j m6; l m7; s m8; j m9; j m10; l m11; };
void f_cpA1842(union  A1842 *x, const union  A1842 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1842(const union  A1842 *x, const union  A1842 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1842() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1842), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1842, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1842, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1842, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1842, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1842, m4), 1);
		dcStructField(at, 's', offsetof(union  A1842, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1842, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1842, m7), 1);
		dcStructField(at, 's', offsetof(union  A1842, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1842, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1842, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1842, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lls} */
struct A1843 { l m0; l m1; s m2; };
void f_cpA1843(struct A1843 *x, const struct A1843 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1843(const struct A1843 *x, const struct A1843 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1843() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1843), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1843, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1843, m1), 1);
		dcStructField(at, 's', offsetof(struct A1843, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <f{lls}dds> */
union  A1844 { f m0; struct A1843 m1; d m2; d m3; s m4; };
void f_cpA1844(union  A1844 *x, const union  A1844 *y) { x->m0 = y->m0; f_cpA1843(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1844(const union  A1844 *x, const union  A1844 *y) { return x->m0 == y->m0 && f_cmpA1843(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1844() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1844), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1844, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1844, m1), 1, f_touchdcstA1843());
		dcStructField(at, 'd', offsetof(union  A1844, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1844, m3), 1);
		dcStructField(at, 's', offsetof(union  A1844, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jpc} */
struct A1845 { j m0; p m1; c m2; };
void f_cpA1845(struct A1845 *x, const struct A1845 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1845(const struct A1845 *x, const struct A1845 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1845() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1845), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1845, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1845, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1845, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ii{ci}ffdipl} */
struct A1846 { i m0; i m1; struct A970 m2; f m3; f m4; d m5; i m6; p m7; l m8; };
void f_cpA1846(struct A1846 *x, const struct A1846 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA970(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1846(const struct A1846 *x, const struct A1846 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA970(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1846() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1846), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1846, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1846, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1846, m2), 1, f_touchdcstA970());
		dcStructField(at, 'f', offsetof(struct A1846, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1846, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1846, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1846, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1846, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1846, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fsfiiicijidc} */
struct A1847 { f m0; s m1; f m2; i m3; i m4; i m5; c m6; i m7; j m8; i m9; d m10; c m11; };
void f_cpA1847(struct A1847 *x, const struct A1847 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1847(const struct A1847 *x, const struct A1847 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1847() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1847), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1847, m0), 1);
		dcStructField(at, 's', offsetof(struct A1847, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1847, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1847, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1847, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1847, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1847, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1847, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1847, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1847, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1847, m10), 1);
		dcStructField(at, 'c', offsetof(struct A1847, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lffdcfij} */
struct A1848 { l m0; f m1; f m2; d m3; c m4; f m5; i m6; j m7; };
void f_cpA1848(struct A1848 *x, const struct A1848 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1848(const struct A1848 *x, const struct A1848 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1848() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1848), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1848, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1848, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1848, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1848, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1848, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1848, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1848, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1848, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ddi[12]pdip> */
union  A1849 { d m0; d m1; i m2[12]; p m3; d m4; i m5; p m6; };
void f_cpA1849(union  A1849 *x, const union  A1849 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1849(const union  A1849 *x, const union  A1849 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1849() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1849), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1849, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1849, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1849, m2), 12);
		dcStructField(at, 'p', offsetof(union  A1849, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1849, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1849, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1849, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {c{fsfiiicijidc}f{lffdcfij}sj[13]<ddi[12]pdip>iscsd} */
struct A1850 { c m0; struct A1847 m1; f m2; struct A1848 m3; s m4; j m5[13]; union  A1849 m6; i m7; s m8; c m9; s m10; d m11; };
void f_cpA1850(struct A1850 *x, const struct A1850 *y) { x->m0 = y->m0; f_cpA1847(&x->m1, &y->m1); x->m2 = y->m2; f_cpA1848(&x->m3, &y->m3); x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m5[11] = y->m5[11]; x->m5[12] = y->m5[12]; f_cpA1849(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1850(const struct A1850 *x, const struct A1850 *y) { return x->m0 == y->m0 && f_cmpA1847(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA1848(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m5[11] == y->m5[11] && x->m5[12] == y->m5[12] && f_cmpA1849(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1850() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1850), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1850, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1850, m1), 1, f_touchdcstA1847());
		dcStructField(at, 'f', offsetof(struct A1850, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1850, m3), 1, f_touchdcstA1848());
		dcStructField(at, 's', offsetof(struct A1850, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1850, m5), 13);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1850, m6), 1, f_touchdcstA1849());
		dcStructField(at, 'i', offsetof(struct A1850, m7), 1);
		dcStructField(at, 's', offsetof(struct A1850, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1850, m9), 1);
		dcStructField(at, 's', offsetof(struct A1850, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1850, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pjcss{jpc}l{ii{ci}ffdipl}cj{c{fsfiiicijidc}f{lffdcfij}sj[13]<ddi[12]pdip>iscsd}p> */
union  A1851 { p m0; j m1; c m2; s m3; s m4; struct A1845 m5; l m6; struct A1846 m7; c m8; j m9; struct A1850 m10; p m11; };
void f_cpA1851(union  A1851 *x, const union  A1851 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1845(&x->m5, &y->m5); x->m6 = y->m6; f_cpA1846(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; f_cpA1850(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1851(const union  A1851 *x, const union  A1851 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1845(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA1846(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1850(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1851() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1851), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1851, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1851, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1851, m2), 1);
		dcStructField(at, 's', offsetof(union  A1851, m3), 1);
		dcStructField(at, 's', offsetof(union  A1851, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1851, m5), 1, f_touchdcstA1845());
		dcStructField(at, 'l', offsetof(union  A1851, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1851, m7), 1, f_touchdcstA1846());
		dcStructField(at, 'c', offsetof(union  A1851, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1851, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1851, m10), 1, f_touchdcstA1850());
		dcStructField(at, 'p', offsetof(union  A1851, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {llpc} */
struct A1852 { l m0; l m1; p m2; c m3; };
void f_cpA1852(struct A1852 *x, const struct A1852 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1852(const struct A1852 *x, const struct A1852 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1852() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1852), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1852, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1852, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1852, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1852, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cf} */
struct A1853 { c m0; f m1; };
void f_cpA1853(struct A1853 *x, const struct A1853 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1853(const struct A1853 *x, const struct A1853 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1853() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1853), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1853, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1853, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<i>{llpc}cild{cf}dj> */
union  A1854 { union  A62 m0; struct A1852 m1; c m2; i m3; l m4; d m5; struct A1853 m6; d m7; j m8; };
void f_cpA1854(union  A1854 *x, const union  A1854 *y) { f_cpA62(&x->m0, &y->m0); f_cpA1852(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1853(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1854(const union  A1854 *x, const union  A1854 *y) { return f_cmpA62(&x->m0, &y->m0) && f_cmpA1852(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1853(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1854() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1854), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1854, m0), 1, f_touchdcstA62());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1854, m1), 1, f_touchdcstA1852());
		dcStructField(at, 'c', offsetof(union  A1854, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1854, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1854, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1854, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1854, m6), 1, f_touchdcstA1853());
		dcStructField(at, 'd', offsetof(union  A1854, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1854, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <scipcislpdfs> */
union  A1855 { s m0; c m1; i m2; p m3; c m4; i m5; s m6; l m7; p m8; d m9; f m10; s m11; };
void f_cpA1855(union  A1855 *x, const union  A1855 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1855(const union  A1855 *x, const union  A1855 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1855() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1855), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1855, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1855, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1855, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1855, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1855, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1855, m5), 1);
		dcStructField(at, 's', offsetof(union  A1855, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1855, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1855, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1855, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1855, m10), 1);
		dcStructField(at, 's', offsetof(union  A1855, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lcspsisccljs> */
union  A1856 { l m0; c m1; s m2; p m3; s m4; i m5; s m6; c m7; c m8; l m9; j m10; s m11; };
void f_cpA1856(union  A1856 *x, const union  A1856 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1856(const union  A1856 *x, const union  A1856 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1856() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1856), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1856, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1856, m1), 1);
		dcStructField(at, 's', offsetof(union  A1856, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1856, m3), 1);
		dcStructField(at, 's', offsetof(union  A1856, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1856, m5), 1);
		dcStructField(at, 's', offsetof(union  A1856, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1856, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1856, m8), 1);
		dcStructField(at, 'l', offsetof(union  A1856, m9), 1);
		dcStructField(at, 'j', offsetof(union  A1856, m10), 1);
		dcStructField(at, 's', offsetof(union  A1856, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {j[1]lplc} */
struct A1857 { j m0[1]; l m1; p m2; l m3; c m4; };
void f_cpA1857(struct A1857 *x, const struct A1857 *y) { x->m0[0] = y->m0[0]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1857(const struct A1857 *x, const struct A1857 *y) { return x->m0[0] == y->m0[0] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1857() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1857), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1857, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1857, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1857, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1857, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1857, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ssccd} */
struct A1858 { s m0; s m1; c m2; c m3; d m4; };
void f_cpA1858(struct A1858 *x, const struct A1858 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1858(const struct A1858 *x, const struct A1858 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1858() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1858), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1858, m0), 1);
		dcStructField(at, 's', offsetof(struct A1858, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1858, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1858, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1858, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{ssccd}} */
struct A1859 { struct A1858 m0; };
void f_cpA1859(struct A1859 *x, const struct A1859 *y) { f_cpA1858(&x->m0, &y->m0); };
int f_cmpA1859(const struct A1859 *x, const struct A1859 *y) { return f_cmpA1858(&x->m0, &y->m0); };
DCstruct* f_touchdcstA1859() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A1859), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1859, m0), 1, f_touchdcstA1858());
		dcCloseStruct(at);
	}
	return at;
};
/* {pjplfilsiicp} */
struct A1860 { p m0; j m1; p m2; l m3; f m4; i m5; l m6; s m7; i m8; i m9; c m10; p m11; };
void f_cpA1860(struct A1860 *x, const struct A1860 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1860(const struct A1860 *x, const struct A1860 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1860() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1860), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1860, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1860, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1860, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1860, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1860, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1860, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1860, m6), 1);
		dcStructField(at, 's', offsetof(struct A1860, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1860, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1860, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1860, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1860, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fd} */
struct A1861 { f m0; d m1; };
void f_cpA1861(struct A1861 *x, const struct A1861 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1861(const struct A1861 *x, const struct A1861 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1861() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1861), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1861, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1861, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sps<fl>ccjfdi{fd}> */
union  A1862 { s m0; p m1; s m2; union  A1785 m3; c m4; c m5; j m6; f m7; d m8; i m9; struct A1861 m10; };
void f_cpA1862(union  A1862 *x, const union  A1862 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1785(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1861(&x->m10, &y->m10); };
int f_cmpA1862(const union  A1862 *x, const union  A1862 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1785(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1861(&x->m10, &y->m10); };
DCstruct* f_touchdcstA1862() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1862), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1862, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1862, m1), 1);
		dcStructField(at, 's', offsetof(union  A1862, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1862, m3), 1, f_touchdcstA1785());
		dcStructField(at, 'c', offsetof(union  A1862, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1862, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1862, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1862, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1862, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1862, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1862, m10), 1, f_touchdcstA1861());
		dcCloseStruct(at);
	}
	return at;
};
/* <ljd[16]lfdlp{pjplfilsiicp}<sps<fl>ccjfdi{fd}>dc> */
union  A1863 { l m0; j m1; d m2[16]; l m3; f m4; d m5; l m6; p m7; struct A1860 m8; union  A1862 m9; d m10; c m11; };
void f_cpA1863(union  A1863 *x, const union  A1863 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m2[13] = y->m2[13]; x->m2[14] = y->m2[14]; x->m2[15] = y->m2[15]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1860(&x->m8, &y->m8); f_cpA1862(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1863(const union  A1863 *x, const union  A1863 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m2[13] == y->m2[13] && x->m2[14] == y->m2[14] && x->m2[15] == y->m2[15] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1860(&x->m8, &y->m8) && f_cmpA1862(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1863() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1863), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1863, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1863, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1863, m2), 16);
		dcStructField(at, 'l', offsetof(union  A1863, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1863, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1863, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1863, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1863, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1863, m8), 1, f_touchdcstA1860());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1863, m9), 1, f_touchdcstA1862());
		dcStructField(at, 'd', offsetof(union  A1863, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1863, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jii> */
union  A1864 { j m0; i m1; i m2; };
void f_cpA1864(union  A1864 *x, const union  A1864 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1864(const union  A1864 *x, const union  A1864 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1864() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1864), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1864, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1864, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1864, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {clif} */
struct A1865 { c m0; l m1; i m2; f m3; };
void f_cpA1865(struct A1865 *x, const struct A1865 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1865(const struct A1865 *x, const struct A1865 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1865() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1865), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1865, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1865, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1865, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1865, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jpcjd[1]lijccjp} */
struct A1866 { j m0; p m1; c m2; j m3; d m4[1]; l m5; i m6; j m7; c m8; c m9; j m10; p m11; };
void f_cpA1866(struct A1866 *x, const struct A1866 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1866(const struct A1866 *x, const struct A1866 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1866() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1866), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1866, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1866, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1866, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1866, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1866, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1866, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1866, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1866, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1866, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1866, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1866, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1866, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {djpi} */
struct A1867 { d m0; j m1; p m2; i m3; };
void f_cpA1867(struct A1867 *x, const struct A1867 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1867(const struct A1867 *x, const struct A1867 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1867() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1867), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1867, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1867, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1867, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1867, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <l[16]ilddcd> */
union  A1868 { l m0[16]; i m1; l m2; d m3; d m4; c m5; d m6; };
void f_cpA1868(union  A1868 *x, const union  A1868 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m0[12] = y->m0[12]; x->m0[13] = y->m0[13]; x->m0[14] = y->m0[14]; x->m0[15] = y->m0[15]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1868(const union  A1868 *x, const union  A1868 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m0[12] == y->m0[12] && x->m0[13] == y->m0[13] && x->m0[14] == y->m0[14] && x->m0[15] == y->m0[15] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1868() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1868), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1868, m0), 16);
		dcStructField(at, 'i', offsetof(union  A1868, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1868, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1868, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1868, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1868, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1868, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <c[7]{jpcjd[1]lijccjp}<l>d{djpi}p<l[16]ilddcd>psp> */
union  A1869 { c m0[7]; struct A1866 m1; union  A20 m2; d m3; struct A1867 m4; p m5; union  A1868 m6; p m7; s m8; p m9; };
void f_cpA1869(union  A1869 *x, const union  A1869 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; f_cpA1866(&x->m1, &y->m1); f_cpA20(&x->m2, &y->m2); x->m3 = y->m3; f_cpA1867(&x->m4, &y->m4); x->m5 = y->m5; f_cpA1868(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1869(const union  A1869 *x, const union  A1869 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && f_cmpA1866(&x->m1, &y->m1) && f_cmpA20(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA1867(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA1868(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1869() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1869), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1869, m0), 7);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1869, m1), 1, f_touchdcstA1866());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1869, m2), 1, f_touchdcstA20());
		dcStructField(at, 'd', offsetof(union  A1869, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1869, m4), 1, f_touchdcstA1867());
		dcStructField(at, 'p', offsetof(union  A1869, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1869, m6), 1, f_touchdcstA1868());
		dcStructField(at, 'p', offsetof(union  A1869, m7), 1);
		dcStructField(at, 's', offsetof(union  A1869, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1869, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jdspd> */
union  A1870 { j m0; d m1; s m2; p m3; d m4; };
void f_cpA1870(union  A1870 *x, const union  A1870 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1870(const union  A1870 *x, const union  A1870 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1870() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1870), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1870, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1870, m1), 1);
		dcStructField(at, 's', offsetof(union  A1870, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1870, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1870, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ildfdpjsjdp> */
union  A1871 { i m0; l m1; d m2; f m3; d m4; p m5; j m6; s m7; j m8; d m9; p m10; };
void f_cpA1871(union  A1871 *x, const union  A1871 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1871(const union  A1871 *x, const union  A1871 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1871() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(union  A1871), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1871, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1871, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1871, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1871, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1871, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1871, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1871, m6), 1);
		dcStructField(at, 's', offsetof(union  A1871, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1871, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1871, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1871, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {j<jdspd>jssp<ildfdpjsjdp>lpild} */
struct A1872 { j m0; union  A1870 m1; j m2; s m3; s m4; p m5; union  A1871 m6; l m7; p m8; i m9; l m10; d m11; };
void f_cpA1872(struct A1872 *x, const struct A1872 *y) { x->m0 = y->m0; f_cpA1870(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1871(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1872(const struct A1872 *x, const struct A1872 *y) { return x->m0 == y->m0 && f_cmpA1870(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1871(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1872() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1872), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1872, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1872, m1), 1, f_touchdcstA1870());
		dcStructField(at, 'j', offsetof(struct A1872, m2), 1);
		dcStructField(at, 's', offsetof(struct A1872, m3), 1);
		dcStructField(at, 's', offsetof(struct A1872, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1872, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1872, m6), 1, f_touchdcstA1871());
		dcStructField(at, 'l', offsetof(struct A1872, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1872, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1872, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1872, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1872, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {j{clif}f<c[7]{jpcjd[1]lijccjp}<l>d{djpi}p<l[16]ilddcd>psp>j{j<jdspd>jssp<ildfdpjsjdp>lpild}ij<c><f>ld} */
struct A1873 { j m0; struct A1865 m1; f m2; union  A1869 m3; j m4; struct A1872 m5; i m6; j m7; union  A116 m8; union  A438 m9; l m10; d m11; };
void f_cpA1873(struct A1873 *x, const struct A1873 *y) { x->m0 = y->m0; f_cpA1865(&x->m1, &y->m1); x->m2 = y->m2; f_cpA1869(&x->m3, &y->m3); x->m4 = y->m4; f_cpA1872(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; f_cpA116(&x->m8, &y->m8); f_cpA438(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1873(const struct A1873 *x, const struct A1873 *y) { return x->m0 == y->m0 && f_cmpA1865(&x->m1, &y->m1) && x->m2 == y->m2 && f_cmpA1869(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA1872(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA116(&x->m8, &y->m8) && f_cmpA438(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1873() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1873), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1873, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1873, m1), 1, f_touchdcstA1865());
		dcStructField(at, 'f', offsetof(struct A1873, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1873, m3), 1, f_touchdcstA1869());
		dcStructField(at, 'j', offsetof(struct A1873, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1873, m5), 1, f_touchdcstA1872());
		dcStructField(at, 'i', offsetof(struct A1873, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1873, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1873, m8), 1, f_touchdcstA116());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1873, m9), 1, f_touchdcstA438());
		dcStructField(at, 'l', offsetof(struct A1873, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1873, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fi> */
union  A1874 { f m0; i m1; };
void f_cpA1874(union  A1874 *x, const union  A1874 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1874(const union  A1874 *x, const union  A1874 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1874() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1874), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1874, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1874, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ds> */
union  A1875 { d m0; s m1; };
void f_cpA1875(union  A1875 *x, const union  A1875 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1875(const union  A1875 *x, const union  A1875 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1875() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1875), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1875, m0), 1);
		dcStructField(at, 's', offsetof(union  A1875, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ld<ds>scsllldid> */
union  A1876 { l m0; d m1; union  A1875 m2; s m3; c m4; s m5; l m6; l m7; l m8; d m9; i m10; d m11; };
void f_cpA1876(union  A1876 *x, const union  A1876 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1875(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1876(const union  A1876 *x, const union  A1876 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1875(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1876() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1876), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1876, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1876, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1876, m2), 1, f_touchdcstA1875());
		dcStructField(at, 's', offsetof(union  A1876, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1876, m4), 1);
		dcStructField(at, 's', offsetof(union  A1876, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1876, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1876, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1876, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1876, m9), 1);
		dcStructField(at, 'i', offsetof(union  A1876, m10), 1);
		dcStructField(at, 'd', offsetof(union  A1876, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fdc> */
union  A1877 { f m0; d m1; c m2; };
void f_cpA1877(union  A1877 *x, const union  A1877 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1877(const union  A1877 *x, const union  A1877 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1877() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1877), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1877, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1877, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1877, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ill> */
union  A1878 { i m0; l m1; l m2; };
void f_cpA1878(union  A1878 *x, const union  A1878 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1878(const union  A1878 *x, const union  A1878 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1878() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1878), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1878, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1878, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1878, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <csicd> */
union  A1879 { c m0; s m1; i m2; c m3; d m4; };
void f_cpA1879(union  A1879 *x, const union  A1879 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1879(const union  A1879 *x, const union  A1879 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1879() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1879), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1879, m0), 1);
		dcStructField(at, 's', offsetof(union  A1879, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1879, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1879, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1879, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dj<ill><csicd>p<i>ipis} */
struct A1880 { d m0; j m1; union  A1878 m2; union  A1879 m3; p m4; union  A62 m5; i m6; p m7; i m8; s m9; };
void f_cpA1880(struct A1880 *x, const struct A1880 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1878(&x->m2, &y->m2); f_cpA1879(&x->m3, &y->m3); x->m4 = y->m4; f_cpA62(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1880(const struct A1880 *x, const struct A1880 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1878(&x->m2, &y->m2) && f_cmpA1879(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA62(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1880() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1880), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1880, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1880, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1880, m2), 1, f_touchdcstA1878());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1880, m3), 1, f_touchdcstA1879());
		dcStructField(at, 'p', offsetof(struct A1880, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1880, m5), 1, f_touchdcstA62());
		dcStructField(at, 'i', offsetof(struct A1880, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1880, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1880, m8), 1);
		dcStructField(at, 's', offsetof(struct A1880, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fps> */
union  A1881 { f m0; p m1; s m2; };
void f_cpA1881(union  A1881 *x, const union  A1881 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1881(const union  A1881 *x, const union  A1881 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1881() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1881), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1881, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1881, m1), 1);
		dcStructField(at, 's', offsetof(union  A1881, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jcddpii} */
struct A1882 { j m0; c m1; d m2; d m3; p m4; i m5; i m6; };
void f_cpA1882(struct A1882 *x, const struct A1882 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1882(const struct A1882 *x, const struct A1882 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1882() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1882), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1882, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1882, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1882, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1882, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1882, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1882, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1882, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fpljdfjljifp} */
struct A1883 { f m0; p m1; l m2; j m3; d m4; f m5; j m6; l m7; j m8; i m9; f m10; p m11; };
void f_cpA1883(struct A1883 *x, const struct A1883 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1883(const struct A1883 *x, const struct A1883 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1883() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1883), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1883, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1883, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1883, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1883, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1883, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1883, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1883, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1883, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1883, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1883, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1883, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1883, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{jcddpii}{fpljdfjljifp}pjc> */
union  A1884 { struct A1882 m0; struct A1883 m1; p m2; j m3; c m4; };
void f_cpA1884(union  A1884 *x, const union  A1884 *y) { f_cpA1882(&x->m0, &y->m0); f_cpA1883(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1884(const union  A1884 *x, const union  A1884 *y) { return f_cmpA1882(&x->m0, &y->m0) && f_cmpA1883(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1884() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1884), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1884, m0), 1, f_touchdcstA1882());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1884, m1), 1, f_touchdcstA1883());
		dcStructField(at, 'p', offsetof(union  A1884, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1884, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1884, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lpi<{jcddpii}{fpljdfjljifp}pjc>} */
struct A1885 { l m0; p m1; i m2; union  A1884 m3; };
void f_cpA1885(struct A1885 *x, const struct A1885 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1884(&x->m3, &y->m3); };
int f_cmpA1885(const struct A1885 *x, const struct A1885 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1884(&x->m3, &y->m3); };
DCstruct* f_touchdcstA1885() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1885), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1885, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1885, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1885, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1885, m3), 1, f_touchdcstA1884());
		dcCloseStruct(at);
	}
	return at;
};
/* {iislf} */
struct A1886 { i m0; i m1; s m2; l m3; f m4; };
void f_cpA1886(struct A1886 *x, const struct A1886 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1886(const struct A1886 *x, const struct A1886 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1886() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1886), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1886, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1886, m1), 1);
		dcStructField(at, 's', offsetof(struct A1886, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1886, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1886, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <icp[14]pd{iislf}c[2]i> */
union  A1887 { i m0; c m1; p m2[14]; p m3; d m4; struct A1886 m5; c m6[2]; i m7; };
void f_cpA1887(union  A1887 *x, const union  A1887 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m2[13] = y->m2[13]; x->m3 = y->m3; x->m4 = y->m4; f_cpA1886(&x->m5, &y->m5); x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m7 = y->m7; };
int f_cmpA1887(const union  A1887 *x, const union  A1887 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m2[13] == y->m2[13] && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1886(&x->m5, &y->m5) && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m7 == y->m7; };
DCstruct* f_touchdcstA1887() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1887), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1887, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1887, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1887, m2), 14);
		dcStructField(at, 'p', offsetof(union  A1887, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1887, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1887, m5), 1, f_touchdcstA1886());
		dcStructField(at, 'c', offsetof(union  A1887, m6), 2);
		dcStructField(at, 'i', offsetof(union  A1887, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fjdi> */
union  A1888 { f m0; j m1; d m2; i m3; };
void f_cpA1888(union  A1888 *x, const union  A1888 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1888(const union  A1888 *x, const union  A1888 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1888() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1888), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1888, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1888, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1888, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1888, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ijddfc} */
struct A1889 { i m0; j m1; d m2; d m3; f m4; c m5; };
void f_cpA1889(struct A1889 *x, const struct A1889 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1889(const struct A1889 *x, const struct A1889 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1889() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1889), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1889, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1889, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1889, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1889, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1889, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1889, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {icifpfffc} */
struct A1890 { i m0; c m1; i m2; f m3; p m4; f m5; f m6; f m7; c m8; };
void f_cpA1890(struct A1890 *x, const struct A1890 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1890(const struct A1890 *x, const struct A1890 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1890() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1890), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1890, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1890, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1890, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1890, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1890, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1890, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1890, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1890, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1890, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cflsjppscfi} */
struct A1891 { c m0; f m1; l m2; s m3; j m4; p m5; p m6; s m7; c m8; f m9; i m10; };
void f_cpA1891(struct A1891 *x, const struct A1891 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1891(const struct A1891 *x, const struct A1891 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1891() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1891), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1891, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1891, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1891, m2), 1);
		dcStructField(at, 's', offsetof(struct A1891, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1891, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1891, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1891, m6), 1);
		dcStructField(at, 's', offsetof(struct A1891, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1891, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1891, m9), 1);
		dcStructField(at, 'i', offsetof(struct A1891, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pls{ijddfc}fll{icifpfffc}lps{cflsjppscfi}> */
union  A1892 { p m0; l m1; s m2; struct A1889 m3; f m4; l m5; l m6; struct A1890 m7; l m8; p m9; s m10; struct A1891 m11; };
void f_cpA1892(union  A1892 *x, const union  A1892 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1889(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1890(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1891(&x->m11, &y->m11); };
int f_cmpA1892(const union  A1892 *x, const union  A1892 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1889(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1890(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1891(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1892() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1892), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1892, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1892, m1), 1);
		dcStructField(at, 's', offsetof(union  A1892, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1892, m3), 1, f_touchdcstA1889());
		dcStructField(at, 'f', offsetof(union  A1892, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1892, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1892, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1892, m7), 1, f_touchdcstA1890());
		dcStructField(at, 'l', offsetof(union  A1892, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1892, m9), 1);
		dcStructField(at, 's', offsetof(union  A1892, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1892, m11), 1, f_touchdcstA1891());
		dcCloseStruct(at);
	}
	return at;
};
/* {lfl} */
struct A1893 { l m0; f m1; l m2; };
void f_cpA1893(struct A1893 *x, const struct A1893 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1893(const struct A1893 *x, const struct A1893 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1893() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1893), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1893, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1893, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1893, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dp{lfl}i[5]csddddpl> */
union  A1894 { d m0; p m1; struct A1893 m2; i m3[5]; c m4; s m5; d m6; d m7; d m8; d m9; p m10; l m11; };
void f_cpA1894(union  A1894 *x, const union  A1894 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1893(&x->m2, &y->m2); x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1894(const union  A1894 *x, const union  A1894 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1893(&x->m2, &y->m2) && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1894() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1894), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1894, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1894, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1894, m2), 1, f_touchdcstA1893());
		dcStructField(at, 'i', offsetof(union  A1894, m3), 5);
		dcStructField(at, 'c', offsetof(union  A1894, m4), 1);
		dcStructField(at, 's', offsetof(union  A1894, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1894, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1894, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1894, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1894, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1894, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1894, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{i}> */
union  A1895 { struct A5 m0; };
void f_cpA1895(union  A1895 *x, const union  A1895 *y) { f_cpA5(&x->m0, &y->m0); };
int f_cmpA1895(const union  A1895 *x, const union  A1895 *y) { return f_cmpA5(&x->m0, &y->m0); };
DCstruct* f_touchdcstA1895() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A1895), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1895, m0), 1, f_touchdcstA5());
		dcCloseStruct(at);
	}
	return at;
};
/* {sdj<{i}>s{p}fsdcjd} */
struct A1896 { s m0; d m1; j m2; union  A1895 m3; s m4; struct A33 m5; f m6; s m7; d m8; c m9; j m10; d m11; };
void f_cpA1896(struct A1896 *x, const struct A1896 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1895(&x->m3, &y->m3); x->m4 = y->m4; f_cpA33(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1896(const struct A1896 *x, const struct A1896 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1895(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA33(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1896() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1896), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1896, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1896, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1896, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1896, m3), 1, f_touchdcstA1895());
		dcStructField(at, 's', offsetof(struct A1896, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1896, m5), 1, f_touchdcstA33());
		dcStructField(at, 'f', offsetof(struct A1896, m6), 1);
		dcStructField(at, 's', offsetof(struct A1896, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1896, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1896, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1896, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1896, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fsppjjfifipl} */
struct A1897 { f m0; s m1; p m2; p m3; j m4; j m5; f m6; i m7; f m8; i m9; p m10; l m11; };
void f_cpA1897(struct A1897 *x, const struct A1897 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1897(const struct A1897 *x, const struct A1897 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1897() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1897), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1897, m0), 1);
		dcStructField(at, 's', offsetof(struct A1897, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1897, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1897, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1897, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1897, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1897, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1897, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1897, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1897, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1897, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1897, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {icdslsjcfds} */
struct A1898 { i m0; c m1; d m2; s m3; l m4; s m5; j m6; c m7; f m8; d m9; s m10; };
void f_cpA1898(struct A1898 *x, const struct A1898 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; };
int f_cmpA1898(const struct A1898 *x, const struct A1898 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10; };
DCstruct* f_touchdcstA1898() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(11, sizeof(struct A1898), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1898, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1898, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1898, m2), 1);
		dcStructField(at, 's', offsetof(struct A1898, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1898, m4), 1);
		dcStructField(at, 's', offsetof(struct A1898, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1898, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1898, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1898, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1898, m9), 1);
		dcStructField(at, 's', offsetof(struct A1898, m10), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pcfdlddpfijp} */
struct A1899 { p m0; c m1; f m2; d m3; l m4; d m5; d m6; p m7; f m8; i m9; j m10; p m11; };
void f_cpA1899(struct A1899 *x, const struct A1899 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1899(const struct A1899 *x, const struct A1899 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1899() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1899), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1899, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1899, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1899, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1899, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1899, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1899, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1899, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1899, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1899, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1899, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1899, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1899, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ji{j}fdddp{icdslsjcfds}p{pcfdlddpfijp}c} */
struct A1900 { j m0; i m1; struct A117 m2; f m3; d m4; d m5; d m6; p m7; struct A1898 m8; p m9; struct A1899 m10; c m11; };
void f_cpA1900(struct A1900 *x, const struct A1900 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA117(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1898(&x->m8, &y->m8); x->m9 = y->m9; f_cpA1899(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1900(const struct A1900 *x, const struct A1900 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA117(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1898(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA1899(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1900() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1900), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1900, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1900, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1900, m2), 1, f_touchdcstA117());
		dcStructField(at, 'f', offsetof(struct A1900, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1900, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1900, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1900, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1900, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1900, m8), 1, f_touchdcstA1898());
		dcStructField(at, 'p', offsetof(struct A1900, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1900, m10), 1, f_touchdcstA1899());
		dcStructField(at, 'c', offsetof(struct A1900, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ci> */
union  A1901 { c m0; i m1; };
void f_cpA1901(union  A1901 *x, const union  A1901 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1901(const union  A1901 *x, const union  A1901 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1901() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1901), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1901, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1901, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<ci>} */
struct A1902 { union  A1901 m0; };
void f_cpA1902(struct A1902 *x, const struct A1902 *y) { f_cpA1901(&x->m0, &y->m0); };
int f_cmpA1902(const struct A1902 *x, const struct A1902 *y) { return f_cmpA1901(&x->m0, &y->m0); };
DCstruct* f_touchdcstA1902() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A1902), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1902, m0), 1, f_touchdcstA1901());
		dcCloseStruct(at);
	}
	return at;
};
/* <sdfssiil> */
union  A1903 { s m0; d m1; f m2; s m3; s m4; i m5; i m6; l m7; };
void f_cpA1903(union  A1903 *x, const union  A1903 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1903(const union  A1903 *x, const union  A1903 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1903() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1903), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1903, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1903, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1903, m2), 1);
		dcStructField(at, 's', offsetof(union  A1903, m3), 1);
		dcStructField(at, 's', offsetof(union  A1903, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1903, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1903, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1903, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ilsplsdlcipc> */
union  A1904 { i m0; l m1; s m2; p m3; l m4; s m5; d m6; l m7; c m8; i m9; p m10; c m11; };
void f_cpA1904(union  A1904 *x, const union  A1904 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1904(const union  A1904 *x, const union  A1904 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1904() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1904), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1904, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1904, m1), 1);
		dcStructField(at, 's', offsetof(union  A1904, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1904, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1904, m4), 1);
		dcStructField(at, 's', offsetof(union  A1904, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1904, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1904, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1904, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1904, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1904, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1904, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jdsdd[5]pspfdcf> */
union  A1905 { j m0; d m1; s m2; d m3; d m4[5]; p m5; s m6; p m7; f m8; d m9; c m10; f m11; };
void f_cpA1905(union  A1905 *x, const union  A1905 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1905(const union  A1905 *x, const union  A1905 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1905() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1905), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1905, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1905, m1), 1);
		dcStructField(at, 's', offsetof(union  A1905, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1905, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1905, m4), 5);
		dcStructField(at, 'p', offsetof(union  A1905, m5), 1);
		dcStructField(at, 's', offsetof(union  A1905, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1905, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1905, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1905, m9), 1);
		dcStructField(at, 'c', offsetof(union  A1905, m10), 1);
		dcStructField(at, 'f', offsetof(union  A1905, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ipiiipc> */
union  A1906 { i m0; p m1; i m2; i m3; i m4; p m5; c m6; };
void f_cpA1906(union  A1906 *x, const union  A1906 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1906(const union  A1906 *x, const union  A1906 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1906() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1906), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1906, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1906, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1906, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1906, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1906, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1906, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1906, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pjfdj<sdfssiil><ilsplsdlcipc><jdsdd[5]pspfdcf>i<ipiiipc>cf> */
union  A1907 { p m0; j m1; f m2; d m3; j m4; union  A1903 m5; union  A1904 m6; union  A1905 m7; i m8; union  A1906 m9; c m10; f m11; };
void f_cpA1907(union  A1907 *x, const union  A1907 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1903(&x->m5, &y->m5); f_cpA1904(&x->m6, &y->m6); f_cpA1905(&x->m7, &y->m7); x->m8 = y->m8; f_cpA1906(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1907(const union  A1907 *x, const union  A1907 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1903(&x->m5, &y->m5) && f_cmpA1904(&x->m6, &y->m6) && f_cmpA1905(&x->m7, &y->m7) && x->m8 == y->m8 && f_cmpA1906(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1907() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1907), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1907, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1907, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1907, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1907, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1907, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1907, m5), 1, f_touchdcstA1903());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1907, m6), 1, f_touchdcstA1904());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1907, m7), 1, f_touchdcstA1905());
		dcStructField(at, 'i', offsetof(union  A1907, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1907, m9), 1, f_touchdcstA1906());
		dcStructField(at, 'c', offsetof(union  A1907, m10), 1);
		dcStructField(at, 'f', offsetof(union  A1907, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cpficsflff> */
union  A1908 { c m0; p m1; f m2; i m3; c m4; s m5; f m6; l m7; f m8; f m9; };
void f_cpA1908(union  A1908 *x, const union  A1908 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1908(const union  A1908 *x, const union  A1908 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1908() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1908), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1908, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1908, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1908, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1908, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1908, m4), 1);
		dcStructField(at, 's', offsetof(union  A1908, m5), 1);
		dcStructField(at, 'f', offsetof(union  A1908, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1908, m7), 1);
		dcStructField(at, 'f', offsetof(union  A1908, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1908, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ppp<cpficsflff>i> */
union  A1909 { p m0; p m1; p m2; union  A1908 m3; i m4; };
void f_cpA1909(union  A1909 *x, const union  A1909 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1908(&x->m3, &y->m3); x->m4 = y->m4; };
int f_cmpA1909(const union  A1909 *x, const union  A1909 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1908(&x->m3, &y->m3) && x->m4 == y->m4; };
DCstruct* f_touchdcstA1909() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1909), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1909, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1909, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1909, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1909, m3), 1, f_touchdcstA1908());
		dcStructField(at, 'i', offsetof(union  A1909, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pj[2]jdc> */
union  A1910 { p m0; j m1[2]; j m2; d m3; c m4; };
void f_cpA1910(union  A1910 *x, const union  A1910 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1910(const union  A1910 *x, const union  A1910 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1910() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1910), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1910, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1910, m1), 2);
		dcStructField(at, 'j', offsetof(union  A1910, m2), 1);
		dcStructField(at, 'd', offsetof(union  A1910, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1910, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dlc> */
union  A1911 { d m0; l m1; c m2; };
void f_cpA1911(union  A1911 *x, const union  A1911 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1911(const union  A1911 *x, const union  A1911 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1911() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1911), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1911, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1911, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1911, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {l[8]l} */
struct A1912 { l m0[8]; l m1; };
void f_cpA1912(struct A1912 *x, const struct A1912 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m1 = y->m1; };
int f_cmpA1912(const struct A1912 *x, const struct A1912 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m1 == y->m1; };
DCstruct* f_touchdcstA1912() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1912), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1912, m0), 8);
		dcStructField(at, 'l', offsetof(struct A1912, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ffs} */
struct A1913 { f m0; f m1; s m2; };
void f_cpA1913(struct A1913 *x, const struct A1913 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1913(const struct A1913 *x, const struct A1913 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1913() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1913), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1913, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1913, m1), 1);
		dcStructField(at, 's', offsetof(struct A1913, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lidspfsfppss} */
struct A1914 { l m0; i m1; d m2; s m3; p m4; f m5; s m6; f m7; p m8; p m9; s m10; s m11; };
void f_cpA1914(struct A1914 *x, const struct A1914 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1914(const struct A1914 *x, const struct A1914 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1914() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1914), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1914, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1914, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1914, m2), 1);
		dcStructField(at, 's', offsetof(struct A1914, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1914, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1914, m5), 1);
		dcStructField(at, 's', offsetof(struct A1914, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1914, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1914, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1914, m9), 1);
		dcStructField(at, 's', offsetof(struct A1914, m10), 1);
		dcStructField(at, 's', offsetof(struct A1914, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cpifp} */
struct A1915 { c m0; p m1; i m2; f m3; p m4; };
void f_cpA1915(struct A1915 *x, const struct A1915 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1915(const struct A1915 *x, const struct A1915 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1915() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1915), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1915, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1915, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1915, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1915, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1915, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lf<pj[2]jdc><dlc>scc{l[8]l}{ffs}{lidspfsfppss}f{cpifp}> */
union  A1916 { l m0; f m1; union  A1910 m2; union  A1911 m3; s m4; c m5; c m6; struct A1912 m7; struct A1913 m8; struct A1914 m9; f m10; struct A1915 m11; };
void f_cpA1916(union  A1916 *x, const union  A1916 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1910(&x->m2, &y->m2); f_cpA1911(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1912(&x->m7, &y->m7); f_cpA1913(&x->m8, &y->m8); f_cpA1914(&x->m9, &y->m9); x->m10 = y->m10; f_cpA1915(&x->m11, &y->m11); };
int f_cmpA1916(const union  A1916 *x, const union  A1916 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1910(&x->m2, &y->m2) && f_cmpA1911(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1912(&x->m7, &y->m7) && f_cmpA1913(&x->m8, &y->m8) && f_cmpA1914(&x->m9, &y->m9) && x->m10 == y->m10 && f_cmpA1915(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1916() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1916), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1916, m0), 1);
		dcStructField(at, 'f', offsetof(union  A1916, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1916, m2), 1, f_touchdcstA1910());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1916, m3), 1, f_touchdcstA1911());
		dcStructField(at, 's', offsetof(union  A1916, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1916, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1916, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1916, m7), 1, f_touchdcstA1912());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1916, m8), 1, f_touchdcstA1913());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1916, m9), 1, f_touchdcstA1914());
		dcStructField(at, 'f', offsetof(union  A1916, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1916, m11), 1, f_touchdcstA1915());
		dcCloseStruct(at);
	}
	return at;
};
/* {<pjfdj<sdfssiil><ilsplsdlcipc><jdsdd[5]pspfdcf>i<ipiiipc>cf>spjfs<ppp<cpficsflff>i>idi<lf<pj[2]jdc><dlc>scc{l[8]l}{ffs}{lidspfsfppss}f{cpifp}>i} */
struct A1917 { union  A1907 m0; s m1; p m2; j m3; f m4; s m5; union  A1909 m6; i m7; d m8; i m9; union  A1916 m10; i m11; };
void f_cpA1917(struct A1917 *x, const struct A1917 *y) { f_cpA1907(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1909(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1916(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1917(const struct A1917 *x, const struct A1917 *y) { return f_cmpA1907(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1909(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1916(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1917() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1917), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1917, m0), 1, f_touchdcstA1907());
		dcStructField(at, 's', offsetof(struct A1917, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1917, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1917, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1917, m4), 1);
		dcStructField(at, 's', offsetof(struct A1917, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1917, m6), 1, f_touchdcstA1909());
		dcStructField(at, 'i', offsetof(struct A1917, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1917, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1917, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1917, m10), 1, f_touchdcstA1916());
		dcStructField(at, 'i', offsetof(struct A1917, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pililsipljfj> */
union  A1918 { p m0; i m1; l m2; i m3; l m4; s m5; i m6; p m7; l m8; j m9; f m10; j m11; };
void f_cpA1918(union  A1918 *x, const union  A1918 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1918(const union  A1918 *x, const union  A1918 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1918() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1918), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1918, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1918, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1918, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1918, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1918, m4), 1);
		dcStructField(at, 's', offsetof(union  A1918, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1918, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1918, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1918, m8), 1);
		dcStructField(at, 'j', offsetof(union  A1918, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1918, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1918, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jsi> */
union  A1919 { j m0; s m1; i m2; };
void f_cpA1919(union  A1919 *x, const union  A1919 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1919(const union  A1919 *x, const union  A1919 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1919() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1919), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1919, m0), 1);
		dcStructField(at, 's', offsetof(union  A1919, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1919, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pdp<jsi>dsl} */
struct A1920 { p m0; d m1; p m2; union  A1919 m3; d m4; s m5; l m6; };
void f_cpA1920(struct A1920 *x, const struct A1920 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1919(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1920(const struct A1920 *x, const struct A1920 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1919(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1920() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1920), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1920, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1920, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1920, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1920, m3), 1, f_touchdcstA1919());
		dcStructField(at, 'd', offsetof(struct A1920, m4), 1);
		dcStructField(at, 's', offsetof(struct A1920, m5), 1);
		dcStructField(at, 'l', offsetof(struct A1920, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dslscj[5]cc> */
union  A1921 { d m0; s m1; l m2; s m3; c m4; j m5[5]; c m6; c m7; };
void f_cpA1921(union  A1921 *x, const union  A1921 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m6 = y->m6; x->m7 = y->m7; };
int f_cmpA1921(const union  A1921 *x, const union  A1921 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m6 == y->m6 && x->m7 == y->m7; };
DCstruct* f_touchdcstA1921() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1921), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1921, m0), 1);
		dcStructField(at, 's', offsetof(union  A1921, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1921, m2), 1);
		dcStructField(at, 's', offsetof(union  A1921, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1921, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1921, m5), 5);
		dcStructField(at, 'c', offsetof(union  A1921, m6), 1);
		dcStructField(at, 'c', offsetof(union  A1921, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ps[6]d{pdp<jsi>dsl}csdslsf<dslscj[5]cc>> */
union  A1922 { p m0; s m1[6]; d m2; struct A1920 m3; c m4; s m5; d m6; s m7; l m8; s m9; f m10; union  A1921 m11; };
void f_cpA1922(union  A1922 *x, const union  A1922 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m2 = y->m2; f_cpA1920(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1921(&x->m11, &y->m11); };
int f_cmpA1922(const union  A1922 *x, const union  A1922 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m2 == y->m2 && f_cmpA1920(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1921(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1922() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1922), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A1922, m0), 1);
		dcStructField(at, 's', offsetof(union  A1922, m1), 6);
		dcStructField(at, 'd', offsetof(union  A1922, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1922, m3), 1, f_touchdcstA1920());
		dcStructField(at, 'c', offsetof(union  A1922, m4), 1);
		dcStructField(at, 's', offsetof(union  A1922, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1922, m6), 1);
		dcStructField(at, 's', offsetof(union  A1922, m7), 1);
		dcStructField(at, 'l', offsetof(union  A1922, m8), 1);
		dcStructField(at, 's', offsetof(union  A1922, m9), 1);
		dcStructField(at, 'f', offsetof(union  A1922, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1922, m11), 1, f_touchdcstA1921());
		dcCloseStruct(at);
	}
	return at;
};
/* <cilpijisdipc> */
union  A1923 { c m0; i m1; l m2; p m3; i m4; j m5; i m6; s m7; d m8; i m9; p m10; c m11; };
void f_cpA1923(union  A1923 *x, const union  A1923 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1923(const union  A1923 *x, const union  A1923 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1923() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1923), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1923, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1923, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1923, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1923, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1923, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1923, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1923, m6), 1);
		dcStructField(at, 's', offsetof(union  A1923, m7), 1);
		dcStructField(at, 'd', offsetof(union  A1923, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1923, m9), 1);
		dcStructField(at, 'p', offsetof(union  A1923, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1923, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dic} */
struct A1924 { d m0; i m1; c m2; };
void f_cpA1924(struct A1924 *x, const struct A1924 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1924(const struct A1924 *x, const struct A1924 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1924() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1924), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1924, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1924, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1924, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jccs> */
union  A1925 { j m0; c m1; c m2; s m3; };
void f_cpA1925(union  A1925 *x, const union  A1925 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA1925(const union  A1925 *x, const union  A1925 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA1925() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A1925), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1925, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1925, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1925, m2), 1);
		dcStructField(at, 's', offsetof(union  A1925, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jjil{dic}ppllsj<jccs>} */
struct A1926 { j m0; j m1; i m2; l m3; struct A1924 m4; p m5; p m6; l m7; l m8; s m9; j m10; union  A1925 m11; };
void f_cpA1926(struct A1926 *x, const struct A1926 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1924(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA1925(&x->m11, &y->m11); };
int f_cmpA1926(const struct A1926 *x, const struct A1926 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1924(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA1925(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1926() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1926), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1926, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1926, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1926, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1926, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1926, m4), 1, f_touchdcstA1924());
		dcStructField(at, 'p', offsetof(struct A1926, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1926, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1926, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1926, m8), 1);
		dcStructField(at, 's', offsetof(struct A1926, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1926, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1926, m11), 1, f_touchdcstA1925());
		dcCloseStruct(at);
	}
	return at;
};
/* {ji{jjil{dic}ppllsj<jccs>}f} */
struct A1927 { j m0; i m1; struct A1926 m2; f m3; };
void f_cpA1927(struct A1927 *x, const struct A1927 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1926(&x->m2, &y->m2); x->m3 = y->m3; };
int f_cmpA1927(const struct A1927 *x, const struct A1927 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1926(&x->m2, &y->m2) && x->m3 == y->m3; };
DCstruct* f_touchdcstA1927() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A1927), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1927, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1927, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1927, m2), 1, f_touchdcstA1926());
		dcStructField(at, 'f', offsetof(struct A1927, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jli> */
union  A1928 { j m0; l m1; i m2; };
void f_cpA1928(union  A1928 *x, const union  A1928 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1928(const union  A1928 *x, const union  A1928 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1928() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1928), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1928, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1928, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1928, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dp> */
union  A1929 { d m0; p m1; };
void f_cpA1929(union  A1929 *x, const union  A1929 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1929(const union  A1929 *x, const union  A1929 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1929() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1929), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1929, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1929, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{ds}cjfc} */
struct A1930 { struct A1355 m0; c m1; j m2; f m3; c m4; };
void f_cpA1930(struct A1930 *x, const struct A1930 *y) { f_cpA1355(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1930(const struct A1930 *x, const struct A1930 *y) { return f_cmpA1355(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1930() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1930), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1930, m0), 1, f_touchdcstA1355());
		dcStructField(at, 'c', offsetof(struct A1930, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1930, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1930, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1930, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ddjssdjfjssc> */
union  A1931 { d m0; d m1; j m2; s m3; s m4; d m5; j m6; f m7; j m8; s m9; s m10; c m11; };
void f_cpA1931(union  A1931 *x, const union  A1931 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1931(const union  A1931 *x, const union  A1931 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1931() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1931), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1931, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1931, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1931, m2), 1);
		dcStructField(at, 's', offsetof(union  A1931, m3), 1);
		dcStructField(at, 's', offsetof(union  A1931, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1931, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1931, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1931, m7), 1);
		dcStructField(at, 'j', offsetof(union  A1931, m8), 1);
		dcStructField(at, 's', offsetof(union  A1931, m9), 1);
		dcStructField(at, 's', offsetof(union  A1931, m10), 1);
		dcStructField(at, 'c', offsetof(union  A1931, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <<ddjssdjfjssc>> */
union  A1932 { union  A1931 m0; };
void f_cpA1932(union  A1932 *x, const union  A1932 *y) { f_cpA1931(&x->m0, &y->m0); };
int f_cmpA1932(const union  A1932 *x, const union  A1932 *y) { return f_cmpA1931(&x->m0, &y->m0); };
DCstruct* f_touchdcstA1932() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(union  A1932), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1932, m0), 1, f_touchdcstA1931());
		dcCloseStruct(at);
	}
	return at;
};
/* {p<dp>{{ds}cjfc}jl<<ddjssdjfjssc>>scpspd} */
struct A1933 { p m0; union  A1929 m1; struct A1930 m2; j m3; l m4; union  A1932 m5; s m6; c m7; p m8; s m9; p m10; d m11; };
void f_cpA1933(struct A1933 *x, const struct A1933 *y) { x->m0 = y->m0; f_cpA1929(&x->m1, &y->m1); f_cpA1930(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; f_cpA1932(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1933(const struct A1933 *x, const struct A1933 *y) { return x->m0 == y->m0 && f_cmpA1929(&x->m1, &y->m1) && f_cmpA1930(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1932(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1933() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1933), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1933, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1933, m1), 1, f_touchdcstA1929());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1933, m2), 1, f_touchdcstA1930());
		dcStructField(at, 'j', offsetof(struct A1933, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1933, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1933, m5), 1, f_touchdcstA1932());
		dcStructField(at, 's', offsetof(struct A1933, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1933, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1933, m8), 1);
		dcStructField(at, 's', offsetof(struct A1933, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1933, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1933, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ilsfj} */
struct A1934 { i m0; l m1; s m2; f m3; j m4; };
void f_cpA1934(struct A1934 *x, const struct A1934 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1934(const struct A1934 *x, const struct A1934 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1934() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1934), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1934, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1934, m1), 1);
		dcStructField(at, 's', offsetof(struct A1934, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1934, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1934, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {i{i}fsidj<l>pjpp} */
struct A1935 { i m0; struct A5 m1; f m2; s m3; i m4; d m5; j m6; union  A20 m7; p m8; j m9; p m10; p m11; };
void f_cpA1935(struct A1935 *x, const struct A1935 *y) { x->m0 = y->m0; f_cpA5(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA20(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1935(const struct A1935 *x, const struct A1935 *y) { return x->m0 == y->m0 && f_cmpA5(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA20(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1935() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1935), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1935, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1935, m1), 1, f_touchdcstA5());
		dcStructField(at, 'f', offsetof(struct A1935, m2), 1);
		dcStructField(at, 's', offsetof(struct A1935, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1935, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1935, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1935, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1935, m7), 1, f_touchdcstA20());
		dcStructField(at, 'p', offsetof(struct A1935, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1935, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1935, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1935, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lppsicilpsdj[14]> */
union  A1936 { l m0; p m1; p m2; s m3; i m4; c m5; i m6; l m7; p m8; s m9; d m10; j m11[14]; };
void f_cpA1936(union  A1936 *x, const union  A1936 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11[0] = y->m11[0]; x->m11[1] = y->m11[1]; x->m11[2] = y->m11[2]; x->m11[3] = y->m11[3]; x->m11[4] = y->m11[4]; x->m11[5] = y->m11[5]; x->m11[6] = y->m11[6]; x->m11[7] = y->m11[7]; x->m11[8] = y->m11[8]; x->m11[9] = y->m11[9]; x->m11[10] = y->m11[10]; x->m11[11] = y->m11[11]; x->m11[12] = y->m11[12]; x->m11[13] = y->m11[13]; };
int f_cmpA1936(const union  A1936 *x, const union  A1936 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11[0] == y->m11[0] && x->m11[1] == y->m11[1] && x->m11[2] == y->m11[2] && x->m11[3] == y->m11[3] && x->m11[4] == y->m11[4] && x->m11[5] == y->m11[5] && x->m11[6] == y->m11[6] && x->m11[7] == y->m11[7] && x->m11[8] == y->m11[8] && x->m11[9] == y->m11[9] && x->m11[10] == y->m11[10] && x->m11[11] == y->m11[11] && x->m11[12] == y->m11[12] && x->m11[13] == y->m11[13]; };
DCstruct* f_touchdcstA1936() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1936), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1936, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1936, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1936, m2), 1);
		dcStructField(at, 's', offsetof(union  A1936, m3), 1);
		dcStructField(at, 'i', offsetof(union  A1936, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1936, m5), 1);
		dcStructField(at, 'i', offsetof(union  A1936, m6), 1);
		dcStructField(at, 'l', offsetof(union  A1936, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1936, m8), 1);
		dcStructField(at, 's', offsetof(union  A1936, m9), 1);
		dcStructField(at, 'd', offsetof(union  A1936, m10), 1);
		dcStructField(at, 'j', offsetof(union  A1936, m11), 14);
		dcCloseStruct(at);
	}
	return at;
};
/* {iidissi[9]ccppj} */
struct A1937 { i m0; i m1; d m2; i m3; s m4; s m5; i m6[9]; c m7; c m8; p m9; p m10; j m11; };
void f_cpA1937(struct A1937 *x, const struct A1937 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1937(const struct A1937 *x, const struct A1937 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1937() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1937), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1937, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1937, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1937, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1937, m3), 1);
		dcStructField(at, 's', offsetof(struct A1937, m4), 1);
		dcStructField(at, 's', offsetof(struct A1937, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1937, m6), 9);
		dcStructField(at, 'c', offsetof(struct A1937, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1937, m8), 1);
		dcStructField(at, 'p', offsetof(struct A1937, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1937, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1937, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dp<lppsicilpsdj[14]>f<l>l{iidissi[9]ccppj}fpfl<jf>} */
struct A1938 { d m0; p m1; union  A1936 m2; f m3; union  A20 m4; l m5; struct A1937 m6; f m7; p m8; f m9; l m10; union  A679 m11; };
void f_cpA1938(struct A1938 *x, const struct A1938 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1936(&x->m2, &y->m2); x->m3 = y->m3; f_cpA20(&x->m4, &y->m4); x->m5 = y->m5; f_cpA1937(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; f_cpA679(&x->m11, &y->m11); };
int f_cmpA1938(const struct A1938 *x, const struct A1938 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1936(&x->m2, &y->m2) && x->m3 == y->m3 && f_cmpA20(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA1937(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && f_cmpA679(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1938() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1938), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1938, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1938, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1938, m2), 1, f_touchdcstA1936());
		dcStructField(at, 'f', offsetof(struct A1938, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1938, m4), 1, f_touchdcstA20());
		dcStructField(at, 'l', offsetof(struct A1938, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1938, m6), 1, f_touchdcstA1937());
		dcStructField(at, 'f', offsetof(struct A1938, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1938, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1938, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1938, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1938, m11), 1, f_touchdcstA679());
		dcCloseStruct(at);
	}
	return at;
};
/* <d{i{i}fsidj<l>pjpp}{dp<lppsicilpsdj[14]>f<l>l{iidissi[9]ccppj}fpfl<jf>}> */
union  A1939 { d m0; struct A1935 m1; struct A1938 m2; };
void f_cpA1939(union  A1939 *x, const union  A1939 *y) { x->m0 = y->m0; f_cpA1935(&x->m1, &y->m1); f_cpA1938(&x->m2, &y->m2); };
int f_cmpA1939(const union  A1939 *x, const union  A1939 *y) { return x->m0 == y->m0 && f_cmpA1935(&x->m1, &y->m1) && f_cmpA1938(&x->m2, &y->m2); };
DCstruct* f_touchdcstA1939() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1939), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1939, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1939, m1), 1, f_touchdcstA1935());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1939, m2), 1, f_touchdcstA1938());
		dcCloseStruct(at);
	}
	return at;
};
/* {lpjii[8]jdli} */
struct A1940 { l m0; p m1; j m2; i m3; i m4[8]; j m5; d m6; l m7; i m8; };
void f_cpA1940(struct A1940 *x, const struct A1940 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1940(const struct A1940 *x, const struct A1940 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1940() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1940), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1940, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1940, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1940, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1940, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1940, m4), 8);
		dcStructField(at, 'j', offsetof(struct A1940, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1940, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1940, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1940, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ciccjlldc> */
union  A1941 { c m0; i m1; c m2; c m3; j m4; l m5; l m6; d m7; c m8; };
void f_cpA1941(union  A1941 *x, const union  A1941 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1941(const union  A1941 *x, const union  A1941 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1941() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1941), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1941, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1941, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1941, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1941, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1941, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1941, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1941, m6), 1);
		dcStructField(at, 'd', offsetof(union  A1941, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1941, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lpji[15]lldcff} */
struct A1942 { l m0; p m1; j m2; i m3[15]; l m4; l m5; d m6; c m7; f m8; f m9; };
void f_cpA1942(struct A1942 *x, const struct A1942 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m3[12] = y->m3[12]; x->m3[13] = y->m3[13]; x->m3[14] = y->m3[14]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1942(const struct A1942 *x, const struct A1942 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m3[12] == y->m3[12] && x->m3[13] == y->m3[13] && x->m3[14] == y->m3[14] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1942() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1942), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1942, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1942, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1942, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1942, m3), 15);
		dcStructField(at, 'l', offsetof(struct A1942, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1942, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1942, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1942, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1942, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1942, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <{lpjii[8]jdli}sjf<ciccjlldc>plj{lpji[15]lldcff}pli> */
union  A1943 { struct A1940 m0; s m1; j m2; f m3; union  A1941 m4; p m5; l m6; j m7; struct A1942 m8; p m9; l m10; i m11; };
void f_cpA1943(union  A1943 *x, const union  A1943 *y) { f_cpA1940(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; f_cpA1941(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1942(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1943(const union  A1943 *x, const union  A1943 *y) { return f_cmpA1940(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1941(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1942(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1943() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1943), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1943, m0), 1, f_touchdcstA1940());
		dcStructField(at, 's', offsetof(union  A1943, m1), 1);
		dcStructField(at, 'j', offsetof(union  A1943, m2), 1);
		dcStructField(at, 'f', offsetof(union  A1943, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1943, m4), 1, f_touchdcstA1941());
		dcStructField(at, 'p', offsetof(union  A1943, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1943, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1943, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1943, m8), 1, f_touchdcstA1942());
		dcStructField(at, 'p', offsetof(union  A1943, m9), 1);
		dcStructField(at, 'l', offsetof(union  A1943, m10), 1);
		dcStructField(at, 'i', offsetof(union  A1943, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fljpilsccdlj} */
struct A1944 { f m0; l m1; j m2; p m3; i m4; l m5; s m6; c m7; c m8; d m9; l m10; j m11; };
void f_cpA1944(struct A1944 *x, const struct A1944 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1944(const struct A1944 *x, const struct A1944 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1944() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1944), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1944, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1944, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1944, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1944, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1944, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1944, m5), 1);
		dcStructField(at, 's', offsetof(struct A1944, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1944, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1944, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1944, m9), 1);
		dcStructField(at, 'l', offsetof(struct A1944, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1944, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pcpcpfsfpfpp} */
struct A1945 { p m0; c m1; p m2; c m3; p m4; f m5; s m6; f m7; p m8; f m9; p m10; p m11; };
void f_cpA1945(struct A1945 *x, const struct A1945 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1945(const struct A1945 *x, const struct A1945 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1945() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1945), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1945, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1945, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1945, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1945, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1945, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1945, m5), 1);
		dcStructField(at, 's', offsetof(struct A1945, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1945, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1945, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1945, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1945, m10), 1);
		dcStructField(at, 'p', offsetof(struct A1945, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{pcpcpfsfpfpp}<c>} */
struct A1946 { struct A1945 m0; union  A116 m1; };
void f_cpA1946(struct A1946 *x, const struct A1946 *y) { f_cpA1945(&x->m0, &y->m0); f_cpA116(&x->m1, &y->m1); };
int f_cmpA1946(const struct A1946 *x, const struct A1946 *y) { return f_cmpA1945(&x->m0, &y->m0) && f_cmpA116(&x->m1, &y->m1); };
DCstruct* f_touchdcstA1946() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A1946), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1946, m0), 1, f_touchdcstA1945());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1946, m1), 1, f_touchdcstA116());
		dcCloseStruct(at);
	}
	return at;
};
/* {fcdffc[11]iipifs} */
struct A1947 { f m0; c m1; d m2; f m3; f m4; c m5[11]; i m6; i m7; p m8; i m9; f m10; s m11; };
void f_cpA1947(struct A1947 *x, const struct A1947 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m5[6] = y->m5[6]; x->m5[7] = y->m5[7]; x->m5[8] = y->m5[8]; x->m5[9] = y->m5[9]; x->m5[10] = y->m5[10]; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1947(const struct A1947 *x, const struct A1947 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m5[6] == y->m5[6] && x->m5[7] == y->m5[7] && x->m5[8] == y->m5[8] && x->m5[9] == y->m5[9] && x->m5[10] == y->m5[10] && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1947() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1947), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1947, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1947, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1947, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1947, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1947, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1947, m5), 11);
		dcStructField(at, 'i', offsetof(struct A1947, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1947, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1947, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1947, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1947, m10), 1);
		dcStructField(at, 's', offsetof(struct A1947, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ijf[13]fjcpfcfss> */
union  A1948 { i m0; j m1; f m2[13]; f m3; j m4; c m5; p m6; f m7; c m8; f m9; s m10; s m11; };
void f_cpA1948(union  A1948 *x, const union  A1948 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m2[10] = y->m2[10]; x->m2[11] = y->m2[11]; x->m2[12] = y->m2[12]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1948(const union  A1948 *x, const union  A1948 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m2[10] == y->m2[10] && x->m2[11] == y->m2[11] && x->m2[12] == y->m2[12] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1948() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1948), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A1948, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1948, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1948, m2), 13);
		dcStructField(at, 'f', offsetof(union  A1948, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1948, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1948, m5), 1);
		dcStructField(at, 'p', offsetof(union  A1948, m6), 1);
		dcStructField(at, 'f', offsetof(union  A1948, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1948, m8), 1);
		dcStructField(at, 'f', offsetof(union  A1948, m9), 1);
		dcStructField(at, 's', offsetof(union  A1948, m10), 1);
		dcStructField(at, 's', offsetof(union  A1948, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <sdpijjd<ijf[13]fjcpfcfss>jddl> */
union  A1949 { s m0; d m1; p m2; i m3; j m4; j m5; d m6; union  A1948 m7; j m8; d m9; d m10; l m11; };
void f_cpA1949(union  A1949 *x, const union  A1949 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1948(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1949(const union  A1949 *x, const union  A1949 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1948(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1949() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1949), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A1949, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1949, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1949, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1949, m3), 1);
		dcStructField(at, 'j', offsetof(union  A1949, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1949, m5), 1);
		dcStructField(at, 'd', offsetof(union  A1949, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1949, m7), 1, f_touchdcstA1948());
		dcStructField(at, 'j', offsetof(union  A1949, m8), 1);
		dcStructField(at, 'd', offsetof(union  A1949, m9), 1);
		dcStructField(at, 'd', offsetof(union  A1949, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1949, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lpijd[1]pcjspdl> */
union  A1950 { l m0; p m1; i m2; j m3; d m4[1]; p m5; c m6; j m7; s m8; p m9; d m10; l m11; };
void f_cpA1950(union  A1950 *x, const union  A1950 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1950(const union  A1950 *x, const union  A1950 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1950() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1950), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1950, m0), 1);
		dcStructField(at, 'p', offsetof(union  A1950, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1950, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1950, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1950, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1950, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1950, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1950, m7), 1);
		dcStructField(at, 's', offsetof(union  A1950, m8), 1);
		dcStructField(at, 'p', offsetof(union  A1950, m9), 1);
		dcStructField(at, 'd', offsetof(union  A1950, m10), 1);
		dcStructField(at, 'l', offsetof(union  A1950, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<lpijd[1]pcjspdl>} */
struct A1951 { union  A1950 m0; };
void f_cpA1951(struct A1951 *x, const struct A1951 *y) { f_cpA1950(&x->m0, &y->m0); };
int f_cmpA1951(const struct A1951 *x, const struct A1951 *y) { return f_cmpA1950(&x->m0, &y->m0); };
DCstruct* f_touchdcstA1951() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(1, sizeof(struct A1951), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1951, m0), 1, f_touchdcstA1950());
		dcCloseStruct(at);
	}
	return at;
};
/* {ldjjfcjp<sdpijjd<ijf[13]fjcpfcfss>jddl>i{<lpijd[1]pcjspdl>}p} */
struct A1952 { l m0; d m1; j m2; j m3; f m4; c m5; j m6; p m7; union  A1949 m8; i m9; struct A1951 m10; p m11; };
void f_cpA1952(struct A1952 *x, const struct A1952 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA1949(&x->m8, &y->m8); x->m9 = y->m9; f_cpA1951(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1952(const struct A1952 *x, const struct A1952 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA1949(&x->m8, &y->m8) && x->m9 == y->m9 && f_cmpA1951(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1952() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1952), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1952, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1952, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1952, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1952, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1952, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1952, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1952, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1952, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1952, m8), 1, f_touchdcstA1949());
		dcStructField(at, 'i', offsetof(struct A1952, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1952, m10), 1, f_touchdcstA1951());
		dcStructField(at, 'p', offsetof(struct A1952, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jpjcjspslcdi} */
struct A1953 { j m0; p m1; j m2; c m3; j m4; s m5; p m6; s m7; l m8; c m9; d m10; i m11; };
void f_cpA1953(struct A1953 *x, const struct A1953 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1953(const struct A1953 *x, const struct A1953 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1953() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1953), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1953, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1953, m1), 1);
		dcStructField(at, 'j', offsetof(struct A1953, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1953, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1953, m4), 1);
		dcStructField(at, 's', offsetof(struct A1953, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1953, m6), 1);
		dcStructField(at, 's', offsetof(struct A1953, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1953, m8), 1);
		dcStructField(at, 'c', offsetof(struct A1953, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1953, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1953, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ji> */
union  A1954 { j m0; i m1; };
void f_cpA1954(union  A1954 *x, const union  A1954 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1954(const union  A1954 *x, const union  A1954 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1954() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1954), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1954, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1954, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jlllli<ji>spd} */
struct A1955 { j m0; l m1; l m2; l m3; l m4; i m5; union  A1954 m6; s m7; p m8; d m9; };
void f_cpA1955(struct A1955 *x, const struct A1955 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1954(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1955(const struct A1955 *x, const struct A1955 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1954(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1955() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(struct A1955), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1955, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1955, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1955, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1955, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1955, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1955, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1955, m6), 1, f_touchdcstA1954());
		dcStructField(at, 's', offsetof(struct A1955, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1955, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1955, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lcsccdf[2]dpddl} */
struct A1956 { l m0; c m1; s m2; c m3; c m4; d m5; f m6[2]; d m7; p m8; d m9; d m10; l m11; };
void f_cpA1956(struct A1956 *x, const struct A1956 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1956(const struct A1956 *x, const struct A1956 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1956() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1956), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1956, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1956, m1), 1);
		dcStructField(at, 's', offsetof(struct A1956, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1956, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1956, m4), 1);
		dcStructField(at, 'd', offsetof(struct A1956, m5), 1);
		dcStructField(at, 'f', offsetof(struct A1956, m6), 2);
		dcStructField(at, 'd', offsetof(struct A1956, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1956, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1956, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1956, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1956, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lj> */
union  A1957 { l m0; j m1; };
void f_cpA1957(union  A1957 *x, const union  A1957 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA1957(const union  A1957 *x, const union  A1957 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA1957() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(union  A1957), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1957, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1957, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cidjf[14]fs> */
union  A1958 { c m0; i m1; d m2; j m3; f m4[14]; f m5; s m6; };
void f_cpA1958(union  A1958 *x, const union  A1958 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m4[4] = y->m4[4]; x->m4[5] = y->m4[5]; x->m4[6] = y->m4[6]; x->m4[7] = y->m4[7]; x->m4[8] = y->m4[8]; x->m4[9] = y->m4[9]; x->m4[10] = y->m4[10]; x->m4[11] = y->m4[11]; x->m4[12] = y->m4[12]; x->m4[13] = y->m4[13]; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1958(const union  A1958 *x, const union  A1958 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m4[4] == y->m4[4] && x->m4[5] == y->m4[5] && x->m4[6] == y->m4[6] && x->m4[7] == y->m4[7] && x->m4[8] == y->m4[8] && x->m4[9] == y->m4[9] && x->m4[10] == y->m4[10] && x->m4[11] == y->m4[11] && x->m4[12] == y->m4[12] && x->m4[13] == y->m4[13] && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1958() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1958), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1958, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1958, m1), 1);
		dcStructField(at, 'd', offsetof(union  A1958, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1958, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1958, m4), 14);
		dcStructField(at, 'f', offsetof(union  A1958, m5), 1);
		dcStructField(at, 's', offsetof(union  A1958, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {c{lcsccdf[2]dpddl}fpi<lj>ddf<cidjf[14]fs>fd} */
struct A1959 { c m0; struct A1956 m1; f m2; p m3; i m4; union  A1957 m5; d m6; d m7; f m8; union  A1958 m9; f m10; d m11; };
void f_cpA1959(struct A1959 *x, const struct A1959 *y) { x->m0 = y->m0; f_cpA1956(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA1957(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1958(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1959(const struct A1959 *x, const struct A1959 *y) { return x->m0 == y->m0 && f_cmpA1956(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1957(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1958(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1959() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1959), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1959, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1959, m1), 1, f_touchdcstA1956());
		dcStructField(at, 'f', offsetof(struct A1959, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1959, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1959, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1959, m5), 1, f_touchdcstA1957());
		dcStructField(at, 'd', offsetof(struct A1959, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1959, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1959, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1959, m9), 1, f_touchdcstA1958());
		dcStructField(at, 'f', offsetof(struct A1959, m10), 1);
		dcStructField(at, 'd', offsetof(struct A1959, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {p[7]cl} */
struct A1960 { p m0[7]; c m1; l m2; };
void f_cpA1960(struct A1960 *x, const struct A1960 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1960(const struct A1960 *x, const struct A1960 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1960() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A1960), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1960, m0), 7);
		dcStructField(at, 'c', offsetof(struct A1960, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1960, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {icidslpcll[4]fj} */
struct A1961 { i m0; c m1; i m2; d m3; s m4; l m5; p m6; c m7; l m8; l m9[4]; f m10; j m11; };
void f_cpA1961(struct A1961 *x, const struct A1961 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9[0] = y->m9[0]; x->m9[1] = y->m9[1]; x->m9[2] = y->m9[2]; x->m9[3] = y->m9[3]; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1961(const struct A1961 *x, const struct A1961 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9[0] == y->m9[0] && x->m9[1] == y->m9[1] && x->m9[2] == y->m9[2] && x->m9[3] == y->m9[3] && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1961() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1961), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1961, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1961, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1961, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1961, m3), 1);
		dcStructField(at, 's', offsetof(struct A1961, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1961, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1961, m6), 1);
		dcStructField(at, 'c', offsetof(struct A1961, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1961, m8), 1);
		dcStructField(at, 'l', offsetof(struct A1961, m9), 4);
		dcStructField(at, 'f', offsetof(struct A1961, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1961, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dj[5]fjlc> */
union  A1962 { d m0; j m1[5]; f m2; j m3; l m4; c m5; };
void f_cpA1962(union  A1962 *x, const union  A1962 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1962(const union  A1962 *x, const union  A1962 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1962() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1962), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1962, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1962, m1), 5);
		dcStructField(at, 'f', offsetof(union  A1962, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1962, m3), 1);
		dcStructField(at, 'l', offsetof(union  A1962, m4), 1);
		dcStructField(at, 'c', offsetof(union  A1962, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <j{icidslpcll[4]fj}fjslcpps<dj[5]fjlc>j> */
union  A1963 { j m0; struct A1961 m1; f m2; j m3; s m4; l m5; c m6; p m7; p m8; s m9; union  A1962 m10; j m11; };
void f_cpA1963(union  A1963 *x, const union  A1963 *y) { x->m0 = y->m0; f_cpA1961(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1962(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1963(const union  A1963 *x, const union  A1963 *y) { return x->m0 == y->m0 && f_cmpA1961(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1962(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1963() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1963), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1963, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1963, m1), 1, f_touchdcstA1961());
		dcStructField(at, 'f', offsetof(union  A1963, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1963, m3), 1);
		dcStructField(at, 's', offsetof(union  A1963, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1963, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1963, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1963, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1963, m8), 1);
		dcStructField(at, 's', offsetof(union  A1963, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1963, m10), 1, f_touchdcstA1962());
		dcStructField(at, 'j', offsetof(union  A1963, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ljl> */
union  A1964 { l m0; j m1; l m2; };
void f_cpA1964(union  A1964 *x, const union  A1964 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1964(const union  A1964 *x, const union  A1964 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1964() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1964), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1964, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1964, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1964, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cfipccjjsffi} */
struct A1965 { c m0; f m1; i m2; p m3; c m4; c m5; j m6; j m7; s m8; f m9; f m10; i m11; };
void f_cpA1965(struct A1965 *x, const struct A1965 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1965(const struct A1965 *x, const struct A1965 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1965() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1965), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1965, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1965, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1965, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1965, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1965, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1965, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1965, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1965, m7), 1);
		dcStructField(at, 's', offsetof(struct A1965, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1965, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1965, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1965, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dlclf> */
union  A1966 { d m0; l m1; c m2; l m3; f m4; };
void f_cpA1966(union  A1966 *x, const union  A1966 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1966(const union  A1966 *x, const union  A1966 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1966() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1966), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1966, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1966, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1966, m2), 1);
		dcStructField(at, 'l', offsetof(union  A1966, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1966, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {ldfijc} */
struct A1967 { l m0; d m1; f m2; i m3; j m4; c m5; };
void f_cpA1967(struct A1967 *x, const struct A1967 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1967(const struct A1967 *x, const struct A1967 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1967() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1967), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1967, m0), 1);
		dcStructField(at, 'd', offsetof(struct A1967, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1967, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1967, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1967, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1967, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {<ljl>d{cfipccjjsffi}lc<dlclf>ffdi{ldfijc}d} */
struct A1968 { union  A1964 m0; d m1; struct A1965 m2; l m3; c m4; union  A1966 m5; f m6; f m7; d m8; i m9; struct A1967 m10; d m11; };
void f_cpA1968(struct A1968 *x, const struct A1968 *y) { f_cpA1964(&x->m0, &y->m0); x->m1 = y->m1; f_cpA1965(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; f_cpA1966(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1967(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1968(const struct A1968 *x, const struct A1968 *y) { return f_cmpA1964(&x->m0, &y->m0) && x->m1 == y->m1 && f_cmpA1965(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA1966(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1967(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1968() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1968), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1968, m0), 1, f_touchdcstA1964());
		dcStructField(at, 'd', offsetof(struct A1968, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1968, m2), 1, f_touchdcstA1965());
		dcStructField(at, 'l', offsetof(struct A1968, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1968, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1968, m5), 1, f_touchdcstA1966());
		dcStructField(at, 'f', offsetof(struct A1968, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1968, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1968, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1968, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1968, m10), 1, f_touchdcstA1967());
		dcStructField(at, 'd', offsetof(struct A1968, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lpc<j{icidslpcll[4]fj}fjslcpps<dj[5]fjlc>j>ds{<ljl>d{cfipccjjsffi}lc<dlclf>ffdi{ldfijc}d}spjpi} */
struct A1969 { l m0; p m1; c m2; union  A1963 m3; d m4; s m5; struct A1968 m6; s m7; p m8; j m9; p m10; i m11; };
void f_cpA1969(struct A1969 *x, const struct A1969 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1963(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; f_cpA1968(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1969(const struct A1969 *x, const struct A1969 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1963(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1968(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1969() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1969), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1969, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1969, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1969, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1969, m3), 1, f_touchdcstA1963());
		dcStructField(at, 'd', offsetof(struct A1969, m4), 1);
		dcStructField(at, 's', offsetof(struct A1969, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1969, m6), 1, f_touchdcstA1968());
		dcStructField(at, 's', offsetof(struct A1969, m7), 1);
		dcStructField(at, 'p', offsetof(struct A1969, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1969, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1969, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1969, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <dcp> */
union  A1970 { d m0; c m1; p m2; };
void f_cpA1970(union  A1970 *x, const union  A1970 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1970(const union  A1970 *x, const union  A1970 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1970() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1970), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1970, m0), 1);
		dcStructField(at, 'c', offsetof(union  A1970, m1), 1);
		dcStructField(at, 'p', offsetof(union  A1970, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dsifcfsfjffi} */
struct A1971 { d m0; s m1; i m2; f m3; c m4; f m5; s m6; f m7; j m8; f m9; f m10; i m11; };
void f_cpA1971(struct A1971 *x, const struct A1971 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1971(const struct A1971 *x, const struct A1971 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1971() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1971), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1971, m0), 1);
		dcStructField(at, 's', offsetof(struct A1971, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1971, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1971, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1971, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1971, m5), 1);
		dcStructField(at, 's', offsetof(struct A1971, m6), 1);
		dcStructField(at, 'f', offsetof(struct A1971, m7), 1);
		dcStructField(at, 'j', offsetof(struct A1971, m8), 1);
		dcStructField(at, 'f', offsetof(struct A1971, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1971, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1971, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <j<dcp>lcsd{dsifcfsfjffi}p> */
union  A1972 { j m0; union  A1970 m1; l m2; c m3; s m4; d m5; struct A1971 m6; p m7; };
void f_cpA1972(union  A1972 *x, const union  A1972 *y) { x->m0 = y->m0; f_cpA1970(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1971(&x->m6, &y->m6); x->m7 = y->m7; };
int f_cmpA1972(const union  A1972 *x, const union  A1972 *y) { return x->m0 == y->m0 && f_cmpA1970(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1971(&x->m6, &y->m6) && x->m7 == y->m7; };
DCstruct* f_touchdcstA1972() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A1972), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1972, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1972, m1), 1, f_touchdcstA1970());
		dcStructField(at, 'l', offsetof(union  A1972, m2), 1);
		dcStructField(at, 'c', offsetof(union  A1972, m3), 1);
		dcStructField(at, 's', offsetof(union  A1972, m4), 1);
		dcStructField(at, 'd', offsetof(union  A1972, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1972, m6), 1, f_touchdcstA1971());
		dcStructField(at, 'p', offsetof(union  A1972, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cifdlpppiifc} */
struct A1973 { c m0; i m1; f m2; d m3; l m4; p m5; p m6; p m7; i m8; i m9; f m10; c m11; };
void f_cpA1973(struct A1973 *x, const struct A1973 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1973(const struct A1973 *x, const struct A1973 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1973() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1973), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1973, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1973, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1973, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1973, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1973, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1973, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1973, m6), 1);
		dcStructField(at, 'p', offsetof(struct A1973, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1973, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1973, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1973, m10), 1);
		dcStructField(at, 'c', offsetof(struct A1973, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lj[6]dls} */
struct A1974 { l m0; j m1[6]; d m2; l m3; s m4; };
void f_cpA1974(struct A1974 *x, const struct A1974 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1974(const struct A1974 *x, const struct A1974 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1974() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A1974), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1974, m0), 1);
		dcStructField(at, 'j', offsetof(struct A1974, m1), 6);
		dcStructField(at, 'd', offsetof(struct A1974, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1974, m3), 1);
		dcStructField(at, 's', offsetof(struct A1974, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <flfpf> */
union  A1975 { f m0; l m1; f m2; p m3; f m4; };
void f_cpA1975(union  A1975 *x, const union  A1975 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA1975(const union  A1975 *x, const union  A1975 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA1975() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(union  A1975), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A1975, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1975, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1975, m2), 1);
		dcStructField(at, 'p', offsetof(union  A1975, m3), 1);
		dcStructField(at, 'f', offsetof(union  A1975, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jis{cifdlpppiifc}sjl{lj[6]dls}f{c}c<flfpf>> */
union  A1976 { j m0; i m1; s m2; struct A1973 m3; s m4; j m5; l m6; struct A1974 m7; f m8; struct A212 m9; c m10; union  A1975 m11; };
void f_cpA1976(union  A1976 *x, const union  A1976 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1973(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1974(&x->m7, &y->m7); x->m8 = y->m8; f_cpA212(&x->m9, &y->m9); x->m10 = y->m10; f_cpA1975(&x->m11, &y->m11); };
int f_cmpA1976(const union  A1976 *x, const union  A1976 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1973(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1974(&x->m7, &y->m7) && x->m8 == y->m8 && f_cmpA212(&x->m9, &y->m9) && x->m10 == y->m10 && f_cmpA1975(&x->m11, &y->m11); };
DCstruct* f_touchdcstA1976() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1976), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1976, m0), 1);
		dcStructField(at, 'i', offsetof(union  A1976, m1), 1);
		dcStructField(at, 's', offsetof(union  A1976, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1976, m3), 1, f_touchdcstA1973());
		dcStructField(at, 's', offsetof(union  A1976, m4), 1);
		dcStructField(at, 'j', offsetof(union  A1976, m5), 1);
		dcStructField(at, 'l', offsetof(union  A1976, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1976, m7), 1, f_touchdcstA1974());
		dcStructField(at, 'f', offsetof(union  A1976, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1976, m9), 1, f_touchdcstA212());
		dcStructField(at, 'c', offsetof(union  A1976, m10), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1976, m11), 1, f_touchdcstA1975());
		dcCloseStruct(at);
	}
	return at;
};
/* {fpdifjd} */
struct A1977 { f m0; p m1; d m2; i m3; f m4; j m5; d m6; };
void f_cpA1977(struct A1977 *x, const struct A1977 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA1977(const struct A1977 *x, const struct A1977 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA1977() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A1977), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1977, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1977, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1977, m2), 1);
		dcStructField(at, 'i', offsetof(struct A1977, m3), 1);
		dcStructField(at, 'f', offsetof(struct A1977, m4), 1);
		dcStructField(at, 'j', offsetof(struct A1977, m5), 1);
		dcStructField(at, 'd', offsetof(struct A1977, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {llsflfp{fpdifjd}ijcj} */
struct A1978 { l m0; l m1; s m2; f m3; l m4; f m5; p m6; struct A1977 m7; i m8; j m9; c m10; j m11; };
void f_cpA1978(struct A1978 *x, const struct A1978 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA1977(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1978(const struct A1978 *x, const struct A1978 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA1977(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1978() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1978), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A1978, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1978, m1), 1);
		dcStructField(at, 's', offsetof(struct A1978, m2), 1);
		dcStructField(at, 'f', offsetof(struct A1978, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1978, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1978, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1978, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1978, m7), 1, f_touchdcstA1977());
		dcStructField(at, 'i', offsetof(struct A1978, m8), 1);
		dcStructField(at, 'j', offsetof(struct A1978, m9), 1);
		dcStructField(at, 'c', offsetof(struct A1978, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1978, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <d<jis{cifdlpppiifc}sjl{lj[6]dls}f{c}c<flfpf>>{llsflfp{fpdifjd}ijcj}c[7]fp> */
union  A1979 { d m0; union  A1976 m1; struct A1978 m2; c m3[7]; f m4; p m5; };
void f_cpA1979(union  A1979 *x, const union  A1979 *y) { x->m0 = y->m0; f_cpA1976(&x->m1, &y->m1); f_cpA1978(&x->m2, &y->m2); x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1979(const union  A1979 *x, const union  A1979 *y) { return x->m0 == y->m0 && f_cmpA1976(&x->m1, &y->m1) && f_cmpA1978(&x->m2, &y->m2) && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1979() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A1979), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A1979, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1979, m1), 1, f_touchdcstA1976());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1979, m2), 1, f_touchdcstA1978());
		dcStructField(at, 'c', offsetof(union  A1979, m3), 7);
		dcStructField(at, 'f', offsetof(union  A1979, m4), 1);
		dcStructField(at, 'p', offsetof(union  A1979, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {discjpi[14]d} */
struct A1980 { d m0; i m1; s m2; c m3; j m4; p m5; i m6[14]; d m7; };
void f_cpA1980(struct A1980 *x, const struct A1980 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6[0] = y->m6[0]; x->m6[1] = y->m6[1]; x->m6[2] = y->m6[2]; x->m6[3] = y->m6[3]; x->m6[4] = y->m6[4]; x->m6[5] = y->m6[5]; x->m6[6] = y->m6[6]; x->m6[7] = y->m6[7]; x->m6[8] = y->m6[8]; x->m6[9] = y->m6[9]; x->m6[10] = y->m6[10]; x->m6[11] = y->m6[11]; x->m6[12] = y->m6[12]; x->m6[13] = y->m6[13]; x->m7 = y->m7; };
int f_cmpA1980(const struct A1980 *x, const struct A1980 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6[0] == y->m6[0] && x->m6[1] == y->m6[1] && x->m6[2] == y->m6[2] && x->m6[3] == y->m6[3] && x->m6[4] == y->m6[4] && x->m6[5] == y->m6[5] && x->m6[6] == y->m6[6] && x->m6[7] == y->m6[7] && x->m6[8] == y->m6[8] && x->m6[9] == y->m6[9] && x->m6[10] == y->m6[10] && x->m6[11] == y->m6[11] && x->m6[12] == y->m6[12] && x->m6[13] == y->m6[13] && x->m7 == y->m7; };
DCstruct* f_touchdcstA1980() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(struct A1980), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A1980, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1980, m1), 1);
		dcStructField(at, 's', offsetof(struct A1980, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1980, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1980, m4), 1);
		dcStructField(at, 'p', offsetof(struct A1980, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1980, m6), 14);
		dcStructField(at, 'd', offsetof(struct A1980, m7), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pcc[2]idfplfdjs} */
struct A1981 { p m0; c m1; c m2[2]; i m3; d m4; f m5; p m6; l m7; f m8; d m9; j m10; s m11; };
void f_cpA1981(struct A1981 *x, const struct A1981 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1981(const struct A1981 *x, const struct A1981 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1981() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1981), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1981, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1981, m1), 1);
		dcStructField(at, 'c', offsetof(struct A1981, m2), 2);
		dcStructField(at, 'i', offsetof(struct A1981, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1981, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1981, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1981, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1981, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1981, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1981, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1981, m10), 1);
		dcStructField(at, 's', offsetof(struct A1981, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {clpspsplfdjc} */
struct A1982 { c m0; l m1; p m2; s m3; p m4; s m5; p m6; l m7; f m8; d m9; j m10; c m11; };
void f_cpA1982(struct A1982 *x, const struct A1982 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1982(const struct A1982 *x, const struct A1982 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1982() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1982), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1982, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1982, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1982, m2), 1);
		dcStructField(at, 's', offsetof(struct A1982, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1982, m4), 1);
		dcStructField(at, 's', offsetof(struct A1982, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1982, m6), 1);
		dcStructField(at, 'l', offsetof(struct A1982, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1982, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1982, m9), 1);
		dcStructField(at, 'j', offsetof(struct A1982, m10), 1);
		dcStructField(at, 'c', offsetof(struct A1982, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {cidjifijf} */
struct A1983 { c m0; i m1; d m2; j m3; i m4; f m5; i m6; j m7; f m8; };
void f_cpA1983(struct A1983 *x, const struct A1983 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1983(const struct A1983 *x, const struct A1983 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1983() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A1983), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1983, m0), 1);
		dcStructField(at, 'i', offsetof(struct A1983, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1983, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1983, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1983, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1983, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1983, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1983, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1983, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {clpjlc[6]} */
struct A1984 { c m0; l m1; p m2; j m3; l m4; c m5[6]; };
void f_cpA1984(struct A1984 *x, const struct A1984 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; };
int f_cmpA1984(const struct A1984 *x, const struct A1984 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5]; };
DCstruct* f_touchdcstA1984() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1984), DC_TRUE);
		dcStructField(at, 'c', offsetof(struct A1984, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1984, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1984, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1984, m3), 1);
		dcStructField(at, 'l', offsetof(struct A1984, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1984, m5), 6);
		dcCloseStruct(at);
	}
	return at;
};
/* {jfd{discjpi[14]d}{pcc[2]idfplfdjs}d{clpspsplfdjc}{cidjifijf}{clpjlc[6]}cdc} */
struct A1985 { j m0; f m1; d m2; struct A1980 m3; struct A1981 m4; d m5; struct A1982 m6; struct A1983 m7; struct A1984 m8; c m9; d m10; c m11; };
void f_cpA1985(struct A1985 *x, const struct A1985 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1980(&x->m3, &y->m3); f_cpA1981(&x->m4, &y->m4); x->m5 = y->m5; f_cpA1982(&x->m6, &y->m6); f_cpA1983(&x->m7, &y->m7); f_cpA1984(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1985(const struct A1985 *x, const struct A1985 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1980(&x->m3, &y->m3) && f_cmpA1981(&x->m4, &y->m4) && x->m5 == y->m5 && f_cmpA1982(&x->m6, &y->m6) && f_cmpA1983(&x->m7, &y->m7) && f_cmpA1984(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1985() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1985), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1985, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1985, m1), 1);
		dcStructField(at, 'd', offsetof(struct A1985, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1985, m3), 1, f_touchdcstA1980());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1985, m4), 1, f_touchdcstA1981());
		dcStructField(at, 'd', offsetof(struct A1985, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1985, m6), 1, f_touchdcstA1982());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1985, m7), 1, f_touchdcstA1983());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1985, m8), 1, f_touchdcstA1984());
		dcStructField(at, 'c', offsetof(struct A1985, m9), 1);
		dcStructField(at, 'd', offsetof(struct A1985, m10), 1);
		dcStructField(at, 'c', offsetof(struct A1985, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {s[6]dfsdi} */
struct A1986 { s m0[6]; d m1; f m2; s m3; d m4; i m5; };
void f_cpA1986(struct A1986 *x, const struct A1986 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA1986(const struct A1986 *x, const struct A1986 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA1986() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A1986), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1986, m0), 6);
		dcStructField(at, 'd', offsetof(struct A1986, m1), 1);
		dcStructField(at, 'f', offsetof(struct A1986, m2), 1);
		dcStructField(at, 's', offsetof(struct A1986, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1986, m4), 1);
		dcStructField(at, 'i', offsetof(struct A1986, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jdl> */
union  A1987 { j m0; d m1; l m2; };
void f_cpA1987(union  A1987 *x, const union  A1987 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1987(const union  A1987 *x, const union  A1987 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1987() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1987), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A1987, m0), 1);
		dcStructField(at, 'd', offsetof(union  A1987, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1987, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {scpdcfsjdi{lj}p} */
struct A1988 { s m0; c m1; p m2; d m3; c m4; f m5; s m6; j m7; d m8; i m9; struct A326 m10; p m11; };
void f_cpA1988(struct A1988 *x, const struct A1988 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA326(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1988(const struct A1988 *x, const struct A1988 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA326(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1988() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1988), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1988, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1988, m1), 1);
		dcStructField(at, 'p', offsetof(struct A1988, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1988, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1988, m4), 1);
		dcStructField(at, 'f', offsetof(struct A1988, m5), 1);
		dcStructField(at, 's', offsetof(struct A1988, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1988, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1988, m8), 1);
		dcStructField(at, 'i', offsetof(struct A1988, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1988, m10), 1, f_touchdcstA326());
		dcStructField(at, 'p', offsetof(struct A1988, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lllidfcps> */
union  A1989 { l m0; l m1; l m2; i m3; d m4; f m5; c m6; p m7; s m8; };
void f_cpA1989(union  A1989 *x, const union  A1989 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA1989(const union  A1989 *x, const union  A1989 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA1989() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A1989), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1989, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1989, m1), 1);
		dcStructField(at, 'l', offsetof(union  A1989, m2), 1);
		dcStructField(at, 'i', offsetof(union  A1989, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1989, m4), 1);
		dcStructField(at, 'f', offsetof(union  A1989, m5), 1);
		dcStructField(at, 'c', offsetof(union  A1989, m6), 1);
		dcStructField(at, 'p', offsetof(union  A1989, m7), 1);
		dcStructField(at, 's', offsetof(union  A1989, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jssdispjf<lllidfcps>sj} */
struct A1990 { j m0; s m1; s m2; d m3; i m4; s m5; p m6; j m7; f m8; union  A1989 m9; s m10; j m11; };
void f_cpA1990(struct A1990 *x, const struct A1990 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; f_cpA1989(&x->m9, &y->m9); x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1990(const struct A1990 *x, const struct A1990 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && f_cmpA1989(&x->m9, &y->m9) && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1990() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1990), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A1990, m0), 1);
		dcStructField(at, 's', offsetof(struct A1990, m1), 1);
		dcStructField(at, 's', offsetof(struct A1990, m2), 1);
		dcStructField(at, 'd', offsetof(struct A1990, m3), 1);
		dcStructField(at, 'i', offsetof(struct A1990, m4), 1);
		dcStructField(at, 's', offsetof(struct A1990, m5), 1);
		dcStructField(at, 'p', offsetof(struct A1990, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1990, m7), 1);
		dcStructField(at, 'f', offsetof(struct A1990, m8), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1990, m9), 1, f_touchdcstA1989());
		dcStructField(at, 's', offsetof(struct A1990, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1990, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fcildsciispj} */
struct A1991 { f m0; c m1; i m2; l m3; d m4; s m5; c m6; i m7; i m8; s m9; p m10; j m11; };
void f_cpA1991(struct A1991 *x, const struct A1991 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1991(const struct A1991 *x, const struct A1991 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1991() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1991), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1991, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1991, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1991, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1991, m3), 1);
		dcStructField(at, 'd', offsetof(struct A1991, m4), 1);
		dcStructField(at, 's', offsetof(struct A1991, m5), 1);
		dcStructField(at, 'c', offsetof(struct A1991, m6), 1);
		dcStructField(at, 'i', offsetof(struct A1991, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1991, m8), 1);
		dcStructField(at, 's', offsetof(struct A1991, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1991, m10), 1);
		dcStructField(at, 'j', offsetof(struct A1991, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iplpcl{fcildsciispj}jcd{s}c} */
struct A1992 { i m0; p m1; l m2; p m3; c m4; l m5; struct A1991 m6; j m7; c m8; d m9; struct A162 m10; c m11; };
void f_cpA1992(struct A1992 *x, const struct A1992 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1991(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA162(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1992(const struct A1992 *x, const struct A1992 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1991(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA162(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1992() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1992), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A1992, m0), 1);
		dcStructField(at, 'p', offsetof(struct A1992, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1992, m2), 1);
		dcStructField(at, 'p', offsetof(struct A1992, m3), 1);
		dcStructField(at, 'c', offsetof(struct A1992, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1992, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1992, m6), 1, f_touchdcstA1991());
		dcStructField(at, 'j', offsetof(struct A1992, m7), 1);
		dcStructField(at, 'c', offsetof(struct A1992, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1992, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1992, m10), 1, f_touchdcstA162());
		dcStructField(at, 'c', offsetof(struct A1992, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <ljf> */
union  A1993 { l m0; j m1; f m2; };
void f_cpA1993(union  A1993 *x, const union  A1993 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA1993(const union  A1993 *x, const union  A1993 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA1993() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A1993), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1993, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1993, m1), 1);
		dcStructField(at, 'f', offsetof(union  A1993, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cj{iplpcl{fcildsciispj}jcd{s}c}ici<ljf>lci> */
union  A1994 { c m0; j m1; struct A1992 m2; i m3; c m4; i m5; union  A1993 m6; l m7; c m8; i m9; };
void f_cpA1994(union  A1994 *x, const union  A1994 *y) { x->m0 = y->m0; x->m1 = y->m1; f_cpA1992(&x->m2, &y->m2); x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1993(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA1994(const union  A1994 *x, const union  A1994 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && f_cmpA1992(&x->m2, &y->m2) && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1993(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA1994() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A1994), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1994, m0), 1);
		dcStructField(at, 'j', offsetof(union  A1994, m1), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1994, m2), 1, f_touchdcstA1992());
		dcStructField(at, 'i', offsetof(union  A1994, m3), 1);
		dcStructField(at, 'c', offsetof(union  A1994, m4), 1);
		dcStructField(at, 'i', offsetof(union  A1994, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1994, m6), 1, f_touchdcstA1993());
		dcStructField(at, 'l', offsetof(union  A1994, m7), 1);
		dcStructField(at, 'c', offsetof(union  A1994, m8), 1);
		dcStructField(at, 'i', offsetof(union  A1994, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {plllpcididfl} */
struct A1995 { p m0; l m1; l m2; l m3; p m4; c m5; i m6; d m7; i m8; d m9; f m10; l m11; };
void f_cpA1995(struct A1995 *x, const struct A1995 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1995(const struct A1995 *x, const struct A1995 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1995() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1995), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A1995, m0), 1);
		dcStructField(at, 'l', offsetof(struct A1995, m1), 1);
		dcStructField(at, 'l', offsetof(struct A1995, m2), 1);
		dcStructField(at, 'l', offsetof(struct A1995, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1995, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1995, m5), 1);
		dcStructField(at, 'i', offsetof(struct A1995, m6), 1);
		dcStructField(at, 'd', offsetof(struct A1995, m7), 1);
		dcStructField(at, 'i', offsetof(struct A1995, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1995, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1995, m10), 1);
		dcStructField(at, 'l', offsetof(struct A1995, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fcicpl{plllpcididfl}jldp[8]i} */
struct A1996 { f m0; c m1; i m2; c m3; p m4; l m5; struct A1995 m6; j m7; l m8; d m9; p m10[8]; i m11; };
void f_cpA1996(struct A1996 *x, const struct A1996 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; f_cpA1995(&x->m6, &y->m6); x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m11 = y->m11; };
int f_cmpA1996(const struct A1996 *x, const struct A1996 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && f_cmpA1995(&x->m6, &y->m6) && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m11 == y->m11; };
DCstruct* f_touchdcstA1996() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1996), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A1996, m0), 1);
		dcStructField(at, 'c', offsetof(struct A1996, m1), 1);
		dcStructField(at, 'i', offsetof(struct A1996, m2), 1);
		dcStructField(at, 'c', offsetof(struct A1996, m3), 1);
		dcStructField(at, 'p', offsetof(struct A1996, m4), 1);
		dcStructField(at, 'l', offsetof(struct A1996, m5), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A1996, m6), 1, f_touchdcstA1995());
		dcStructField(at, 'j', offsetof(struct A1996, m7), 1);
		dcStructField(at, 'l', offsetof(struct A1996, m8), 1);
		dcStructField(at, 'd', offsetof(struct A1996, m9), 1);
		dcStructField(at, 'p', offsetof(struct A1996, m10), 8);
		dcStructField(at, 'i', offsetof(struct A1996, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <llcjdl[6]c> */
union  A1997 { l m0; l m1; c m2; j m3; d m4; l m5[6]; c m6; };
void f_cpA1997(union  A1997 *x, const union  A1997 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5[0] = y->m5[0]; x->m5[1] = y->m5[1]; x->m5[2] = y->m5[2]; x->m5[3] = y->m5[3]; x->m5[4] = y->m5[4]; x->m5[5] = y->m5[5]; x->m6 = y->m6; };
int f_cmpA1997(const union  A1997 *x, const union  A1997 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5[0] == y->m5[0] && x->m5[1] == y->m5[1] && x->m5[2] == y->m5[2] && x->m5[3] == y->m5[3] && x->m5[4] == y->m5[4] && x->m5[5] == y->m5[5] && x->m6 == y->m6; };
DCstruct* f_touchdcstA1997() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(union  A1997), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A1997, m0), 1);
		dcStructField(at, 'l', offsetof(union  A1997, m1), 1);
		dcStructField(at, 'c', offsetof(union  A1997, m2), 1);
		dcStructField(at, 'j', offsetof(union  A1997, m3), 1);
		dcStructField(at, 'd', offsetof(union  A1997, m4), 1);
		dcStructField(at, 'l', offsetof(union  A1997, m5), 6);
		dcStructField(at, 'c', offsetof(union  A1997, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {sfsjjcjjdlfi} */
struct A1998 { s m0; f m1; s m2; j m3; j m4; c m5; j m6; j m7; d m8; l m9; f m10; i m11; };
void f_cpA1998(struct A1998 *x, const struct A1998 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA1998(const struct A1998 *x, const struct A1998 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA1998() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A1998), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A1998, m0), 1);
		dcStructField(at, 'f', offsetof(struct A1998, m1), 1);
		dcStructField(at, 's', offsetof(struct A1998, m2), 1);
		dcStructField(at, 'j', offsetof(struct A1998, m3), 1);
		dcStructField(at, 'j', offsetof(struct A1998, m4), 1);
		dcStructField(at, 'c', offsetof(struct A1998, m5), 1);
		dcStructField(at, 'j', offsetof(struct A1998, m6), 1);
		dcStructField(at, 'j', offsetof(struct A1998, m7), 1);
		dcStructField(at, 'd', offsetof(struct A1998, m8), 1);
		dcStructField(at, 'l', offsetof(struct A1998, m9), 1);
		dcStructField(at, 'f', offsetof(struct A1998, m10), 1);
		dcStructField(at, 'i', offsetof(struct A1998, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <csi<llcjdl[6]c>{sfsjjcjjdlfi}cjjpc<fl>j> */
union  A1999 { c m0; s m1; i m2; union  A1997 m3; struct A1998 m4; c m5; j m6; j m7; p m8; c m9; union  A1785 m10; j m11; };
void f_cpA1999(union  A1999 *x, const union  A1999 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; f_cpA1997(&x->m3, &y->m3); f_cpA1998(&x->m4, &y->m4); x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA1785(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA1999(const union  A1999 *x, const union  A1999 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA1997(&x->m3, &y->m3) && f_cmpA1998(&x->m4, &y->m4) && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA1785(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA1999() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A1999), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A1999, m0), 1);
		dcStructField(at, 's', offsetof(union  A1999, m1), 1);
		dcStructField(at, 'i', offsetof(union  A1999, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1999, m3), 1, f_touchdcstA1997());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1999, m4), 1, f_touchdcstA1998());
		dcStructField(at, 'c', offsetof(union  A1999, m5), 1);
		dcStructField(at, 'j', offsetof(union  A1999, m6), 1);
		dcStructField(at, 'j', offsetof(union  A1999, m7), 1);
		dcStructField(at, 'p', offsetof(union  A1999, m8), 1);
		dcStructField(at, 'c', offsetof(union  A1999, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A1999, m10), 1, f_touchdcstA1785());
		dcStructField(at, 'j', offsetof(union  A1999, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jilfdjcdf> */
union  A2000 { j m0; i m1; l m2; f m3; d m4; j m5; c m6; d m7; f m8; };
void f_cpA2000(union  A2000 *x, const union  A2000 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA2000(const union  A2000 *x, const union  A2000 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA2000() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(union  A2000), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A2000, m0), 1);
		dcStructField(at, 'i', offsetof(union  A2000, m1), 1);
		dcStructField(at, 'l', offsetof(union  A2000, m2), 1);
		dcStructField(at, 'f', offsetof(union  A2000, m3), 1);
		dcStructField(at, 'd', offsetof(union  A2000, m4), 1);
		dcStructField(at, 'j', offsetof(union  A2000, m5), 1);
		dcStructField(at, 'c', offsetof(union  A2000, m6), 1);
		dcStructField(at, 'd', offsetof(union  A2000, m7), 1);
		dcStructField(at, 'f', offsetof(union  A2000, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lllp[14]sfsp<jilfdjcdf>ffj> */
union  A2001 { l m0; l m1; l m2; p m3[14]; s m4; f m5; s m6; p m7; union  A2000 m8; f m9; f m10; j m11; };
void f_cpA2001(union  A2001 *x, const union  A2001 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m3[12] = y->m3[12]; x->m3[13] = y->m3[13]; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; f_cpA2000(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA2001(const union  A2001 *x, const union  A2001 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m3[12] == y->m3[12] && x->m3[13] == y->m3[13] && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && f_cmpA2000(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA2001() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A2001), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A2001, m0), 1);
		dcStructField(at, 'l', offsetof(union  A2001, m1), 1);
		dcStructField(at, 'l', offsetof(union  A2001, m2), 1);
		dcStructField(at, 'p', offsetof(union  A2001, m3), 14);
		dcStructField(at, 's', offsetof(union  A2001, m4), 1);
		dcStructField(at, 'f', offsetof(union  A2001, m5), 1);
		dcStructField(at, 's', offsetof(union  A2001, m6), 1);
		dcStructField(at, 'p', offsetof(union  A2001, m7), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A2001, m8), 1, f_touchdcstA2000());
		dcStructField(at, 'f', offsetof(union  A2001, m9), 1);
		dcStructField(at, 'f', offsetof(union  A2001, m10), 1);
		dcStructField(at, 'j', offsetof(union  A2001, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {s{fcicpl{plllpcididfl}jldp[8]i}dd<csi<llcjdl[6]c>{sfsjjcjjdlfi}cjjpc<fl>j><lllp[14]sfsp<jilfdjcdf>ffj>ccjcsi} */
struct A2002 { s m0; struct A1996 m1; d m2; d m3; union  A1999 m4; union  A2001 m5; c m6; c m7; j m8; c m9; s m10; i m11; };
void f_cpA2002(struct A2002 *x, const struct A2002 *y) { x->m0 = y->m0; f_cpA1996(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; f_cpA1999(&x->m4, &y->m4); f_cpA2001(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA2002(const struct A2002 *x, const struct A2002 *y) { return x->m0 == y->m0 && f_cmpA1996(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && f_cmpA1999(&x->m4, &y->m4) && f_cmpA2001(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA2002() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A2002), DC_TRUE);
		dcStructField(at, 's', offsetof(struct A2002, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2002, m1), 1, f_touchdcstA1996());
		dcStructField(at, 'd', offsetof(struct A2002, m2), 1);
		dcStructField(at, 'd', offsetof(struct A2002, m3), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2002, m4), 1, f_touchdcstA1999());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2002, m5), 1, f_touchdcstA2001());
		dcStructField(at, 'c', offsetof(struct A2002, m6), 1);
		dcStructField(at, 'c', offsetof(struct A2002, m7), 1);
		dcStructField(at, 'j', offsetof(struct A2002, m8), 1);
		dcStructField(at, 'c', offsetof(struct A2002, m9), 1);
		dcStructField(at, 's', offsetof(struct A2002, m10), 1);
		dcStructField(at, 'i', offsetof(struct A2002, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {pjpisjcid} */
struct A2003 { p m0; j m1; p m2; i m3; s m4; j m5; c m6; i m7; d m8; };
void f_cpA2003(struct A2003 *x, const struct A2003 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA2003(const struct A2003 *x, const struct A2003 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA2003() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A2003), DC_TRUE);
		dcStructField(at, 'p', offsetof(struct A2003, m0), 1);
		dcStructField(at, 'j', offsetof(struct A2003, m1), 1);
		dcStructField(at, 'p', offsetof(struct A2003, m2), 1);
		dcStructField(at, 'i', offsetof(struct A2003, m3), 1);
		dcStructField(at, 's', offsetof(struct A2003, m4), 1);
		dcStructField(at, 'j', offsetof(struct A2003, m5), 1);
		dcStructField(at, 'c', offsetof(struct A2003, m6), 1);
		dcStructField(at, 'i', offsetof(struct A2003, m7), 1);
		dcStructField(at, 'd', offsetof(struct A2003, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {lfjdd} */
struct A2004 { l m0; f m1; j m2; d m3; d m4; };
void f_cpA2004(struct A2004 *x, const struct A2004 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA2004(const struct A2004 *x, const struct A2004 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA2004() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A2004), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A2004, m0), 1);
		dcStructField(at, 'f', offsetof(struct A2004, m1), 1);
		dcStructField(at, 'j', offsetof(struct A2004, m2), 1);
		dcStructField(at, 'd', offsetof(struct A2004, m3), 1);
		dcStructField(at, 'd', offsetof(struct A2004, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iplps} */
struct A2005 { i m0; p m1; l m2; p m3; s m4; };
void f_cpA2005(struct A2005 *x, const struct A2005 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; };
int f_cmpA2005(const struct A2005 *x, const struct A2005 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4; };
DCstruct* f_touchdcstA2005() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(5, sizeof(struct A2005), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A2005, m0), 1);
		dcStructField(at, 'p', offsetof(struct A2005, m1), 1);
		dcStructField(at, 'l', offsetof(struct A2005, m2), 1);
		dcStructField(at, 'p', offsetof(struct A2005, m3), 1);
		dcStructField(at, 's', offsetof(struct A2005, m4), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{pjpisjcid}pl{lfjdd}pfp{iplps}fsdl} */
struct A2006 { struct A2003 m0; p m1; l m2; struct A2004 m3; p m4; f m5; p m6; struct A2005 m7; f m8; s m9; d m10; l m11; };
void f_cpA2006(struct A2006 *x, const struct A2006 *y) { f_cpA2003(&x->m0, &y->m0); x->m1 = y->m1; x->m2 = y->m2; f_cpA2004(&x->m3, &y->m3); x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA2005(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA2006(const struct A2006 *x, const struct A2006 *y) { return f_cmpA2003(&x->m0, &y->m0) && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA2004(&x->m3, &y->m3) && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA2005(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA2006() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A2006), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2006, m0), 1, f_touchdcstA2003());
		dcStructField(at, 'p', offsetof(struct A2006, m1), 1);
		dcStructField(at, 'l', offsetof(struct A2006, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2006, m3), 1, f_touchdcstA2004());
		dcStructField(at, 'p', offsetof(struct A2006, m4), 1);
		dcStructField(at, 'f', offsetof(struct A2006, m5), 1);
		dcStructField(at, 'p', offsetof(struct A2006, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2006, m7), 1, f_touchdcstA2005());
		dcStructField(at, 'f', offsetof(struct A2006, m8), 1);
		dcStructField(at, 's', offsetof(struct A2006, m9), 1);
		dcStructField(at, 'd', offsetof(struct A2006, m10), 1);
		dcStructField(at, 'l', offsetof(struct A2006, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <cscjjsf{{pjpisjcid}pl{lfjdd}pfp{iplps}fsdl}> */
union  A2007 { c m0; s m1; c m2; j m3; j m4; s m5; f m6; struct A2006 m7; };
void f_cpA2007(union  A2007 *x, const union  A2007 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA2006(&x->m7, &y->m7); };
int f_cmpA2007(const union  A2007 *x, const union  A2007 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA2006(&x->m7, &y->m7); };
DCstruct* f_touchdcstA2007() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(8, sizeof(union  A2007), DC_TRUE);
		dcStructField(at, 'c', offsetof(union  A2007, m0), 1);
		dcStructField(at, 's', offsetof(union  A2007, m1), 1);
		dcStructField(at, 'c', offsetof(union  A2007, m2), 1);
		dcStructField(at, 'j', offsetof(union  A2007, m3), 1);
		dcStructField(at, 'j', offsetof(union  A2007, m4), 1);
		dcStructField(at, 's', offsetof(union  A2007, m5), 1);
		dcStructField(at, 'f', offsetof(union  A2007, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A2007, m7), 1, f_touchdcstA2006());
		dcCloseStruct(at);
	}
	return at;
};
/* <dd[10]i> */
union  A2008 { d m0; d m1[10]; i m2; };
void f_cpA2008(union  A2008 *x, const union  A2008 *y) { x->m0 = y->m0; x->m1[0] = y->m1[0]; x->m1[1] = y->m1[1]; x->m1[2] = y->m1[2]; x->m1[3] = y->m1[3]; x->m1[4] = y->m1[4]; x->m1[5] = y->m1[5]; x->m1[6] = y->m1[6]; x->m1[7] = y->m1[7]; x->m1[8] = y->m1[8]; x->m1[9] = y->m1[9]; x->m2 = y->m2; };
int f_cmpA2008(const union  A2008 *x, const union  A2008 *y) { return x->m0 == y->m0 && x->m1[0] == y->m1[0] && x->m1[1] == y->m1[1] && x->m1[2] == y->m1[2] && x->m1[3] == y->m1[3] && x->m1[4] == y->m1[4] && x->m1[5] == y->m1[5] && x->m1[6] == y->m1[6] && x->m1[7] == y->m1[7] && x->m1[8] == y->m1[8] && x->m1[9] == y->m1[9] && x->m2 == y->m2; };
DCstruct* f_touchdcstA2008() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(union  A2008), DC_TRUE);
		dcStructField(at, 'd', offsetof(union  A2008, m0), 1);
		dcStructField(at, 'd', offsetof(union  A2008, m1), 10);
		dcStructField(at, 'i', offsetof(union  A2008, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {iplfscspddsd} */
struct A2009 { i m0; p m1; l m2; f m3; s m4; c m5; s m6; p m7; d m8; d m9; s m10; d m11; };
void f_cpA2009(struct A2009 *x, const struct A2009 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA2009(const struct A2009 *x, const struct A2009 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA2009() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A2009), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A2009, m0), 1);
		dcStructField(at, 'p', offsetof(struct A2009, m1), 1);
		dcStructField(at, 'l', offsetof(struct A2009, m2), 1);
		dcStructField(at, 'f', offsetof(struct A2009, m3), 1);
		dcStructField(at, 's', offsetof(struct A2009, m4), 1);
		dcStructField(at, 'c', offsetof(struct A2009, m5), 1);
		dcStructField(at, 's', offsetof(struct A2009, m6), 1);
		dcStructField(at, 'p', offsetof(struct A2009, m7), 1);
		dcStructField(at, 'd', offsetof(struct A2009, m8), 1);
		dcStructField(at, 'd', offsetof(struct A2009, m9), 1);
		dcStructField(at, 's', offsetof(struct A2009, m10), 1);
		dcStructField(at, 'd', offsetof(struct A2009, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fcldji> */
union  A2010 { f m0; c m1; l m2; d m3; j m4; i m5; };
void f_cpA2010(union  A2010 *x, const union  A2010 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; };
int f_cmpA2010(const union  A2010 *x, const union  A2010 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5; };
DCstruct* f_touchdcstA2010() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(union  A2010), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A2010, m0), 1);
		dcStructField(at, 'c', offsetof(union  A2010, m1), 1);
		dcStructField(at, 'l', offsetof(union  A2010, m2), 1);
		dcStructField(at, 'd', offsetof(union  A2010, m3), 1);
		dcStructField(at, 'j', offsetof(union  A2010, m4), 1);
		dcStructField(at, 'i', offsetof(union  A2010, m5), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fidcflfccpjd> */
union  A2011 { f m0; i m1; d m2; c m3; f m4; l m5; f m6; c m7; c m8; p m9; j m10; d m11; };
void f_cpA2011(union  A2011 *x, const union  A2011 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA2011(const union  A2011 *x, const union  A2011 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA2011() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A2011), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A2011, m0), 1);
		dcStructField(at, 'i', offsetof(union  A2011, m1), 1);
		dcStructField(at, 'd', offsetof(union  A2011, m2), 1);
		dcStructField(at, 'c', offsetof(union  A2011, m3), 1);
		dcStructField(at, 'f', offsetof(union  A2011, m4), 1);
		dcStructField(at, 'l', offsetof(union  A2011, m5), 1);
		dcStructField(at, 'f', offsetof(union  A2011, m6), 1);
		dcStructField(at, 'c', offsetof(union  A2011, m7), 1);
		dcStructField(at, 'c', offsetof(union  A2011, m8), 1);
		dcStructField(at, 'p', offsetof(union  A2011, m9), 1);
		dcStructField(at, 'j', offsetof(union  A2011, m10), 1);
		dcStructField(at, 'd', offsetof(union  A2011, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {dfcppfsld} */
struct A2012 { d m0; f m1; c m2; p m3; p m4; f m5; s m6; l m7; d m8; };
void f_cpA2012(struct A2012 *x, const struct A2012 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; };
int f_cmpA2012(const struct A2012 *x, const struct A2012 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8; };
DCstruct* f_touchdcstA2012() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(9, sizeof(struct A2012), DC_TRUE);
		dcStructField(at, 'd', offsetof(struct A2012, m0), 1);
		dcStructField(at, 'f', offsetof(struct A2012, m1), 1);
		dcStructField(at, 'c', offsetof(struct A2012, m2), 1);
		dcStructField(at, 'p', offsetof(struct A2012, m3), 1);
		dcStructField(at, 'p', offsetof(struct A2012, m4), 1);
		dcStructField(at, 'f', offsetof(struct A2012, m5), 1);
		dcStructField(at, 's', offsetof(struct A2012, m6), 1);
		dcStructField(at, 'l', offsetof(struct A2012, m7), 1);
		dcStructField(at, 'd', offsetof(struct A2012, m8), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {l<fcldji>dlp<fidcflfccpjd>ffjc{dfcppfsld}c} */
struct A2013 { l m0; union  A2010 m1; d m2; l m3; p m4; union  A2011 m5; f m6; f m7; j m8; c m9; struct A2012 m10; c m11; };
void f_cpA2013(struct A2013 *x, const struct A2013 *y) { x->m0 = y->m0; f_cpA2010(&x->m1, &y->m1); x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; f_cpA2011(&x->m5, &y->m5); x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; f_cpA2012(&x->m10, &y->m10); x->m11 = y->m11; };
int f_cmpA2013(const struct A2013 *x, const struct A2013 *y) { return x->m0 == y->m0 && f_cmpA2010(&x->m1, &y->m1) && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA2011(&x->m5, &y->m5) && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && f_cmpA2012(&x->m10, &y->m10) && x->m11 == y->m11; };
DCstruct* f_touchdcstA2013() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A2013), DC_TRUE);
		dcStructField(at, 'l', offsetof(struct A2013, m0), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2013, m1), 1, f_touchdcstA2010());
		dcStructField(at, 'd', offsetof(struct A2013, m2), 1);
		dcStructField(at, 'l', offsetof(struct A2013, m3), 1);
		dcStructField(at, 'p', offsetof(struct A2013, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2013, m5), 1, f_touchdcstA2011());
		dcStructField(at, 'f', offsetof(struct A2013, m6), 1);
		dcStructField(at, 'f', offsetof(struct A2013, m7), 1);
		dcStructField(at, 'j', offsetof(struct A2013, m8), 1);
		dcStructField(at, 'c', offsetof(struct A2013, m9), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2013, m10), 1, f_touchdcstA2012());
		dcStructField(at, 'c', offsetof(struct A2013, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <pspdsccjlcss> */
union  A2014 { p m0; s m1; p m2; d m3; s m4; c m5; c m6; j m7; l m8; c m9; s m10; s m11; };
void f_cpA2014(union  A2014 *x, const union  A2014 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA2014(const union  A2014 *x, const union  A2014 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA2014() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A2014), DC_TRUE);
		dcStructField(at, 'p', offsetof(union  A2014, m0), 1);
		dcStructField(at, 's', offsetof(union  A2014, m1), 1);
		dcStructField(at, 'p', offsetof(union  A2014, m2), 1);
		dcStructField(at, 'd', offsetof(union  A2014, m3), 1);
		dcStructField(at, 's', offsetof(union  A2014, m4), 1);
		dcStructField(at, 'c', offsetof(union  A2014, m5), 1);
		dcStructField(at, 'c', offsetof(union  A2014, m6), 1);
		dcStructField(at, 'j', offsetof(union  A2014, m7), 1);
		dcStructField(at, 'l', offsetof(union  A2014, m8), 1);
		dcStructField(at, 'c', offsetof(union  A2014, m9), 1);
		dcStructField(at, 's', offsetof(union  A2014, m10), 1);
		dcStructField(at, 's', offsetof(union  A2014, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <jcji[15]j[4]sliilsp> */
union  A2015 { j m0; c m1; j m2; i m3[15]; j m4[4]; s m5; l m6; i m7; i m8; l m9; s m10; p m11; };
void f_cpA2015(union  A2015 *x, const union  A2015 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3[0] = y->m3[0]; x->m3[1] = y->m3[1]; x->m3[2] = y->m3[2]; x->m3[3] = y->m3[3]; x->m3[4] = y->m3[4]; x->m3[5] = y->m3[5]; x->m3[6] = y->m3[6]; x->m3[7] = y->m3[7]; x->m3[8] = y->m3[8]; x->m3[9] = y->m3[9]; x->m3[10] = y->m3[10]; x->m3[11] = y->m3[11]; x->m3[12] = y->m3[12]; x->m3[13] = y->m3[13]; x->m3[14] = y->m3[14]; x->m4[0] = y->m4[0]; x->m4[1] = y->m4[1]; x->m4[2] = y->m4[2]; x->m4[3] = y->m4[3]; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA2015(const union  A2015 *x, const union  A2015 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3[0] == y->m3[0] && x->m3[1] == y->m3[1] && x->m3[2] == y->m3[2] && x->m3[3] == y->m3[3] && x->m3[4] == y->m3[4] && x->m3[5] == y->m3[5] && x->m3[6] == y->m3[6] && x->m3[7] == y->m3[7] && x->m3[8] == y->m3[8] && x->m3[9] == y->m3[9] && x->m3[10] == y->m3[10] && x->m3[11] == y->m3[11] && x->m3[12] == y->m3[12] && x->m3[13] == y->m3[13] && x->m3[14] == y->m3[14] && x->m4[0] == y->m4[0] && x->m4[1] == y->m4[1] && x->m4[2] == y->m4[2] && x->m4[3] == y->m4[3] && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA2015() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A2015), DC_TRUE);
		dcStructField(at, 'j', offsetof(union  A2015, m0), 1);
		dcStructField(at, 'c', offsetof(union  A2015, m1), 1);
		dcStructField(at, 'j', offsetof(union  A2015, m2), 1);
		dcStructField(at, 'i', offsetof(union  A2015, m3), 15);
		dcStructField(at, 'j', offsetof(union  A2015, m4), 4);
		dcStructField(at, 's', offsetof(union  A2015, m5), 1);
		dcStructField(at, 'l', offsetof(union  A2015, m6), 1);
		dcStructField(at, 'i', offsetof(union  A2015, m7), 1);
		dcStructField(at, 'i', offsetof(union  A2015, m8), 1);
		dcStructField(at, 'l', offsetof(union  A2015, m9), 1);
		dcStructField(at, 's', offsetof(union  A2015, m10), 1);
		dcStructField(at, 'p', offsetof(union  A2015, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <fsfipfcdjds[13]i> */
union  A2016 { f m0; s m1; f m2; i m3; p m4; f m5; c m6; d m7; j m8; d m9; s m10[13]; i m11; };
void f_cpA2016(union  A2016 *x, const union  A2016 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; x->m10[0] = y->m10[0]; x->m10[1] = y->m10[1]; x->m10[2] = y->m10[2]; x->m10[3] = y->m10[3]; x->m10[4] = y->m10[4]; x->m10[5] = y->m10[5]; x->m10[6] = y->m10[6]; x->m10[7] = y->m10[7]; x->m10[8] = y->m10[8]; x->m10[9] = y->m10[9]; x->m10[10] = y->m10[10]; x->m10[11] = y->m10[11]; x->m10[12] = y->m10[12]; x->m11 = y->m11; };
int f_cmpA2016(const union  A2016 *x, const union  A2016 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9 && x->m10[0] == y->m10[0] && x->m10[1] == y->m10[1] && x->m10[2] == y->m10[2] && x->m10[3] == y->m10[3] && x->m10[4] == y->m10[4] && x->m10[5] == y->m10[5] && x->m10[6] == y->m10[6] && x->m10[7] == y->m10[7] && x->m10[8] == y->m10[8] && x->m10[9] == y->m10[9] && x->m10[10] == y->m10[10] && x->m10[11] == y->m10[11] && x->m10[12] == y->m10[12] && x->m11 == y->m11; };
DCstruct* f_touchdcstA2016() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A2016), DC_TRUE);
		dcStructField(at, 'f', offsetof(union  A2016, m0), 1);
		dcStructField(at, 's', offsetof(union  A2016, m1), 1);
		dcStructField(at, 'f', offsetof(union  A2016, m2), 1);
		dcStructField(at, 'i', offsetof(union  A2016, m3), 1);
		dcStructField(at, 'p', offsetof(union  A2016, m4), 1);
		dcStructField(at, 'f', offsetof(union  A2016, m5), 1);
		dcStructField(at, 'c', offsetof(union  A2016, m6), 1);
		dcStructField(at, 'd', offsetof(union  A2016, m7), 1);
		dcStructField(at, 'j', offsetof(union  A2016, m8), 1);
		dcStructField(at, 'd', offsetof(union  A2016, m9), 1);
		dcStructField(at, 's', offsetof(union  A2016, m10), 13);
		dcStructField(at, 'i', offsetof(union  A2016, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <lilcdcjlss> */
union  A2017 { l m0; i m1; l m2; c m3; d m4; c m5; j m6; l m7; s m8; s m9; };
void f_cpA2017(union  A2017 *x, const union  A2017 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; x->m7 = y->m7; x->m8 = y->m8; x->m9 = y->m9; };
int f_cmpA2017(const union  A2017 *x, const union  A2017 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && x->m7 == y->m7 && x->m8 == y->m8 && x->m9 == y->m9; };
DCstruct* f_touchdcstA2017() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(10, sizeof(union  A2017), DC_TRUE);
		dcStructField(at, 'l', offsetof(union  A2017, m0), 1);
		dcStructField(at, 'i', offsetof(union  A2017, m1), 1);
		dcStructField(at, 'l', offsetof(union  A2017, m2), 1);
		dcStructField(at, 'c', offsetof(union  A2017, m3), 1);
		dcStructField(at, 'd', offsetof(union  A2017, m4), 1);
		dcStructField(at, 'c', offsetof(union  A2017, m5), 1);
		dcStructField(at, 'j', offsetof(union  A2017, m6), 1);
		dcStructField(at, 'l', offsetof(union  A2017, m7), 1);
		dcStructField(at, 's', offsetof(union  A2017, m8), 1);
		dcStructField(at, 's', offsetof(union  A2017, m9), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {j[13]li<pspdsccjlcss>i<jcji[15]j[4]sliilsp>p<fsfipfcdjds[13]i><lilcdcjlss>idd} */
struct A2018 { j m0[13]; l m1; i m2; union  A2014 m3; i m4; union  A2015 m5; p m6; union  A2016 m7; union  A2017 m8; i m9; d m10; d m11; };
void f_cpA2018(struct A2018 *x, const struct A2018 *y) { x->m0[0] = y->m0[0]; x->m0[1] = y->m0[1]; x->m0[2] = y->m0[2]; x->m0[3] = y->m0[3]; x->m0[4] = y->m0[4]; x->m0[5] = y->m0[5]; x->m0[6] = y->m0[6]; x->m0[7] = y->m0[7]; x->m0[8] = y->m0[8]; x->m0[9] = y->m0[9]; x->m0[10] = y->m0[10]; x->m0[11] = y->m0[11]; x->m0[12] = y->m0[12]; x->m1 = y->m1; x->m2 = y->m2; f_cpA2014(&x->m3, &y->m3); x->m4 = y->m4; f_cpA2015(&x->m5, &y->m5); x->m6 = y->m6; f_cpA2016(&x->m7, &y->m7); f_cpA2017(&x->m8, &y->m8); x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA2018(const struct A2018 *x, const struct A2018 *y) { return x->m0[0] == y->m0[0] && x->m0[1] == y->m0[1] && x->m0[2] == y->m0[2] && x->m0[3] == y->m0[3] && x->m0[4] == y->m0[4] && x->m0[5] == y->m0[5] && x->m0[6] == y->m0[6] && x->m0[7] == y->m0[7] && x->m0[8] == y->m0[8] && x->m0[9] == y->m0[9] && x->m0[10] == y->m0[10] && x->m0[11] == y->m0[11] && x->m0[12] == y->m0[12] && x->m1 == y->m1 && x->m2 == y->m2 && f_cmpA2014(&x->m3, &y->m3) && x->m4 == y->m4 && f_cmpA2015(&x->m5, &y->m5) && x->m6 == y->m6 && f_cmpA2016(&x->m7, &y->m7) && f_cmpA2017(&x->m8, &y->m8) && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA2018() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(struct A2018), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A2018, m0), 13);
		dcStructField(at, 'l', offsetof(struct A2018, m1), 1);
		dcStructField(at, 'i', offsetof(struct A2018, m2), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2018, m3), 1, f_touchdcstA2014());
		dcStructField(at, 'i', offsetof(struct A2018, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2018, m5), 1, f_touchdcstA2015());
		dcStructField(at, 'p', offsetof(struct A2018, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2018, m7), 1, f_touchdcstA2016());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2018, m8), 1, f_touchdcstA2017());
		dcStructField(at, 'i', offsetof(struct A2018, m9), 1);
		dcStructField(at, 'd', offsetof(struct A2018, m10), 1);
		dcStructField(at, 'd', offsetof(struct A2018, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fs} */
struct A2019 { f m0; s m1; };
void f_cpA2019(struct A2019 *x, const struct A2019 *y) { x->m0 = y->m0; x->m1 = y->m1; };
int f_cmpA2019(const struct A2019 *x, const struct A2019 *y) { return x->m0 == y->m0 && x->m1 == y->m1; };
DCstruct* f_touchdcstA2019() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(2, sizeof(struct A2019), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A2019, m0), 1);
		dcStructField(at, 's', offsetof(struct A2019, m1), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {{l<fcldji>dlp<fidcflfccpjd>ffjc{dfcppfsld}c}{j[13]li<pspdsccjlcss>i<jcji[15]j[4]sliilsp>p<fsfipfcdjds[13]i><lilcdcjlss>idd}s[10]sj{fs}} */
struct A2020 { struct A2013 m0; struct A2018 m1; s m2[10]; s m3; j m4; struct A2019 m5; };
void f_cpA2020(struct A2020 *x, const struct A2020 *y) { f_cpA2013(&x->m0, &y->m0); f_cpA2018(&x->m1, &y->m1); x->m2[0] = y->m2[0]; x->m2[1] = y->m2[1]; x->m2[2] = y->m2[2]; x->m2[3] = y->m2[3]; x->m2[4] = y->m2[4]; x->m2[5] = y->m2[5]; x->m2[6] = y->m2[6]; x->m2[7] = y->m2[7]; x->m2[8] = y->m2[8]; x->m2[9] = y->m2[9]; x->m3 = y->m3; x->m4 = y->m4; f_cpA2019(&x->m5, &y->m5); };
int f_cmpA2020(const struct A2020 *x, const struct A2020 *y) { return f_cmpA2013(&x->m0, &y->m0) && f_cmpA2018(&x->m1, &y->m1) && x->m2[0] == y->m2[0] && x->m2[1] == y->m2[1] && x->m2[2] == y->m2[2] && x->m2[3] == y->m2[3] && x->m2[4] == y->m2[4] && x->m2[5] == y->m2[5] && x->m2[6] == y->m2[6] && x->m2[7] == y->m2[7] && x->m2[8] == y->m2[8] && x->m2[9] == y->m2[9] && x->m3 == y->m3 && x->m4 == y->m4 && f_cmpA2019(&x->m5, &y->m5); };
DCstruct* f_touchdcstA2020() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(6, sizeof(struct A2020), DC_TRUE);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2020, m0), 1, f_touchdcstA2013());
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2020, m1), 1, f_touchdcstA2018());
		dcStructField(at, 's', offsetof(struct A2020, m2), 10);
		dcStructField(at, 's', offsetof(struct A2020, m3), 1);
		dcStructField(at, 'j', offsetof(struct A2020, m4), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(struct A2020, m5), 1, f_touchdcstA2019());
		dcCloseStruct(at);
	}
	return at;
};
/* {ips} */
struct A2021 { i m0; p m1; s m2; };
void f_cpA2021(struct A2021 *x, const struct A2021 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA2021(const struct A2021 *x, const struct A2021 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA2021() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A2021), DC_TRUE);
		dcStructField(at, 'i', offsetof(struct A2021, m0), 1);
		dcStructField(at, 'p', offsetof(struct A2021, m1), 1);
		dcStructField(at, 's', offsetof(struct A2021, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <iscd> */
union  A2022 { i m0; s m1; c m2; d m3; };
void f_cpA2022(union  A2022 *x, const union  A2022 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA2022(const union  A2022 *x, const union  A2022 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA2022() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(union  A2022), DC_TRUE);
		dcStructField(at, 'i', offsetof(union  A2022, m0), 1);
		dcStructField(at, 's', offsetof(union  A2022, m1), 1);
		dcStructField(at, 'c', offsetof(union  A2022, m2), 1);
		dcStructField(at, 'd', offsetof(union  A2022, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {fjf} */
struct A2023 { f m0; j m1; f m2; };
void f_cpA2023(struct A2023 *x, const struct A2023 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; };
int f_cmpA2023(const struct A2023 *x, const struct A2023 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2; };
DCstruct* f_touchdcstA2023() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(3, sizeof(struct A2023), DC_TRUE);
		dcStructField(at, 'f', offsetof(struct A2023, m0), 1);
		dcStructField(at, 'j', offsetof(struct A2023, m1), 1);
		dcStructField(at, 'f', offsetof(struct A2023, m2), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* <spljffl{fjf}cjjp> */
union  A2024 { s m0; p m1; l m2; j m3; f m4; f m5; l m6; struct A2023 m7; c m8; j m9; j m10; p m11; };
void f_cpA2024(union  A2024 *x, const union  A2024 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; f_cpA2023(&x->m7, &y->m7); x->m8 = y->m8; x->m9 = y->m9; x->m10 = y->m10; x->m11 = y->m11; };
int f_cmpA2024(const union  A2024 *x, const union  A2024 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6 && f_cmpA2023(&x->m7, &y->m7) && x->m8 == y->m8 && x->m9 == y->m9 && x->m10 == y->m10 && x->m11 == y->m11; };
DCstruct* f_touchdcstA2024() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(12, sizeof(union  A2024), DC_TRUE);
		dcStructField(at, 's', offsetof(union  A2024, m0), 1);
		dcStructField(at, 'p', offsetof(union  A2024, m1), 1);
		dcStructField(at, 'l', offsetof(union  A2024, m2), 1);
		dcStructField(at, 'j', offsetof(union  A2024, m3), 1);
		dcStructField(at, 'f', offsetof(union  A2024, m4), 1);
		dcStructField(at, 'f', offsetof(union  A2024, m5), 1);
		dcStructField(at, 'l', offsetof(union  A2024, m6), 1);
		dcStructField(at, DC_SIGCHAR_STRUCT, offsetof(union  A2024, m7), 1, f_touchdcstA2023());
		dcStructField(at, 'c', offsetof(union  A2024, m8), 1);
		dcStructField(at, 'j', offsetof(union  A2024, m9), 1);
		dcStructField(at, 'j', offsetof(union  A2024, m10), 1);
		dcStructField(at, 'p', offsetof(union  A2024, m11), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jcfd} */
struct A2025 { j m0; c m1; f m2; d m3; };
void f_cpA2025(struct A2025 *x, const struct A2025 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; };
int f_cmpA2025(const struct A2025 *x, const struct A2025 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3; };
DCstruct* f_touchdcstA2025() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(4, sizeof(struct A2025), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A2025, m0), 1);
		dcStructField(at, 'c', offsetof(struct A2025, m1), 1);
		dcStructField(at, 'f', offsetof(struct A2025, m2), 1);
		dcStructField(at, 'd', offsetof(struct A2025, m3), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* {jcisfdf} */
struct A2026 { j m0; c m1; i m2; s m3; f m4; d m5; f m6; };
void f_cpA2026(struct A2026 *x, const struct A2026 *y) { x->m0 = y->m0; x->m1 = y->m1; x->m2 = y->m2; x->m3 = y->m3; x->m4 = y->m4; x->m5 = y->m5; x->m6 = y->m6; };
int f_cmpA2026(const struct A2026 *x, const struct A2026 *y) { return x->m0 == y->m0 && x->m1 == y->m1 && x->m2 == y->m2 && x->m3 == y->m3 && x->m4 == y->m4 && x->m5 == y->m5 && x->m6 == y->m6; };
DCstruct* f_touchdcstA2026() {
	static DCstruct* at = NULL;
	if(!at) {
		at = dcNewStruct(7, sizeof(struct A2026), DC_TRUE);
		dcStructField(at, 'j', offsetof(struct A2026, m0), 1);
		dcStructField(at, 'c', offsetof(struct A2026, m1), 1);
		dcStructField(at, 'i', offsetof(struct A2026, m2), 1);
		dcStructField(at, 's', offsetof(struct A2026, m3), 1);
		dcStructField(at, 'f', offsetof(struct A2026, m4), 1);
		dcStructField(at, 'd', offsetof(struct A2026, m5), 1);
		dcStructField(at, 'f', offsetof(struct A2026, m6), 1);
		dcCloseStruct(at);
	}
	return at;
};
/* 0:cilllsdip{fpj{i{cfdcfpj[15]lddj}ps}i}pi */ c f0(i a1,l a2,l a3,l a4,s a5,d a6,i a7,p a8,struct A3 a9,p a10,i a11){V_i[1]=a1;V_l[2]=a2;V_l[3]=a3;V_l[4]=a4;V_s[5]=a5;V_d[6]=a6;V_i[7]=a7;V_p[8]=a8;f_cpA3(V_a[9],&a9);V_p[10]=a10;V_i[11]=a11;ret_c(11)}
/* 1:psis<ilcsdp>cfi */ p f1(s a1,i a2,s a3,union  A4 a4,c a5,f a6,i a7){V_s[1]=a1;V_i[2]=a2;V_s[3]=a3;f_cpA4(V_a[4],&a4);V_c[5]=a5;V_f[6]=a6;V_i[7]=a7;ret_p(7)}
/* 2:p<{i}{js}dcids<iipp>{fjcif}{cpjjdifcjcp}if>sdj */ p f2(union  A10 a1,s a2,d a3,j a4){f_cpA10(V_a[1],&a1);V_s[2]=a2;V_d[3]=a3;V_j[4]=a4;ret_p(4)}
/* 3:ff<cl>i<lcpsicpspl[3]ff> */ f f3(f a1,union  A11 a2,i a3,union  A12 a4){V_f[1]=a1;f_cpA11(V_a[2],&a2);V_i[3]=a3;f_cpA12(V_a[4],&a4);ret_f(4)}
/* 4:fdj<lllcp<lddidfc{sj}>jl<{ppsldspj}<s[7]csddcfdlpfd>dj{ffficscid}piij<ilc[3]fscssj>ds>c<l>i>i */ f f4(d a1,j a2,union  A21 a3,i a4){V_d[1]=a1;V_j[2]=a2;f_cpA21(V_a[3],&a3);V_i[4]=a4;ret_f(4)}
/* 5:pf{ij<p{pdjcpjsilfdp}jd<pllif>d{cfci}sdc[16]if>l[12]s<slfdfs{ddipljjssifc}d<icdf>f<jpdfpc>l[6]>p<lps<slcdd>[11]j[2]spj[9]pdjj>}i */ p f5(f a1,struct A32 a2,i a3){V_f[1]=a1;f_cpA32(V_a[2],&a2);V_i[3]=a3;ret_p(3)}
/* 6:vcfj{p}{lssl}d */ v f6(c a1,f a2,j a3,struct A33 a4,struct A34 a5,d a6){V_c[1]=a1;V_f[2]=a2;V_j[3]=a3;f_cpA33(V_a[4],&a4);f_cpA34(V_a[5],&a5);V_d[6]=a6;ret_v(6)}
/* 7:{illds}jc<p>c<jplcpsppjisf><dddidfjidllf><s{cjcdcpcilccs}icpfcs{cic[16]scpsfjlfl}>pff */ struct A35 f7(j a1,c a2,union  A36 a3,c a4,union  A37 a5,union  A38 a6,union  A41 a7,p a8,f a9,f a10){V_j[1]=a1;V_c[2]=a2;f_cpA36(V_a[3],&a3);V_c[4]=a4;f_cpA37(V_a[5],&a5);f_cpA38(V_a[6],&a6);f_cpA41(V_a[7],&a7);V_p[8]=a8;V_f[9]=a9;V_f[10]=a10;ret_a(10,struct A35)}
/* 8:psc{cccs} */ p f8(s a1,c a2,struct A42 a3){V_s[1]=a1;V_c[2]=a2;f_cpA42(V_a[3],&a3);ret_p(3)}
/* 9:f<j>{sd<lli>{spiddl[12]pps<ciffl>{fscf}{d}}jsdlccss}{fls[1]jjdd<jjdfill<lcidjsljpidi[10]><il>>c}issdj{{{pdc}fl<fdppljdcdpi[5]d>jc<pjlsl>{lflsfifldljl}lls{f[2]fsspi}}<cjjclcfi><sciclf{fcjsfsicplsf}f{d}p<i>i>slpff<sfci[16]>j{dpcc}{fc<slj>d}}{d<pjifdj>}fsls */ f f9(union  A43 a1,struct A49 a2,struct A53 a3,i a4,s a5,s a6,d a7,j a8,struct A68 a9,struct A70 a10,f a11,s a12,l a13,s a14){f_cpA43(V_a[1],&a1);f_cpA49(V_a[2],&a2);f_cpA53(V_a[3],&a3);V_i[4]=a4;V_s[5]=a5;V_s[6]=a6;V_d[7]=a7;V_j[8]=a8;f_cpA68(V_a[9],&a9);f_cpA70(V_a[10],&a10);V_f[11]=a11;V_s[12]=a12;V_l[13]=a13;V_s[14]=a14;ret_f(14)}
/* 10:{ij{s<clflpdcplclj>jjcjc{fjcpfdccjcjd}scis}jdlj}cp<cf[1]>p */ struct A74 f10(c a1,p a2,union  A75 a3,p a4){V_c[1]=a1;V_p[2]=a2;f_cpA75(V_a[3],&a3);V_p[4]=a4;ret_a(4,struct A74)}
/* 11:fscp<cd<{dpcf[15]cdffdpji}ff><fl<if>s{jsp[5]jic}pspddjp>>lj */ f f11(s a1,c a2,p a3,union  A81 a4,l a5,j a6){V_s[1]=a1;V_c[2]=a2;V_p[3]=a3;f_cpA81(V_a[4],&a4);V_l[5]=a5;V_j[6]=a6;ret_f(6)}
/* 12:lcsdssfi<<dlfidsdfjpif>lldc>s */ l f12(c a1,s a2,d a3,s a4,s a5,f a6,i a7,union  A83 a8,s a9){V_c[1]=a1;V_s[2]=a2;V_d[3]=a3;V_s[4]=a4;V_s[5]=a5;V_f[6]=a6;V_i[7]=a7;f_cpA83(V_a[8],&a8);V_s[9]=a9;ret_l(9)}
/* 13:ii<js<pslcf[5]cl><icddcliislj>jjl>icf{d<djpfslj>}i */ i f13(i a1,union  A86 a2,i a3,c a4,f a5,struct A88 a6,i a7){V_i[1]=a1;f_cpA86(V_a[2],&a2);V_i[3]=a3;V_c[4]=a4;V_f[5]=a5;f_cpA88(V_a[6],&a6);V_i[7]=a7;ret_i(7)}
/* 14:{jdpfiijjpfld}<<ffp[2]di[16]fpsc>i{ljfdfisifjid}{dcslc}fipj<j>>d */ struct A89 f14(union  A93 a1,d a2){f_cpA93(V_a[1],&a1);V_d[2]=a2;ret_a(2,struct A89)}
/* 15:pc{d}<j<cdpjpjjsifds>ddc>fjdd */ p f15(c a1,struct A47 a2,union  A95 a3,f a4,j a5,d a6,d a7){V_c[1]=a1;f_cpA47(V_a[2],&a2);f_cpA95(V_a[3],&a3);V_f[4]=a4;V_j[5]=a5;V_d[6]=a6;V_d[7]=a7;ret_p(7)}
/* 16:{dscfcflpp{l{dsjscc}<iljjfildc>fddjc[13]<ls>jis}lf}jfsj<p>fd<dj>{jlpf}<{{picfjfjlcl}d<ccfiijf>f{fdjj[4]}<jsjpids>cs{lsdispii}ld{pp}}pdd{ip{ssjjdifcsp[12]ps}d}fffs{if[13]f}id>ls{jfi{fjl}ps<lpidj>i<<c>{j}>j{pjic<fcldjppiddc>{fcp}ii[3]}p}c{djjdpjdc} */ struct A100 f16(j a1,f a2,s a3,j a4,union  A36 a5,f a6,d a7,union  A101 a8,struct A102 a9,union  A113 a10,l a11,s a12,struct A122 a13,c a14,struct A123 a15){V_j[1]=a1;V_f[2]=a2;V_s[3]=a3;V_j[4]=a4;f_cpA36(V_a[5],&a5);V_f[6]=a6;V_d[7]=a7;f_cpA101(V_a[8],&a8);f_cpA102(V_a[9],&a9);f_cpA113(V_a[10],&a10);V_l[11]=a11;V_s[12]=a12;f_cpA122(V_a[13],&a13);V_c[14]=a14;f_cpA123(V_a[15],&a15);ret_a(15,struct A100)}
/* 17:fl{d<pfcilplilpcl>p{ff}<sjldflcdilii>{p}p{psi}i<jsf[7]pjpcdjdcp>}{ldp{cjlc}<dfdjjs<cpsscdlfcfcd>lclfl>if[16]d}ps */ f f17(l a1,struct A129 a2,struct A133 a3,p a4,s a5){V_l[1]=a1;f_cpA129(V_a[2],&a2);f_cpA133(V_a[3],&a3);V_p[4]=a4;V_s[5]=a5;ret_f(5)}
/* 18:l{{pi[13]{sdlclcfij[3]cjp}sd[9]ili<i>f}l}<cdpdjfscplpi>f{pfcls}jds */ l f18(struct A136 a1,union  A137 a2,f a3,struct A138 a4,j a5,d a6,s a7){f_cpA136(V_a[1],&a1);f_cpA137(V_a[2],&a2);V_f[3]=a3;f_cpA138(V_a[4],&a4);V_j[5]=a5;V_d[6]=a6;V_s[7]=a7;ret_l(7)}
/* 19:ccii{{lif}fdfjccl}ifsfpfc */ c f19(c a1,i a2,i a3,struct A140 a4,i a5,f a6,s a7,f a8,p a9,f a10,c a11){V_c[1]=a1;V_i[2]=a2;V_i[3]=a3;f_cpA140(V_a[4],&a4);V_i[5]=a5;V_f[6]=a6;V_s[7]=a7;V_f[8]=a8;V_p[9]=a9;V_f[10]=a10;V_c[11]=a11;ret_c(11)}
/* 20:si<{l}csjifi{jlfsdsjssssj}>l{{jpiifjfis{ipdjifj}pc}if{fcslfdd}ffpj}fp{dpljclld}cps */ s f20(i a1,union  A143 a2,l a3,struct A147 a4,f a5,p a6,struct A148 a7,c a8,p a9,s a10){V_i[1]=a1;f_cpA143(V_a[2],&a2);V_l[3]=a3;f_cpA147(V_a[4],&a4);V_f[5]=a5;V_p[6]=a6;f_cpA148(V_a[7],&a7);V_c[8]=a8;V_p[9]=a9;V_s[10]=a10;ret_s(10)}
/* 21:f{ffl<fi{pflj}d<sfdlscsllfdf>{spcs}pfccff>jid{jsdflcf{fjdclci}}ppjc}pc<cjf>{d<sjif{ssiiijf}djfpijc>jps{sflld<pjsd>lisff<f[6]dijip[1]>}i{s}<cp>j<sppsldldd>p}fddijs */ f f21(struct A155 a1,p a2,c a3,union  A156 a4,struct A165 a5,f a6,d a7,d a8,i a9,j a10,s a11){f_cpA155(V_a[1],&a1);V_p[2]=a2;V_c[3]=a3;f_cpA156(V_a[4],&a4);f_cpA165(V_a[5],&a5);V_f[6]=a6;V_d[7]=a7;V_d[8]=a8;V_i[9]=a9;V_j[10]=a10;V_s[11]=a11;ret_f(11)}
/* 22:j{siji} */ j f22(struct A166 a1){f_cpA166(V_a[1],&a1);ret_j(1)}
/* 23:<<is[13]ls<djsisd>jd>jds>lcp */ union  A169 f23(l a1,c a2,p a3){V_l[1]=a1;V_c[2]=a2;V_p[3]=a3;ret_a(3,union  A169)}
/* 24:jpcssc<cjdsdij>{{<j[12]ljisssplspi>[3]i[15]f{ddjc[12]lcjipcj}jpdipscc}<ii{djpplcpdpclf}l>slpsp{ip<ljsjpiipllcc>ldcf<sspdcfijdsfs>{l}<if>ci}p<s>s[10]s}s */ j f24(p a1,c a2,s a3,s a4,c a5,union  A170 a6,struct A180 a7,s a8){V_p[1]=a1;V_c[2]=a2;V_s[3]=a3;V_s[4]=a4;V_c[5]=a5;f_cpA170(V_a[6],&a6);f_cpA180(V_a[7],&a7);V_s[8]=a8;ret_j(8)}
/* 25:lfsji<{c{cddpiicc}<s>cjlpc{d}djf[2]}{p<sfcclifipfcs>i}pc<psf<jl[10]plldsjl>j>if{fsc[2]{ijliiddflips}jc{ii}sd}>l{sss<dsfs[8]s{lp}{dfdddssplijf}cjjpd><ffppjspfppif>pcdi{f}jl}<llljd>i */ l f25(f a1,s a2,j a3,i a4,union  A190 a5,l a6,struct A196 a7,union  A197 a8,i a9){V_f[1]=a1;V_s[2]=a2;V_j[3]=a3;V_i[4]=a4;f_cpA190(V_a[5],&a5);V_l[6]=a6;f_cpA196(V_a[7],&a7);f_cpA197(V_a[8],&a8);V_i[9]=a9;ret_l(9)}
/* 26:{j}jlcc<cpssdsjpdl<j>s>si */ struct A117 f26(j a1,l a2,c a3,c a4,union  A198 a5,s a6,i a7){V_j[1]=a1;V_l[2]=a2;V_c[3]=a3;V_c[4]=a4;f_cpA198(V_a[5],&a5);V_s[6]=a6;V_i[7]=a7;ret_a(7,struct A117)}
/* 27:d<cl{didjjfj{l}lps}jd>dd{flsisssfcj}<pflj>sl */ d f27(union  A200 a1,d a2,d a3,struct A201 a4,union  A202 a5,s a6,l a7){f_cpA200(V_a[1],&a1);V_d[2]=a2;V_d[3]=a3;f_cpA201(V_a[4],&a4);f_cpA202(V_a[5],&a5);V_s[6]=a6;V_l[7]=a7;ret_d(7)}
/* 28:j<{scpdld<lfip>fccds}<pis{fij}ccspficp>[6]pcpjjjsjjp>fj<l{lifj}s<ll>fcsj>fj<l<ldid>{c}{fsipdpppj[12]c}dfipljf>pf */ j f28(union  A207 a1,f a2,j a3,union  A210 a4,f a5,j a6,union  A214 a7,p a8,f a9){f_cpA207(V_a[1],&a1);V_f[2]=a2;V_j[3]=a3;f_cpA210(V_a[4],&a4);V_f[5]=a5;V_j[6]=a6;f_cpA214(V_a[7],&a7);V_p[8]=a8;V_f[9]=a9;ret_j(9)}
/* 29:{cdisdf[11]<<idssccldj[4]cdc>sflsjjp>}i<pcc[12]d>sjfc<s{<pdjfc>jdl}islc{jj{jd[2]l}ldc<ijdii>c{djfj}l[7]dc}ccids>is{f<jjl>llc{islfi}<icccijsli[4]sip>fpps<li>}c<cscljjcl>f<fll<id>ddcdpf{liljci}d> */ struct A217 f29(i a1,union  A218 a2,s a3,j a4,f a5,c a6,union  A225 a7,i a8,s a9,struct A230 a10,c a11,union  A231 a12,f a13,union  A234 a14){V_i[1]=a1;f_cpA218(V_a[2],&a2);V_s[3]=a3;V_j[4]=a4;V_f[5]=a5;V_c[6]=a6;f_cpA225(V_a[7],&a7);V_i[8]=a8;V_s[9]=a9;f_cpA230(V_a[10],&a10);V_c[11]=a11;f_cpA231(V_a[12],&a12);V_f[13]=a13;f_cpA234(V_a[14],&a14);ret_a(14,struct A217)}
/* 30:sfl{dfplcdjjcfd}fjljlp */ s f30(f a1,l a2,struct A235 a3,f a4,j a5,l a6,j a7,l a8,p a9){V_f[1]=a1;V_l[2]=a2;f_cpA235(V_a[3],&a3);V_f[4]=a4;V_j[5]=a5;V_l[6]=a6;V_j[7]=a7;V_l[8]=a8;V_p[9]=a9;ret_s(9)}
/* 31:<cifpddljdij>s<cfjp<cid[2]cfjpllipc>c{jicfcdiil}pildp>pp<s{cdiscjpiscpj}jplfic><iicidppi>i<jppii{lcf}d{fsllflllccjj}f[11]<ljcf>{cflljdsccjdf}p>ij{djffjjjsi}i */ union  A236 f31(s a1,union  A239 a2,p a3,p a4,union  A241 a5,union  A242 a6,i a7,union  A247 a8,i a9,j a10,struct A248 a11,i a12){V_s[1]=a1;f_cpA239(V_a[2],&a2);V_p[3]=a3;V_p[4]=a4;f_cpA241(V_a[5],&a5);f_cpA242(V_a[6],&a6);V_i[7]=a7;f_cpA247(V_a[8],&a8);V_i[9]=a9;V_j[10]=a10;f_cpA248(V_a[11],&a11);V_i[12]=a12;ret_a(12,union  A236)}
/* 32:pp<ilccdpslisjj>i<pc<sjfjijsslsif>si<sijjpciddclj><fc>jlc>cslic */ p f32(p a1,union  A249 a2,i a3,union  A253 a4,c a5,s a6,l a7,i a8,c a9){V_p[1]=a1;f_cpA249(V_a[2],&a2);V_i[3]=a3;f_cpA253(V_a[4],&a4);V_c[5]=a5;V_s[6]=a6;V_l[7]=a7;V_i[8]=a8;V_c[9]=a9;ret_p(9)}
/* 33:djd<s<<isflpipf>js{p}j>c{p<f[1]j>cdpipfp[15]fl{ss}}jjpi{dds[11]}>ds */ d f33(j a1,d a2,union  A260 a3,d a4,s a5){V_j[1]=a1;V_d[2]=a2;f_cpA260(V_a[3],&a3);V_d[4]=a4;V_s[5]=a5;ret_d(5)}
/* 34:ipf{<sf<lcjjccpifjlp>ildip{icpfcicldpcd}ld{sllfij}>ilpfsljj}jiicpc{pjfj<sljp[9]dpcfcpsf>}p */ i f34(p a1,f a2,struct A265 a3,j a4,i a5,i a6,c a7,p a8,c a9,struct A267 a10,p a11){V_p[1]=a1;V_f[2]=a2;f_cpA265(V_a[3],&a3);V_j[4]=a4;V_i[5]=a5;V_i[6]=a6;V_c[7]=a7;V_p[8]=a8;V_c[9]=a9;f_cpA267(V_a[10],&a10);V_p[11]=a11;ret_i(11)}
/* 35:cj<pidfjlc{dfp{fciil[3]ficijfi}pdj}{d}ssi>jd */ c f35(j a1,union  A270 a2,j a3,d a4){V_j[1]=a1;f_cpA270(V_a[2],&a2);V_j[3]=a3;V_d[4]=a4;ret_c(4)}
/* 36:ijs<<cp{ildlssjsi}ispdp{ddfi}lfj>>sil */ i f36(j a1,s a2,union  A274 a3,s a4,i a5,l a6){V_j[1]=a1;V_s[2]=a2;f_cpA274(V_a[3],&a3);V_s[4]=a4;V_i[5]=a5;V_l[6]=a6;ret_i(6)}
/* 37:<li>cjf */ union  A229 f37(c a1,j a2,f a3){V_c[1]=a1;V_j[2]=a2;V_f[3]=a3;ret_a(3,union  A229)}
/* 38:lfs<djpdjpflcslf>l<p>l<lcjif<jppjldiss[9]ic[12]j>psf> */ l f38(f a1,s a2,union  A275 a3,l a4,union  A36 a5,l a6,union  A277 a7){V_f[1]=a1;V_s[2]=a2;f_cpA275(V_a[3],&a3);V_l[4]=a4;f_cpA36(V_a[5],&a5);V_l[6]=a6;f_cpA277(V_a[7],&a7);ret_l(7)}
/* 39:fjd<pc>{iflplciiciif}jfp{idccsld<<pjlipfsc>sffdi<ii>c{pddsssif}lf[14]p>f}c */ f f39(j a1,d a2,union  A278 a3,struct A279 a4,j a5,f a6,p a7,struct A284 a8,c a9){V_j[1]=a1;V_d[2]=a2;f_cpA278(V_a[3],&a3);f_cpA279(V_a[4],&a4);V_j[5]=a5;V_f[6]=a6;V_p[7]=a7;f_cpA284(V_a[8],&a8);V_c[9]=a9;ret_f(9)}
/* 40:dcli{iiisfdspl{plffipd}<pilpfcs[13]pislc>f}{ps{diljflj{lp[13]djsilfscj[4]c}pjpp}dfs<fsd><siljlc{djp}lpjpp>jlld} */ d f40(c a1,l a2,i a3,struct A287 a4,struct A293 a5){V_c[1]=a1;V_l[2]=a2;V_i[3]=a3;f_cpA287(V_a[4],&a4);f_cpA293(V_a[5],&a5);ret_d(5)}
/* 41:lcdcpl<scj[12]sp>p */ l f41(c a1,d a2,c a3,p a4,l a5,union  A294 a6,p a7){V_c[1]=a1;V_d[2]=a2;V_c[3]=a3;V_p[4]=a4;V_l[5]=a5;f_cpA294(V_a[6],&a6);V_p[7]=a7;ret_l(7)}
/* 42:p<cspdlp><ldjss>pfdplsdcpcc */ p f42(union  A295 a1,union  A296 a2,p a3,f a4,d a5,p a6,l a7,s a8,d a9,c a10,p a11,c a12,c a13){f_cpA295(V_a[1],&a1);f_cpA296(V_a[2],&a2);V_p[3]=a3;V_f[4]=a4;V_d[5]=a5;V_p[6]=a6;V_l[7]=a7;V_s[8]=a8;V_d[9]=a9;V_c[10]=a10;V_p[11]=a11;V_c[12]=a12;V_c[13]=a13;ret_p(13)}
/* 43:pd<sjpd{fl<ll[13]jlpfff[3]dfsf><cspjsi>f<cci[14]spj>is<psi[1]ifdcjdcif>idi}ils[3]> */ p f43(d a1,union  A302 a2){V_d[1]=a1;f_cpA302(V_a[2],&a2);ret_p(2)}
/* 44:s{<f[13]>}jfd{ccjlpj}j */ s f44(struct A304 a1,j a2,f a3,d a4,struct A305 a5,j a6){f_cpA304(V_a[1],&a1);V_j[2]=a2;V_f[3]=a3;V_d[4]=a4;f_cpA305(V_a[5],&a5);V_j[6]=a6;ret_s(6)}
/* 45:ic<fcfd<iifdldpid{pssj[14]ilccd}p<djsfdjsc>>sj<cijpip{cpiicjjjdsjd}dd{pddcp}>p[4]>{{slcss[8]lpc<i>psl}c<l>d}ds{<ddj>}ljcssssp */ i f45(c a1,union  A312 a2,struct A314 a3,d a4,s a5,struct A316 a6,l a7,j a8,c a9,s a10,s a11,s a12,s a13,p a14){V_c[1]=a1;f_cpA312(V_a[2],&a2);f_cpA314(V_a[3],&a3);V_d[4]=a4;V_s[5]=a5;f_cpA316(V_a[6],&a6);V_l[7]=a7;V_j[8]=a8;V_c[9]=a9;V_s[10]=a10;V_s[11]=a11;V_s[12]=a12;V_s[13]=a13;V_p[14]=a14;ret_i(14)}
/* 46:issp<d> */ i f46(s a1,s a2,p a3,union  A317 a4){V_s[1]=a1;V_s[2]=a2;V_p[3]=a3;f_cpA317(V_a[4],&a4);ret_i(4)}
/* 47:j<dc>c<sdijl>lpl */ j f47(union  A318 a1,c a2,union  A319 a3,l a4,p a5,l a6){f_cpA318(V_a[1],&a1);V_c[2]=a2;f_cpA319(V_a[3],&a3);V_l[4]=a4;V_p[5]=a5;V_l[6]=a6;ret_j(6)}
/* 48:sjdcc{fpdiipddpipi}dfl */ s f48(j a1,d a2,c a3,c a4,struct A320 a5,d a6,f a7,l a8){V_j[1]=a1;V_d[2]=a2;V_c[3]=a3;V_c[4]=a4;f_cpA320(V_a[5],&a5);V_d[6]=a6;V_f[7]=a7;V_l[8]=a8;ret_s(8)}
/* 49:flccjf{jipddfcl}iddpfi */ f f49(l a1,c a2,c a3,j a4,f a5,struct A321 a6,i a7,d a8,d a9,p a10,f a11,i a12){V_l[1]=a1;V_c[2]=a2;V_c[3]=a3;V_j[4]=a4;V_f[5]=a5;f_cpA321(V_a[6],&a6);V_i[7]=a7;V_d[8]=a8;V_d[9]=a9;V_p[10]=a10;V_f[11]=a11;V_i[12]=a12;ret_f(12)}
/* 50:<jpclcciicfds><{si[5]is<pidplpfsd>fil}fid<cjlcdijljccl>f{lj}{pj<l>jfj[5]ljd<dpiicljfdccf>ip}p{{p}ss}dc>jslsfsdi */ union  A322 f50(union  A330 a1,j a2,s a3,l a4,s a5,f a6,s a7,d a8,i a9){f_cpA330(V_a[1],&a1);V_j[2]=a2;V_s[3]=a3;V_l[4]=a4;V_s[5]=a5;V_f[6]=a6;V_s[7]=a7;V_d[8]=a8;V_i[9]=a9;ret_a(9,union  A322)}
/* 51:fcji<fpds<<fsjdjfds>pflijppis>ci{jdfp}{lff{cddfsliljldi}j}si{fpf}>j{jjjpf} */ f f51(c a1,j a2,i a3,union  A337 a4,j a5,struct A338 a6){V_c[1]=a1;V_j[2]=a2;V_i[3]=a3;f_cpA337(V_a[4],&a4);V_j[5]=a5;f_cpA338(V_a[6],&a6);ret_f(6)}
/* 52:d{pi}{jjsiss}spjpifc{{ssssllfssfij}lcd<pfjlccd[8]lscjs>pfiffdd} */ d f52(struct A339 a1,struct A340 a2,s a3,p a4,j a5,p a6,i a7,f a8,c a9,struct A343 a10){f_cpA339(V_a[1],&a1);f_cpA340(V_a[2],&a2);V_s[3]=a3;V_p[4]=a4;V_j[5]=a5;V_p[6]=a6;V_i[7]=a7;V_f[8]=a8;V_c[9]=a9;f_cpA343(V_a[10],&a10);ret_d(10)}
/* 53:jp{p{fdp[3]cfdps{pdflsfcjsci}{lcicffdcddld}d<lfpjd>}}lif */ j f53(p a1,struct A348 a2,l a3,i a4,f a5){V_p[1]=a1;f_cpA348(V_a[2],&a2);V_l[3]=a3;V_i[4]=a4;V_f[5]=a5;ret_j(5)}
/* 54:dldd<{d}>s */ d f54(l a1,d a2,d a3,union  A349 a4,s a5){V_l[1]=a1;V_d[2]=a2;V_d[3]=a3;f_cpA349(V_a[4],&a4);V_s[5]=a5;ret_d(5)}
/* 55:dpdccsjil<jjilfccjdifj>f */ d f55(p a1,d a2,c a3,c a4,s a5,j a6,i a7,l a8,union  A350 a9,f a10){V_p[1]=a1;V_d[2]=a2;V_c[3]=a3;V_c[4]=a4;V_s[5]=a5;V_j[6]=a6;V_i[7]=a7;V_l[8]=a8;f_cpA350(V_a[9],&a9);V_f[10]=a10;ret_d(10)}
/* 56:dss{dfpjpcd}f<s>pc<{<jjlsfffpidjs>ppf}d>jcsfli */ d f56(s a1,s a2,struct A351 a3,f a4,union  A179 a5,p a6,c a7,union  A354 a8,j a9,c a10,s a11,f a12,l a13,i a14){V_s[1]=a1;V_s[2]=a2;f_cpA351(V_a[3],&a3);V_f[4]=a4;f_cpA179(V_a[5],&a5);V_p[6]=a6;V_c[7]=a7;f_cpA354(V_a[8],&a8);V_j[9]=a9;V_c[10]=a10;V_s[11]=a11;V_f[12]=a12;V_l[13]=a13;V_i[14]=a14;ret_d(14)}
/* 57:<dsllcjlfjpcp><ss>ij<liidcsp> */ union  A355 f57(union  A356 a1,i a2,j a3,union  A357 a4){f_cpA356(V_a[1],&a1);V_i[2]=a2;V_j[3]=a3;f_cpA357(V_a[4],&a4);ret_a(4,union  A355)}
/* 58:{ddfi}<p{jifipjcf<spldp>dpd}ss>spjsccicil */ struct A272 f58(union  A360 a1,s a2,p a3,j a4,s a5,c a6,c a7,i a8,c a9,i a10,l a11){f_cpA360(V_a[1],&a1);V_s[2]=a2;V_p[3]=a3;V_j[4]=a4;V_s[5]=a5;V_c[6]=a6;V_c[7]=a7;V_i[8]=a8;V_c[9]=a9;V_i[10]=a10;V_l[11]=a11;ret_a(11,struct A272)}
/* 59:pd{dffsfi[3]jpcijj} */ p f59(d a1,struct A361 a2){V_d[1]=a1;f_cpA361(V_a[2],&a2);ret_p(2)}
/* 60:vfp<cpflcc>flpdfcsjl{i<ldl>{ifpljcdjisff}cc} */ v f60(f a1,p a2,union  A362 a3,f a4,l a5,p a6,d a7,f a8,c a9,s a10,j a11,l a12,struct A365 a13){V_f[1]=a1;V_p[2]=a2;f_cpA362(V_a[3],&a3);V_f[4]=a4;V_l[5]=a5;V_p[6]=a6;V_d[7]=a7;V_f[8]=a8;V_c[9]=a9;V_s[10]=a10;V_j[11]=a11;V_l[12]=a12;f_cpA365(V_a[13],&a13);ret_v(13)}
/* 61:sc{iidjcpcscfid}l{l}{fjs}{ppidj}{jsj{cdslssjfl<ldjj>{lisdc[5]ld}l}<scj>f{p[5]<ssdcfdfldclc>}ji{fcsc{ffsjfsdfdjf[8]s}lj<lppdpsfdsdip><is>jld}js}f */ s f61(c a1,struct A366 a2,l a3,struct A141 a4,struct A367 a5,struct A368 a6,struct A379 a7,f a8){V_c[1]=a1;f_cpA366(V_a[2],&a2);V_l[3]=a3;f_cpA141(V_a[4],&a4);f_cpA367(V_a[5],&a5);f_cpA368(V_a[6],&a6);f_cpA379(V_a[7],&a7);V_f[8]=a8;ret_s(8)}
/* 62:{dpldiicsffdc}lsjpccljdp */ struct A380 f62(l a1,s a2,j a3,p a4,c a5,c a6,l a7,j a8,d a9,p a10){V_l[1]=a1;V_s[2]=a2;V_j[3]=a3;V_p[4]=a4;V_c[5]=a5;V_c[6]=a6;V_l[7]=a7;V_j[8]=a8;V_d[9]=a9;V_p[10]=a10;ret_a(10,struct A380)}
/* 63:pf{flsclcijjjip}{<<ss>>sjdf<li<idij>jdscijfsl>d{psfc<lfpdpsjif[2]>d[16]pljd{fj}s}sdpd}ccpss{l}{l} */ p f63(f a1,struct A381 a2,struct A388 a3,c a4,c a5,p a6,s a7,s a8,struct A141 a9,struct A141 a10){V_f[1]=a1;f_cpA381(V_a[2],&a2);f_cpA388(V_a[3],&a3);V_c[4]=a4;V_c[5]=a5;V_p[6]=a6;V_s[7]=a7;V_s[8]=a8;f_cpA141(V_a[9],&a9);f_cpA141(V_a[10],&a10);ret_p(10)}
/* 64:l{jsc{i}}ifjidslp<dlf<{cfilpppsici}fs>ipj<{f}>{ciffllslscpj}jcp[3]> */ l f64(struct A389 a1,i a2,f a3,j a4,i a5,d a6,s a7,l a8,p a9,union  A394 a10){f_cpA389(V_a[1],&a1);V_i[2]=a2;V_f[3]=a3;V_j[4]=a4;V_i[5]=a5;V_d[6]=a6;V_s[7]=a7;V_l[8]=a8;V_p[9]=a9;f_cpA394(V_a[10],&a10);ret_l(10)}
/* 65:<ls>jjlc<{cc}p{cf{jij}dppdcsj[7]dl}j>fil */ union  A98 f65(j a1,j a2,l a3,c a4,union  A398 a5,f a6,i a7,l a8){V_j[1]=a1;V_j[2]=a2;V_l[3]=a3;V_c[4]=a4;f_cpA398(V_a[5],&a5);V_f[6]=a6;V_i[7]=a7;V_l[8]=a8;ret_a(8,union  A98)}
/* 66:cp<ij[6]dcd>iidfcdpj */ c f66(p a1,union  A399 a2,i a3,i a4,d a5,f a6,c a7,d a8,p a9,j a10){V_p[1]=a1;f_cpA399(V_a[2],&a2);V_i[3]=a3;V_i[4]=a4;V_d[5]=a5;V_f[6]=a6;V_c[7]=a7;V_d[8]=a8;V_p[9]=a9;V_j[10]=a10;ret_c(10)}
/* 67:cf<cisdlcccjdcj>dsfsi */ c f67(f a1,union  A400 a2,d a3,s a4,f a5,s a6,i a7){V_f[1]=a1;f_cpA400(V_a[2],&a2);V_d[3]=a3;V_s[4]=a4;V_f[5]=a5;V_s[6]=a6;V_i[7]=a7;ret_c(7)}
/* 68:cifs{ddfs}jcc */ c f68(i a1,f a2,s a3,struct A401 a4,j a5,c a6,c a7){V_i[1]=a1;V_f[2]=a2;V_s[3]=a3;f_cpA401(V_a[4],&a4);V_j[5]=a5;V_c[6]=a6;V_c[7]=a7;ret_c(7)}
/* 69:fsccifsl<ddlfsclfdppf>ls */ f f69(s a1,c a2,c a3,i a4,f a5,s a6,l a7,union  A402 a8,l a9,s a10){V_s[1]=a1;V_c[2]=a2;V_c[3]=a3;V_i[4]=a4;V_f[5]=a5;V_s[6]=a6;V_l[7]=a7;f_cpA402(V_a[8],&a8);V_l[9]=a9;V_s[10]=a10;ret_f(10)}
/* 70:dpf{jfll<{ccpi}l{jpcp}icf{jlfpfjisss}dlsip>i<fij<p>{jjjd}fcd{ffpjcfjpi}{djpjfipc}{ddscs}>f{clip{ipidfsjiis}jdljsp<cld[4]lp>}} */ d f70(p a1,f a2,struct A415 a3){V_p[1]=a1;V_f[2]=a2;f_cpA415(V_a[3],&a3);ret_d(3)}
/* 71:<dsfslp<ip>pp<c<pcsjcd>fcj<i>ijc<i>dj>fd>scp<{s}lc{issfjpcsfiji}>cj{cpiplsciccdf}fllpjs */ union  A419 f71(s a1,c a2,p a3,union  A421 a4,c a5,j a6,struct A422 a7,f a8,l a9,l a10,p a11,j a12,s a13){V_s[1]=a1;V_c[2]=a2;V_p[3]=a3;f_cpA421(V_a[4],&a4);V_c[5]=a5;V_j[6]=a6;f_cpA422(V_a[7],&a7);V_f[8]=a8;V_l[9]=a9;V_l[10]=a10;V_p[11]=a11;V_j[12]=a12;V_s[13]=a13;ret_a(13,union  A419)}
/* 72:ddidjs<dcldccfdj[11]l[16]ds>fis{dij{jpccsdlfplsl}{fllpjps[3]fflcd}jls<sjflfsfpjsdl>pdi}p<sf{spifdildcfc}p[3]d> */ d f72(d a1,i a2,d a3,j a4,s a5,union  A423 a6,f a7,i a8,s a9,struct A427 a10,p a11,union  A429 a12){V_d[1]=a1;V_i[2]=a2;V_d[3]=a3;V_j[4]=a4;V_s[5]=a5;f_cpA423(V_a[6],&a6);V_f[7]=a7;V_i[8]=a8;V_s[9]=a9;f_cpA427(V_a[10],&a10);V_p[11]=a11;f_cpA429(V_a[12],&a12);ret_d(12)}
/* 73:cifidcl<p<ppj>s[7]ll> */ c f73(i a1,f a2,i a3,d a4,c a5,l a6,union  A431 a7){V_i[1]=a1;V_f[2]=a2;V_i[3]=a3;V_d[4]=a4;V_c[5]=a5;V_l[6]=a6;f_cpA431(V_a[7],&a7);ret_c(7)}
/* 74:jdd{jl}isp{dpipdldf{lssjscl[11]dd}[9]lsc}fs */ j f74(d a1,d a2,struct A432 a3,i a4,s a5,p a6,struct A434 a7,f a8,s a9){V_d[1]=a1;V_d[2]=a2;f_cpA432(V_a[3],&a3);V_i[4]=a4;V_s[5]=a5;V_p[6]=a6;f_cpA434(V_a[7],&a7);V_f[8]=a8;V_s[9]=a9;ret_j(9)}
/* 75:<lslcssddj>jlsi */ union  A435 f75(j a1,l a2,s a3,i a4){V_j[1]=a1;V_l[2]=a2;V_s[3]=a3;V_i[4]=a4;ret_a(4,union  A435)}
/* 76:<di[6]fcd>dls<ljd>pf */ union  A436 f76(d a1,l a2,s a3,union  A437 a4,p a5,f a6){V_d[1]=a1;V_l[2]=a2;V_s[3]=a3;f_cpA437(V_a[4],&a4);V_p[5]=a5;V_f[6]=a6;ret_a(6,union  A436)}
/* 77:pfl{<f>s<i>}<iifi> */ p f77(f a1,l a2,struct A439 a3,union  A440 a4){V_f[1]=a1;V_l[2]=a2;f_cpA439(V_a[3],&a3);f_cpA440(V_a[4],&a4);ret_p(4)}
/* 78:icpf<jfssdfddcs[9]s>cpid */ i f78(c a1,p a2,f a3,union  A441 a4,c a5,p a6,i a7,d a8){V_c[1]=a1;V_p[2]=a2;V_f[3]=a3;f_cpA441(V_a[4],&a4);V_c[5]=a5;V_p[6]=a6;V_i[7]=a7;V_d[8]=a8;ret_i(8)}
/* 79:{ldjljp}pfds */ struct A442 f79(p a1,f a2,d a3,s a4){V_p[1]=a1;V_f[2]=a2;V_d[3]=a3;V_s[4]=a4;ret_a(4,struct A442)}
/* 80:<icsllfji>ldcdjjjf */ union  A443 f80(l a1,d a2,c a3,d a4,j a5,j a6,j a7,f a8){V_l[1]=a1;V_d[2]=a2;V_c[3]=a3;V_d[4]=a4;V_j[5]=a5;V_j[6]=a6;V_j[7]=a7;V_f[8]=a8;ret_a(8,union  A443)}
/* 81:sj{j{dj{jjpcfc}iii<lil>ic{cijdic}cd}j}id<fslld{p{sff}d{dlisjjjfli}ii{slijpfpplip[13]d}}ld>f */ s f81(j a1,struct A448 a2,i a3,d a4,union  A453 a5,f a6){V_j[1]=a1;f_cpA448(V_a[2],&a2);V_i[3]=a3;V_d[4]=a4;f_cpA453(V_a[5],&a5);V_f[6]=a6;ret_s(6)}
/* 82:{iij[7]<pdc<ifpi>c{cifldfplsll}sfcjc<dps>>d<j{plfjpjs}<jppsiipf>{jlfdp}fd<llccfj>lppp<ccjljpjccffi>>fjiil<sl{cjidslfddlcc}lpjjcl<djdcccc>l>}i */ struct A467 f82(i a1){V_i[1]=a1;ret_a(1,struct A467)}
/* 83:cpi<pjdjffs{iffpdijfjlis}> */ c f83(p a1,i a2,union  A469 a3){V_p[1]=a1;V_i[2]=a2;f_cpA469(V_a[3],&a3);ret_c(3)}
/* 84:fij<cc>cd */ f f84(i a1,j a2,union  A470 a3,c a4,d a5){V_i[1]=a1;V_j[2]=a2;f_cpA470(V_a[3],&a3);V_c[4]=a4;V_d[5]=a5;ret_f(5)}
/* 85:scslij<f>dj */ s f85(c a1,s a2,l a3,i a4,j a5,union  A438 a6,d a7,j a8){V_c[1]=a1;V_s[2]=a2;V_l[3]=a3;V_i[4]=a4;V_j[5]=a5;f_cpA438(V_a[6],&a6);V_d[7]=a7;V_j[8]=a8;ret_s(8)}
/* 86:{ji<sj[9]j[16]d>sl[12]jjffij{jcdf}}<f>fppcd<dl> */ struct A473 f86(union  A438 a1,f a2,p a3,p a4,c a5,d a6,union  A474 a7){f_cpA438(V_a[1],&a1);V_f[2]=a2;V_p[3]=a3;V_p[4]=a4;V_c[5]=a5;V_d[6]=a6;f_cpA474(V_a[7],&a7);ret_a(7,struct A473)}
/* 87:{jpp{ps}pjsjij<cslss[4]lsjp{fl}cp>f}slijlcjcj{ciffpdpljipc}d{dijidsfifiic} */ struct A478 f87(s a1,l a2,i a3,j a4,l a5,c a6,j a7,c a8,j a9,struct A479 a10,d a11,struct A480 a12){V_s[1]=a1;V_l[2]=a2;V_i[3]=a3;V_j[4]=a4;V_l[5]=a5;V_c[6]=a6;V_j[7]=a7;V_c[8]=a8;V_j[9]=a9;f_cpA479(V_a[10],&a10);V_d[11]=a11;f_cpA480(V_a[12],&a12);ret_a(12,struct A478)}
/* 88:i<{lpf[13]s<jsj[7]ii>dp[10]s}ppl<{pcl[6]cldpispi[10]j}jj<c>scslfpip>{jfss{fp}{ijlcjpspd}s}cps{lsfffddii{p}fd[10]}{jijcll[2]djdjcj}<ps{fp}s>>ssj */ i f88(union  A491 a1,s a2,s a3,j a4){f_cpA491(V_a[1],&a1);V_s[2]=a2;V_s[3]=a3;V_j[4]=a4;ret_i(4)}
/* 89:cc{<fjlpiidps[4]pf>ssl}is{{{lslfiiddid[10]j[2]l}}<c>p{dlc<spj>s}[13]l[7]}ilpid */ c f89(c a1,struct A493 a2,i a3,s a4,struct A498 a5,i a6,l a7,p a8,i a9,d a10){V_c[1]=a1;f_cpA493(V_a[2],&a2);V_i[3]=a3;V_s[4]=a4;f_cpA498(V_a[5],&a5);V_i[6]=a6;V_l[7]=a7;V_p[8]=a8;V_i[9]=a9;V_d[10]=a10;ret_c(10)}
/* 90:{cl[9]ffi} */ struct A499 f90(){ret_a(0,struct A499)}
/* 91:lpjpficii<ijc<lj<icp>{i[8]dpslpdscjcc}dfif<cdls>{cii}pd>{ilcj<ij>j<cdjspdsfjdll>cpjdc}cf<<cjcpfsij[8]ffji>cpic<f>>f<sp>>cl<lc> */ l f91(p a1,j a2,p a3,f a4,i a5,c a6,i a7,i a8,union  A511 a9,c a10,l a11,union  A512 a12){V_p[1]=a1;V_j[2]=a2;V_p[3]=a3;V_f[4]=a4;V_i[5]=a5;V_c[6]=a6;V_i[7]=a7;V_i[8]=a8;f_cpA511(V_a[9],&a9);V_c[10]=a10;V_l[11]=a11;f_cpA512(V_a[12],&a12);ret_l(12)}
/* 92:{{idlfipi}{d}ffp<iidscj{ic}sll<i>>jf{c[16]jcpcpljdipl}<{dfd}c>j}ic{pfj<fdflp><scjcs[12]scspipi>{lfcpfdlpfidl}jl{dsscifslddfj}i<djdi>j}<fjil{dd}di>sds */ struct A519 f92(i a1,c a2,struct A525 a3,union  A527 a4,s a5,d a6,s a7){V_i[1]=a1;V_c[2]=a2;f_cpA525(V_a[3],&a3);f_cpA527(V_a[4],&a4);V_s[5]=a5;V_d[6]=a6;V_s[7]=a7;ret_a(7,struct A519)}
/* 93:ccjijc<j>pj */ c f93(c a1,j a2,i a3,j a4,c a5,union  A43 a6,p a7,j a8){V_c[1]=a1;V_j[2]=a2;V_i[3]=a3;V_j[4]=a4;V_c[5]=a5;f_cpA43(V_a[6],&a6);V_p[7]=a7;V_j[8]=a8;ret_c(8)}
/* 94:dccpj<djijlfff<lcl[10]iildll>pjs>pl */ d f94(c a1,c a2,p a3,j a4,union  A529 a5,p a6,l a7){V_c[1]=a1;V_c[2]=a2;V_p[3]=a3;V_j[4]=a4;f_cpA529(V_a[5],&a5);V_p[6]=a6;V_l[7]=a7;ret_d(7)}
/* 95:isfllddl<s[15]i{isjpf[6]ifdlp{df}c}l{dscllfdpsjcd}{fcs}{p}i<<lcslpsjffcsj>j<spifllfjiidp>djj><spcs{lfc}>s<flsi>>{pd}ffdi */ i f95(s a1,f a2,l a3,l a4,d a5,d a6,l a7,union  A540 a8,struct A541 a9,f a10,f a11,d a12,i a13){V_s[1]=a1;V_f[2]=a2;V_l[3]=a3;V_l[4]=a4;V_d[5]=a5;V_d[6]=a6;V_l[7]=a7;f_cpA540(V_a[8],&a8);f_cpA541(V_a[9],&a9);V_f[10]=a10;V_f[11]=a11;V_d[12]=a12;V_i[13]=a13;ret_i(13)}
/* 96:cic{jjppijcpcs}cffi */ c f96(i a1,c a2,struct A542 a3,c a4,f a5,f a6,i a7){V_i[1]=a1;V_c[2]=a2;f_cpA542(V_a[3],&a3);V_c[4]=a4;V_f[5]=a5;V_f[6]=a6;V_i[7]=a7;ret_c(7)}
/* 97:vidljjdcdscjp<jspscclpps> */ v f97(i a1,d a2,l a3,j a4,j a5,d a6,c a7,d a8,s a9,c a10,j a11,p a12,union  A543 a13){V_i[1]=a1;V_d[2]=a2;V_l[3]=a3;V_j[4]=a4;V_j[5]=a5;V_d[6]=a6;V_c[7]=a7;V_d[8]=a8;V_s[9]=a9;V_c[10]=a10;V_j[11]=a11;V_p[12]=a12;f_cpA543(V_a[13],&a13);ret_v(13)}
/* 98:ii{flpp<fd>jis{sl{cicls}slscclsds}}djs{dccll<lf[4]d>{cccc[3]<cpf>i}is<<clsifsjjd>pisc<fcjjss>[2]si>lp}fliscifi */ i f98(i a1,struct A547 a2,d a3,j a4,s a5,struct A554 a6,f a7,l a8,i a9,s a10,c a11,i a12,f a13,i a14){V_i[1]=a1;f_cpA547(V_a[2],&a2);V_d[3]=a3;V_j[4]=a4;V_s[5]=a5;f_cpA554(V_a[6],&a6);V_f[7]=a7;V_l[8]=a8;V_i[9]=a9;V_s[10]=a10;V_c[11]=a11;V_i[12]=a12;V_f[13]=a13;V_i[14]=a14;ret_i(14)}
/* 99:{sjf{l}}iclddcscjp{i{if}<lfpjf><isjdciffjcf>{cpcfifjdlfpj}icis{cjjdpfcf[3]lc}jp}{dfl[6]}l */ struct A555 f99(i a1,c a2,l a3,d a4,d a5,c a6,s a7,c a8,j a9,p a10,struct A561 a11,struct A562 a12,l a13){V_i[1]=a1;V_c[2]=a2;V_l[3]=a3;V_d[4]=a4;V_d[5]=a5;V_c[6]=a6;V_s[7]=a7;V_c[8]=a8;V_j[9]=a9;V_p[10]=a10;f_cpA561(V_a[11],&a11);f_cpA562(V_a[12],&a12);V_l[13]=a13;ret_a(13,struct A555)}
/* 100:vjpc{<<ficcclfcdpil>ji<fdp>c[4]p{sldicdcjlfdi}dj<p[8]cfssifpdfip>fp>jsfsssddcsp[1]}if */ v f100(j a1,p a2,c a3,struct A568 a4,i a5,f a6){V_j[1]=a1;V_p[2]=a2;V_c[3]=a3;f_cpA568(V_a[4],&a4);V_i[5]=a5;V_f[6]=a6;ret_v(6)}
/* 101:<j>lfcsdp<iclflj>d{spljfll} */ union  A43 f101(l a1,f a2,c a3,s a4,d a5,p a6,union  A569 a7,d a8,struct A570 a9){V_l[1]=a1;V_f[2]=a2;V_c[3]=a3;V_s[4]=a4;V_d[5]=a5;V_p[6]=a6;f_cpA569(V_a[7],&a7);V_d[8]=a8;f_cpA570(V_a[9],&a9);ret_a(9,union  A43)}
/* 102:j{i<sciiljjpdi[11]dp>jjif<cj>cj}ppp<icssf{j}jsddid>{ppp<pjpddsfjsdjj>}jcscd<jfdpp>fid */ j f102(struct A573 a1,p a2,p a3,p a4,union  A574 a5,struct A576 a6,j a7,c a8,s a9,c a10,d a11,union  A577 a12,f a13,i a14,d a15){f_cpA573(V_a[1],&a1);V_p[2]=a2;V_p[3]=a3;V_p[4]=a4;f_cpA574(V_a[5],&a5);f_cpA576(V_a[6],&a6);V_j[7]=a7;V_c[8]=a8;V_s[9]=a9;V_c[10]=a10;V_d[11]=a11;f_cpA577(V_a[12],&a12);V_f[13]=a13;V_i[14]=a14;V_d[15]=a15;ret_j(15)}
/* 103:jd<ipjdcispfsji>i<spj{<sdisf>f<sijlpli>ids{l}f{ssllcscjcsjf}{cdf[9]ffcpipiii}}f<<jid>jsc<lfpfiispllls>p{cpflidcsdclf}d<csf>dl>>dc{difci} */ j f103(d a1,union  A578 a2,i a3,union  A589 a4,d a5,c a6,struct A590 a7){V_d[1]=a1;f_cpA578(V_a[2],&a2);V_i[3]=a3;f_cpA589(V_a[4],&a4);V_d[5]=a5;V_c[6]=a6;f_cpA590(V_a[7],&a7);ret_j(7)}
/* 104:{djs}<ppdp>{f{{cdljfldljp[13]pj}ffdp<c>}i{{csildlpdcjis}jipfipidjsc}} */ struct A591 f104(union  A592 a1,struct A597 a2){f_cpA592(V_a[1],&a1);f_cpA597(V_a[2],&a2);ret_a(2,struct A591)}
/* 105:jsppcllj{d{pd}<fp>fp{pcccid}ddijsi}<{jslpjlcc}cdc>jfd */ j f105(s a1,p a2,p a3,c a4,l a5,l a6,j a7,struct A600 a8,union  A602 a9,j a10,f a11,d a12){V_s[1]=a1;V_p[2]=a2;V_p[3]=a3;V_c[4]=a4;V_l[5]=a5;V_l[6]=a6;V_j[7]=a7;f_cpA600(V_a[8],&a8);f_cpA602(V_a[9],&a9);V_j[10]=a10;V_f[11]=a11;V_d[12]=a12;ret_j(12)}
/* 106:<c[1]i<s<fiicsjilfll>sji>iiiis> */ union  A605 f106(){ret_a(0,union  A605)}
/* 107:ifdijp<s>jss */ i f107(f a1,d a2,i a3,j a4,p a5,union  A179 a6,j a7,s a8,s a9){V_f[1]=a1;V_d[2]=a2;V_i[3]=a3;V_j[4]=a4;V_p[5]=a5;f_cpA179(V_a[6],&a6);V_j[7]=a7;V_s[8]=a8;V_s[9]=a9;ret_i(9)}
/* 108:cfpplficl<jp<c>fij<jj>{cdd[15]dcfpdfdf}p<clddf>{pf}i>jd */ c f108(f a1,p a2,p a3,l a4,f a5,i a6,c a7,l a8,union  A610 a9,j a10,d a11){V_f[1]=a1;V_p[2]=a2;V_p[3]=a3;V_l[4]=a4;V_f[5]=a5;V_i[6]=a6;V_c[7]=a7;V_l[8]=a8;f_cpA610(V_a[9],&a9);V_j[10]=a10;V_d[11]=a11;ret_c(11)}
/* 109:jpcj{cdplppjlllfj}f */ j f109(p a1,c a2,j a3,struct A611 a4,f a5){V_p[1]=a1;V_c[2]=a2;V_j[3]=a3;f_cpA611(V_a[4],&a4);V_f[5]=a5;ret_j(5)}
/* 110:v{c}djd{cs} */ v f110(struct A212 a1,d a2,j a3,d a4,struct A612 a5){f_cpA212(V_a[1],&a1);V_d[2]=a2;V_j[3]=a3;V_d[4]=a4;f_cpA612(V_a[5],&a5);ret_v(5)}
/* 111:<jffcfpiffcji>pljc{dpjifc}f */ union  A613 f111(p a1,l a2,j a3,c a4,struct A614 a5,f a6){V_p[1]=a1;V_l[2]=a2;V_j[3]=a3;V_c[4]=a4;f_cpA614(V_a[5],&a5);V_f[6]=a6;ret_a(6,union  A613)}
/* 112:<jccj<islsc>f<cjpddiscs{sfp}si><ifj<s>{slljji}sjfc>>licp{d[2]fi}c */ union  A620 f112(l a1,i a2,c a3,p a4,struct A621 a5,c a6){V_l[1]=a1;V_i[2]=a2;V_c[3]=a3;V_p[4]=a4;f_cpA621(V_a[5],&a5);V_c[6]=a6;ret_a(6,union  A620)}
/* 113:jiljffislic{pjlilllfilis}{lcslc<jj>p}<{j<ipsfjlss>dpppfilli<pdildd>}>d */ j f113(i a1,l a2,j a3,f a4,f a5,i a6,s a7,l a8,i a9,c a10,struct A622 a11,struct A623 a12,union  A627 a13,d a14){V_i[1]=a1;V_l[2]=a2;V_j[3]=a3;V_f[4]=a4;V_f[5]=a5;V_i[6]=a6;V_s[7]=a7;V_l[8]=a8;V_i[9]=a9;V_c[10]=a10;f_cpA622(V_a[11],&a11);f_cpA623(V_a[12],&a12);f_cpA627(V_a[13],&a13);V_d[14]=a14;ret_j(14)}
/* 114:<i>dcfjjj<ill{ppddisp}l<idcjdp[15]ddfips>>f */ union  A62 f114(d a1,c a2,f a3,j a4,j a5,j a6,union  A630 a7,f a8){V_d[1]=a1;V_c[2]=a2;V_f[3]=a3;V_j[4]=a4;V_j[5]=a5;V_j[6]=a6;f_cpA630(V_a[7],&a7);V_f[8]=a8;ret_a(8,union  A62)}
/* 115:{iscsf<sls><id<lcs>>i{jc}s<cspcpldjlicj>s}<c{cifdl}{i}cljsidcsc>c{lcj}dclccpl{cpijpsdl<ll{jiflddc}>djs} */ struct A636 f115(union  A638 a1,c a2,struct A639 a3,d a4,c a5,l a6,c a7,c a8,p a9,l a10,struct A642 a11){f_cpA638(V_a[1],&a1);V_c[2]=a2;f_cpA639(V_a[3],&a3);V_d[4]=a4;V_c[5]=a5;V_l[6]=a6;V_c[7]=a7;V_c[8]=a8;V_p[9]=a9;V_l[10]=a10;f_cpA642(V_a[11],&a11);ret_a(11,struct A636)}
/* 116:{iiipp<i>p{f}<jpdjdjllfcdf>sj[7]p}<s>pjpjfsc */ struct A644 f116(union  A179 a1,p a2,j a3,p a4,j a5,f a6,s a7,c a8){f_cpA179(V_a[1],&a1);V_p[2]=a2;V_j[3]=a3;V_p[4]=a4;V_j[5]=a5;V_f[6]=a6;V_s[7]=a7;V_c[8]=a8;ret_a(8,struct A644)}
/* 117:iid{{fd<ilfjcfdfpi[2]>{llpjd}c[14]jcipfl}jdcli}ijccjclj */ i f117(i a1,d a2,struct A648 a3,i a4,j a5,c a6,c a7,j a8,c a9,l a10,j a11){V_i[1]=a1;V_d[2]=a2;f_cpA648(V_a[3],&a3);V_i[4]=a4;V_j[5]=a5;V_c[6]=a6;V_c[7]=a7;V_j[8]=a8;V_c[9]=a9;V_l[10]=a10;V_j[11]=a11;ret_i(11)}
/* 118:f<sp<{s[5]isscd}cc{scdpidspfjf[6]i}>f{clci<cdi>fjsl<lji>}>d{fcl[4]ifidijppd[9]}fffj{dlclffcl<ljclcpiplfdd>d<pilfsp>c}<sc{dijcscijj}f<iflisdjjjsjp>{lf}>c<pl><d[6]<sljssijcpijs>jdisldfc{lsllc}p> */ f f118(union  A655 a1,d a2,struct A656 a3,f a4,f a5,f a6,j a7,struct A659 a8,union  A663 a9,c a10,union  A664 a11,union  A667 a12){f_cpA655(V_a[1],&a1);V_d[2]=a2;f_cpA656(V_a[3],&a3);V_f[4]=a4;V_f[5]=a5;V_f[6]=a6;V_j[7]=a7;f_cpA659(V_a[8],&a8);f_cpA663(V_a[9],&a9);V_c[10]=a10;f_cpA664(V_a[11],&a11);f_cpA667(V_a[12],&a12);ret_f(12)}
/* 119:dff{jlp[13]i<ljld[1]pfdjl<ppsdcjs>>{p}sfd<<i>cd>dp}pfs */ d f119(f a1,f a2,struct A671 a3,p a4,f a5,s a6){V_f[1]=a1;V_f[2]=a2;f_cpA671(V_a[3],&a3);V_p[4]=a4;V_f[5]=a5;V_s[6]=a6;ret_d(6)}
/* 120:<i<cis>jijjiji>jpi{l}dcscd */ union  A673 f120(j a1,p a2,i a3,struct A141 a4,d a5,c a6,s a7,c a8,d a9){V_j[1]=a1;V_p[2]=a2;V_i[3]=a3;f_cpA141(V_a[4],&a4);V_d[5]=a5;V_c[6]=a6;V_s[7]=a7;V_c[8]=a8;V_d[9]=a9;ret_a(9,union  A673)}
/* 121:{{cilfcfp<fddffi>jdlc}}{fj[2]fcpldds}<lspdlsj>lcccjc{<jf>i{ij{idpdsjdcilcd}l}[13]lliplsc{cjjddp}i}{p<djscds[1]jljfli><lddfljpcfjlc>d{psfidcidfjlf}l}fc<<sf>ll<sp>cl<pc>{pfi}cd{c[2]pfddfc[1]fjsif}d>c */ struct A676 f121(struct A677 a1,union  A678 a2,l a3,c a4,c a5,c a6,j a7,c a8,struct A683 a9,struct A687 a10,f a11,c a12,union  A691 a13,c a14){f_cpA677(V_a[1],&a1);f_cpA678(V_a[2],&a2);V_l[3]=a3;V_c[4]=a4;V_c[5]=a5;V_c[6]=a6;V_j[7]=a7;V_c[8]=a8;f_cpA683(V_a[9],&a9);f_cpA687(V_a[10],&a10);V_f[11]=a11;V_c[12]=a12;f_cpA691(V_a[13],&a13);V_c[14]=a14;ret_a(14,struct A676)}
/* 122:dsi<si>jji */ d f122(s a1,i a2,union  A692 a3,j a4,j a5,i a6){V_s[1]=a1;V_i[2]=a2;f_cpA692(V_a[3],&a3);V_j[4]=a4;V_j[5]=a5;V_i[6]=a6;ret_d(6)}
/* 123:spjcs<<jcpjc>d{cldc}jcfcjp>lf */ s f123(p a1,j a2,c a3,s a4,union  A695 a5,l a6,f a7){V_p[1]=a1;V_j[2]=a2;V_c[3]=a3;V_s[4]=a4;f_cpA695(V_a[5],&a5);V_l[6]=a6;V_f[7]=a7;ret_s(7)}
/* 124:c{<c><jpjl{didl}{cldsf}f{s}jil[9]{fpddsscl}>}lc */ c f124(struct A700 a1,l a2,c a3){f_cpA700(V_a[1],&a1);V_l[2]=a2;V_c[3]=a3;ret_c(3)}
/* 125:vpf{plpls[14]jj{ll}fc}ii */ v f125(p a1,f a2,struct A702 a3,i a4,i a5){V_p[1]=a1;V_f[2]=a2;f_cpA702(V_a[3],&a3);V_i[4]=a4;V_i[5]=a5;ret_v(5)}
/* 126:cjpj<{cciidll}<scilsl>>djpc<{{lfdlpd}<lpslss[15]cijslc>lldi{idp}icdi[9]i}d> */ c f126(j a1,p a2,j a3,union  A705 a4,d a5,j a6,p a7,c a8,union  A710 a9){V_j[1]=a1;V_p[2]=a2;V_j[3]=a3;f_cpA705(V_a[4],&a4);V_d[5]=a5;V_j[6]=a6;V_p[7]=a7;V_c[8]=a8;f_cpA710(V_a[9],&a9);ret_c(9)}
/* 127:fissddlllci<<<djiijfssdill>jsilp[11]lcclij>fc{jdldj<ccljscdjidll>jc}ipds[7]>d{jdj{p}} */ f f127(i a1,s a2,s a3,d a4,d a5,l a6,l a7,l a8,c a9,i a10,union  A715 a11,d a12,struct A716 a13){V_i[1]=a1;V_s[2]=a2;V_s[3]=a3;V_d[4]=a4;V_d[5]=a5;V_l[6]=a6;V_l[7]=a7;V_l[8]=a8;V_c[9]=a9;V_i[10]=a10;f_cpA715(V_a[11],&a11);V_d[12]=a12;f_cpA716(V_a[13],&a13);ret_f(13)}
/* 128:fjssli<lpfsiclpljid>{dplscppfdllc}<{l[2]<jjpiisdfsjcc>jf{fsf}}<lc<fcflcpjjfdcp>d>flcc> */ f f128(j a1,s a2,s a3,l a4,i a5,union  A717 a6,struct A718 a7,union  A724 a8){V_j[1]=a1;V_s[2]=a2;V_s[3]=a3;V_l[4]=a4;V_i[5]=a5;f_cpA717(V_a[6],&a6);f_cpA718(V_a[7],&a7);f_cpA724(V_a[8],&a8);ret_f(8)}
/* 129:ii<cpcjisjj>i<spppf[4]>i<jc<ccf>{iipj{sjpcidldf}ljp}ij<idfjsscdslds>jfs<sfsjssfljs<fic>l>l>s{csi{d}fpiij{ffpiljpld}pj}<<pjil>><jjijilfcf>if */ i f129(i a1,union  A725 a2,i a3,union  A726 a4,i a5,union  A733 a6,s a7,struct A735 a8,union  A737 a9,union  A738 a10,i a11,f a12){V_i[1]=a1;f_cpA725(V_a[2],&a2);V_i[3]=a3;f_cpA726(V_a[4],&a4);V_i[5]=a5;f_cpA733(V_a[6],&a6);V_s[7]=a7;f_cpA735(V_a[8],&a8);f_cpA737(V_a[9],&a9);f_cpA738(V_a[10],&a10);V_i[11]=a11;V_f[12]=a12;ret_i(12)}
/* 130:<l<i>fp{{cij}<iil>d}fsdf{p}ij><<cpl<splpjf>sfcj{scdllpildci}lj>>dijpjcs */ union  A742 f130(union  A746 a1,d a2,i a3,j a4,p a5,j a6,c a7,s a8){f_cpA746(V_a[1],&a1);V_d[2]=a2;V_i[3]=a3;V_j[4]=a4;V_p[5]=a5;V_j[6]=a6;V_c[7]=a7;V_s[8]=a8;ret_a(8,union  A742)}
/* 131:vill<{silsi}cfd<fi<fdpif>ijidpjf<ilpllipj>{icjsdp}>jifl>slpdd */ v f131(i a1,l a2,l a3,union  A752 a4,s a5,l a6,p a7,d a8,d a9){V_i[1]=a1;V_l[2]=a2;V_l[3]=a3;f_cpA752(V_a[4],&a4);V_s[5]=a5;V_l[6]=a6;V_p[7]=a7;V_d[8]=a8;V_d[9]=a9;ret_v(9)}
/* 132:l{cpcill<jlf>lcs{cpcl}c}lci{sp}ifillcdlc */ l f132(struct A755 a1,l a2,c a3,i a4,struct A756 a5,i a6,f a7,i a8,l a9,l a10,c a11,d a12,l a13,c a14){f_cpA755(V_a[1],&a1);V_l[2]=a2;V_c[3]=a3;V_i[4]=a4;f_cpA756(V_a[5],&a5);V_i[6]=a6;V_f[7]=a7;V_i[8]=a8;V_l[9]=a9;V_l[10]=a10;V_c[11]=a11;V_d[12]=a12;V_l[13]=a13;V_c[14]=a14;ret_l(14)}
/* 133:p<dc>dsijjfpj */ p f133(union  A318 a1,d a2,s a3,i a4,j a5,j a6,f a7,p a8,j a9){f_cpA318(V_a[1],&a1);V_d[2]=a2;V_s[3]=a3;V_i[4]=a4;V_j[5]=a5;V_j[6]=a6;V_f[7]=a7;V_p[8]=a8;V_j[9]=a9;ret_p(9)}
/* 134:vl{d}{jsi[11]p{idipi{is}{diciplppdji[10]}{dss}}ss}jifdj<lfcid>jdcjs */ v f134(l a1,struct A47 a2,struct A761 a3,j a4,i a5,f a6,d a7,j a8,union  A762 a9,j a10,d a11,c a12,j a13,s a14){V_l[1]=a1;f_cpA47(V_a[2],&a2);f_cpA761(V_a[3],&a3);V_j[4]=a4;V_i[5]=a5;V_f[6]=a6;V_d[7]=a7;V_j[8]=a8;f_cpA762(V_a[9],&a9);V_j[10]=a10;V_d[11]=a11;V_c[12]=a12;V_j[13]=a13;V_s[14]=a14;ret_v(14)}
/* 135:{p} */ struct A33 f135(){ret_a(0,struct A33)}
/* 136:v{fps{dffcl}<if>{dppfcfjjdplc}lfiscp}sidijfliji */ v f136(struct A765 a1,s a2,i a3,d a4,i a5,j a6,f a7,l a8,i a9,j a10,i a11){f_cpA765(V_a[1],&a1);V_s[2]=a2;V_i[3]=a3;V_d[4]=a4;V_i[5]=a5;V_j[6]=a6;V_f[7]=a7;V_l[8]=a8;V_i[9]=a9;V_j[10]=a10;V_i[11]=a11;ret_v(11)}
/* 137:<csj<csldlpllpcdc>i> */ union  A767 f137(){ret_a(0,union  A767)}
/* 138:jilspdi{iilfllifdsjf}pf */ j f138(i a1,l a2,s a3,p a4,d a5,i a6,struct A768 a7,p a8,f a9){V_i[1]=a1;V_l[2]=a2;V_s[3]=a3;V_p[4]=a4;V_d[5]=a5;V_i[6]=a6;f_cpA768(V_a[7],&a7);V_p[8]=a8;V_f[9]=a9;ret_j(9)}
/* 139:<lld{lijpd}fislsd<jclj>d>p */ union  A771 f139(p a1){V_p[1]=a1;ret_a(1,union  A771)}
/* 140:dfcjdi<sldsp[3]pdisffd>djfsfsi */ d f140(f a1,c a2,j a3,d a4,i a5,union  A772 a6,d a7,j a8,f a9,s a10,f a11,s a12,i a13){V_f[1]=a1;V_c[2]=a2;V_j[3]=a3;V_d[4]=a4;V_i[5]=a5;f_cpA772(V_a[6],&a6);V_d[7]=a7;V_j[8]=a8;V_f[9]=a9;V_s[10]=a10;V_f[11]=a11;V_s[12]=a12;V_i[13]=a13;ret_d(13)}
/* 141:sisfd{icli<idcl[11]pcjflijf>}dd{llffjjsjsfjl}j<cps<c>scffd{flcpfllifslp}cf> */ s f141(i a1,s a2,f a3,d a4,struct A774 a5,d a6,d a7,struct A775 a8,j a9,union  A777 a10){V_i[1]=a1;V_s[2]=a2;V_f[3]=a3;V_d[4]=a4;f_cpA774(V_a[5],&a5);V_d[6]=a6;V_d[7]=a7;f_cpA775(V_a[8],&a8);V_j[9]=a9;f_cpA777(V_a[10],&a10);ret_s(10)}
/* 142:{difljjd}f<dflpddfsppcf>{isjj}fccl */ struct A778 f142(f a1,union  A779 a2,struct A780 a3,f a4,c a5,c a6,l a7){V_f[1]=a1;f_cpA779(V_a[2],&a2);f_cpA780(V_a[3],&a3);V_f[4]=a4;V_c[5]=a5;V_c[6]=a6;V_l[7]=a7;ret_a(7,struct A778)}
/* 143:d{{lpj}sc{ij}flllsldj}{f<{sjdipds[9]ssl[4]js[5]}{flidlld[3]jpcll}djcjp>d<d<iiiplds>cpc{dfcliiscjcdf}if>js<d{cpjsjlspcccd}js{dcs}<pp>f[2]fidjf>dclc<p<fc>ccsi>}cpdsjilfs */ d f143(struct A783 a1,struct A795 a2,c a3,p a4,d a5,s a6,j a7,i a8,l a9,f a10,s a11){f_cpA783(V_a[1],&a1);f_cpA795(V_a[2],&a2);V_c[3]=a3;V_p[4]=a4;V_d[5]=a5;V_s[6]=a6;V_j[7]=a7;V_i[8]=a8;V_l[9]=a9;V_f[10]=a10;V_s[11]=a11;ret_d(11)}
/* 144:vp<liccc>fs */ v f144(p a1,union  A796 a2,f a3,s a4){V_p[1]=a1;f_cpA796(V_a[2],&a2);V_f[3]=a3;V_s[4]=a4;ret_v(4)}
/* 145:c<ljpssjdf>jsii */ c f145(union  A797 a1,j a2,s a3,i a4,i a5){f_cpA797(V_a[1],&a1);V_j[2]=a2;V_s[3]=a3;V_i[4]=a4;V_i[5]=a5;ret_c(5)}
/* 146:<jid>jd{j{jljdpplfpipp}}ljdspd */ union  A584 f146(j a1,d a2,struct A799 a3,l a4,j a5,d a6,s a7,p a8,d a9){V_j[1]=a1;V_d[2]=a2;f_cpA799(V_a[3],&a3);V_l[4]=a4;V_j[5]=a5;V_d[6]=a6;V_s[7]=a7;V_p[8]=a8;V_d[9]=a9;ret_a(9,union  A584)}
/* 147:fsslcfpdcs{ld} */ f f147(s a1,s a2,l a3,c a4,f a5,p a6,d a7,c a8,s a9,struct A800 a10){V_s[1]=a1;V_s[2]=a2;V_l[3]=a3;V_c[4]=a4;V_f[5]=a5;V_p[6]=a6;V_d[7]=a7;V_c[8]=a8;V_s[9]=a9;f_cpA800(V_a[10],&a10);ret_f(10)}
/* 148:{jfij}{cii}pfflf{iflcjp}p{isc{cs}f[8]c<dsiss{iicc}pp>icis} */ struct A801 f148(struct A503 a1,p a2,f a3,f a4,l a5,f a6,struct A802 a7,p a8,struct A805 a9){f_cpA503(V_a[1],&a1);V_p[2]=a2;V_f[3]=a3;V_f[4]=a4;V_l[5]=a5;V_f[6]=a6;f_cpA802(V_a[7],&a7);V_p[8]=a8;f_cpA805(V_a[9],&a9);ret_a(9,struct A801)}
/* 149:{psp}iii */ struct A806 f149(i a1,i a2,i a3){V_i[1]=a1;V_i[2]=a2;V_i[3]=a3;ret_a(3,struct A806)}
/* 150:clj<clc<ilijsip>cc<fcpssfsi><id>sj<lfl>d>spdicflllp */ c f150(l a1,j a2,union  A810 a3,s a4,p a5,d a6,i a7,c a8,f a9,l a10,l a11,l a12,p a13){V_l[1]=a1;V_j[2]=a2;f_cpA810(V_a[3],&a3);V_s[4]=a4;V_p[5]=a5;V_d[6]=a6;V_i[7]=a7;V_c[8]=a8;V_f[9]=a9;V_l[10]=a10;V_l[11]=a11;V_l[12]=a12;V_p[13]=a13;ret_c(13)}
/* 151:vcliip{jd} */ v f151(c a1,l a2,i a3,i a4,p a5,struct A811 a6){V_c[1]=a1;V_l[2]=a2;V_i[3]=a3;V_i[4]=a4;V_p[5]=a5;f_cpA811(V_a[6],&a6);ret_v(6)}
/* 152:f<f>jfc */ f f152(union  A438 a1,j a2,f a3,c a4){f_cpA438(V_a[1],&a1);V_j[2]=a2;V_f[3]=a3;V_c[4]=a4;ret_f(4)}
/* 153:spi{fji}dpj{jjp}{id{sdl<ilfiiid><lpiicpllfpi>sdfp<cjislcispcsf>f}{{cdjjspfdiccf}ld}cc}sl */ s f153(p a1,i a2,struct A812 a3,d a4,p a5,j a6,struct A813 a7,struct A820 a8,s a9,l a10){V_p[1]=a1;V_i[2]=a2;f_cpA812(V_a[3],&a3);V_d[4]=a4;V_p[5]=a5;V_j[6]=a6;f_cpA813(V_a[7],&a7);f_cpA820(V_a[8],&a8);V_s[9]=a9;V_l[10]=a10;ret_s(10)}
/* 154:sdicfsif{ic}l<ds{d}ipcil{cpsfil[6]slfifc}{jifsc}lf>pf */ s f154(d a1,i a2,c a3,f a4,s a5,i a6,f a7,struct A514 a8,l a9,union  A823 a10,p a11,f a12){V_d[1]=a1;V_i[2]=a2;V_c[3]=a3;V_f[4]=a4;V_s[5]=a5;V_i[6]=a6;V_f[7]=a7;f_cpA514(V_a[8],&a8);V_l[9]=a9;f_cpA823(V_a[10],&a10);V_p[11]=a11;V_f[12]=a12;ret_s(12)}
/* 155:pi{ji{p}fd<sls>}ffcps */ p f155(i a1,struct A824 a2,f a3,f a4,c a5,p a6,s a7){V_i[1]=a1;f_cpA824(V_a[2],&a2);V_f[3]=a3;V_f[4]=a4;V_c[5]=a5;V_p[6]=a6;V_s[7]=a7;ret_p(7)}
/* 156:pc{{pjcfsj}c} */ p f156(c a1,struct A826 a2){V_c[1]=a1;f_cpA826(V_a[2],&a2);ret_p(2)}
/* 157:lcjd<jpjffdipp>l{dpcccpdfffpc}iilpl */ l f157(c a1,j a2,d a3,union  A827 a4,l a5,struct A828 a6,i a7,i a8,l a9,p a10,l a11){V_c[1]=a1;V_j[2]=a2;V_d[3]=a3;f_cpA827(V_a[4],&a4);V_l[5]=a5;f_cpA828(V_a[6],&a6);V_i[7]=a7;V_i[8]=a8;V_l[9]=a9;V_p[10]=a10;V_l[11]=a11;ret_l(11)}
/* 158:j<cpddlcl>{s}{isc{pdlfsfjlcfdf}sij<p[1]sjdljl><dlilljcsls>s{lljic}s}<il><djl{icp<dpjsisjisl><j>d<isilijplcsd[6]d>f}<<ssldddfjip>>isiljs<is>>ls<lllclpccpdsj>jfifc */ j f158(union  A829 a1,struct A162 a2,struct A834 a3,union  A51 a4,union  A840 a5,l a6,s a7,union  A841 a8,j a9,f a10,i a11,f a12,c a13){f_cpA829(V_a[1],&a1);f_cpA162(V_a[2],&a2);f_cpA834(V_a[3],&a3);f_cpA51(V_a[4],&a4);f_cpA840(V_a[5],&a5);V_l[6]=a6;V_s[7]=a7;f_cpA841(V_a[8],&a8);V_j[9]=a9;V_f[10]=a10;V_i[11]=a11;V_f[12]=a12;V_c[13]=a13;ret_j(13)}
/* 159:pdp<jfpcjcpd<dj<jp>>dfi>did<pl> */ p f159(d a1,p a2,union  A844 a3,d a4,i a5,d a6,union  A664 a7){V_d[1]=a1;V_p[2]=a2;f_cpA844(V_a[3],&a3);V_d[4]=a4;V_i[5]=a5;V_d[6]=a6;f_cpA664(V_a[7],&a7);ret_p(7)}
/* 160:{l<<fldlfdppcp>i<fpfsi>ls>f}fsp */ struct A848 f160(f a1,s a2,p a3){V_f[1]=a1;V_s[2]=a2;V_p[3]=a3;ret_a(3,struct A848)}
/* 161:c<is>ffj */ c f161(union  A377 a1,f a2,f a3,j a4){f_cpA377(V_a[1],&a1);V_f[2]=a2;V_f[3]=a3;V_j[4]=a4;ret_c(4)}
/* 162:<c>dj{spi<jj[1]jl>c[10]dlfsp[8]}ddppilfii<cpf{s}<ijpfdiscl>pidf{ldf}ls>j */ union  A116 f162(d a1,j a2,struct A850 a3,d a4,d a5,p a6,p a7,i a8,l a9,f a10,i a11,i a12,union  A853 a13,j a14){V_d[1]=a1;V_j[2]=a2;f_cpA850(V_a[3],&a3);V_d[4]=a4;V_d[5]=a5;V_p[6]=a6;V_p[7]=a7;V_i[8]=a8;V_l[9]=a9;V_f[10]=a10;V_i[11]=a11;V_i[12]=a12;f_cpA853(V_a[13],&a13);V_j[14]=a14;ret_a(14,union  A116)}
/* 163:{ii{il}p[14]pllpfps<scc>}lspijpsff<{<ljdifi[13]jl>p{jlspidsls}d<cflsi>sjfd[9]jjf}{ffsfcfd}jllc<ffs<pd[2]fssfpidfip[9]>f>fcllc>j */ struct A856 f163(l a1,s a2,p a3,i a4,j a5,p a6,s a7,f a8,f a9,union  A864 a10,j a11){V_l[1]=a1;V_s[2]=a2;V_p[3]=a3;V_i[4]=a4;V_j[5]=a5;V_p[6]=a6;V_s[7]=a7;V_f[8]=a8;V_f[9]=a9;f_cpA864(V_a[10],&a10);V_j[11]=a11;ret_a(11,struct A856)}
/* 164:cj{pl{{lsdcc[16]fs}{ipjf}l{spl}lpjfi[12]}<cpljssdc<llcf>dll><pclpd{iscllsfjflp}sjp{ild}<cddpd><sdd>>ldl}llsj */ c f164(j a1,struct A876 a2,l a3,l a4,s a5,j a6){V_j[1]=a1;f_cpA876(V_a[2],&a2);V_l[3]=a3;V_l[4]=a4;V_s[5]=a5;V_j[6]=a6;ret_c(6)}
/* 165:p{lp<<pljs><dpsldsdspdss>{pfilsilidscj}pfcddpcjj>pj{icfl{ljfcdd[16]sjslcd}jcjsj{jlijssiflfdj}f}<fs{c}fppisjjj<p[12]lcplcipsffs>>ff}c{iip<clll><c>{fdj}p<disf>dcld}lsc */ p f165(struct A886 a1,c a2,struct A890 a3,l a4,s a5,c a6){f_cpA886(V_a[1],&a1);V_c[2]=a2;f_cpA890(V_a[3],&a3);V_l[4]=a4;V_s[5]=a5;V_c[6]=a6;ret_p(6)}
/* 166:lid{<cpdsl[2]<sidippliljsi>jffi{j}<idfcsl>>pipdifd{j<jj>j}cji}{ficsddpi}pf<{sp}[2]<<c>jc{iilcdddl}cci>jjiic>dpddic */ l f166(i a1,d a2,struct A895 a3,struct A896 a4,p a5,f a6,union  A899 a7,d a8,p a9,d a10,d a11,i a12,c a13){V_i[1]=a1;V_d[2]=a2;f_cpA895(V_a[3],&a3);f_cpA896(V_a[4],&a4);V_p[5]=a5;V_f[6]=a6;f_cpA899(V_a[7],&a7);V_d[8]=a8;V_p[9]=a9;V_d[10]=a10;V_d[11]=a11;V_i[12]=a12;V_c[13]=a13;ret_l(13)}
/* 167:s{d<i>s<jf>pd}<pidfjdjpcis>p{jfdpsjsdpcjs}fji */ s f167(struct A900 a1,union  A901 a2,p a3,struct A902 a4,f a5,j a6,i a7){f_cpA900(V_a[1],&a1);f_cpA901(V_a[2],&a2);V_p[3]=a3;f_cpA902(V_a[4],&a4);V_f[5]=a5;V_j[6]=a6;V_i[7]=a7;ret_s(7)}
/* 168:d{ffls}lcd */ d f168(struct A903 a1,l a2,c a3,d a4){f_cpA903(V_a[1],&a1);V_l[2]=a2;V_c[3]=a3;V_d[4]=a4;ret_d(4)}
/* 169:v<scps{isdds<s>i<jd>fi}fj> */ v f169(union  A906 a1){f_cpA906(V_a[1],&a1);ret_v(1)}
/* 170:df{p{ijllc}<dlpcsdldf>fsfsicppj}p{j}jp */ d f170(f a1,struct A909 a2,p a3,struct A117 a4,j a5,p a6){V_f[1]=a1;f_cpA909(V_a[2],&a2);V_p[3]=a3;f_cpA117(V_a[4],&a4);V_j[5]=a5;V_p[6]=a6;ret_d(6)}
/* 171:j<ss{djj}{lf}s> */ j f171(union  A911 a1){f_cpA911(V_a[1],&a1);ret_j(1)}
/* 172:j<pc{sclpp}{pjlflilidfpp}spjjcjc{icl}>jc<pi>dsd<jpsp<isdcccij>>ip{c}<d{lpcp[10]p[14]spfdpjc}<f><dpllf>> */ j f172(union  A915 a1,j a2,c a3,union  A916 a4,d a5,s a6,d a7,union  A918 a8,i a9,p a10,struct A212 a11,union  A921 a12){f_cpA915(V_a[1],&a1);V_j[2]=a2;V_c[3]=a3;f_cpA916(V_a[4],&a4);V_d[5]=a5;V_s[6]=a6;V_d[7]=a7;f_cpA918(V_a[8],&a8);V_i[9]=a9;V_p[10]=a10;f_cpA212(V_a[11],&a11);f_cpA921(V_a[12],&a12);ret_j(12)}
/* 173:icdsfl{fcpfjccdjlsc}s */ i f173(c a1,d a2,s a3,f a4,l a5,struct A922 a6,s a7){V_c[1]=a1;V_d[2]=a2;V_s[3]=a3;V_f[4]=a4;V_l[5]=a5;f_cpA922(V_a[6],&a6);V_s[7]=a7;ret_i(7)}
/* 174:v<sj>dlc<{j}> */ v f174(union  A923 a1,d a2,l a3,c a4,union  A924 a5){f_cpA923(V_a[1],&a1);V_d[2]=a2;V_l[3]=a3;V_c[4]=a4;f_cpA924(V_a[5],&a5);ret_v(5)}
/* 175:isifc{d{fsidscplfcjc}is<sc>f{csdfdfldlff}lcsl[6]p}sfp */ i f175(s a1,i a2,f a3,c a4,struct A928 a5,s a6,f a7,p a8){V_s[1]=a1;V_i[2]=a2;V_f[3]=a3;V_c[4]=a4;f_cpA928(V_a[5],&a5);V_s[6]=a6;V_f[7]=a7;V_p[8]=a8;ret_i(8)}
/* 176:sd{l<pc<cclpip><psjccidfsdil>iidlpp<l[1]sddlf>j>d{{ciddclp}}ic}jsjd<pfjljlpdf[14]ppj>icfl */ s f176(d a1,struct A935 a2,j a3,s a4,j a5,d a6,union  A936 a7,i a8,c a9,f a10,l a11){V_d[1]=a1;f_cpA935(V_a[2],&a2);V_j[3]=a3;V_s[4]=a4;V_j[5]=a5;V_d[6]=a6;f_cpA936(V_a[7],&a7);V_i[8]=a8;V_c[9]=a9;V_f[10]=a10;V_l[11]=a11;ret_s(11)}
/* 177:ld{cfcj[2]<pi>js{fjdflj}[9]ipcj}ddjif<sclil> */ l f177(d a1,struct A938 a2,d a3,d a4,j a5,i a6,f a7,union  A939 a8){V_d[1]=a1;f_cpA938(V_a[2],&a2);V_d[3]=a3;V_d[4]=a4;V_j[5]=a5;V_i[6]=a6;V_f[7]=a7;f_cpA939(V_a[8],&a8);ret_l(8)}
/* 178:l{{sdflpij[10]lddjd}d{cdjfpcdl}{cj}l}sd<<plldd<dds>ilpd{fipjjil}>><j>f<scijffislp>j */ l f178(struct A943 a1,s a2,d a3,union  A947 a4,union  A43 a5,f a6,union  A948 a7,j a8){f_cpA943(V_a[1],&a1);V_s[2]=a2;V_d[3]=a3;f_cpA947(V_a[4],&a4);f_cpA43(V_a[5],&a5);V_f[6]=a6;f_cpA948(V_a[7],&a7);V_j[8]=a8;ret_l(8)}
/* 179:id{<sfpscc[5]d>d<pjfpcffjlddf>}d{f[11]si}j{cdjp}j */ i f179(d a1,struct A951 a2,d a3,struct A952 a4,j a5,struct A953 a6,j a7){V_d[1]=a1;f_cpA951(V_a[2],&a2);V_d[3]=a3;f_cpA952(V_a[4],&a4);V_j[5]=a5;f_cpA953(V_a[6],&a6);V_j[7]=a7;ret_i(7)}
/* 180:<<sli>di[16]<{ljfflf}cd<jdjcld>idcc<ipd>{fjsji}<pclcdjf[3]jcsps>>fpl> */ union  A961 f180(){ret_a(0,union  A961)}
/* 181:p{cipci}s{ilfj}ssjss */ p f181(struct A962 a1,s a2,struct A963 a3,s a4,s a5,j a6,s a7,s a8){f_cpA962(V_a[1],&a1);V_s[2]=a2;f_cpA963(V_a[3],&a3);V_s[4]=a4;V_s[5]=a5;V_j[6]=a6;V_s[7]=a7;V_s[8]=a8;ret_p(8)}
/* 182:jj<{sd}ip>fcl<pdiccjllscpf>l */ j f182(j a1,union  A965 a2,f a3,c a4,l a5,union  A966 a6,l a7){V_j[1]=a1;f_cpA965(V_a[2],&a2);V_f[3]=a3;V_c[4]=a4;V_l[5]=a5;f_cpA966(V_a[6],&a6);V_l[7]=a7;ret_j(7)}
/* 183:sld<l{fpcljcfilf[11]is}>{l{<csslppjjd>dcliipcscj{ci}}ipi{d}}spdpsiddssp */ s f183(l a1,d a2,union  A968 a3,struct A972 a4,s a5,p a6,d a7,p a8,s a9,i a10,d a11,d a12,s a13,s a14,p a15){V_l[1]=a1;V_d[2]=a2;f_cpA968(V_a[3],&a3);f_cpA972(V_a[4],&a4);V_s[5]=a5;V_p[6]=a6;V_d[7]=a7;V_p[8]=a8;V_s[9]=a9;V_i[10]=a10;V_d[11]=a11;V_d[12]=a12;V_s[13]=a13;V_s[14]=a14;V_p[15]=a15;ret_s(15)}
/* 184:d{cfsc}icd */ d f184(struct A973 a1,i a2,c a3,d a4){f_cpA973(V_a[1],&a1);V_i[2]=a2;V_c[3]=a3;V_d[4]=a4;ret_d(4)}
/* 185:<d> */ union  A317 f185(){ret_a(0,union  A317)}
/* 186:ilsipjj{scpispj}pfs */ i f186(l a1,s a2,i a3,p a4,j a5,j a6,struct A974 a7,p a8,f a9,s a10){V_l[1]=a1;V_s[2]=a2;V_i[3]=a3;V_p[4]=a4;V_j[5]=a5;V_j[6]=a6;f_cpA974(V_a[7],&a7);V_p[8]=a8;V_f[9]=a9;V_s[10]=a10;ret_i(10)}
/* 187:dfjp<sipifcj><p>i */ d f187(f a1,j a2,p a3,union  A975 a4,union  A36 a5,i a6){V_f[1]=a1;V_j[2]=a2;V_p[3]=a3;f_cpA975(V_a[4],&a4);f_cpA36(V_a[5],&a5);V_i[6]=a6;ret_d(6)}
/* 188:{f<ffdi>j}scps{{ifd<icl>iljli[4]ipl}<p[6]p{lp}dis<jiijp>{ffj[7]}jdil>i}ficclsdf */ struct A977 f188(s a1,c a2,p a3,s a4,struct A983 a5,f a6,i a7,c a8,c a9,l a10,s a11,d a12,f a13){V_s[1]=a1;V_c[2]=a2;V_p[3]=a3;V_s[4]=a4;f_cpA983(V_a[5],&a5);V_f[6]=a6;V_i[7]=a7;V_c[8]=a8;V_c[9]=a9;V_l[10]=a10;V_s[11]=a11;V_d[12]=a12;V_f[13]=a13;ret_a(13,struct A977)}
/* 189:lifsd{fjpflcspsjsp}ddfd<p[3]>dd */ l f189(i a1,f a2,s a3,d a4,struct A984 a5,d a6,d a7,f a8,d a9,union  A985 a10,d a11,d a12){V_i[1]=a1;V_f[2]=a2;V_s[3]=a3;V_d[4]=a4;f_cpA984(V_a[5],&a5);V_d[6]=a6;V_d[7]=a7;V_f[8]=a8;V_d[9]=a9;f_cpA985(V_a[10],&a10);V_d[11]=a11;V_d[12]=a12;ret_l(12)}
/* 190:{psldpjlscpsd}pdsl{<ispj>jjj<cjdjdpji>sdsfpj<li[4]df>}{siccfcscjjlc}cpsl */ struct A986 f190(p a1,d a2,s a3,l a4,struct A990 a5,struct A991 a6,c a7,p a8,s a9,l a10){V_p[1]=a1;V_d[2]=a2;V_s[3]=a3;V_l[4]=a4;f_cpA990(V_a[5],&a5);f_cpA991(V_a[6],&a6);V_c[7]=a7;V_p[8]=a8;V_s[9]=a9;V_l[10]=a10;ret_a(10,struct A986)}
/* 191:j{lfijpii}l */ j f191(struct A992 a1,l a2){f_cpA992(V_a[1],&a1);V_l[2]=a2;ret_j(2)}
/* 192:pjslsjflillf<spdfp>fi */ p f192(j a1,s a2,l a3,s a4,j a5,f a6,l a7,i a8,l a9,l a10,f a11,union  A993 a12,f a13,i a14){V_j[1]=a1;V_s[2]=a2;V_l[3]=a3;V_s[4]=a4;V_j[5]=a5;V_f[6]=a6;V_l[7]=a7;V_i[8]=a8;V_l[9]=a9;V_l[10]=a10;V_f[11]=a11;f_cpA993(V_a[12],&a12);V_f[13]=a13;V_i[14]=a14;ret_p(14)}
/* 193:vplfifpff{icsiispscjd}f */ v f193(p a1,l a2,f a3,i a4,f a5,p a6,f a7,f a8,struct A994 a9,f a10){V_p[1]=a1;V_l[2]=a2;V_f[3]=a3;V_i[4]=a4;V_f[5]=a5;V_p[6]=a6;V_f[7]=a7;V_f[8]=a8;f_cpA994(V_a[9],&a9);V_f[10]=a10;ret_v(10)}
/* 194:jpjiidci<jfsfisl>{ss}{cdi<sspfpc{cfccfjpjssj}c{d}>scffilps}ff */ j f194(p a1,j a2,i a3,i a4,d a5,c a6,i a7,union  A995 a8,struct A257 a9,struct A998 a10,f a11,f a12){V_p[1]=a1;V_j[2]=a2;V_i[3]=a3;V_i[4]=a4;V_d[5]=a5;V_c[6]=a6;V_i[7]=a7;f_cpA995(V_a[8],&a8);f_cpA257(V_a[9],&a9);f_cpA998(V_a[10],&a10);V_f[11]=a11;V_f[12]=a12;ret_j(12)}
/* 195:jldj<iji>d */ j f195(l a1,d a2,j a3,union  A999 a4,d a5){V_l[1]=a1;V_d[2]=a2;V_j[3]=a3;f_cpA999(V_a[4],&a4);V_d[5]=a5;ret_j(5)}
/* 196:j<dipcs[6]>j<cjs> */ j f196(union  A1000 a1,j a2,union  A1001 a3){f_cpA1000(V_a[1],&a1);V_j[2]=a2;f_cpA1001(V_a[3],&a3);ret_j(3)}
/* 197:<{jslsjsjlfc}[14]>{icpcplj[14]lsplj}dldpfs<f{<ddldc>ji<ppdjppsppssf>csisl<jcpddddpfpcs>l{dlsflcsspisf}}fp{fl<ldccd[5]fpjjdjc>jsljifc{cjip}l}j>djds */ union  A1003 f197(struct A1004 a1,d a2,l a3,d a4,p a5,f a6,s a7,union  A1013 a8,d a9,j a10,d a11,s a12){f_cpA1004(V_a[1],&a1);V_d[2]=a2;V_l[3]=a3;V_d[4]=a4;V_p[5]=a5;V_f[6]=a6;V_s[7]=a7;f_cpA1013(V_a[8],&a8);V_d[9]=a9;V_j[10]=a10;V_d[11]=a11;V_s[12]=a12;ret_a(12,union  A1003)}
/* 198:<liisccpjjflj>djcddddicjild */ union  A1014 f198(d a1,j a2,c a3,d a4,d a5,d a6,d a7,i a8,c a9,j a10,i a11,l a12,d a13){V_d[1]=a1;V_j[2]=a2;V_c[3]=a3;V_d[4]=a4;V_d[5]=a5;V_d[6]=a6;V_d[7]=a7;V_i[8]=a8;V_c[9]=a9;V_j[10]=a10;V_i[11]=a11;V_l[12]=a12;V_d[13]=a13;ret_a(13,union  A1014)}
/* 199:if{jjdjcicil}cc{c<jffsi>[7]jil<cfii>cpd}ipc */ i f199(f a1,struct A1015 a2,c a3,c a4,struct A1018 a5,i a6,p a7,c a8){V_f[1]=a1;f_cpA1015(V_a[2],&a2);V_c[3]=a3;V_c[4]=a4;f_cpA1018(V_a[5],&a5);V_i[6]=a6;V_p[7]=a7;V_c[8]=a8;ret_i(8)}
/* 200:s{j<lipddd<jj[7]scffc[12]plpfd>fc>}cj<<dpd>d>is{sf<jiisidi>{clpiiffclfd}{ldp}cddcffi} */ s f200(struct A1021 a1,c a2,j a3,union  A1023 a4,i a5,s a6,struct A1027 a7){f_cpA1021(V_a[1],&a1);V_c[2]=a2;V_j[3]=a3;f_cpA1023(V_a[4],&a4);V_i[5]=a5;V_s[6]=a6;f_cpA1027(V_a[7],&a7);ret_s(7)}
/* 201:ilp{sc}l<lfclfpp><pp>j<jpp[3]ic[2]ssc>sjlji */ i f201(l a1,p a2,struct A1028 a3,l a4,union  A1029 a5,union  A792 a6,j a7,union  A1030 a8,s a9,j a10,l a11,j a12,i a13){V_l[1]=a1;V_p[2]=a2;f_cpA1028(V_a[3],&a3);V_l[4]=a4;f_cpA1029(V_a[5],&a5);f_cpA792(V_a[6],&a6);V_j[7]=a7;f_cpA1030(V_a[8],&a8);V_s[9]=a9;V_j[10]=a10;V_l[11]=a11;V_j[12]=a12;V_i[13]=a13;ret_i(13)}
/* 202:ldl<lpl{j[12]dp}f{ljsfjiplsdcp}il>d */ l f202(d a1,l a2,union  A1033 a3,d a4){V_d[1]=a1;V_l[2]=a2;f_cpA1033(V_a[3],&a3);V_d[4]=a4;ret_l(4)}
/* 203:{dfpdiilfj}p */ struct A1034 f203(p a1){V_p[1]=a1;ret_a(1,struct A1034)}
/* 204:f<{sp{di[13]}cccic}d<fd<sfs>ip<f><jp>p>c{d<c>fpjiddlp}cppdsdc>sjp */ f f204(union  A1040 a1,s a2,j a3,p a4){f_cpA1040(V_a[1],&a1);V_s[2]=a2;V_j[3]=a3;V_p[4]=a4;ret_f(4)}
/* 205:jpj{ilcijdiifffp}ff */ j f205(p a1,j a2,struct A1041 a3,f a4,f a5){V_p[1]=a1;V_j[2]=a2;f_cpA1041(V_a[3],&a3);V_f[4]=a4;V_f[5]=a5;ret_j(5)}
/* 206:ff{pf}siil */ f f206(f a1,struct A609 a2,s a3,i a4,i a5,l a6){V_f[1]=a1;f_cpA609(V_a[2],&a2);V_s[3]=a3;V_i[4]=a4;V_i[5]=a5;V_l[6]=a6;ret_f(6)}
/* 207:ps<{jddlddf[11]cff}{cijsj}l<jds>f{ffdddscidfdj}[13]d<ip[2]liflffci><cpdcp[1]>iii>f<sj>i */ p f207(s a1,union  A1048 a2,f a3,union  A923 a4,i a5){V_s[1]=a1;f_cpA1048(V_a[2],&a2);V_f[3]=a3;f_cpA923(V_a[4],&a4);V_i[5]=a5;ret_p(5)}
/* 208:dl<isc{ci<cljfsiplfii>sl<f>lip<i>d}lc{pd}si>ds */ d f208(l a1,union  A1051 a2,d a3,s a4){V_l[1]=a1;f_cpA1051(V_a[2],&a2);V_d[3]=a3;V_s[4]=a4;ret_d(4)}
/* 209:dlsi{sdlildd<pl[4]flsffpicpl>pl{pfcicspcps}p}{ddlsfidcjppd}{clp<sjjsjpjidd>j{fisiicllcici}lfjp{isjlfcscidlj}c}jij */ d f209(l a1,s a2,i a3,struct A1054 a4,struct A1055 a5,struct A1059 a6,j a7,i a8,j a9){V_l[1]=a1;V_s[2]=a2;V_i[3]=a3;f_cpA1054(V_a[4],&a4);f_cpA1055(V_a[5],&a5);f_cpA1059(V_a[6],&a6);V_j[7]=a7;V_i[8]=a8;V_j[9]=a9;ret_d(9)}
/* 210:{ic<s>}lcds{flldpc{jdsjcpi}fc{pfp}}jl */ struct A1060 f210(l a1,c a2,d a3,s a4,struct A1063 a5,j a6,l a7){V_l[1]=a1;V_c[2]=a2;V_d[3]=a3;V_s[4]=a4;f_cpA1063(V_a[5],&a5);V_j[6]=a6;V_l[7]=a7;ret_a(7,struct A1060)}
/* 211:ld<dpplpdjpjjf[9]c>jjcfd{<sipics[10]illclf>s{iddcdli}[2]jdf{ddlfpj}c<jd>ci<id>}c */ l f211(d a1,union  A1064 a2,j a3,j a4,c a5,f a6,d a7,struct A1068 a8,c a9){V_d[1]=a1;f_cpA1064(V_a[2],&a2);V_j[3]=a3;V_j[4]=a4;V_c[5]=a5;V_f[6]=a6;V_d[7]=a7;f_cpA1068(V_a[8],&a8);V_c[9]=a9;ret_l(9)}
/* 212:dfss{{ddif{pcjlsdcjl}pi<idclc>ijfs}ffc{pdjssd}{lpcslp{sdpllcdpdiji}jcdis}s<{fplpsc[6]icjfcj}sfs>f} */ d f212(f a1,s a2,s a3,struct A1077 a4){V_f[1]=a1;V_s[2]=a2;V_s[3]=a3;f_cpA1077(V_a[4],&a4);ret_d(4)}
/* 213:cdci<fjipflpcd>ppicdd */ c f213(d a1,c a2,i a3,union  A1078 a4,p a5,p a6,i a7,c a8,d a9,d a10){V_d[1]=a1;V_c[2]=a2;V_i[3]=a3;f_cpA1078(V_a[4],&a4);V_p[5]=a5;V_p[6]=a6;V_i[7]=a7;V_c[8]=a8;V_d[9]=a9;V_d[10]=a10;ret_c(10)}
/* 214:vjpdj{djps<pf>}fp<fcc[10]didcffl[1]j[10]l><s<lp[1]cfsfi>jsf>j<j>d */ v f214(j a1,p a2,d a3,j a4,struct A1080 a5,f a6,p a7,union  A1081 a8,union  A1083 a9,j a10,union  A43 a11,d a12){V_j[1]=a1;V_p[2]=a2;V_d[3]=a3;V_j[4]=a4;f_cpA1080(V_a[5],&a5);V_f[6]=a6;V_p[7]=a7;f_cpA1081(V_a[8],&a8);f_cpA1083(V_a[9],&a9);V_j[10]=a10;f_cpA43(V_a[11],&a11);V_d[12]=a12;ret_v(12)}
/* 215:{{sj{idlspcliiscj}<ic>s{scciffsdifcl}f<iispfp>}c[2]lcppsdjspp}ccccpicj<{sdlfij}sld>f{cd{<ljjlcslsisds>f<jlicsdjid[8]jji>{p[8]lifdl}i<jcpij>fj{fllscp[12]}c<cfcis>f}d<dspdllcp><c<ifpfsdds[1]splj>sii<i>cc{dcif}cfd>pll<pd<jfijifisdli[6]s>ididcijj<isiilfp>>{l}p}s */ struct A1089 f215(c a1,c a2,c a3,c a4,p a5,i a6,c a7,j a8,union  A1091 a9,f a10,struct A1106 a11,s a12){V_c[1]=a1;V_c[2]=a2;V_c[3]=a3;V_c[4]=a4;V_p[5]=a5;V_i[6]=a6;V_c[7]=a7;V_j[8]=a8;f_cpA1091(V_a[9],&a9);V_f[10]=a10;f_cpA1106(V_a[11],&a11);V_s[12]=a12;ret_a(12,struct A1089)}
/* 216:i{js<<lfc[7]ipisf[12]ccsf>ijicccp{dpssds}>fljcff<fps[12]s{ls}pdjd>cs}<i[10]>sdsjj<jfcp[6]pf{s{ilsd}<ddcljdccdcci><filpsslc[3]fifi>csjlspj<dpldpcdispsj>}<pjdcd{il}fl>dfs[15]j>fd */ i f216(struct A1112 a1,union  A1113 a2,s a3,d a4,s a5,j a6,j a7,union  A1120 a8,f a9,d a10){f_cpA1112(V_a[1],&a1);f_cpA1113(V_a[2],&a2);V_s[3]=a3;V_d[4]=a4;V_s[5]=a5;V_j[6]=a6;V_j[7]=a7;f_cpA1120(V_a[8],&a8);V_f[9]=a9;V_d[10]=a10;ret_i(10)}
/* 217:<j>d */ union  A43 f217(d a1){V_d[1]=a1;ret_a(1,union  A43)}
/* 218:cd<{ic<lilpj>sfspsdjll}lfislssplpc><scpfddfjji{jfccs<p[11]llpcsfc>s<j>idj{cpicccffpdip}}>d<<idpc>f<sc>l>dcdi{dld} */ c f218(d a1,union  A1123 a2,union  A1127 a3,d a4,union  A1129 a5,d a6,c a7,d a8,i a9,struct A1130 a10){V_d[1]=a1;f_cpA1123(V_a[2],&a2);f_cpA1127(V_a[3],&a3);V_d[4]=a4;f_cpA1129(V_a[5],&a5);V_d[6]=a6;V_c[7]=a7;V_d[8]=a8;V_i[9]=a9;f_cpA1130(V_a[10],&a10);ret_c(10)}
/* 219:vi<{c}cildlsp{jilcijps[7]jc<sj>f}{<sfj[14]pijl>l{ddfssfl[8]s[15]pf}}ld>pp<clcfdfdip>jp */ v f219(i a1,union  A1135 a2,p a3,p a4,union  A1136 a5,j a6,p a7){V_i[1]=a1;f_cpA1135(V_a[2],&a2);V_p[3]=a3;V_p[4]=a4;f_cpA1136(V_a[5],&a5);V_j[6]=a6;V_p[7]=a7;ret_v(7)}
/* 220:fppccs<c{js{psijidici}}dsdc{i<sjcssj>c[4]<dcjcdifilcfc>d<dcif[9]cdcljsif>ll}ffc{f{sfpf}lpidppcpff}l> */ f f220(p a1,p a2,c a3,c a4,s a5,union  A1145 a6){V_p[1]=a1;V_p[2]=a2;V_c[3]=a3;V_c[4]=a4;V_s[5]=a5;f_cpA1145(V_a[6],&a6);ret_f(6)}
/* 221:j<sjddc{ciciflf[8]liijl}l<ii>iffc>dddl{iddfdfcsj}p */ j f221(union  A1147 a1,d a2,d a3,d a4,l a5,struct A1148 a6,p a7){f_cpA1147(V_a[1],&a1);V_d[2]=a2;V_d[3]=a3;V_d[4]=a4;V_l[5]=a5;f_cpA1148(V_a[6],&a6);V_p[7]=a7;ret_j(7)}
/* 222:<i><l<dd{clfdjdp}{pj[8]clf}[4]clissclc>cj{cf{lcjsiifdp[2]pd[13]f}f{isldfjsdcccs}sp<ipc[11]ifiip>}jjd{jp}>psclcj */ union  A62 f222(union  A1157 a1,p a2,s a3,c a4,l a5,c a6,j a7){f_cpA1157(V_a[1],&a1);V_p[2]=a2;V_s[3]=a3;V_c[4]=a4;V_l[5]=a5;V_c[6]=a6;V_j[7]=a7;ret_a(7,union  A62)}
/* 223:vd{p}icd */ v f223(d a1,struct A33 a2,i a3,c a4,d a5){V_d[1]=a1;f_cpA33(V_a[2],&a2);V_i[3]=a3;V_c[4]=a4;V_d[5]=a5;ret_v(5)}
/* 224:cifdj{ccpcdl<filc>{ildc}<jsljlpfjfs>llp}dcdd */ c f224(i a1,f a2,d a3,j a4,struct A1161 a5,d a6,c a7,d a8,d a9){V_i[1]=a1;V_f[2]=a2;V_d[3]=a3;V_j[4]=a4;f_cpA1161(V_a[5],&a5);V_d[6]=a6;V_c[7]=a7;V_d[8]=a8;V_d[9]=a9;ret_c(9)}
/* 225:p<d>djp */ p f225(union  A317 a1,d a2,j a3,p a4){f_cpA317(V_a[1],&a1);V_d[2]=a2;V_j[3]=a3;V_p[4]=a4;ret_p(4)}
/* 226:vppsislislld<p{pplplfcd}jfdj> */ v f226(p a1,p a2,s a3,i a4,s a5,l a6,i a7,s a8,l a9,l a10,d a11,union  A1163 a12){V_p[1]=a1;V_p[2]=a2;V_s[3]=a3;V_i[4]=a4;V_s[5]=a5;V_l[6]=a6;V_i[7]=a7;V_s[8]=a8;V_l[9]=a9;V_l[10]=a10;V_d[11]=a11;f_cpA1163(V_a[12],&a12);ret_v(12)}
/* 227:f<sps[12]ijd<jl{fds}jfifjf{ccs}pd>di>pf */ f f227(union  A1167 a1,p a2,f a3){f_cpA1167(V_a[1],&a1);V_p[2]=a2;V_f[3]=a3;ret_f(3)}
/* 228:<fippidjddf>fjcjp */ union  A1168 f228(f a1,j a2,c a3,j a4,p a5){V_f[1]=a1;V_j[2]=a2;V_c[3]=a3;V_j[4]=a4;V_p[5]=a5;ret_a(5,union  A1168)}
/* 229:ilsi<diddpjpdlcji>pf{fjp}cj<lfcld> */ i f229(l a1,s a2,i a3,union  A1169 a4,p a5,f a6,struct A1170 a7,c a8,j a9,union  A1171 a10){V_l[1]=a1;V_s[2]=a2;V_i[3]=a3;f_cpA1169(V_a[4],&a4);V_p[5]=a5;V_f[6]=a6;f_cpA1170(V_a[7],&a7);V_c[8]=a8;V_j[9]=a9;f_cpA1171(V_a[10],&a10);ret_i(10)}
/* 230:i<{c<pf>lcj}f{sdfcs}pi[6]i{sj}dscdp>dlpcfjp<dlsf[11]scdfl><fsp{jp<j><sc>i<ilcl[14]jspdcppi>jl{ijdjlflijfjc}jii}sicl[14]{sjlldd{sfdsdl}<ppfdpljlfjd>ispj}<ssfscsdp{cfj}ipp><cpfpccl<ssfdf>j<icf>js>f>{{psff}s}s */ i f230(union  A1174 a1,d a2,l a3,p a4,c a5,f a6,j a7,p a8,union  A1175 a9,union  A1187 a10,struct A1189 a11,s a12){f_cpA1174(V_a[1],&a1);V_d[2]=a2;V_l[3]=a3;V_p[4]=a4;V_c[5]=a5;V_f[6]=a6;V_j[7]=a7;V_p[8]=a8;f_cpA1175(V_a[9],&a9);f_cpA1187(V_a[10],&a10);f_cpA1189(V_a[11],&a11);V_s[12]=a12;ret_i(12)}
/* 231:{{d}i}si */ struct A1190 f231(s a1,i a2){V_s[1]=a1;V_i[2]=a2;ret_a(2,struct A1190)}
/* 232:c{i} */ c f232(struct A5 a1){f_cpA5(V_a[1],&a1);ret_c(1)}
/* 233:pj{pp{i}<l><dfpjsfcspp>jjcpd}lfcscijf{<d{slifi}{cffipsdcfipp}sdffpp<s>{pl}{ii[7]ii}>[5]l{i{s[7]djdfjdcjjs}l{c[12]ddccs}pcii{lfjsppssiilp}pf<lfjd>}idi<dl<piccjpjf>[5]l<s>cl{di}diid><c<pfiid>p>c{cf{pdjffjsi}ccl}cp}dj */ p f233(j a1,struct A1192 a2,l a3,f a4,c a5,s a6,c a7,i a8,j a9,f a10,struct A1210 a11,d a12,j a13){V_j[1]=a1;f_cpA1192(V_a[2],&a2);V_l[3]=a3;V_f[4]=a4;V_c[5]=a5;V_s[6]=a6;V_c[7]=a7;V_i[8]=a8;V_j[9]=a9;V_f[10]=a10;f_cpA1210(V_a[11],&a11);V_d[12]=a12;V_j[13]=a13;ret_p(13)}
/* 234:sjp<dllcddllcsji> */ s f234(j a1,p a2,union  A1211 a3){V_j[1]=a1;V_p[2]=a2;f_cpA1211(V_a[3],&a3);ret_s(3)}
/* 235:pjplcsjc<dssfjcj{s[3]d}{c}i<{j}cipidp>f>jp */ p f235(j a1,p a2,l a3,c a4,s a5,j a6,c a7,union  A1214 a8,j a9,p a10){V_j[1]=a1;V_p[2]=a2;V_l[3]=a3;V_c[4]=a4;V_s[5]=a5;V_j[6]=a6;V_c[7]=a7;f_cpA1214(V_a[8],&a8);V_j[9]=a9;V_p[10]=a10;ret_p(10)}
/* 236:dfcici{dpsiddcfdddd}d */ d f236(f a1,c a2,i a3,c a4,i a5,struct A1215 a6,d a7){V_f[1]=a1;V_c[2]=a2;V_i[3]=a3;V_c[4]=a4;V_i[5]=a5;f_cpA1215(V_a[6],&a6);V_d[7]=a7;ret_d(7)}
/* 237:<p>sid */ union  A36 f237(s a1,i a2,d a3){V_s[1]=a1;V_i[2]=a2;V_d[3]=a3;ret_a(3,union  A36)}
/* 238:slj{{{pjlp[13]difsiffs}[16]<ipdcp[13]ldljjl>d<p>i<sjscpiisci>dlsp<pldlfs>f}ps<p>jcsdd}s<{f<ccf>s{ssfdpccsccis}ii{cpljcijipsff}{lds}i[5]fp}{sl<jdj[14]jllsij>pc}pl{ssj}clc{j<j>p}pjs>sp<ddflf{dji{c}ij}{cip}j{llpf{cdpcpiljfsjs}c{l[13]i}lpd<spjcd>l}{dc}fj>df */ s f238(l a1,j a2,struct A1221 a3,s a4,union  A1230 a5,s a6,p a7,union  A1238 a8,d a9,f a10){V_l[1]=a1;V_j[2]=a2;f_cpA1221(V_a[3],&a3);V_s[4]=a4;f_cpA1230(V_a[5],&a5);V_s[6]=a6;V_p[7]=a7;f_cpA1238(V_a[8],&a8);V_d[9]=a9;V_f[10]=a10;ret_s(10)}
/* 239:i<ljlf{s<cdiscfscsfpf>didp{slilldc[16]dsspj}jpii{jsi}}{pf<jsjlc>ijc{dfcllcpclsl[3]d}slcc<s[6]cjccls>}jcdiii>dl */ i f239(union  A1247 a1,d a2,l a3){f_cpA1247(V_a[1],&a1);V_d[2]=a2;V_l[3]=a3;ret_i(3)}
/* 240:i{l}<ccpj>fij */ i f240(struct A141 a1,union  A1248 a2,f a3,i a4,j a5){f_cpA141(V_a[1],&a1);f_cpA1248(V_a[2],&a2);V_f[3]=a3;V_i[4]=a4;V_j[5]=a5;ret_i(5)}
/* 241:f{{dd<fijsisfljsij>f<l[13]dffpslslcsl[16]>}}j */ f f241(struct A1252 a1,j a2){f_cpA1252(V_a[1],&a1);V_j[2]=a2;ret_f(2)}
/* 242:<ifdc{lddjip}>ljl */ union  A1254 f242(l a1,j a2,l a3){V_l[1]=a1;V_j[2]=a2;V_l[3]=a3;ret_a(3,union  A1254)}
/* 243:<{fcs}ffccii{fdd}f>ji */ union  A1256 f243(j a1,i a2){V_j[1]=a1;V_i[2]=a2;ret_a(2,union  A1256)}
/* 244:vcjc{fl}fjd */ v f244(c a1,j a2,c a3,struct A476 a4,f a5,j a6,d a7){V_c[1]=a1;V_j[2]=a2;V_c[3]=a3;f_cpA476(V_a[4],&a4);V_f[5]=a5;V_j[6]=a6;V_d[7]=a7;ret_v(7)}
/* 245:cd{dis}{fs[13]lf{p}pp{p[2]fpdi[12]i}fppl}piilc{pppcdcss}dcp */ c f245(d a1,struct A1257 a2,struct A1259 a3,p a4,i a5,i a6,l a7,c a8,struct A1260 a9,d a10,c a11,p a12){V_d[1]=a1;f_cpA1257(V_a[2],&a2);f_cpA1259(V_a[3],&a3);V_p[4]=a4;V_i[5]=a5;V_i[6]=a6;V_l[7]=a7;V_c[8]=a8;f_cpA1260(V_a[9],&a9);V_d[10]=a10;V_c[11]=a11;V_p[12]=a12;ret_c(12)}
/* 246:sdi<dflsis<spjfplp>><dclscdpfc<lpjs[3]illflppj>s<dicj[10]pccjs>> */ s f246(d a1,i a2,union  A1262 a3,union  A1265 a4){V_d[1]=a1;V_i[2]=a2;f_cpA1262(V_a[3],&a3);f_cpA1265(V_a[4],&a4);ret_s(4)}
/* 247:<jd[6]>s{<ils><sds><jsffcip>ljdspjl} */ union  A1266 f247(s a1,struct A1270 a2){V_s[1]=a1;f_cpA1270(V_a[2],&a2);ret_a(2,union  A1266)}
/* 248:l<cfpp>lpjjp{{jlsssippdcpp}lcijpcifpc}ipspl */ l f248(union  A1271 a1,l a2,p a3,j a4,j a5,p a6,struct A1273 a7,i a8,p a9,s a10,p a11,l a12){f_cpA1271(V_a[1],&a1);V_l[2]=a2;V_p[3]=a3;V_j[4]=a4;V_j[5]=a5;V_p[6]=a6;f_cpA1273(V_a[7],&a7);V_i[8]=a8;V_p[9]=a9;V_s[10]=a10;V_p[11]=a11;V_l[12]=a12;ret_l(12)}
/* 249:p<<slfd>cs{ls<sds>sdj{llpsjpdsijf}lfpsf}flp>jpd{ffpp{<cpfsjif[16]pj>pcffp<llplds[7]sccsdl>iccff}f}l<idcddfcfcfdd><cpsplfdsiil>cc<<cdsc{flf}is>p[9]pp{pl<ppipdjf[3]sssdp>{jpljc}}pp<dpcpfjsdlli[4]j>dj> */ p f249(union  A1277 a1,j a2,p a3,d a4,struct A1281 a5,l a6,union  A1282 a7,union  A1283 a8,c a9,c a10,union  A1290 a11){f_cpA1277(V_a[1],&a1);V_j[2]=a2;V_p[3]=a3;V_d[4]=a4;f_cpA1281(V_a[5],&a5);V_l[6]=a6;f_cpA1282(V_a[7],&a7);f_cpA1283(V_a[8],&a8);V_c[9]=a9;V_c[10]=a10;f_cpA1290(V_a[11],&a11);ret_p(11)}
/* 250:ds{f<j>fcci<pdpjlldp[8]cjpd>ccs{lfci}c}<ps<c<ilplj>>fflffjs<ldf{slpcji}<jjl>ipp>j>cfspliic<d<slljcjljdsji>cjjcillf[9]jd><jspild> */ d f250(s a1,struct A1293 a2,union  A1298 a3,c a4,f a5,s a6,p a7,l a8,i a9,i a10,c a11,union  A1300 a12,union  A1301 a13){V_s[1]=a1;f_cpA1293(V_a[2],&a2);f_cpA1298(V_a[3],&a3);V_c[4]=a4;V_f[5]=a5;V_s[6]=a6;V_p[7]=a7;V_l[8]=a8;V_i[9]=a9;V_i[10]=a10;V_c[11]=a11;f_cpA1300(V_a[12],&a12);f_cpA1301(V_a[13],&a13);ret_d(13)}
/* 251:{p[12]sii}pjcd */ struct A1302 f251(p a1,j a2,c a3,d a4){V_p[1]=a1;V_j[2]=a2;V_c[3]=a3;V_d[4]=a4;ret_a(4,struct A1302)}
/* 252:ic<didflis[14]ssfjs>jddji{cilpli} */ i f252(c a1,union  A1303 a2,j a3,d a4,d a5,j a6,i a7,struct A1304 a8){V_c[1]=a1;f_cpA1303(V_a[2],&a2);V_j[3]=a3;V_d[4]=a4;V_d[5]=a5;V_j[6]=a6;V_i[7]=a7;f_cpA1304(V_a[8],&a8);ret_i(8)}
/* 253:dc{pfffj}{plslcsdcs}p */ d f253(c a1,struct A1305 a2,struct A1306 a3,p a4){V_c[1]=a1;f_cpA1305(V_a[2],&a2);f_cpA1306(V_a[3],&a3);V_p[4]=a4;ret_d(4)}
/* 254:cfidijc{ljd{jiil<dfifisj[3]c>cppspl}cp}<jds[15]cp> */ c f254(f a1,i a2,d a3,i a4,j a5,c a6,struct A1309 a7,union  A1310 a8){V_f[1]=a1;V_i[2]=a2;V_d[3]=a3;V_i[4]=a4;V_j[5]=a5;V_c[6]=a6;f_cpA1309(V_a[7],&a7);f_cpA1310(V_a[8],&a8);ret_c(8)}
/* 255:lislf<c{sissfdiss}dl<lfifpfdd[3]idci>sii<ip>>l<fidp>s<icplljpfc><cdfsi> */ l f255(i a1,s a2,l a3,f a4,union  A1313 a5,l a6,union  A1314 a7,s a8,union  A1315 a9,union  A1316 a10){V_i[1]=a1;V_s[2]=a2;V_l[3]=a3;V_f[4]=a4;f_cpA1313(V_a[5],&a5);V_l[6]=a6;f_cpA1314(V_a[7],&a7);V_s[8]=a8;f_cpA1315(V_a[9],&a9);f_cpA1316(V_a[10],&a10);ret_l(10)}
/* 256:iii<dsi{s[13]}pj>{sf}dl<s{jpslsdsfs}[14]spdpijfifc>{fi<ccp<ld><sp><pp>ii{sjjcfss}{li}{fjdlssjci}s>fspc<lj<c>ccpccll<l>d>clss}sij{lfpis} */ i f256(i a1,i a2,union  A1318 a3,struct A1319 a4,d a5,l a6,union  A1321 a7,struct A1328 a8,s a9,i a10,j a11,struct A1329 a12){V_i[1]=a1;V_i[2]=a2;f_cpA1318(V_a[3],&a3);f_cpA1319(V_a[4],&a4);V_d[5]=a5;V_l[6]=a6;f_cpA1321(V_a[7],&a7);f_cpA1328(V_a[8],&a8);V_s[9]=a9;V_i[10]=a10;V_j[11]=a11;f_cpA1329(V_a[12],&a12);ret_i(12)}
/* 257:dfcli{sf} */ d f257(f a1,c a2,l a3,i a4,struct A1319 a5){V_f[1]=a1;V_c[2]=a2;V_l[3]=a3;V_i[4]=a4;f_cpA1319(V_a[5],&a5);ret_d(5)}
/* 258:icscj{pdsdpdl}cc */ i f258(c a1,s a2,c a3,j a4,struct A1330 a5,c a6,c a7){V_c[1]=a1;V_s[2]=a2;V_c[3]=a3;V_j[4]=a4;f_cpA1330(V_a[5],&a5);V_c[6]=a6;V_c[7]=a7;ret_i(7)}
/* 259:sifcisjcs<d>fspdi */ s f259(i a1,f a2,c a3,i a4,s a5,j a6,c a7,s a8,union  A317 a9,f a10,s a11,p a12,d a13,i a14){V_i[1]=a1;V_f[2]=a2;V_c[3]=a3;V_i[4]=a4;V_s[5]=a5;V_j[6]=a6;V_c[7]=a7;V_s[8]=a8;f_cpA317(V_a[9],&a9);V_f[10]=a10;V_s[11]=a11;V_p[12]=a12;V_d[13]=a13;V_i[14]=a14;ret_s(14)}
/* 260:pjfdsfpjjfc<c<ic[10]cccfl>ijpj{c[4]s}p{l}>j */ p f260(j a1,f a2,d a3,s a4,f a5,p a6,j a7,j a8,f a9,c a10,union  A1333 a11,j a12){V_j[1]=a1;V_f[2]=a2;V_d[3]=a3;V_s[4]=a4;V_f[5]=a5;V_p[6]=a6;V_j[7]=a7;V_j[8]=a8;V_f[9]=a9;V_c[10]=a10;f_cpA1333(V_a[11],&a11);V_j[12]=a12;ret_p(12)}
/* 261:f<{pdsppsd}p<fsccifpffjfd>d{lsip}csp{dfiiiijip[5]fpc}cil> */ f f261(union  A1338 a1){f_cpA1338(V_a[1],&a1);ret_f(1)}
/* 262:dcci{fppc[9]illlfscl}fs{{{fdlpcsfldsjl}l[15]i[5]fc}<fjccdc[3]>[1]icjf}l */ d f262(c a1,c a2,i a3,struct A1339 a4,f a5,s a6,struct A1343 a7,l a8){V_c[1]=a1;V_c[2]=a2;V_i[3]=a3;f_cpA1339(V_a[4],&a4);V_f[5]=a5;V_s[6]=a6;f_cpA1343(V_a[7],&a7);V_l[8]=a8;ret_d(8)}
/* 263:idfpi{{<sflcjlppjl[16]ij>fi{fclslccfldcf}<jfcs>f{i}cpj}spci}dici */ i f263(d a1,f a2,p a3,i a4,struct A1348 a5,d a6,i a7,c a8,i a9){V_d[1]=a1;V_f[2]=a2;V_p[3]=a3;V_i[4]=a4;f_cpA1348(V_a[5],&a5);V_d[6]=a6;V_i[7]=a7;V_c[8]=a8;V_i[9]=a9;ret_i(9)}
/* 264:{p<cics><dipsplljij>jd{ipjjcd}flisil}{ldfij}<slfcllipcl>is{{c}sc{ds}{ipjifdpf}cid[3]{lpisfllsc}jdf}pii<j>pfljs */ struct A1352 f264(struct A1353 a1,union  A1354 a2,i a3,s a4,struct A1358 a5,p a6,i a7,i a8,union  A43 a9,p a10,f a11,l a12,j a13,s a14){f_cpA1353(V_a[1],&a1);f_cpA1354(V_a[2],&a2);V_i[3]=a3;V_s[4]=a4;f_cpA1358(V_a[5],&a5);V_p[6]=a6;V_i[7]=a7;V_i[8]=a8;f_cpA43(V_a[9],&a9);V_p[10]=a10;V_f[11]=a11;V_l[12]=a12;V_j[13]=a13;V_s[14]=a14;ret_a(14,struct A1352)}
/* 265:<jssf>cficfcip */ union  A1359 f265(c a1,f a2,i a3,c a4,f a5,c a6,i a7,p a8){V_c[1]=a1;V_f[2]=a2;V_i[3]=a3;V_c[4]=a4;V_f[5]=a5;V_c[6]=a6;V_i[7]=a7;V_p[8]=a8;ret_a(8,union  A1359)}
/* 266:dl{p{pfjijfcfjpcj}i{sslccd[2]sl}cdsj<pfippsfsdifp>i<cfjjjidcp>p}pd{flpplfsjjd{cicdcsl<iddcfjspc>pf<fljdpific[7]ps>f}i}id{lfl[7]lljccdlsc}f{fipdplcillsi} */ d f266(l a1,struct A1364 a2,p a3,d a4,struct A1368 a5,i a6,d a7,struct A1369 a8,f a9,struct A1370 a10){V_l[1]=a1;f_cpA1364(V_a[2],&a2);V_p[3]=a3;V_d[4]=a4;f_cpA1368(V_a[5],&a5);V_i[6]=a6;V_d[7]=a7;f_cpA1369(V_a[8],&a8);V_f[9]=a9;f_cpA1370(V_a[10],&a10);ret_d(10)}
/* 267:cf<cdcdiiiidcp>c<ff[15]ffcf>s */ c f267(f a1,union  A1371 a2,c a3,union  A1372 a4,s a5){V_f[1]=a1;f_cpA1371(V_a[2],&a2);V_c[3]=a3;f_cpA1372(V_a[4],&a4);V_s[5]=a5;ret_c(5)}
/* 268:iij{cl}d<difl{d}p>{if[15]ppsj{d<cflllffjppjl>lpfpi<ljildjf>djll}}l{<{fpcs}d{l}>fpfl<sdci[16]>lcfps}di */ i f268(i a1,j a2,struct A1373 a3,d a4,union  A1374 a5,struct A1378 a6,l a7,struct A1382 a8,d a9,i a10){V_i[1]=a1;V_j[2]=a2;f_cpA1373(V_a[3],&a3);V_d[4]=a4;f_cpA1374(V_a[5],&a5);f_cpA1378(V_a[6],&a6);V_l[7]=a7;f_cpA1382(V_a[8],&a8);V_d[9]=a9;V_i[10]=a10;ret_i(10)}
/* 269:p{s}i{ilcsjpjj[9]plid}js */ p f269(struct A162 a1,i a2,struct A1383 a3,j a4,s a5){f_cpA162(V_a[1],&a1);V_i[2]=a2;f_cpA1383(V_a[3],&a3);V_j[4]=a4;V_s[5]=a5;ret_p(5)}
/* 270:fp<<dclcji>sflliffijf<p>>pjpi{jidjicd{ffl<sd>sp}jipj}dfcs{fccd[15]<sl{p}<lp[8]iii>jjcfp[11]ifp><ssssj{ipdli}>idcj{fssdl[14]lsls<jpfcslppplfj>c{cdcfj}}i}j */ f f270(p a1,union  A1385 a2,p a3,j a4,p a5,i a6,struct A1388 a7,d a8,f a9,c a10,s a11,struct A1396 a12,j a13){V_p[1]=a1;f_cpA1385(V_a[2],&a2);V_p[3]=a3;V_j[4]=a4;V_p[5]=a5;V_i[6]=a6;f_cpA1388(V_a[7],&a7);V_d[8]=a8;V_f[9]=a9;V_c[10]=a10;V_s[11]=a11;f_cpA1396(V_a[12],&a12);V_j[13]=a13;ret_f(13)}
/* 271:vp<pplfp<ljilcill[15]isij>csp>ijsdf */ v f271(p a1,union  A1398 a2,i a3,j a4,s a5,d a6,f a7){V_p[1]=a1;f_cpA1398(V_a[2],&a2);V_i[3]=a3;V_j[4]=a4;V_s[5]=a5;V_d[6]=a6;V_f[7]=a7;ret_v(7)}
/* 272:scjcdd<iclsssdsfisd>fjf<l[1]cifld{plsd}{ffppjlcp{sjc}i<spp[15]>f}df{{lilsl}iildd}s><djfplsc{jcifsjjsipds}<j>i>sj */ s f272(c a1,j a2,c a3,d a4,d a5,union  A1399 a6,f a7,j a8,f a9,union  A1406 a10,union  A1408 a11,s a12,j a13){V_c[1]=a1;V_j[2]=a2;V_c[3]=a3;V_d[4]=a4;V_d[5]=a5;f_cpA1399(V_a[6],&a6);V_f[7]=a7;V_j[8]=a8;V_f[9]=a9;f_cpA1406(V_a[10],&a10);f_cpA1408(V_a[11],&a11);V_s[12]=a12;V_j[13]=a13;ret_s(13)}
/* 273:ljpcp<j[9]sjisppls>jcp{ljc<p>i{lcfcj}ccp{jpdji[10]fdllidp}fd}p{j}<<pilijfcfplsi>{ccl}l<ipfjijljpfsj>>f */ l f273(j a1,p a2,c a3,p a4,union  A1409 a5,j a6,c a7,p a8,struct A1412 a9,p a10,struct A117 a11,union  A1416 a12,f a13){V_j[1]=a1;V_p[2]=a2;V_c[3]=a3;V_p[4]=a4;f_cpA1409(V_a[5],&a5);V_j[6]=a6;V_c[7]=a7;V_p[8]=a8;f_cpA1412(V_a[9],&a9);V_p[10]=a10;f_cpA117(V_a[11],&a11);f_cpA1416(V_a[12],&a12);V_f[13]=a13;ret_l(13)}
/* 274:plll<ifspiss{fiic<dcjcdccl>ll<fcppp>cdsj}<liip>c{pspipjp<jlspi>icdp}d>if<p>ssd<pj<<fd>ilj>pf>df */ p f274(l a1,l a2,l a3,union  A1423 a4,i a5,f a6,union  A36 a7,s a8,s a9,d a10,union  A1425 a11,d a12,f a13){V_l[1]=a1;V_l[2]=a2;V_l[3]=a3;f_cpA1423(V_a[4],&a4);V_i[5]=a5;V_f[6]=a6;f_cpA36(V_a[7],&a7);V_s[8]=a8;V_s[9]=a9;V_d[10]=a10;f_cpA1425(V_a[11],&a11);V_d[12]=a12;V_f[13]=a13;ret_p(13)}
/* 275:d<sis[6]f<fdpdfdljjp>cijjf<sfffsfcsd><ccpljjj[9]jilii>>s<pj{scp}pf>i<spfjjs[3]>if<fdll{sfjlsslddjlj}l>fppcc{sd[8]jsi{jcjcfdpd}<pic>l{fsjic[6]sidfpfp}psl}l */ d f275(union  A1429 a1,s a2,union  A1431 a3,i a4,union  A1432 a5,i a6,f a7,union  A1434 a8,f a9,p a10,p a11,c a12,c a13,struct A1438 a14,l a15){f_cpA1429(V_a[1],&a1);V_s[2]=a2;f_cpA1431(V_a[3],&a3);V_i[4]=a4;f_cpA1432(V_a[5],&a5);V_i[6]=a6;V_f[7]=a7;f_cpA1434(V_a[8],&a8);V_f[9]=a9;V_p[10]=a10;V_p[11]=a11;V_c[12]=a12;V_c[13]=a13;f_cpA1438(V_a[14],&a14);V_l[15]=a15;ret_d(15)}
/* 276:jljf{iifpli}il */ j f276(l a1,j a2,f a3,struct A1439 a4,i a5,l a6){V_l[1]=a1;V_j[2]=a2;V_f[3]=a3;f_cpA1439(V_a[4],&a4);V_i[5]=a5;V_l[6]=a6;ret_j(6)}
/* 277:ljfl{sdd}p */ l f277(j a1,f a2,l a3,struct A1440 a4,p a5){V_j[1]=a1;V_f[2]=a2;V_l[3]=a3;f_cpA1440(V_a[4],&a4);V_p[5]=a5;ret_l(5)}
/* 278:<s<d>ij><spc<djlc>jplc><flfjfs<{jii}fij{dcpp}<fijdfsl>il[12]jc><dj>c{lfdpdd{l}<fdidsiddp>}sf[9]>cs{<dffpii{fdd}<s>p{sidijc}fs>fs}f */ union  A1441 f278(union  A1443 a1,union  A1450 a2,c a3,s a4,struct A1453 a5,f a6){f_cpA1443(V_a[1],&a1);f_cpA1450(V_a[2],&a2);V_c[3]=a3;V_s[4]=a4;f_cpA1453(V_a[5],&a5);V_f[6]=a6;ret_a(6,union  A1441)}
/* 279:<fp<lpsljljjicf{pff}>l<pjlippj{cisji}{jsfppclpllfd}[15]ij{f}><pj{picijpdp}dic{dcifdi}c{lcs}d<pcdjjc>[15]d>l{{ff}d}ff<fddi{ilfjficidfpp}isjijff>p>lcjiccccsdlj */ union  A1467 f279(l a1,c a2,j a3,i a4,c a5,c a6,c a7,c a8,s a9,d a10,l a11,j a12){V_l[1]=a1;V_c[2]=a2;V_j[3]=a3;V_i[4]=a4;V_c[5]=a5;V_c[6]=a6;V_c[7]=a7;V_c[8]=a8;V_s[9]=a9;V_d[10]=a10;V_l[11]=a11;V_j[12]=a12;ret_a(12,union  A1467)}
/* 280:ssfcfj{<fpcj>{s}ijs[3]c{ifdi}cd{cc[7]cs}l[1]}f{ccpc}j */ s f280(s a1,f a2,c a3,f a4,j a5,struct A1471 a6,f a7,struct A1472 a8,j a9){V_s[1]=a1;V_f[2]=a2;V_c[3]=a3;V_f[4]=a4;V_j[5]=a5;f_cpA1471(V_a[6],&a6);V_f[7]=a7;f_cpA1472(V_a[8],&a8);V_j[9]=a9;ret_s(9)}
/* 281:dljsipj<s>slp<ldfj> */ d f281(l a1,j a2,s a3,i a4,p a5,j a6,union  A179 a7,s a8,l a9,p a10,union  A1473 a11){V_l[1]=a1;V_j[2]=a2;V_s[3]=a3;V_i[4]=a4;V_p[5]=a5;V_j[6]=a6;f_cpA179(V_a[7],&a7);V_s[8]=a8;V_l[9]=a9;V_p[10]=a10;f_cpA1473(V_a[11],&a11);ret_d(11)}
/* 282:d{{ddijclfjsjjl}cl<s>c{pip}dlii}lpiisc */ d f282(struct A1476 a1,l a2,p a3,i a4,i a5,s a6,c a7){f_cpA1476(V_a[1],&a1);V_l[2]=a2;V_p[3]=a3;V_i[4]=a4;V_i[5]=a5;V_s[6]=a6;V_c[7]=a7;ret_d(7)}
/* 283:fpd{sfj[13]fpcdfilfp}i{ljcfi<ssj>pf}ssdl{lccp{pfjsji}iili<{cldc}jddj{pdsllpsfddfl}jssc>ff}l */ f f283(p a1,d a2,struct A1477 a3,i a4,struct A1479 a5,s a6,s a7,d a8,l a9,struct A1483 a10,l a11){V_p[1]=a1;V_d[2]=a2;f_cpA1477(V_a[3],&a3);V_i[4]=a4;f_cpA1479(V_a[5],&a5);V_s[6]=a6;V_s[7]=a7;V_d[8]=a8;V_l[9]=a9;f_cpA1483(V_a[10],&a10);V_l[11]=a11;ret_f(11)}
/* 284:jj{jpcsi<pfs{p[5]fldcdilcdcs}{if}<d>p{ccc}d[11]ifi>cfpffs}i<flscpll[10]pp[11]cpd><c{l}sc{cis[14]ldsscji[8]pi}ld{idjspfdc}p><j>d */ j f284(j a1,struct A1487 a2,i a3,union  A1488 a4,union  A1491 a5,union  A43 a6,d a7){V_j[1]=a1;f_cpA1487(V_a[2],&a2);V_i[3]=a3;f_cpA1488(V_a[4],&a4);f_cpA1491(V_a[5],&a5);f_cpA43(V_a[6],&a6);V_d[7]=a7;ret_j(7)}
/* 285:<pj[1]>jjscfpjddid{d<<i>i<iddldp>jlp<jsfllpispfcl>{iip}[14]sif<ipdi[14]cjld>><cdfsij[13]ss>} */ union  A1492 f285(j a1,j a2,s a3,c a4,f a5,p a6,j a7,d a8,d a9,i a10,d a11,struct A1499 a12){V_j[1]=a1;V_j[2]=a2;V_s[3]=a3;V_c[4]=a4;V_f[5]=a5;V_p[6]=a6;V_j[7]=a7;V_d[8]=a8;V_d[9]=a9;V_i[10]=a10;V_d[11]=a11;f_cpA1499(V_a[12],&a12);ret_a(12,union  A1492)}
/* 286:f<ccppisj>p{sfll<i><cldjj>llcdci}d<i>dfici{ildfjiccps}{if{jlj<j[2]lp>ljsj[6]f{lpsf}sf}pcpc} */ f f286(union  A1500 a1,p a2,struct A1502 a3,d a4,union  A62 a5,d a6,f a7,i a8,c a9,i a10,struct A1503 a11,struct A1507 a12){f_cpA1500(V_a[1],&a1);V_p[2]=a2;f_cpA1502(V_a[3],&a3);V_d[4]=a4;f_cpA62(V_a[5],&a5);V_d[6]=a6;V_f[7]=a7;V_i[8]=a8;V_c[9]=a9;V_i[10]=a10;f_cpA1503(V_a[11],&a11);f_cpA1507(V_a[12],&a12);ret_f(12)}
/* 287:<fpf> */ union  A1508 f287(){ret_a(0,union  A1508)}
/* 288:{<sc>dlpflcflsl{ifiddjlj}}d<scflsis>l */ struct A1510 f288(d a1,union  A1511 a2,l a3){V_d[1]=a1;f_cpA1511(V_a[2],&a2);V_l[3]=a3;ret_a(3,struct A1510)}
/* 289:pddi{<jipdc>ii[3]i{dlll[7]l{cijclpfjjdpj}lif<dsljf>pd}cs<d<jf>jl[11]lsj{jc}{sjdpicid}{jpiipfcfc}>jjj{f<pffccc><fsl><fdcdjpi>psj}}p<{pljp[6]jijfcddi}<flscsfjdlcpp>>s<ff>dc */ p f289(d a1,d a2,i a3,struct A1523 a4,p a5,union  A1526 a6,s a7,union  A1527 a8,d a9,c a10){V_d[1]=a1;V_d[2]=a2;V_i[3]=a3;f_cpA1523(V_a[4],&a4);V_p[5]=a5;f_cpA1526(V_a[6],&a6);V_s[7]=a7;f_cpA1527(V_a[8],&a8);V_d[9]=a9;V_c[10]=a10;ret_p(10)}
/* 290:l<{jj}cccfl>j<{jfpl}dflcil<ds{ci}{cllpfifcp}ssplijfj><cflic<ijilfiipfscc>cipij>><jsfpsffdccc>l{sd}ip<<lfcfliisscs>jjicfsjd{l}f<iddpfljpjp>>isif */ l f290(union  A1529 a1,j a2,union  A1535 a3,union  A1536 a4,l a5,struct A964 a6,i a7,p a8,union  A1539 a9,i a10,s a11,i a12,f a13){f_cpA1529(V_a[1],&a1);V_j[2]=a2;f_cpA1535(V_a[3],&a3);f_cpA1536(V_a[4],&a4);V_l[5]=a5;f_cpA964(V_a[6],&a6);V_i[7]=a7;V_p[8]=a8;f_cpA1539(V_a[9],&a9);V_i[10]=a10;V_s[11]=a11;V_i[12]=a12;V_f[13]=a13;ret_l(13)}
/* 291:jfdcjcllsj<jilcfji{f{pfccfjcscijj}<jpfsd>lpd}> */ j f291(f a1,d a2,c a3,j a4,c a5,l a6,l a7,s a8,j a9,union  A1543 a10){V_f[1]=a1;V_d[2]=a2;V_c[3]=a3;V_j[4]=a4;V_c[5]=a5;V_l[6]=a6;V_l[7]=a7;V_s[8]=a8;V_j[9]=a9;f_cpA1543(V_a[10],&a10);ret_j(10)}
/* 292:{cpiljldidf}d */ struct A1544 f292(d a1){V_d[1]=a1;ret_a(1,struct A1544)}
/* 293:ff{sp{<pdjlij[9]fcpfjd>lp}p}lc<l[15]icl>lf{fdcpssf[11]cd{jds}sp}{sc<f>sdi}flscd */ f f293(f a1,struct A1547 a2,l a3,c a4,union  A1548 a5,l a6,f a7,struct A1550 a8,struct A1551 a9,f a10,l a11,s a12,c a13,d a14){V_f[1]=a1;f_cpA1547(V_a[2],&a2);V_l[3]=a3;V_c[4]=a4;f_cpA1548(V_a[5],&a5);V_l[6]=a6;V_f[7]=a7;f_cpA1550(V_a[8],&a8);f_cpA1551(V_a[9],&a9);V_f[10]=a10;V_l[11]=a11;V_s[12]=a12;V_c[13]=a13;V_d[14]=a14;ret_f(14)}
/* 294:l<ipf[1]fi{sislpjsidjid}d[1]c{pclssisilfll}l{sldijflljjsl}<fs>>pd<s{lcspf}jj>{d{if}l} */ l f294(union  A1556 a1,p a2,d a3,union  A1558 a4,struct A1559 a5){f_cpA1556(V_a[1],&a1);V_p[2]=a2;V_d[3]=a3;f_cpA1558(V_a[4],&a4);f_cpA1559(V_a[5],&a5);ret_l(5)}
/* 295:ij<jljj<pljf>{<ljjiiidipc>sscs<lsdissdscspp>s{llcjcpdispsc}l[10]<cicjldli>id}i{s<sddsj[6]illjdfi>sjd{sipdcfff}ssspid}islc>dcc */ i f295(j a1,union  A1569 a2,d a3,c a4,c a5){V_j[1]=a1;f_cpA1569(V_a[2],&a2);V_d[3]=a3;V_c[4]=a4;V_c[5]=a5;ret_i(5)}
/* 296:j<<idjjpsdijfij><fpl>i<cfpiifjf[9]sfsj>sjp<dd>pf>{iccs}cddpjsjp */ j f296(union  A1574 a1,struct A1575 a2,c a3,d a4,d a5,p a6,j a7,s a8,j a9,p a10){f_cpA1574(V_a[1],&a1);f_cpA1575(V_a[2],&a2);V_c[3]=a3;V_d[4]=a4;V_d[5]=a5;V_p[6]=a6;V_j[7]=a7;V_s[8]=a8;V_j[9]=a9;V_p[10]=a10;ret_j(10)}
/* 297:v<p{f<cilpjjlci>j}s><ic{pidjljcfidds}{sljdjjidssfd}d<jllj><jc>ljis{cddlsddjfc}> */ v f297(union  A1578 a1,union  A1584 a2){f_cpA1578(V_a[1],&a1);f_cpA1584(V_a[2],&a2);ret_v(2)}
/* 298:{s{sspdfsi}<jf>}p<fjf>ipd<f>fsj */ struct A1586 f298(p a1,union  A1587 a2,i a3,p a4,d a5,union  A438 a6,f a7,s a8,j a9){V_p[1]=a1;f_cpA1587(V_a[2],&a2);V_i[3]=a3;V_p[4]=a4;V_d[5]=a5;f_cpA438(V_a[6],&a6);V_f[7]=a7;V_s[8]=a8;V_j[9]=a9;ret_a(9,struct A1586)}
/* 299:pp<<l>{jl}<sc>dcc<fpjf>csf>cjji{psj}ls */ p f299(p a1,union  A1589 a2,c a3,j a4,j a5,i a6,struct A1590 a7,l a8,s a9){V_p[1]=a1;f_cpA1589(V_a[2],&a2);V_c[3]=a3;V_j[4]=a4;V_j[5]=a5;V_i[6]=a6;f_cpA1590(V_a[7],&a7);V_l[8]=a8;V_s[9]=a9;ret_p(9)}
/* 300:vp<lp>j<ds[4]<i><fiiilfcspcsp>>jcj<{f[12]cfi<jjpdccildiii>{ijsj}p{cpjplcfd}lljs}iiij>dl */ v f300(p a1,union  A1591 a2,j a3,union  A1593 a4,j a5,c a6,j a7,union  A1598 a8,d a9,l a10){V_p[1]=a1;f_cpA1591(V_a[2],&a2);V_j[3]=a3;f_cpA1593(V_a[4],&a4);V_j[5]=a5;V_c[6]=a6;V_j[7]=a7;f_cpA1598(V_a[8],&a8);V_d[9]=a9;V_l[10]=a10;ret_v(10)}
/* 301:{<pppcfssdcfl>}<jii{f[2]cjpspf<ddjlpsddj>sj<cfp>i}<p{ljlpl}dlpc{djdcpdfsf}[9]<jcccc[13]l>lp>lpic<picjjj{cccclii}p>j{{dijfdfp}s<f>{pps}lc{pdcjifcdl}lpcds}>cspdl */ struct A1600 f301(union  A1614 a1,c a2,s a3,p a4,d a5,l a6){f_cpA1614(V_a[1],&a1);V_c[2]=a2;V_s[3]=a3;V_p[4]=a4;V_d[5]=a5;V_l[6]=a6;ret_a(6,struct A1600)}
/* 302:{if<pil>llcls<{si}{si}<di>fc>fds}jpip<diiscpcfpjpj> */ struct A1619 f302(j a1,p a2,i a3,p a4,union  A1620 a5){V_j[1]=a1;V_p[2]=a2;V_i[3]=a3;V_p[4]=a4;f_cpA1620(V_a[5],&a5);ret_a(5,struct A1619)}
/* 303:c<pdc<pc{fddc}lcdcp>i<<d>s>cfsfs{sslip}>cl */ c f303(union  A1625 a1,c a2,l a3){f_cpA1625(V_a[1],&a1);V_c[2]=a2;V_l[3]=a3;ret_c(3)}
/* 304:if{{j}f<diidildiljid>pd{pd{ssflff}{ls}c{iisjppfpsdfs}p}sfiidd}pd{ccfccp} */ i f304(f a1,struct A1630 a2,p a3,d a4,struct A1631 a5){V_f[1]=a1;f_cpA1630(V_a[2],&a2);V_p[3]=a3;V_d[4]=a4;f_cpA1631(V_a[5],&a5);ret_i(5)}
/* 305:dsdfdjii<p{f}<ippjll><psdscislllpi>>sdi{scs<fpdd>d}l */ d f305(s a1,d a2,f a3,d a4,j a5,i a6,i a7,union  A1634 a8,s a9,d a10,i a11,struct A1636 a12,l a13){V_s[1]=a1;V_d[2]=a2;V_f[3]=a3;V_d[4]=a4;V_j[5]=a5;V_i[6]=a6;V_i[7]=a7;f_cpA1634(V_a[8],&a8);V_s[9]=a9;V_d[10]=a10;V_i[11]=a11;f_cpA1636(V_a[12],&a12);V_l[13]=a13;ret_d(13)}
/* 306:cf{jdlscsc<c{sfi}ldcclflpli[7]>{<pid><pcffplpsfjlp>s[13]p{lii}<dld><pppp>jijj{d[8]psp}}cd{<jl>{jsscjlpljf[15]}jcj}}<dj<il<pdcfl>j{fdccfjjs}{sl}djcl{fcllddpc}s>s{s<plciiljc>fjfij}sljlfpf>i{ccpldllcf{sfpcfidcd[3]fsd}i}s */ c f306(f a1,struct A1649 a2,union  A1657 a3,i a4,struct A1659 a5,s a6){V_f[1]=a1;f_cpA1649(V_a[2],&a2);f_cpA1657(V_a[3],&a3);V_i[4]=a4;f_cpA1659(V_a[5],&a5);V_s[6]=a6;ret_c(6)}
/* 307:<jjpcl{{ij[8]iip}sc{jlpfdpdjpisp}csfijjjc}sfslji>p{cc}{f{jcdcjlpdiiid}p<lissj>fi}d{{fisfpsfiffcs}djjd}sdcssp{j} */ union  A1663 f307(p a1,struct A395 a2,struct A1666 a3,d a4,struct A1668 a5,s a6,d a7,c a8,s a9,s a10,p a11,struct A117 a12){V_p[1]=a1;f_cpA395(V_a[2],&a2);f_cpA1666(V_a[3],&a3);V_d[4]=a4;f_cpA1668(V_a[5],&a5);V_s[6]=a6;V_d[7]=a7;V_c[8]=a8;V_s[9]=a9;V_s[10]=a10;V_p[11]=a11;f_cpA117(V_a[12],&a12);ret_a(12,union  A1663)}
/* 308:p{lci[14]dcppj}jcfijslf{{s}{c}{jd}ccsdilcf} */ p f308(struct A1669 a1,j a2,c a3,f a4,i a5,j a6,s a7,l a8,f a9,struct A1670 a10){f_cpA1669(V_a[1],&a1);V_j[2]=a2;V_c[3]=a3;V_f[4]=a4;V_i[5]=a5;V_j[6]=a6;V_s[7]=a7;V_l[8]=a8;V_f[9]=a9;f_cpA1670(V_a[10],&a10);ret_p(10)}
/* 309:{dl{cfcpp}lf{jfsd}jjss{jc[7]lspcci}c}cfijl{ijpsj<s><icd>}jsi<cdjsflc><dllildp> */ struct A1674 f309(c a1,f a2,i a3,j a4,l a5,struct A1676 a6,j a7,s a8,i a9,union  A1677 a10,union  A1678 a11){V_c[1]=a1;V_f[2]=a2;V_i[3]=a3;V_j[4]=a4;V_l[5]=a5;f_cpA1676(V_a[6],&a6);V_j[7]=a7;V_s[8]=a8;V_i[9]=a9;f_cpA1677(V_a[10],&a10);f_cpA1678(V_a[11],&a11);ret_a(11,struct A1674)}
/* 310:<{f}fcis>jlpdf */ union  A1679 f310(j a1,l a2,p a3,d a4,f a5){V_j[1]=a1;V_l[2]=a2;V_p[3]=a3;V_d[4]=a4;V_f[5]=a5;ret_a(5,union  A1679)}
/* 311:jlspjdi{s} */ j f311(l a1,s a2,p a3,j a4,d a5,i a6,struct A162 a7){V_l[1]=a1;V_s[2]=a2;V_p[3]=a3;V_j[4]=a4;V_d[5]=a5;V_i[6]=a6;f_cpA162(V_a[7],&a7);ret_j(7)}
/* 312:sp<d>jlfp{di}<sjpjiljccij<jj[1]>>piiilij */ s f312(p a1,union  A317 a2,j a3,l a4,f a5,p a6,struct A1204 a7,union  A1681 a8,p a9,i a10,i a11,i a12,l a13,i a14,j a15){V_p[1]=a1;f_cpA317(V_a[2],&a2);V_j[3]=a3;V_l[4]=a4;V_f[5]=a5;V_p[6]=a6;f_cpA1204(V_a[7],&a7);f_cpA1681(V_a[8],&a8);V_p[9]=a9;V_i[10]=a10;V_i[11]=a11;V_i[12]=a12;V_l[13]=a13;V_i[14]=a14;V_j[15]=a15;ret_s(15)}
/* 313:ijslflssdijfs{s[7]i} */ i f313(j a1,s a2,l a3,f a4,l a5,s a6,s a7,d a8,i a9,j a10,f a11,s a12,struct A1682 a13){V_j[1]=a1;V_s[2]=a2;V_l[3]=a3;V_f[4]=a4;V_l[5]=a5;V_s[6]=a6;V_s[7]=a7;V_d[8]=a8;V_i[9]=a9;V_j[10]=a10;V_f[11]=a11;V_s[12]=a12;f_cpA1682(V_a[13],&a13);ret_i(13)}
/* 314:cddll{djif{{lscjljss}<pppfsjjsd>d}dcjdfij}li */ c f314(d a1,d a2,l a3,l a4,struct A1686 a5,l a6,i a7){V_d[1]=a1;V_d[2]=a2;V_l[3]=a3;V_l[4]=a4;f_cpA1686(V_a[5],&a5);V_l[6]=a6;V_i[7]=a7;ret_c(7)}
/* 315:vfdd{ccf{j[2]pjfjs}pi}{pspij}s */ v f315(f a1,d a2,d a3,struct A1688 a4,struct A1689 a5,s a6){V_f[1]=a1;V_d[2]=a2;V_d[3]=a3;f_cpA1688(V_a[4],&a4);f_cpA1689(V_a[5],&a5);V_s[6]=a6;ret_v(6)}
/* 316:pd{cji<jjsfidjsppli>fjpi}ls */ p f316(d a1,struct A1691 a2,l a3,s a4){V_d[1]=a1;f_cpA1691(V_a[2],&a2);V_l[3]=a3;V_s[4]=a4;ret_p(4)}
/* 317:vci<d{pjpc}{ilcs}> */ v f317(c a1,i a2,union  A1694 a3){V_c[1]=a1;V_i[2]=a2;f_cpA1694(V_a[3],&a3);ret_v(3)}
/* 318:disp<djfsii[2]scfdcd>cpc<dcjp<i<llds>dc><d{f[2]j}>jsi<id<ljidpppcifff>jip>fi>ffcc */ d f318(i a1,s a2,p a3,union  A1695 a4,c a5,p a6,c a7,union  A1702 a8,f a9,f a10,c a11,c a12){V_i[1]=a1;V_s[2]=a2;V_p[3]=a3;f_cpA1695(V_a[4],&a4);V_c[5]=a5;V_p[6]=a6;V_c[7]=a7;f_cpA1702(V_a[8],&a8);V_f[9]=a9;V_f[10]=a10;V_c[11]=a11;V_c[12]=a12;ret_d(12)}
/* 319:jif{<dl>jc{ji<idllfc>sfpcsff{c}{p}}<f>pldi}sli{lp}l{lcdi<ldjjjpj<c>ii{ccjf}{dl[10]ifdi[14]i}>dd{if}ljfc}fp */ j f319(i a1,f a2,struct A1705 a3,s a4,l a5,i a6,struct A191 a7,l a8,struct A1709 a9,f a10,p a11){V_i[1]=a1;V_f[2]=a2;f_cpA1705(V_a[3],&a3);V_s[4]=a4;V_l[5]=a5;V_i[6]=a6;f_cpA191(V_a[7],&a7);V_l[8]=a8;f_cpA1709(V_a[9],&a9);V_f[10]=a10;V_p[11]=a11;ret_j(11)}
/* 320:i<li{p}p<pid<i>>{s<pjllfdslf>ci}cdijjl>j<ffll<lscffpdfcdip><s>sdcdjc>{<l<i><ic>c[8]{ppdpciddddjl}l>ldjcfjcp<jfljidsd[7]jp>i}d{fcifdcsds[3]{pd[16]fffdpsffdp}jp}fi{lfdjcsf}j */ i f320(union  A1713 a1,j a2,union  A1715 a3,struct A1719 a4,d a5,struct A1721 a6,f a7,i a8,struct A1722 a9,j a10){f_cpA1713(V_a[1],&a1);V_j[2]=a2;f_cpA1715(V_a[3],&a3);f_cpA1719(V_a[4],&a4);V_d[5]=a5;f_cpA1721(V_a[6],&a6);V_f[7]=a7;V_i[8]=a8;f_cpA1722(V_a[9],&a9);V_j[10]=a10;ret_i(10)}
/* 321:dd{f{sjid[4]}c<jfjpijdlspcj>jf[2]l<cci>dj{ipl}d}cldic{c} */ d f321(d a1,struct A1727 a2,c a3,l a4,d a5,i a6,c a7,struct A212 a8){V_d[1]=a1;f_cpA1727(V_a[2],&a2);V_c[3]=a3;V_l[4]=a4;V_d[5]=a5;V_i[6]=a6;V_c[7]=a7;f_cpA212(V_a[8],&a8);ret_d(8)}
/* 322:i<cpsiss>ipsds */ i f322(union  A1728 a1,i a2,p a3,s a4,d a5,s a6){f_cpA1728(V_a[1],&a1);V_i[2]=a2;V_p[3]=a3;V_s[4]=a4;V_d[5]=a5;V_s[6]=a6;ret_i(6)}
/* 323:jcc{<lipccjsdfij>fcf<jipplf>sifi}<<dpsid>ipc>ffi{djlpi}is{il}<fsilccp[12]sdf[13]jc>l */ j f323(c a1,c a2,struct A1731 a3,union  A1733 a4,f a5,f a6,i a7,struct A1734 a8,i a9,s a10,struct A854 a11,union  A1735 a12,l a13){V_c[1]=a1;V_c[2]=a2;f_cpA1731(V_a[3],&a3);f_cpA1733(V_a[4],&a4);V_f[5]=a5;V_f[6]=a6;V_i[7]=a7;f_cpA1734(V_a[8],&a8);V_i[9]=a9;V_s[10]=a10;f_cpA854(V_a[11],&a11);f_cpA1735(V_a[12],&a12);V_l[13]=a13;ret_j(13)}
/* 324:pfl<j{cpfd}>j */ p f324(f a1,l a2,union  A1737 a3,j a4){V_f[1]=a1;V_l[2]=a2;f_cpA1737(V_a[3],&a3);V_j[4]=a4;ret_p(4)}
/* 325:c{jdl<s>pps<ffpiji[16]pfcppc>ijdj} */ c f325(struct A1739 a1){f_cpA1739(V_a[1],&a1);ret_c(1)}
/* 326:i<l><ccijl>c{c<jjcscisi>}<{d}clfpjpclcdi><s<<d>ff<fpjilpss>s>clfdi>pjsfji */ i f326(union  A20 a1,union  A1740 a2,c a3,struct A1742 a4,union  A1743 a5,union  A1746 a6,p a7,j a8,s a9,f a10,j a11,i a12){f_cpA20(V_a[1],&a1);f_cpA1740(V_a[2],&a2);V_c[3]=a3;f_cpA1742(V_a[4],&a4);f_cpA1743(V_a[5],&a5);f_cpA1746(V_a[6],&a6);V_p[7]=a7;V_j[8]=a8;V_s[9]=a9;V_f[10]=a10;V_j[11]=a11;V_i[12]=a12;ret_i(12)}
/* 327:flfpci<<fldpsjcj>l>jflscss */ f f327(l a1,f a2,p a3,c a4,i a5,union  A1748 a6,j a7,f a8,l a9,s a10,c a11,s a12,s a13){V_l[1]=a1;V_f[2]=a2;V_p[3]=a3;V_c[4]=a4;V_i[5]=a5;f_cpA1748(V_a[6],&a6);V_j[7]=a7;V_f[8]=a8;V_l[9]=a9;V_s[10]=a10;V_c[11]=a11;V_s[12]=a12;V_s[13]=a13;ret_f(13)}
/* 328:fp{s}cs<sc>s{sd}cd */ f f328(p a1,struct A162 a2,c a3,s a4,union  A926 a5,s a6,struct A964 a7,c a8,d a9){V_p[1]=a1;f_cpA162(V_a[2],&a2);V_c[3]=a3;V_s[4]=a4;f_cpA926(V_a[5],&a5);V_s[6]=a6;f_cpA964(V_a[7],&a7);V_c[8]=a8;V_d[9]=a9;ret_f(9)}
/* 329:j<jp>ic<fcdjjll>sj{<pfjcdfdcd[2]>cl}lj<fccpjsscljsf>c */ j f329(union  A842 a1,i a2,c a3,union  A1749 a4,s a5,j a6,struct A1751 a7,l a8,j a9,union  A1752 a10,c a11){f_cpA842(V_a[1],&a1);V_i[2]=a2;V_c[3]=a3;f_cpA1749(V_a[4],&a4);V_s[5]=a5;V_j[6]=a6;f_cpA1751(V_a[7],&a7);V_l[8]=a8;V_j[9]=a9;f_cpA1752(V_a[10],&a10);V_c[11]=a11;ret_j(11)}
/* 330:dc<j[14]c><p>cs<jcssfcll>scj<djls>s */ d f330(c a1,union  A1753 a2,union  A36 a3,c a4,s a5,union  A1754 a6,s a7,c a8,j a9,union  A1755 a10,s a11){V_c[1]=a1;f_cpA1753(V_a[2],&a2);f_cpA36(V_a[3],&a3);V_c[4]=a4;V_s[5]=a5;f_cpA1754(V_a[6],&a6);V_s[7]=a7;V_c[8]=a8;V_j[9]=a9;f_cpA1755(V_a[10],&a10);V_s[11]=a11;ret_d(11)}
/* 331:s{fdci}fsflc<<jfjl>>fdcfc */ s f331(struct A1756 a1,f a2,s a3,f a4,l a5,c a6,union  A1758 a7,f a8,d a9,c a10,f a11,c a12){f_cpA1756(V_a[1],&a1);V_f[2]=a2;V_s[3]=a3;V_f[4]=a4;V_l[5]=a5;V_c[6]=a6;f_cpA1758(V_a[7],&a7);V_f[8]=a8;V_d[9]=a9;V_c[10]=a10;V_f[11]=a11;V_c[12]=a12;ret_s(12)}
/* 332:s<p>ii */ s f332(union  A36 a1,i a2,i a3){f_cpA36(V_a[1],&a1);V_i[2]=a2;V_i[3]=a3;ret_s(3)}
/* 333:c<lcd<jd{lcsjsilsfsdl}dclll{ill}if<sj>>ccddip>sjpj */ c f333(union  A1762 a1,s a2,j a3,p a4,j a5){f_cpA1762(V_a[1],&a1);V_s[2]=a2;V_j[3]=a3;V_p[4]=a4;V_j[5]=a5;ret_c(5)}
/* 334:j{silpssili<isj>}sdjl<sj><dfjsdd> */ j f334(struct A1764 a1,s a2,d a3,j a4,l a5,union  A923 a6,union  A1765 a7){f_cpA1764(V_a[1],&a1);V_s[2]=a2;V_d[3]=a3;V_j[4]=a4;V_l[5]=a5;f_cpA923(V_a[6],&a6);f_cpA1765(V_a[7],&a7);ret_j(7)}
/* 335:<<ps>pifl[15]si>jd{jcccfsildjdd}<ppspsfjlfpip>lifp */ union  A1767 f335(j a1,d a2,struct A1768 a3,union  A1769 a4,l a5,i a6,f a7,p a8){V_j[1]=a1;V_d[2]=a2;f_cpA1768(V_a[3],&a3);f_cpA1769(V_a[4],&a4);V_l[5]=a5;V_i[6]=a6;V_f[7]=a7;V_p[8]=a8;ret_a(8,union  A1767)}
/* 336:ccpp{dss<c>{si}{djlfjpldfi[2]jj}si<pi<ipcsccdfljcj>siidfclp{ijcisf}>cjl}ccifc */ c f336(c a1,p a2,p a3,struct A1774 a4,c a5,c a6,i a7,f a8,c a9){V_c[1]=a1;V_p[2]=a2;V_p[3]=a3;f_cpA1774(V_a[4],&a4);V_c[5]=a5;V_c[6]=a6;V_i[7]=a7;V_f[8]=a8;V_c[9]=a9;ret_c(9)}
/* 337:cpil<pj>jfpcdf */ c f337(p a1,i a2,l a3,union  A1775 a4,j a5,f a6,p a7,c a8,d a9,f a10){V_p[1]=a1;V_i[2]=a2;V_l[3]=a3;f_cpA1775(V_a[4],&a4);V_j[5]=a5;V_f[6]=a6;V_p[7]=a7;V_c[8]=a8;V_d[9]=a9;V_f[10]=a10;ret_c(10)}
/* 338:fffcdpdsiiflp{fcpljf}{cjis}i */ f f338(f a1,f a2,c a3,d a4,p a5,d a6,s a7,i a8,i a9,f a10,l a11,p a12,struct A1776 a13,struct A1777 a14,i a15){V_f[1]=a1;V_f[2]=a2;V_c[3]=a3;V_d[4]=a4;V_p[5]=a5;V_d[6]=a6;V_s[7]=a7;V_i[8]=a8;V_i[9]=a9;V_f[10]=a10;V_l[11]=a11;V_p[12]=a12;f_cpA1776(V_a[13],&a13);f_cpA1777(V_a[14],&a14);V_i[15]=a15;ret_f(15)}
/* 339:sil{<{didcs[14]i[2]jisp}pfj<icjjlffjjl[15]id>{j}d<dplpfpjsiijp>c>jf}jps{lcsfi<dcppsp[12]jdffjl>iijpcd}jif<fl> */ s f339(i a1,l a2,struct A1782 a3,j a4,p a5,s a6,struct A1784 a7,j a8,i a9,f a10,union  A1785 a11){V_i[1]=a1;V_l[2]=a2;f_cpA1782(V_a[3],&a3);V_j[4]=a4;V_p[5]=a5;V_s[6]=a6;f_cpA1784(V_a[7],&a7);V_j[8]=a8;V_i[9]=a9;V_f[10]=a10;f_cpA1785(V_a[11],&a11);ret_s(11)}
/* 340:sjcijd<dipdijd>dsf */ s f340(j a1,c a2,i a3,j a4,d a5,union  A1786 a6,d a7,s a8,f a9){V_j[1]=a1;V_c[2]=a2;V_i[3]=a3;V_j[4]=a4;V_d[5]=a5;f_cpA1786(V_a[6],&a6);V_d[7]=a7;V_s[8]=a8;V_f[9]=a9;ret_s(9)}
/* 341:jfs{sf<i>{fpii{pljljis}[3]pcispfj}dcscc{<j[16]>{siclcid}}ls}ps<dijcscclslfj> */ j f341(f a1,s a2,struct A1792 a3,p a4,s a5,union  A1793 a6){V_f[1]=a1;V_s[2]=a2;f_cpA1792(V_a[3],&a3);V_p[4]=a4;V_s[5]=a5;f_cpA1793(V_a[6],&a6);ret_j(6)}
/* 342:sf<lflccfcpfdp>sfdsf<{ccsddcddpcps}>llfls */ s f342(f a1,union  A1794 a2,s a3,f a4,d a5,s a6,f a7,union  A1796 a8,l a9,l a10,f a11,l a12,s a13){V_f[1]=a1;f_cpA1794(V_a[2],&a2);V_s[3]=a3;V_f[4]=a4;V_d[5]=a5;V_s[6]=a6;V_f[7]=a7;f_cpA1796(V_a[8],&a8);V_l[9]=a9;V_l[10]=a10;V_f[11]=a11;V_l[12]=a12;V_s[13]=a13;ret_s(13)}
/* 343:cllip{ci}sj */ c f343(l a1,l a2,i a3,p a4,struct A970 a5,s a6,j a7){V_l[1]=a1;V_l[2]=a2;V_i[3]=a3;V_p[4]=a4;f_cpA970(V_a[5],&a5);V_s[6]=a6;V_j[7]=a7;ret_c(7)}
/* 344:<spscdjdis[11]sci>{jjp<l>{ppj}<pfcflcs[5]plf>i<ipilisi[7]pjldp>dics}ijp<dddpscdif> */ union  A1797 f344(struct A1801 a1,i a2,j a3,p a4,union  A1802 a5){f_cpA1801(V_a[1],&a1);V_i[2]=a2;V_j[3]=a3;V_p[4]=a4;f_cpA1802(V_a[5],&a5);ret_a(5,union  A1797)}
/* 345:cjccfp<cjfccpjdj<l>ip>scsspj */ c f345(j a1,c a2,c a3,f a4,p a5,union  A1803 a6,s a7,c a8,s a9,s a10,p a11,j a12){V_j[1]=a1;V_c[2]=a2;V_c[3]=a3;V_f[4]=a4;V_p[5]=a5;f_cpA1803(V_a[6],&a6);V_s[7]=a7;V_c[8]=a8;V_s[9]=a9;V_s[10]=a10;V_p[11]=a11;V_j[12]=a12;ret_c(12)}
/* 346:jpdd{jjdl} */ j f346(p a1,d a2,d a3,struct A1804 a4){V_p[1]=a1;V_d[2]=a2;V_d[3]=a3;f_cpA1804(V_a[4],&a4);ret_j(4)}
/* 347:f{ifdjs[3]spjsfij} */ f f347(struct A1805 a1){f_cpA1805(V_a[1],&a1);ret_f(1)}
/* 348:ls{c}sp */ l f348(s a1,struct A212 a2,s a3,p a4){V_s[1]=a1;f_cpA212(V_a[2],&a2);V_s[3]=a3;V_p[4]=a4;ret_l(4)}
/* 349:{csdjj{iic}ss[6]j}<pj>scpj */ struct A1807 f349(union  A1775 a1,s a2,c a3,p a4,j a5){f_cpA1775(V_a[1],&a1);V_s[2]=a2;V_c[3]=a3;V_p[4]=a4;V_j[5]=a5;ret_a(5,struct A1807)}
/* 350:fdpccs<lj{jdf[3]s}c<pcsfj[14]fjsipcl>>{icsjcj}{pscdpisji}p{{p{ldli}{if}f<f>d<dj>pdiii}sdddfs} */ f f350(d a1,p a2,c a3,c a4,s a5,union  A1810 a6,struct A1811 a7,struct A1812 a8,p a9,struct A1815 a10){V_d[1]=a1;V_p[2]=a2;V_c[3]=a3;V_c[4]=a4;V_s[5]=a5;f_cpA1810(V_a[6],&a6);f_cpA1811(V_a[7],&a7);f_cpA1812(V_a[8],&a8);V_p[9]=a9;f_cpA1815(V_a[10],&a10);ret_f(10)}
/* 351:{pfjsflcdlcfs}spfp<fl{jj}pci> */ struct A1816 f351(s a1,p a2,f a3,p a4,union  A1817 a5){V_s[1]=a1;V_p[2]=a2;V_f[3]=a3;V_p[4]=a4;f_cpA1817(V_a[5],&a5);ret_a(5,struct A1816)}
/* 352:fjpi<jdil[2]<ffp{ljd}ldcfs>fsp>cd<cddcdjlli>{s{sifdlc}ifc}pd */ f f352(j a1,p a2,i a3,union  A1820 a4,c a5,d a6,union  A1821 a7,struct A1823 a8,p a9,d a10){V_j[1]=a1;V_p[2]=a2;V_i[3]=a3;f_cpA1820(V_a[4],&a4);V_c[5]=a5;V_d[6]=a6;f_cpA1821(V_a[7],&a7);f_cpA1823(V_a[8],&a8);V_p[9]=a9;V_d[10]=a10;ret_f(10)}
/* 353:i<l>lf{fc}fppsjs */ i f353(union  A20 a1,l a2,f a3,struct A1824 a4,f a5,p a6,p a7,s a8,j a9,s a10){f_cpA20(V_a[1],&a1);V_l[2]=a2;V_f[3]=a3;f_cpA1824(V_a[4],&a4);V_f[5]=a5;V_p[6]=a6;V_p[7]=a7;V_s[8]=a8;V_j[9]=a9;V_s[10]=a10;ret_i(10)}
/* 354:{sidl<s><fpfcfc><disficcl>sd<isplpcscp><clcpdjcjic>{ljdpj}}dc<ldsss{{cflfjiflcfcf}li}f<dp{ccdissii}picdsfpd{d}>clpl>dfs */ struct A1830 f354(d a1,c a2,union  A1835 a3,d a4,f a5,s a6){V_d[1]=a1;V_c[2]=a2;f_cpA1835(V_a[3],&a3);V_d[4]=a4;V_f[5]=a5;V_s[6]=a6;ret_a(6,struct A1830)}
/* 355:piijdplp{ilfdscsipsfs}{dldc{i}<sljldpdscdpj>dpld<di>c}d */ p f355(i a1,i a2,j a3,d a4,p a5,l a6,p a7,struct A1836 a8,struct A1838 a9,d a10){V_i[1]=a1;V_i[2]=a2;V_j[3]=a3;V_d[4]=a4;V_p[5]=a5;V_l[6]=a6;V_p[7]=a7;f_cpA1836(V_a[8],&a8);f_cpA1838(V_a[9],&a9);V_d[10]=a10;ret_p(10)}
/* 356:df<f[8]s>i<jjllilfdiljd>d<dplfddp[13]lcjpi>fddsp */ d f356(f a1,union  A1839 a2,i a3,union  A1840 a4,d a5,union  A1841 a6,f a7,d a8,d a9,s a10,p a11){V_f[1]=a1;f_cpA1839(V_a[2],&a2);V_i[3]=a3;f_cpA1840(V_a[4],&a4);V_d[5]=a5;f_cpA1841(V_a[6],&a6);V_f[7]=a7;V_d[8]=a8;V_d[9]=a9;V_s[10]=a10;V_p[11]=a11;ret_d(11)}
/* 357:jcpipi<lilccsjlsjjl> */ j f357(c a1,p a2,i a3,p a4,i a5,union  A1842 a6){V_c[1]=a1;V_p[2]=a2;V_i[3]=a3;V_p[4]=a4;V_i[5]=a5;f_cpA1842(V_a[6],&a6);ret_j(6)}
/* 358:<f{lls}dds>lp */ union  A1844 f358(l a1,p a2){V_l[1]=a1;V_p[2]=a2;ret_a(2,union  A1844)}
/* 359:f<pjcss{jpc}l{ii{ci}ffdipl}cj{c{fsfiiicijidc}f{lffdcfij}sj[13]<ddi[12]pdip>iscsd}p><<i>{llpc}cild{cf}dj><scipcislpdfs>fsc */ f f359(union  A1851 a1,union  A1854 a2,union  A1855 a3,f a4,s a5,c a6){f_cpA1851(V_a[1],&a1);f_cpA1854(V_a[2],&a2);f_cpA1855(V_a[3],&a3);V_f[4]=a4;V_s[5]=a5;V_c[6]=a6;ret_f(6)}
/* 360:<lcspsisccljs>lccjfldp */ union  A1856 f360(l a1,c a2,c a3,j a4,f a5,l a6,d a7,p a8){V_l[1]=a1;V_c[2]=a2;V_c[3]=a3;V_j[4]=a4;V_f[5]=a5;V_l[6]=a6;V_d[7]=a7;V_p[8]=a8;ret_a(8,union  A1856)}
/* 361:<fs>fff */ union  A1555 f361(f a1,f a2,f a3){V_f[1]=a1;V_f[2]=a2;V_f[3]=a3;ret_a(3,union  A1555)}
/* 362:f{j[1]lplc}p{{ssccd}}sjssjffjp */ f f362(struct A1857 a1,p a2,struct A1859 a3,s a4,j a5,s a6,s a7,j a8,f a9,f a10,j a11,p a12){f_cpA1857(V_a[1],&a1);V_p[2]=a2;f_cpA1859(V_a[3],&a3);V_s[4]=a4;V_j[5]=a5;V_s[6]=a6;V_s[7]=a7;V_j[8]=a8;V_f[9]=a9;V_f[10]=a10;V_j[11]=a11;V_p[12]=a12;ret_f(12)}
/* 363:<ljd[16]lfdlp{pjplfilsiicp}<sps<fl>ccjfdi{fd}>dc>d<jii>fii */ union  A1863 f363(d a1,union  A1864 a2,f a3,i a4,i a5){V_d[1]=a1;f_cpA1864(V_a[2],&a2);V_f[3]=a3;V_i[4]=a4;V_i[5]=a5;ret_a(5,union  A1863)}
/* 364:{j{clif}f<c[7]{jpcjd[1]lijccjp}<l>d{djpi}p<l[16]ilddcd>psp>j{j<jdspd>jssp<ildfdpjsjdp>lpild}ij<c><f>ld}dfjdcsdcdpcj */ struct A1873 f364(d a1,f a2,j a3,d a4,c a5,s a6,d a7,c a8,d a9,p a10,c a11,j a12){V_d[1]=a1;V_f[2]=a2;V_j[3]=a3;V_d[4]=a4;V_c[5]=a5;V_s[6]=a6;V_d[7]=a7;V_c[8]=a8;V_d[9]=a9;V_p[10]=a10;V_c[11]=a11;V_j[12]=a12;ret_a(12,struct A1873)}
/* 365:<fi>cj<ld<ds>scsllldid>d<fdc>icdsijdc */ union  A1874 f365(c a1,j a2,union  A1876 a3,d a4,union  A1877 a5,i a6,c a7,d a8,s a9,i a10,j a11,d a12,c a13){V_c[1]=a1;V_j[2]=a2;f_cpA1876(V_a[3],&a3);V_d[4]=a4;f_cpA1877(V_a[5],&a5);V_i[6]=a6;V_c[7]=a7;V_d[8]=a8;V_s[9]=a9;V_i[10]=a10;V_j[11]=a11;V_d[12]=a12;V_c[13]=a13;ret_a(13,union  A1874)}
/* 366:ic{dj<ill><csicd>p<i>ipis}i */ i f366(c a1,struct A1880 a2,i a3){V_c[1]=a1;f_cpA1880(V_a[2],&a2);V_i[3]=a3;ret_i(3)}
/* 367:fljj<fps>cisc */ f f367(l a1,j a2,j a3,union  A1881 a4,c a5,i a6,s a7,c a8){V_l[1]=a1;V_j[2]=a2;V_j[3]=a3;f_cpA1881(V_a[4],&a4);V_c[5]=a5;V_i[6]=a6;V_s[7]=a7;V_c[8]=a8;ret_f(8)}
/* 368:isjsl<s>lis<p>pj */ i f368(s a1,j a2,s a3,l a4,union  A179 a5,l a6,i a7,s a8,union  A36 a9,p a10,j a11){V_s[1]=a1;V_j[2]=a2;V_s[3]=a3;V_l[4]=a4;f_cpA179(V_a[5],&a5);V_l[6]=a6;V_i[7]=a7;V_s[8]=a8;f_cpA36(V_a[9],&a9);V_p[10]=a10;V_j[11]=a11;ret_i(11)}
/* 369:dlssc{lpi<{jcddpii}{fpljdfjljifp}pjc>}d */ d f369(l a1,s a2,s a3,c a4,struct A1885 a5,d a6){V_l[1]=a1;V_s[2]=a2;V_s[3]=a3;V_c[4]=a4;f_cpA1885(V_a[5],&a5);V_d[6]=a6;ret_d(6)}
/* 370:ss<icp[14]pd{iislf}c[2]i><f>lisis<fjdi>i */ s f370(s a1,union  A1887 a2,union  A438 a3,l a4,i a5,s a6,i a7,s a8,union  A1888 a9,i a10){V_s[1]=a1;f_cpA1887(V_a[2],&a2);f_cpA438(V_a[3],&a3);V_l[4]=a4;V_i[5]=a5;V_s[6]=a6;V_i[7]=a7;V_s[8]=a8;f_cpA1888(V_a[9],&a9);V_i[10]=a10;ret_s(10)}
/* 371:l<pls{ijddfc}fll{icifpfffc}lps{cflsjppscfi}>d<dp{lfl}i[5]csddddpl>fdpjc */ l f371(union  A1892 a1,d a2,union  A1894 a3,f a4,d a5,p a6,j a7,c a8){f_cpA1892(V_a[1],&a1);V_d[2]=a2;f_cpA1894(V_a[3],&a3);V_f[4]=a4;V_d[5]=a5;V_p[6]=a6;V_j[7]=a7;V_c[8]=a8;ret_l(8)}
/* 372:{sdj<{i}>s{p}fsdcjd}{fsppjjfifipl}pdds */ struct A1896 f372(struct A1897 a1,p a2,d a3,d a4,s a5){f_cpA1897(V_a[1],&a1);V_p[2]=a2;V_d[3]=a3;V_d[4]=a4;V_s[5]=a5;ret_a(5,struct A1896)}
/* 373:f{ji{j}fdddp{icdslsjcfds}p{pcfdlddpfijp}c} */ f f373(struct A1900 a1){f_cpA1900(V_a[1],&a1);ret_f(1)}
/* 374:pfiilidjd<jd>l */ p f374(f a1,i a2,i a3,l a4,i a5,d a6,j a7,d a8,union  A904 a9,l a10){V_f[1]=a1;V_i[2]=a2;V_i[3]=a3;V_l[4]=a4;V_i[5]=a5;V_d[6]=a6;V_j[7]=a7;V_d[8]=a8;f_cpA904(V_a[9],&a9);V_l[10]=a10;ret_p(10)}
/* 375:sfi{<ci>}sdpjcds{<pjfdj<sdfssiil><ilsplsdlcipc><jdsdd[5]pspfdcf>i<ipiiipc>cf>spjfs<ppp<cpficsflff>i>idi<lf<pj[2]jdc><dlc>scc{l[8]l}{ffs}{lidspfsfppss}f{cpifp}>i} */ s f375(f a1,i a2,struct A1902 a3,s a4,d a5,p a6,j a7,c a8,d a9,s a10,struct A1917 a11){V_f[1]=a1;V_i[2]=a2;f_cpA1902(V_a[3],&a3);V_s[4]=a4;V_d[5]=a5;V_p[6]=a6;V_j[7]=a7;V_c[8]=a8;V_d[9]=a9;V_s[10]=a10;f_cpA1917(V_a[11],&a11);ret_s(11)}
/* 376:pis<pililsipljfj>ldfiflj */ p f376(i a1,s a2,union  A1918 a3,l a4,d a5,f a6,i a7,f a8,l a9,j a10){V_i[1]=a1;V_s[2]=a2;f_cpA1918(V_a[3],&a3);V_l[4]=a4;V_d[5]=a5;V_f[6]=a6;V_i[7]=a7;V_f[8]=a8;V_l[9]=a9;V_j[10]=a10;ret_p(10)}
/* 377:plispjcij<ps[6]d{pdp<jsi>dsl}csdslsf<dslscj[5]cc>>ld<cilpijisdipc>f */ p f377(l a1,i a2,s a3,p a4,j a5,c a6,i a7,j a8,union  A1922 a9,l a10,d a11,union  A1923 a12,f a13){V_l[1]=a1;V_i[2]=a2;V_s[3]=a3;V_p[4]=a4;V_j[5]=a5;V_c[6]=a6;V_i[7]=a7;V_j[8]=a8;f_cpA1922(V_a[9],&a9);V_l[10]=a10;V_d[11]=a11;f_cpA1923(V_a[12],&a12);V_f[13]=a13;ret_p(13)}
/* 378:{ji{jjil{dic}ppllsj<jccs>}f}df<jli>pllfi{p<dp>{{ds}cjfc}jl<<ddjssdjfjssc>>scpspd} */ struct A1927 f378(d a1,f a2,union  A1928 a3,p a4,l a5,l a6,f a7,i a8,struct A1933 a9){V_d[1]=a1;V_f[2]=a2;f_cpA1928(V_a[3],&a3);V_p[4]=a4;V_l[5]=a5;V_l[6]=a6;V_f[7]=a7;V_i[8]=a8;f_cpA1933(V_a[9],&a9);ret_a(9,struct A1927)}
/* 379:fci{ilsfj}jjdcfsjic */ f f379(c a1,i a2,struct A1934 a3,j a4,j a5,d a6,c a7,f a8,s a9,j a10,i a11,c a12){V_c[1]=a1;V_i[2]=a2;f_cpA1934(V_a[3],&a3);V_j[4]=a4;V_j[5]=a5;V_d[6]=a6;V_c[7]=a7;V_f[8]=a8;V_s[9]=a9;V_j[10]=a10;V_i[11]=a11;V_c[12]=a12;ret_f(12)}
/* 380:vs<d{i{i}fsidj<l>pjpp}{dp<lppsicilpsdj[14]>f<l>l{iidissi[9]ccppj}fpfl<jf>}>ll{c}jj */ v f380(s a1,union  A1939 a2,l a3,l a4,struct A212 a5,j a6,j a7){V_s[1]=a1;f_cpA1939(V_a[2],&a2);V_l[3]=a3;V_l[4]=a4;f_cpA212(V_a[5],&a5);V_j[6]=a6;V_j[7]=a7;ret_v(7)}
/* 381:<{lpjii[8]jdli}sjf<ciccjlldc>plj{lpji[15]lldcff}pli> */ union  A1943 f381(){ret_a(0,union  A1943)}
/* 382:pp{fljpilsccdlj}lj<is>slljcp */ p f382(p a1,struct A1944 a2,l a3,j a4,union  A377 a5,s a6,l a7,l a8,j a9,c a10,p a11){V_p[1]=a1;f_cpA1944(V_a[2],&a2);V_l[3]=a3;V_j[4]=a4;f_cpA377(V_a[5],&a5);V_s[6]=a6;V_l[7]=a7;V_l[8]=a8;V_j[9]=a9;V_c[10]=a10;V_p[11]=a11;ret_p(11)}
/* 383:f{{pcpcpfsfpfpp}<c>}ll */ f f383(struct A1946 a1,l a2,l a3){f_cpA1946(V_a[1],&a1);V_l[2]=a2;V_l[3]=a3;ret_f(3)}
/* 384:p{fcdffc[11]iipifs}s */ p f384(struct A1947 a1,s a2){f_cpA1947(V_a[1],&a1);V_s[2]=a2;ret_p(2)}
/* 385:dp<f>f{ldjjfcjp<sdpijjd<ijf[13]fjcpfcfss>jddl>i{<lpijd[1]pcjspdl>}p}f */ d f385(p a1,union  A438 a2,f a3,struct A1952 a4,f a5){V_p[1]=a1;f_cpA438(V_a[2],&a2);V_f[3]=a3;f_cpA1952(V_a[4],&a4);V_f[5]=a5;ret_d(5)}
/* 386:d{jpjcjspslcdi}{jlllli<ji>spd}j{c{lcsccdf[2]dpddl}fpi<lj>ddf<cidjf[14]fs>fd}c{p[7]cl}jfffj{lpc<j{icidslpcll[4]fj}fjslcpps<dj[5]fjlc>j>ds{<ljl>d{cfipccjjsffi}lc<dlclf>ffdi{ldfijc}d}spjpi} */ d f386(struct A1953 a1,struct A1955 a2,j a3,struct A1959 a4,c a5,struct A1960 a6,j a7,f a8,f a9,f a10,j a11,struct A1969 a12){f_cpA1953(V_a[1],&a1);f_cpA1955(V_a[2],&a2);V_j[3]=a3;f_cpA1959(V_a[4],&a4);V_c[5]=a5;f_cpA1960(V_a[6],&a6);V_j[7]=a7;V_f[8]=a8;V_f[9]=a9;V_f[10]=a10;V_j[11]=a11;f_cpA1969(V_a[12],&a12);ret_d(12)}
/* 387:<cc>j<j<dcp>lcsd{dsifcfsfjffi}p>icldpdjljp */ union  A470 f387(j a1,union  A1972 a2,i a3,c a4,l a5,d a6,p a7,d a8,j a9,l a10,j a11,p a12){V_j[1]=a1;f_cpA1972(V_a[2],&a2);V_i[3]=a3;V_c[4]=a4;V_l[5]=a5;V_d[6]=a6;V_p[7]=a7;V_d[8]=a8;V_j[9]=a9;V_l[10]=a10;V_j[11]=a11;V_p[12]=a12;ret_a(12,union  A470)}
/* 388:vsd<d<jis{cifdlpppiifc}sjl{lj[6]dls}f{c}c<flfpf>>{llsflfp{fpdifjd}ijcj}c[7]fp>cs{jfd{discjpi[14]d}{pcc[2]idfplfdjs}d{clpspsplfdjc}{cidjifijf}{clpjlc[6]}cdc}fdljp */ v f388(s a1,d a2,union  A1979 a3,c a4,s a5,struct A1985 a6,f a7,d a8,l a9,j a10,p a11){V_s[1]=a1;V_d[2]=a2;f_cpA1979(V_a[3],&a3);V_c[4]=a4;V_s[5]=a5;f_cpA1985(V_a[6],&a6);V_f[7]=a7;V_d[8]=a8;V_l[9]=a9;V_j[10]=a10;V_p[11]=a11;ret_v(11)}
/* 389:dilj{s[6]dfsdi}ls<jdl> */ d f389(i a1,l a2,j a3,struct A1986 a4,l a5,s a6,union  A1987 a7){V_i[1]=a1;V_l[2]=a2;V_j[3]=a3;f_cpA1986(V_a[4],&a4);V_l[5]=a5;V_s[6]=a6;f_cpA1987(V_a[7],&a7);ret_d(7)}
/* 390:ifdcdsds{scpdcfsjdi{lj}p}d{jssdispjf<lllidfcps>sj}f<cj{iplpcl{fcildsciispj}jcd{s}c}ici<ljf>lci> */ i f390(f a1,d a2,c a3,d a4,s a5,d a6,s a7,struct A1988 a8,d a9,struct A1990 a10,f a11,union  A1994 a12){V_f[1]=a1;V_d[2]=a2;V_c[3]=a3;V_d[4]=a4;V_s[5]=a5;V_d[6]=a6;V_s[7]=a7;f_cpA1988(V_a[8],&a8);V_d[9]=a9;f_cpA1990(V_a[10],&a10);V_f[11]=a11;f_cpA1994(V_a[12],&a12);ret_i(12)}
/* 391:pj{s{fcicpl{plllpcididfl}jldp[8]i}dd<csi<llcjdl[6]c>{sfsjjcjjdlfi}cjjpc<fl>j><lllp[14]sfsp<jilfdjcdf>ffj>ccjcsi}i */ p f391(j a1,struct A2002 a2,i a3){V_j[1]=a1;f_cpA2002(V_a[2],&a2);V_i[3]=a3;ret_p(3)}
/* 392:pcdp{s} */ p f392(c a1,d a2,p a3,struct A162 a4){V_c[1]=a1;V_d[2]=a2;V_p[3]=a3;f_cpA162(V_a[4],&a4);ret_p(4)}
/* 393:i<cscjjsf{{pjpisjcid}pl{lfjdd}pfp{iplps}fsdl}>lfscifdf<dd[10]i>i */ i f393(union  A2007 a1,l a2,f a3,s a4,c a5,i a6,f a7,d a8,f a9,union  A2008 a10,i a11){f_cpA2007(V_a[1],&a1);V_l[2]=a2;V_f[3]=a3;V_s[4]=a4;V_c[5]=a5;V_i[6]=a6;V_f[7]=a7;V_d[8]=a8;V_f[9]=a9;f_cpA2008(V_a[10],&a10);V_i[11]=a11;ret_i(11)}
/* 394:ifppifcp{iplfscspddsd} */ i f394(f a1,p a2,p a3,i a4,f a5,c a6,p a7,struct A2009 a8){V_f[1]=a1;V_p[2]=a2;V_p[3]=a3;V_i[4]=a4;V_f[5]=a5;V_c[6]=a6;V_p[7]=a7;f_cpA2009(V_a[8],&a8);ret_i(8)}
/* 395:{{l<fcldji>dlp<fidcflfccpjd>ffjc{dfcppfsld}c}{j[13]li<pspdsccjlcss>i<jcji[15]j[4]sliilsp>p<fsfipfcdjds[13]i><lilcdcjlss>idd}s[10]sj{fs}}c{ips}fj */ struct A2020 f395(c a1,struct A2021 a2,f a3,j a4){V_c[1]=a1;f_cpA2021(V_a[2],&a2);V_f[3]=a3;V_j[4]=a4;ret_a(4,struct A2020)}
/* 396:pjlfsl<l><iscd>pd */ p f396(j a1,l a2,f a3,s a4,l a5,union  A20 a6,union  A2022 a7,p a8,d a9){V_j[1]=a1;V_l[2]=a2;V_f[3]=a3;V_s[4]=a4;V_l[5]=a5;f_cpA20(V_a[6],&a6);f_cpA2022(V_a[7],&a7);V_p[8]=a8;V_d[9]=a9;ret_p(9)}
/* 397:dfjd<s>jd{ips} */ d f397(f a1,j a2,d a3,union  A179 a4,j a5,d a6,struct A2021 a7){V_f[1]=a1;V_j[2]=a2;V_d[3]=a3;f_cpA179(V_a[4],&a4);V_j[5]=a5;V_d[6]=a6;f_cpA2021(V_a[7],&a7);ret_d(7)}
/* 398:<spljffl{fjf}cjjp> */ union  A2024 f398(){ret_a(0,union  A2024)}
/* 399:{jcfd}cs{jcisfdf}fji */ struct A2025 f399(c a1,s a2,struct A2026 a3,f a4,j a5,i a6){V_c[1]=a1;V_s[2]=a2;f_cpA2026(V_a[3],&a3);V_f[4]=a4;V_j[5]=a5;V_i[6]=a6;ret_a(6,struct A2025)}
funptr G_funtab[] = {
	(funptr)&f0,
	(funptr)&f1,
	(funptr)&f2,
	(funptr)&f3,
	(funptr)&f4,
	(funptr)&f5,
	(funptr)&f6,
	(funptr)&f7,
	(funptr)&f8,
	(funptr)&f9,
	(funptr)&f10,
	(funptr)&f11,
	(funptr)&f12,
	(funptr)&f13,
	(funptr)&f14,
	(funptr)&f15,
	(funptr)&f16,
	(funptr)&f17,
	(funptr)&f18,
	(funptr)&f19,
	(funptr)&f20,
	(funptr)&f21,
	(funptr)&f22,
	(funptr)&f23,
	(funptr)&f24,
	(funptr)&f25,
	(funptr)&f26,
	(funptr)&f27,
	(funptr)&f28,
	(funptr)&f29,
	(funptr)&f30,
	(funptr)&f31,
	(funptr)&f32,
	(funptr)&f33,
	(funptr)&f34,
	(funptr)&f35,
	(funptr)&f36,
	(funptr)&f37,
	(funptr)&f38,
	(funptr)&f39,
	(funptr)&f40,
	(funptr)&f41,
	(funptr)&f42,
	(funptr)&f43,
	(funptr)&f44,
	(funptr)&f45,
	(funptr)&f46,
	(funptr)&f47,
	(funptr)&f48,
	(funptr)&f49,
	(funptr)&f50,
	(funptr)&f51,
	(funptr)&f52,
	(funptr)&f53,
	(funptr)&f54,
	(funptr)&f55,
	(funptr)&f56,
	(funptr)&f57,
	(funptr)&f58,
	(funptr)&f59,
	(funptr)&f60,
	(funptr)&f61,
	(funptr)&f62,
	(funptr)&f63,
	(funptr)&f64,
	(funptr)&f65,
	(funptr)&f66,
	(funptr)&f67,
	(funptr)&f68,
	(funptr)&f69,
	(funptr)&f70,
	(funptr)&f71,
	(funptr)&f72,
	(funptr)&f73,
	(funptr)&f74,
	(funptr)&f75,
	(funptr)&f76,
	(funptr)&f77,
	(funptr)&f78,
	(funptr)&f79,
	(funptr)&f80,
	(funptr)&f81,
	(funptr)&f82,
	(funptr)&f83,
	(funptr)&f84,
	(funptr)&f85,
	(funptr)&f86,
	(funptr)&f87,
	(funptr)&f88,
	(funptr)&f89,
	(funptr)&f90,
	(funptr)&f91,
	(funptr)&f92,
	(funptr)&f93,
	(funptr)&f94,
	(funptr)&f95,
	(funptr)&f96,
	(funptr)&f97,
	(funptr)&f98,
	(funptr)&f99,
	(funptr)&f100,
	(funptr)&f101,
	(funptr)&f102,
	(funptr)&f103,
	(funptr)&f104,
	(funptr)&f105,
	(funptr)&f106,
	(funptr)&f107,
	(funptr)&f108,
	(funptr)&f109,
	(funptr)&f110,
	(funptr)&f111,
	(funptr)&f112,
	(funptr)&f113,
	(funptr)&f114,
	(funptr)&f115,
	(funptr)&f116,
	(funptr)&f117,
	(funptr)&f118,
	(funptr)&f119,
	(funptr)&f120,
	(funptr)&f121,
	(funptr)&f122,
	(funptr)&f123,
	(funptr)&f124,
	(funptr)&f125,
	(funptr)&f126,
	(funptr)&f127,
	(funptr)&f128,
	(funptr)&f129,
	(funptr)&f130,
	(funptr)&f131,
	(funptr)&f132,
	(funptr)&f133,
	(funptr)&f134,
	(funptr)&f135,
	(funptr)&f136,
	(funptr)&f137,
	(funptr)&f138,
	(funptr)&f139,
	(funptr)&f140,
	(funptr)&f141,
	(funptr)&f142,
	(funptr)&f143,
	(funptr)&f144,
	(funptr)&f145,
	(funptr)&f146,
	(funptr)&f147,
	(funptr)&f148,
	(funptr)&f149,
	(funptr)&f150,
	(funptr)&f151,
	(funptr)&f152,
	(funptr)&f153,
	(funptr)&f154,
	(funptr)&f155,
	(funptr)&f156,
	(funptr)&f157,
	(funptr)&f158,
	(funptr)&f159,
	(funptr)&f160,
	(funptr)&f161,
	(funptr)&f162,
	(funptr)&f163,
	(funptr)&f164,
	(funptr)&f165,
	(funptr)&f166,
	(funptr)&f167,
	(funptr)&f168,
	(funptr)&f169,
	(funptr)&f170,
	(funptr)&f171,
	(funptr)&f172,
	(funptr)&f173,
	(funptr)&f174,
	(funptr)&f175,
	(funptr)&f176,
	(funptr)&f177,
	(funptr)&f178,
	(funptr)&f179,
	(funptr)&f180,
	(funptr)&f181,
	(funptr)&f182,
	(funptr)&f183,
	(funptr)&f184,
	(funptr)&f185,
	(funptr)&f186,
	(funptr)&f187,
	(funptr)&f188,
	(funptr)&f189,
	(funptr)&f190,
	(funptr)&f191,
	(funptr)&f192,
	(funptr)&f193,
	(funptr)&f194,
	(funptr)&f195,
	(funptr)&f196,
	(funptr)&f197,
	(funptr)&f198,
	(funptr)&f199,
	(funptr)&f200,
	(funptr)&f201,
	(funptr)&f202,
	(funptr)&f203,
	(funptr)&f204,
	(funptr)&f205,
	(funptr)&f206,
	(funptr)&f207,
	(funptr)&f208,
	(funptr)&f209,
	(funptr)&f210,
	(funptr)&f211,
	(funptr)&f212,
	(funptr)&f213,
	(funptr)&f214,
	(funptr)&f215,
	(funptr)&f216,
	(funptr)&f217,
	(funptr)&f218,
	(funptr)&f219,
	(funptr)&f220,
	(funptr)&f221,
	(funptr)&f222,
	(funptr)&f223,
	(funptr)&f224,
	(funptr)&f225,
	(funptr)&f226,
	(funptr)&f227,
	(funptr)&f228,
	(funptr)&f229,
	(funptr)&f230,
	(funptr)&f231,
	(funptr)&f232,
	(funptr)&f233,
	(funptr)&f234,
	(funptr)&f235,
	(funptr)&f236,
	(funptr)&f237,
	(funptr)&f238,
	(funptr)&f239,
	(funptr)&f240,
	(funptr)&f241,
	(funptr)&f242,
	(funptr)&f243,
	(funptr)&f244,
	(funptr)&f245,
	(funptr)&f246,
	(funptr)&f247,
	(funptr)&f248,
	(funptr)&f249,
	(funptr)&f250,
	(funptr)&f251,
	(funptr)&f252,
	(funptr)&f253,
	(funptr)&f254,
	(funptr)&f255,
	(funptr)&f256,
	(funptr)&f257,
	(funptr)&f258,
	(funptr)&f259,
	(funptr)&f260,
	(funptr)&f261,
	(funptr)&f262,
	(funptr)&f263,
	(funptr)&f264,
	(funptr)&f265,
	(funptr)&f266,
	(funptr)&f267,
	(funptr)&f268,
	(funptr)&f269,
	(funptr)&f270,
	(funptr)&f271,
	(funptr)&f272,
	(funptr)&f273,
	(funptr)&f274,
	(funptr)&f275,
	(funptr)&f276,
	(funptr)&f277,
	(funptr)&f278,
	(funptr)&f279,
	(funptr)&f280,
	(funptr)&f281,
	(funptr)&f282,
	(funptr)&f283,
	(funptr)&f284,
	(funptr)&f285,
	(funptr)&f286,
	(funptr)&f287,
	(funptr)&f288,
	(funptr)&f289,
	(funptr)&f290,
	(funptr)&f291,
	(funptr)&f292,
	(funptr)&f293,
	(funptr)&f294,
	(funptr)&f295,
	(funptr)&f296,
	(funptr)&f297,
	(funptr)&f298,
	(funptr)&f299,
	(funptr)&f300,
	(funptr)&f301,
	(funptr)&f302,
	(funptr)&f303,
	(funptr)&f304,
	(funptr)&f305,
	(funptr)&f306,
	(funptr)&f307,
	(funptr)&f308,
	(funptr)&f309,
	(funptr)&f310,
	(funptr)&f311,
	(funptr)&f312,
	(funptr)&f313,
	(funptr)&f314,
	(funptr)&f315,
	(funptr)&f316,
	(funptr)&f317,
	(funptr)&f318,
	(funptr)&f319,
	(funptr)&f320,
	(funptr)&f321,
	(funptr)&f322,
	(funptr)&f323,
	(funptr)&f324,
	(funptr)&f325,
	(funptr)&f326,
	(funptr)&f327,
	(funptr)&f328,
	(funptr)&f329,
	(funptr)&f330,
	(funptr)&f331,
	(funptr)&f332,
	(funptr)&f333,
	(funptr)&f334,
	(funptr)&f335,
	(funptr)&f336,
	(funptr)&f337,
	(funptr)&f338,
	(funptr)&f339,
	(funptr)&f340,
	(funptr)&f341,
	(funptr)&f342,
	(funptr)&f343,
	(funptr)&f344,
	(funptr)&f345,
	(funptr)&f346,
	(funptr)&f347,
	(funptr)&f348,
	(funptr)&f349,
	(funptr)&f350,
	(funptr)&f351,
	(funptr)&f352,
	(funptr)&f353,
	(funptr)&f354,
	(funptr)&f355,
	(funptr)&f356,
	(funptr)&f357,
	(funptr)&f358,
	(funptr)&f359,
	(funptr)&f360,
	(funptr)&f361,
	(funptr)&f362,
	(funptr)&f363,
	(funptr)&f364,
	(funptr)&f365,
	(funptr)&f366,
	(funptr)&f367,
	(funptr)&f368,
	(funptr)&f369,
	(funptr)&f370,
	(funptr)&f371,
	(funptr)&f372,
	(funptr)&f373,
	(funptr)&f374,
	(funptr)&f375,
	(funptr)&f376,
	(funptr)&f377,
	(funptr)&f378,
	(funptr)&f379,
	(funptr)&f380,
	(funptr)&f381,
	(funptr)&f382,
	(funptr)&f383,
	(funptr)&f384,
	(funptr)&f385,
	(funptr)&f386,
	(funptr)&f387,
	(funptr)&f388,
	(funptr)&f389,
	(funptr)&f390,
	(funptr)&f391,
	(funptr)&f392,
	(funptr)&f393,
	(funptr)&f394,
	(funptr)&f395,
	(funptr)&f396,
	(funptr)&f397,
	(funptr)&f398,
	(funptr)&f399,
};
char const * G_sigtab[] = {
	"cilllsdip{fpj{i{cfdcfpj[15]lddj}ps}i}pi",
	"psis<ilcsdp>cfi",
	"p<{i}{js}dcids<iipp>{fjcif}{cpjjdifcjcp}if>sdj",
	"ff<cl>i<lcpsicpspl[3]ff>",
	"fdj<lllcp<lddidfc{sj}>jl<{ppsldspj}<s[7]csddcfdlpfd>dj{ffficscid}piij<ilc[3]fscssj>ds>c<l>i>i",
	"pf{ij<p{pdjcpjsilfdp}jd<pllif>d{cfci}sdc[16]if>l[12]s<slfdfs{ddipljjssifc}d<icdf>f<jpdfpc>l[6]>p<lps<slcdd>[11]j[2]spj[9]pdjj>}i",
	"vcfj{p}{lssl}d",
	"{illds}jc<p>c<jplcpsppjisf><dddidfjidllf><s{cjcdcpcilccs}icpfcs{cic[16]scpsfjlfl}>pff",
	"psc{cccs}",
	"f<j>{sd<lli>{spiddl[12]pps<ciffl>{fscf}{d}}jsdlccss}{fls[1]jjdd<jjdfill<lcidjsljpidi[10]><il>>c}issdj{{{pdc}fl<fdppljdcdpi[5]d>jc<pjlsl>{lflsfifldljl}lls{f[2]fsspi}}<cjjclcfi><sciclf{fcjsfsicplsf}f{d}p<i>i>slpff<sfci[16]>j{dpcc}{fc<slj>d}}{d<pjifdj>}fsls",
	"{ij{s<clflpdcplclj>jjcjc{fjcpfdccjcjd}scis}jdlj}cp<cf[1]>p",
	"fscp<cd<{dpcf[15]cdffdpji}ff><fl<if>s{jsp[5]jic}pspddjp>>lj",
	"lcsdssfi<<dlfidsdfjpif>lldc>s",
	"ii<js<pslcf[5]cl><icddcliislj>jjl>icf{d<djpfslj>}i",
	"{jdpfiijjpfld}<<ffp[2]di[16]fpsc>i{ljfdfisifjid}{dcslc}fipj<j>>d",
	"pc{d}<j<cdpjpjjsifds>ddc>fjdd",
	"{dscfcflpp{l{dsjscc}<iljjfildc>fddjc[13]<ls>jis}lf}jfsj<p>fd<dj>{jlpf}<{{picfjfjlcl}d<ccfiijf>f{fdjj[4]}<jsjpids>cs{lsdispii}ld{pp}}pdd{ip{ssjjdifcsp[12]ps}d}fffs{if[13]f}id>ls{jfi{fjl}ps<lpidj>i<<c>{j}>j{pjic<fcldjppiddc>{fcp}ii[3]}p}c{djjdpjdc}",
	"fl{d<pfcilplilpcl>p{ff}<sjldflcdilii>{p}p{psi}i<jsf[7]pjpcdjdcp>}{ldp{cjlc}<dfdjjs<cpsscdlfcfcd>lclfl>if[16]d}ps",
	"l{{pi[13]{sdlclcfij[3]cjp}sd[9]ili<i>f}l}<cdpdjfscplpi>f{pfcls}jds",
	"ccii{{lif}fdfjccl}ifsfpfc",
	"si<{l}csjifi{jlfsdsjssssj}>l{{jpiifjfis{ipdjifj}pc}if{fcslfdd}ffpj}fp{dpljclld}cps",
	"f{ffl<fi{pflj}d<sfdlscsllfdf>{spcs}pfccff>jid{jsdflcf{fjdclci}}ppjc}pc<cjf>{d<sjif{ssiiijf}djfpijc>jps{sflld<pjsd>lisff<f[6]dijip[1]>}i{s}<cp>j<sppsldldd>p}fddijs",
	"j{siji}",
	"<<is[13]ls<djsisd>jd>jds>lcp",
	"jpcssc<cjdsdij>{{<j[12]ljisssplspi>[3]i[15]f{ddjc[12]lcjipcj}jpdipscc}<ii{djpplcpdpclf}l>slpsp{ip<ljsjpiipllcc>ldcf<sspdcfijdsfs>{l}<if>ci}p<s>s[10]s}s",
	"lfsji<{c{cddpiicc}<s>cjlpc{d}djf[2]}{p<sfcclifipfcs>i}pc<psf<jl[10]plldsjl>j>if{fsc[2]{ijliiddflips}jc{ii}sd}>l{sss<dsfs[8]s{lp}{dfdddssplijf}cjjpd><ffppjspfppif>pcdi{f}jl}<llljd>i",
	"{j}jlcc<cpssdsjpdl<j>s>si",
	"d<cl{didjjfj{l}lps}jd>dd{flsisssfcj}<pflj>sl",
	"j<{scpdld<lfip>fccds}<pis{fij}ccspficp>[6]pcpjjjsjjp>fj<l{lifj}s<ll>fcsj>fj<l<ldid>{c}{fsipdpppj[12]c}dfipljf>pf",
	"{cdisdf[11]<<idssccldj[4]cdc>sflsjjp>}i<pcc[12]d>sjfc<s{<pdjfc>jdl}islc{jj{jd[2]l}ldc<ijdii>c{djfj}l[7]dc}ccids>is{f<jjl>llc{islfi}<icccijsli[4]sip>fpps<li>}c<cscljjcl>f<fll<id>ddcdpf{liljci}d>",
	"sfl{dfplcdjjcfd}fjljlp",
	"<cifpddljdij>s<cfjp<cid[2]cfjpllipc>c{jicfcdiil}pildp>pp<s{cdiscjpiscpj}jplfic><iicidppi>i<jppii{lcf}d{fsllflllccjj}f[11]<ljcf>{cflljdsccjdf}p>ij{djffjjjsi}i",
	"pp<ilccdpslisjj>i<pc<sjfjijsslsif>si<sijjpciddclj><fc>jlc>cslic",
	"djd<s<<isflpipf>js{p}j>c{p<f[1]j>cdpipfp[15]fl{ss}}jjpi{dds[11]}>ds",
	"ipf{<sf<lcjjccpifjlp>ildip{icpfcicldpcd}ld{sllfij}>ilpfsljj}jiicpc{pjfj<sljp[9]dpcfcpsf>}p",
	"cj<pidfjlc{dfp{fciil[3]ficijfi}pdj}{d}ssi>jd",
	"ijs<<cp{ildlssjsi}ispdp{ddfi}lfj>>sil",
	"<li>cjf",
	"lfs<djpdjpflcslf>l<p>l<lcjif<jppjldiss[9]ic[12]j>psf>",
	"fjd<pc>{iflplciiciif}jfp{idccsld<<pjlipfsc>sffdi<ii>c{pddsssif}lf[14]p>f}c",
	"dcli{iiisfdspl{plffipd}<pilpfcs[13]pislc>f}{ps{diljflj{lp[13]djsilfscj[4]c}pjpp}dfs<fsd><siljlc{djp}lpjpp>jlld}",
	"lcdcpl<scj[12]sp>p",
	"p<cspdlp><ldjss>pfdplsdcpcc",
	"pd<sjpd{fl<ll[13]jlpfff[3]dfsf><cspjsi>f<cci[14]spj>is<psi[1]ifdcjdcif>idi}ils[3]>",
	"s{<f[13]>}jfd{ccjlpj}j",
	"ic<fcfd<iifdldpid{pssj[14]ilccd}p<djsfdjsc>>sj<cijpip{cpiicjjjdsjd}dd{pddcp}>p[4]>{{slcss[8]lpc<i>psl}c<l>d}ds{<ddj>}ljcssssp",
	"issp<d>",
	"j<dc>c<sdijl>lpl",
	"sjdcc{fpdiipddpipi}dfl",
	"flccjf{jipddfcl}iddpfi",
	"<jpclcciicfds><{si[5]is<pidplpfsd>fil}fid<cjlcdijljccl>f{lj}{pj<l>jfj[5]ljd<dpiicljfdccf>ip}p{{p}ss}dc>jslsfsdi",
	"fcji<fpds<<fsjdjfds>pflijppis>ci{jdfp}{lff{cddfsliljldi}j}si{fpf}>j{jjjpf}",
	"d{pi}{jjsiss}spjpifc{{ssssllfssfij}lcd<pfjlccd[8]lscjs>pfiffdd}",
	"jp{p{fdp[3]cfdps{pdflsfcjsci}{lcicffdcddld}d<lfpjd>}}lif",
	"dldd<{d}>s",
	"dpdccsjil<jjilfccjdifj>f",
	"dss{dfpjpcd}f<s>pc<{<jjlsfffpidjs>ppf}d>jcsfli",
	"<dsllcjlfjpcp><ss>ij<liidcsp>",
	"{ddfi}<p{jifipjcf<spldp>dpd}ss>spjsccicil",
	"pd{dffsfi[3]jpcijj}",
	"vfp<cpflcc>flpdfcsjl{i<ldl>{ifpljcdjisff}cc}",
	"sc{iidjcpcscfid}l{l}{fjs}{ppidj}{jsj{cdslssjfl<ldjj>{lisdc[5]ld}l}<scj>f{p[5]<ssdcfdfldclc>}ji{fcsc{ffsjfsdfdjf[8]s}lj<lppdpsfdsdip><is>jld}js}f",
	"{dpldiicsffdc}lsjpccljdp",
	"pf{flsclcijjjip}{<<ss>>sjdf<li<idij>jdscijfsl>d{psfc<lfpdpsjif[2]>d[16]pljd{fj}s}sdpd}ccpss{l}{l}",
	"l{jsc{i}}ifjidslp<dlf<{cfilpppsici}fs>ipj<{f}>{ciffllslscpj}jcp[3]>",
	"<ls>jjlc<{cc}p{cf{jij}dppdcsj[7]dl}j>fil",
	"cp<ij[6]dcd>iidfcdpj",
	"cf<cisdlcccjdcj>dsfsi",
	"cifs{ddfs}jcc",
	"fsccifsl<ddlfsclfdppf>ls",
	"dpf{jfll<{ccpi}l{jpcp}icf{jlfpfjisss}dlsip>i<fij<p>{jjjd}fcd{ffpjcfjpi}{djpjfipc}{ddscs}>f{clip{ipidfsjiis}jdljsp<cld[4]lp>}}",
	"<dsfslp<ip>pp<c<pcsjcd>fcj<i>ijc<i>dj>fd>scp<{s}lc{issfjpcsfiji}>cj{cpiplsciccdf}fllpjs",
	"ddidjs<dcldccfdj[11]l[16]ds>fis{dij{jpccsdlfplsl}{fllpjps[3]fflcd}jls<sjflfsfpjsdl>pdi}p<sf{spifdildcfc}p[3]d>",
	"cifidcl<p<ppj>s[7]ll>",
	"jdd{jl}isp{dpipdldf{lssjscl[11]dd}[9]lsc}fs",
	"<lslcssddj>jlsi",
	"<di[6]fcd>dls<ljd>pf",
	"pfl{<f>s<i>}<iifi>",
	"icpf<jfssdfddcs[9]s>cpid",
	"{ldjljp}pfds",
	"<icsllfji>ldcdjjjf",
	"sj{j{dj{jjpcfc}iii<lil>ic{cijdic}cd}j}id<fslld{p{sff}d{dlisjjjfli}ii{slijpfpplip[13]d}}ld>f",
	"{iij[7]<pdc<ifpi>c{cifldfplsll}sfcjc<dps>>d<j{plfjpjs}<jppsiipf>{jlfdp}fd<llccfj>lppp<ccjljpjccffi>>fjiil<sl{cjidslfddlcc}lpjjcl<djdcccc>l>}i",
	"cpi<pjdjffs{iffpdijfjlis}>",
	"fij<cc>cd",
	"scslij<f>dj",
	"{ji<sj[9]j[16]d>sl[12]jjffij{jcdf}}<f>fppcd<dl>",
	"{jpp{ps}pjsjij<cslss[4]lsjp{fl}cp>f}slijlcjcj{ciffpdpljipc}d{dijidsfifiic}",
	"i<{lpf[13]s<jsj[7]ii>dp[10]s}ppl<{pcl[6]cldpispi[10]j}jj<c>scslfpip>{jfss{fp}{ijlcjpspd}s}cps{lsfffddii{p}fd[10]}{jijcll[2]djdjcj}<ps{fp}s>>ssj",
	"cc{<fjlpiidps[4]pf>ssl}is{{{lslfiiddid[10]j[2]l}}<c>p{dlc<spj>s}[13]l[7]}ilpid",
	"{cl[9]ffi}",
	"lpjpficii<ijc<lj<icp>{i[8]dpslpdscjcc}dfif<cdls>{cii}pd>{ilcj<ij>j<cdjspdsfjdll>cpjdc}cf<<cjcpfsij[8]ffji>cpic<f>>f<sp>>cl<lc>",
	"{{idlfipi}{d}ffp<iidscj{ic}sll<i>>jf{c[16]jcpcpljdipl}<{dfd}c>j}ic{pfj<fdflp><scjcs[12]scspipi>{lfcpfdlpfidl}jl{dsscifslddfj}i<djdi>j}<fjil{dd}di>sds",
	"ccjijc<j>pj",
	"dccpj<djijlfff<lcl[10]iildll>pjs>pl",
	"isfllddl<s[15]i{isjpf[6]ifdlp{df}c}l{dscllfdpsjcd}{fcs}{p}i<<lcslpsjffcsj>j<spifllfjiidp>djj><spcs{lfc}>s<flsi>>{pd}ffdi",
	"cic{jjppijcpcs}cffi",
	"vidljjdcdscjp<jspscclpps>",
	"ii{flpp<fd>jis{sl{cicls}slscclsds}}djs{dccll<lf[4]d>{cccc[3]<cpf>i}is<<clsifsjjd>pisc<fcjjss>[2]si>lp}fliscifi",
	"{sjf{l}}iclddcscjp{i{if}<lfpjf><isjdciffjcf>{cpcfifjdlfpj}icis{cjjdpfcf[3]lc}jp}{dfl[6]}l",
	"vjpc{<<ficcclfcdpil>ji<fdp>c[4]p{sldicdcjlfdi}dj<p[8]cfssifpdfip>fp>jsfsssddcsp[1]}if",
	"<j>lfcsdp<iclflj>d{spljfll}",
	"j{i<sciiljjpdi[11]dp>jjif<cj>cj}ppp<icssf{j}jsddid>{ppp<pjpddsfjsdjj>}jcscd<jfdpp>fid",
	"jd<ipjdcispfsji>i<spj{<sdisf>f<sijlpli>ids{l}f{ssllcscjcsjf}{cdf[9]ffcpipiii}}f<<jid>jsc<lfpfiispllls>p{cpflidcsdclf}d<csf>dl>>dc{difci}",
	"{djs}<ppdp>{f{{cdljfldljp[13]pj}ffdp<c>}i{{csildlpdcjis}jipfipidjsc}}",
	"jsppcllj{d{pd}<fp>fp{pcccid}ddijsi}<{jslpjlcc}cdc>jfd",
	"<c[1]i<s<fiicsjilfll>sji>iiiis>",
	"ifdijp<s>jss",
	"cfpplficl<jp<c>fij<jj>{cdd[15]dcfpdfdf}p<clddf>{pf}i>jd",
	"jpcj{cdplppjlllfj}f",
	"v{c}djd{cs}",
	"<jffcfpiffcji>pljc{dpjifc}f",
	"<jccj<islsc>f<cjpddiscs{sfp}si><ifj<s>{slljji}sjfc>>licp{d[2]fi}c",
	"jiljffislic{pjlilllfilis}{lcslc<jj>p}<{j<ipsfjlss>dpppfilli<pdildd>}>d",
	"<i>dcfjjj<ill{ppddisp}l<idcjdp[15]ddfips>>f",
	"{iscsf<sls><id<lcs>>i{jc}s<cspcpldjlicj>s}<c{cifdl}{i}cljsidcsc>c{lcj}dclccpl{cpijpsdl<ll{jiflddc}>djs}",
	"{iiipp<i>p{f}<jpdjdjllfcdf>sj[7]p}<s>pjpjfsc",
	"iid{{fd<ilfjcfdfpi[2]>{llpjd}c[14]jcipfl}jdcli}ijccjclj",
	"f<sp<{s[5]isscd}cc{scdpidspfjf[6]i}>f{clci<cdi>fjsl<lji>}>d{fcl[4]ifidijppd[9]}fffj{dlclffcl<ljclcpiplfdd>d<pilfsp>c}<sc{dijcscijj}f<iflisdjjjsjp>{lf}>c<pl><d[6]<sljssijcpijs>jdisldfc{lsllc}p>",
	"dff{jlp[13]i<ljld[1]pfdjl<ppsdcjs>>{p}sfd<<i>cd>dp}pfs",
	"<i<cis>jijjiji>jpi{l}dcscd",
	"{{cilfcfp<fddffi>jdlc}}{fj[2]fcpldds}<lspdlsj>lcccjc{<jf>i{ij{idpdsjdcilcd}l}[13]lliplsc{cjjddp}i}{p<djscds[1]jljfli><lddfljpcfjlc>d{psfidcidfjlf}l}fc<<sf>ll<sp>cl<pc>{pfi}cd{c[2]pfddfc[1]fjsif}d>c",
	"dsi<si>jji",
	"spjcs<<jcpjc>d{cldc}jcfcjp>lf",
	"c{<c><jpjl{didl}{cldsf}f{s}jil[9]{fpddsscl}>}lc",
	"vpf{plpls[14]jj{ll}fc}ii",
	"cjpj<{cciidll}<scilsl>>djpc<{{lfdlpd}<lpslss[15]cijslc>lldi{idp}icdi[9]i}d>",
	"fissddlllci<<<djiijfssdill>jsilp[11]lcclij>fc{jdldj<ccljscdjidll>jc}ipds[7]>d{jdj{p}}",
	"fjssli<lpfsiclpljid>{dplscppfdllc}<{l[2]<jjpiisdfsjcc>jf{fsf}}<lc<fcflcpjjfdcp>d>flcc>",
	"ii<cpcjisjj>i<spppf[4]>i<jc<ccf>{iipj{sjpcidldf}ljp}ij<idfjsscdslds>jfs<sfsjssfljs<fic>l>l>s{csi{d}fpiij{ffpiljpld}pj}<<pjil>><jjijilfcf>if",
	"<l<i>fp{{cij}<iil>d}fsdf{p}ij><<cpl<splpjf>sfcj{scdllpildci}lj>>dijpjcs",
	"vill<{silsi}cfd<fi<fdpif>ijidpjf<ilpllipj>{icjsdp}>jifl>slpdd",
	"l{cpcill<jlf>lcs{cpcl}c}lci{sp}ifillcdlc",
	"p<dc>dsijjfpj",
	"vl{d}{jsi[11]p{idipi{is}{diciplppdji[10]}{dss}}ss}jifdj<lfcid>jdcjs",
	"{p}",
	"v{fps{dffcl}<if>{dppfcfjjdplc}lfiscp}sidijfliji",
	"<csj<csldlpllpcdc>i>",
	"jilspdi{iilfllifdsjf}pf",
	"<lld{lijpd}fislsd<jclj>d>p",
	"dfcjdi<sldsp[3]pdisffd>djfsfsi",
	"sisfd{icli<idcl[11]pcjflijf>}dd{llffjjsjsfjl}j<cps<c>scffd{flcpfllifslp}cf>",
	"{difljjd}f<dflpddfsppcf>{isjj}fccl",
	"d{{lpj}sc{ij}flllsldj}{f<{sjdipds[9]ssl[4]js[5]}{flidlld[3]jpcll}djcjp>d<d<iiiplds>cpc{dfcliiscjcdf}if>js<d{cpjsjlspcccd}js{dcs}<pp>f[2]fidjf>dclc<p<fc>ccsi>}cpdsjilfs",
	"vp<liccc>fs",
	"c<ljpssjdf>jsii",
	"<jid>jd{j{jljdpplfpipp}}ljdspd",
	"fsslcfpdcs{ld}",
	"{jfij}{cii}pfflf{iflcjp}p{isc{cs}f[8]c<dsiss{iicc}pp>icis}",
	"{psp}iii",
	"clj<clc<ilijsip>cc<fcpssfsi><id>sj<lfl>d>spdicflllp",
	"vcliip{jd}",
	"f<f>jfc",
	"spi{fji}dpj{jjp}{id{sdl<ilfiiid><lpiicpllfpi>sdfp<cjislcispcsf>f}{{cdjjspfdiccf}ld}cc}sl",
	"sdicfsif{ic}l<ds{d}ipcil{cpsfil[6]slfifc}{jifsc}lf>pf",
	"pi{ji{p}fd<sls>}ffcps",
	"pc{{pjcfsj}c}",
	"lcjd<jpjffdipp>l{dpcccpdfffpc}iilpl",
	"j<cpddlcl>{s}{isc{pdlfsfjlcfdf}sij<p[1]sjdljl><dlilljcsls>s{lljic}s}<il><djl{icp<dpjsisjisl><j>d<isilijplcsd[6]d>f}<<ssldddfjip>>isiljs<is>>ls<lllclpccpdsj>jfifc",
	"pdp<jfpcjcpd<dj<jp>>dfi>did<pl>",
	"{l<<fldlfdppcp>i<fpfsi>ls>f}fsp",
	"c<is>ffj",
	"<c>dj{spi<jj[1]jl>c[10]dlfsp[8]}ddppilfii<cpf{s}<ijpfdiscl>pidf{ldf}ls>j",
	"{ii{il}p[14]pllpfps<scc>}lspijpsff<{<ljdifi[13]jl>p{jlspidsls}d<cflsi>sjfd[9]jjf}{ffsfcfd}jllc<ffs<pd[2]fssfpidfip[9]>f>fcllc>j",
	"cj{pl{{lsdcc[16]fs}{ipjf}l{spl}lpjfi[12]}<cpljssdc<llcf>dll><pclpd{iscllsfjflp}sjp{ild}<cddpd><sdd>>ldl}llsj",
	"p{lp<<pljs><dpsldsdspdss>{pfilsilidscj}pfcddpcjj>pj{icfl{ljfcdd[16]sjslcd}jcjsj{jlijssiflfdj}f}<fs{c}fppisjjj<p[12]lcplcipsffs>>ff}c{iip<clll><c>{fdj}p<disf>dcld}lsc",
	"lid{<cpdsl[2]<sidippliljsi>jffi{j}<idfcsl>>pipdifd{j<jj>j}cji}{ficsddpi}pf<{sp}[2]<<c>jc{iilcdddl}cci>jjiic>dpddic",
	"s{d<i>s<jf>pd}<pidfjdjpcis>p{jfdpsjsdpcjs}fji",
	"d{ffls}lcd",
	"v<scps{isdds<s>i<jd>fi}fj>",
	"df{p{ijllc}<dlpcsdldf>fsfsicppj}p{j}jp",
	"j<ss{djj}{lf}s>",
	"j<pc{sclpp}{pjlflilidfpp}spjjcjc{icl}>jc<pi>dsd<jpsp<isdcccij>>ip{c}<d{lpcp[10]p[14]spfdpjc}<f><dpllf>>",
	"icdsfl{fcpfjccdjlsc}s",
	"v<sj>dlc<{j}>",
	"isifc{d{fsidscplfcjc}is<sc>f{csdfdfldlff}lcsl[6]p}sfp",
	"sd{l<pc<cclpip><psjccidfsdil>iidlpp<l[1]sddlf>j>d{{ciddclp}}ic}jsjd<pfjljlpdf[14]ppj>icfl",
	"ld{cfcj[2]<pi>js{fjdflj}[9]ipcj}ddjif<sclil>",
	"l{{sdflpij[10]lddjd}d{cdjfpcdl}{cj}l}sd<<plldd<dds>ilpd{fipjjil}>><j>f<scijffislp>j",
	"id{<sfpscc[5]d>d<pjfpcffjlddf>}d{f[11]si}j{cdjp}j",
	"<<sli>di[16]<{ljfflf}cd<jdjcld>idcc<ipd>{fjsji}<pclcdjf[3]jcsps>>fpl>",
	"p{cipci}s{ilfj}ssjss",
	"jj<{sd}ip>fcl<pdiccjllscpf>l",
	"sld<l{fpcljcfilf[11]is}>{l{<csslppjjd>dcliipcscj{ci}}ipi{d}}spdpsiddssp",
	"d{cfsc}icd",
	"<d>",
	"ilsipjj{scpispj}pfs",
	"dfjp<sipifcj><p>i",
	"{f<ffdi>j}scps{{ifd<icl>iljli[4]ipl}<p[6]p{lp}dis<jiijp>{ffj[7]}jdil>i}ficclsdf",
	"lifsd{fjpflcspsjsp}ddfd<p[3]>dd",
	"{psldpjlscpsd}pdsl{<ispj>jjj<cjdjdpji>sdsfpj<li[4]df>}{siccfcscjjlc}cpsl",
	"j{lfijpii}l",
	"pjslsjflillf<spdfp>fi",
	"vplfifpff{icsiispscjd}f",
	"jpjiidci<jfsfisl>{ss}{cdi<sspfpc{cfccfjpjssj}c{d}>scffilps}ff",
	"jldj<iji>d",
	"j<dipcs[6]>j<cjs>",
	"<{jslsjsjlfc}[14]>{icpcplj[14]lsplj}dldpfs<f{<ddldc>ji<ppdjppsppssf>csisl<jcpddddpfpcs>l{dlsflcsspisf}}fp{fl<ldccd[5]fpjjdjc>jsljifc{cjip}l}j>djds",
	"<liisccpjjflj>djcddddicjild",
	"if{jjdjcicil}cc{c<jffsi>[7]jil<cfii>cpd}ipc",
	"s{j<lipddd<jj[7]scffc[12]plpfd>fc>}cj<<dpd>d>is{sf<jiisidi>{clpiiffclfd}{ldp}cddcffi}",
	"ilp{sc}l<lfclfpp><pp>j<jpp[3]ic[2]ssc>sjlji",
	"ldl<lpl{j[12]dp}f{ljsfjiplsdcp}il>d",
	"{dfpdiilfj}p",
	"f<{sp{di[13]}cccic}d<fd<sfs>ip<f><jp>p>c{d<c>fpjiddlp}cppdsdc>sjp",
	"jpj{ilcijdiifffp}ff",
	"ff{pf}siil",
	"ps<{jddlddf[11]cff}{cijsj}l<jds>f{ffdddscidfdj}[13]d<ip[2]liflffci><cpdcp[1]>iii>f<sj>i",
	"dl<isc{ci<cljfsiplfii>sl<f>lip<i>d}lc{pd}si>ds",
	"dlsi{sdlildd<pl[4]flsffpicpl>pl{pfcicspcps}p}{ddlsfidcjppd}{clp<sjjsjpjidd>j{fisiicllcici}lfjp{isjlfcscidlj}c}jij",
	"{ic<s>}lcds{flldpc{jdsjcpi}fc{pfp}}jl",
	"ld<dpplpdjpjjf[9]c>jjcfd{<sipics[10]illclf>s{iddcdli}[2]jdf{ddlfpj}c<jd>ci<id>}c",
	"dfss{{ddif{pcjlsdcjl}pi<idclc>ijfs}ffc{pdjssd}{lpcslp{sdpllcdpdiji}jcdis}s<{fplpsc[6]icjfcj}sfs>f}",
	"cdci<fjipflpcd>ppicdd",
	"vjpdj{djps<pf>}fp<fcc[10]didcffl[1]j[10]l><s<lp[1]cfsfi>jsf>j<j>d",
	"{{sj{idlspcliiscj}<ic>s{scciffsdifcl}f<iispfp>}c[2]lcppsdjspp}ccccpicj<{sdlfij}sld>f{cd{<ljjlcslsisds>f<jlicsdjid[8]jji>{p[8]lifdl}i<jcpij>fj{fllscp[12]}c<cfcis>f}d<dspdllcp><c<ifpfsdds[1]splj>sii<i>cc{dcif}cfd>pll<pd<jfijifisdli[6]s>ididcijj<isiilfp>>{l}p}s",
	"i{js<<lfc[7]ipisf[12]ccsf>ijicccp{dpssds}>fljcff<fps[12]s{ls}pdjd>cs}<i[10]>sdsjj<jfcp[6]pf{s{ilsd}<ddcljdccdcci><filpsslc[3]fifi>csjlspj<dpldpcdispsj>}<pjdcd{il}fl>dfs[15]j>fd",
	"<j>d",
	"cd<{ic<lilpj>sfspsdjll}lfislssplpc><scpfddfjji{jfccs<p[11]llpcsfc>s<j>idj{cpicccffpdip}}>d<<idpc>f<sc>l>dcdi{dld}",
	"vi<{c}cildlsp{jilcijps[7]jc<sj>f}{<sfj[14]pijl>l{ddfssfl[8]s[15]pf}}ld>pp<clcfdfdip>jp",
	"fppccs<c{js{psijidici}}dsdc{i<sjcssj>c[4]<dcjcdifilcfc>d<dcif[9]cdcljsif>ll}ffc{f{sfpf}lpidppcpff}l>",
	"j<sjddc{ciciflf[8]liijl}l<ii>iffc>dddl{iddfdfcsj}p",
	"<i><l<dd{clfdjdp}{pj[8]clf}[4]clissclc>cj{cf{lcjsiifdp[2]pd[13]f}f{isldfjsdcccs}sp<ipc[11]ifiip>}jjd{jp}>psclcj",
	"vd{p}icd",
	"cifdj{ccpcdl<filc>{ildc}<jsljlpfjfs>llp}dcdd",
	"p<d>djp",
	"vppsislislld<p{pplplfcd}jfdj>",
	"f<sps[12]ijd<jl{fds}jfifjf{ccs}pd>di>pf",
	"<fippidjddf>fjcjp",
	"ilsi<diddpjpdlcji>pf{fjp}cj<lfcld>",
	"i<{c<pf>lcj}f{sdfcs}pi[6]i{sj}dscdp>dlpcfjp<dlsf[11]scdfl><fsp{jp<j><sc>i<ilcl[14]jspdcppi>jl{ijdjlflijfjc}jii}sicl[14]{sjlldd{sfdsdl}<ppfdpljlfjd>ispj}<ssfscsdp{cfj}ipp><cpfpccl<ssfdf>j<icf>js>f>{{psff}s}s",
	"{{d}i}si",
	"c{i}",
	"pj{pp{i}<l><dfpjsfcspp>jjcpd}lfcscijf{<d{slifi}{cffipsdcfipp}sdffpp<s>{pl}{ii[7]ii}>[5]l{i{s[7]djdfjdcjjs}l{c[12]ddccs}pcii{lfjsppssiilp}pf<lfjd>}idi<dl<piccjpjf>[5]l<s>cl{di}diid><c<pfiid>p>c{cf{pdjffjsi}ccl}cp}dj",
	"sjp<dllcddllcsji>",
	"pjplcsjc<dssfjcj{s[3]d}{c}i<{j}cipidp>f>jp",
	"dfcici{dpsiddcfdddd}d",
	"<p>sid",
	"slj{{{pjlp[13]difsiffs}[16]<ipdcp[13]ldljjl>d<p>i<sjscpiisci>dlsp<pldlfs>f}ps<p>jcsdd}s<{f<ccf>s{ssfdpccsccis}ii{cpljcijipsff}{lds}i[5]fp}{sl<jdj[14]jllsij>pc}pl{ssj}clc{j<j>p}pjs>sp<ddflf{dji{c}ij}{cip}j{llpf{cdpcpiljfsjs}c{l[13]i}lpd<spjcd>l}{dc}fj>df",
	"i<ljlf{s<cdiscfscsfpf>didp{slilldc[16]dsspj}jpii{jsi}}{pf<jsjlc>ijc{dfcllcpclsl[3]d}slcc<s[6]cjccls>}jcdiii>dl",
	"i{l}<ccpj>fij",
	"f{{dd<fijsisfljsij>f<l[13]dffpslslcsl[16]>}}j",
	"<ifdc{lddjip}>ljl",
	"<{fcs}ffccii{fdd}f>ji",
	"vcjc{fl}fjd",
	"cd{dis}{fs[13]lf{p}pp{p[2]fpdi[12]i}fppl}piilc{pppcdcss}dcp",
	"sdi<dflsis<spjfplp>><dclscdpfc<lpjs[3]illflppj>s<dicj[10]pccjs>>",
	"<jd[6]>s{<ils><sds><jsffcip>ljdspjl}",
	"l<cfpp>lpjjp{{jlsssippdcpp}lcijpcifpc}ipspl",
	"p<<slfd>cs{ls<sds>sdj{llpsjpdsijf}lfpsf}flp>jpd{ffpp{<cpfsjif[16]pj>pcffp<llplds[7]sccsdl>iccff}f}l<idcddfcfcfdd><cpsplfdsiil>cc<<cdsc{flf}is>p[9]pp{pl<ppipdjf[3]sssdp>{jpljc}}pp<dpcpfjsdlli[4]j>dj>",
	"ds{f<j>fcci<pdpjlldp[8]cjpd>ccs{lfci}c}<ps<c<ilplj>>fflffjs<ldf{slpcji}<jjl>ipp>j>cfspliic<d<slljcjljdsji>cjjcillf[9]jd><jspild>",
	"{p[12]sii}pjcd",
	"ic<didflis[14]ssfjs>jddji{cilpli}",
	"dc{pfffj}{plslcsdcs}p",
	"cfidijc{ljd{jiil<dfifisj[3]c>cppspl}cp}<jds[15]cp>",
	"lislf<c{sissfdiss}dl<lfifpfdd[3]idci>sii<ip>>l<fidp>s<icplljpfc><cdfsi>",
	"iii<dsi{s[13]}pj>{sf}dl<s{jpslsdsfs}[14]spdpijfifc>{fi<ccp<ld><sp><pp>ii{sjjcfss}{li}{fjdlssjci}s>fspc<lj<c>ccpccll<l>d>clss}sij{lfpis}",
	"dfcli{sf}",
	"icscj{pdsdpdl}cc",
	"sifcisjcs<d>fspdi",
	"pjfdsfpjjfc<c<ic[10]cccfl>ijpj{c[4]s}p{l}>j",
	"f<{pdsppsd}p<fsccifpffjfd>d{lsip}csp{dfiiiijip[5]fpc}cil>",
	"dcci{fppc[9]illlfscl}fs{{{fdlpcsfldsjl}l[15]i[5]fc}<fjccdc[3]>[1]icjf}l",
	"idfpi{{<sflcjlppjl[16]ij>fi{fclslccfldcf}<jfcs>f{i}cpj}spci}dici",
	"{p<cics><dipsplljij>jd{ipjjcd}flisil}{ldfij}<slfcllipcl>is{{c}sc{ds}{ipjifdpf}cid[3]{lpisfllsc}jdf}pii<j>pfljs",
	"<jssf>cficfcip",
	"dl{p{pfjijfcfjpcj}i{sslccd[2]sl}cdsj<pfippsfsdifp>i<cfjjjidcp>p}pd{flpplfsjjd{cicdcsl<iddcfjspc>pf<fljdpific[7]ps>f}i}id{lfl[7]lljccdlsc}f{fipdplcillsi}",
	"cf<cdcdiiiidcp>c<ff[15]ffcf>s",
	"iij{cl}d<difl{d}p>{if[15]ppsj{d<cflllffjppjl>lpfpi<ljildjf>djll}}l{<{fpcs}d{l}>fpfl<sdci[16]>lcfps}di",
	"p{s}i{ilcsjpjj[9]plid}js",
	"fp<<dclcji>sflliffijf<p>>pjpi{jidjicd{ffl<sd>sp}jipj}dfcs{fccd[15]<sl{p}<lp[8]iii>jjcfp[11]ifp><ssssj{ipdli}>idcj{fssdl[14]lsls<jpfcslppplfj>c{cdcfj}}i}j",
	"vp<pplfp<ljilcill[15]isij>csp>ijsdf",
	"scjcdd<iclsssdsfisd>fjf<l[1]cifld{plsd}{ffppjlcp{sjc}i<spp[15]>f}df{{lilsl}iildd}s><djfplsc{jcifsjjsipds}<j>i>sj",
	"ljpcp<j[9]sjisppls>jcp{ljc<p>i{lcfcj}ccp{jpdji[10]fdllidp}fd}p{j}<<pilijfcfplsi>{ccl}l<ipfjijljpfsj>>f",
	"plll<ifspiss{fiic<dcjcdccl>ll<fcppp>cdsj}<liip>c{pspipjp<jlspi>icdp}d>if<p>ssd<pj<<fd>ilj>pf>df",
	"d<sis[6]f<fdpdfdljjp>cijjf<sfffsfcsd><ccpljjj[9]jilii>>s<pj{scp}pf>i<spfjjs[3]>if<fdll{sfjlsslddjlj}l>fppcc{sd[8]jsi{jcjcfdpd}<pic>l{fsjic[6]sidfpfp}psl}l",
	"jljf{iifpli}il",
	"ljfl{sdd}p",
	"<s<d>ij><spc<djlc>jplc><flfjfs<{jii}fij{dcpp}<fijdfsl>il[12]jc><dj>c{lfdpdd{l}<fdidsiddp>}sf[9]>cs{<dffpii{fdd}<s>p{sidijc}fs>fs}f",
	"<fp<lpsljljjicf{pff}>l<pjlippj{cisji}{jsfppclpllfd}[15]ij{f}><pj{picijpdp}dic{dcifdi}c{lcs}d<pcdjjc>[15]d>l{{ff}d}ff<fddi{ilfjficidfpp}isjijff>p>lcjiccccsdlj",
	"ssfcfj{<fpcj>{s}ijs[3]c{ifdi}cd{cc[7]cs}l[1]}f{ccpc}j",
	"dljsipj<s>slp<ldfj>",
	"d{{ddijclfjsjjl}cl<s>c{pip}dlii}lpiisc",
	"fpd{sfj[13]fpcdfilfp}i{ljcfi<ssj>pf}ssdl{lccp{pfjsji}iili<{cldc}jddj{pdsllpsfddfl}jssc>ff}l",
	"jj{jpcsi<pfs{p[5]fldcdilcdcs}{if}<d>p{ccc}d[11]ifi>cfpffs}i<flscpll[10]pp[11]cpd><c{l}sc{cis[14]ldsscji[8]pi}ld{idjspfdc}p><j>d",
	"<pj[1]>jjscfpjddid{d<<i>i<iddldp>jlp<jsfllpispfcl>{iip}[14]sif<ipdi[14]cjld>><cdfsij[13]ss>}",
	"f<ccppisj>p{sfll<i><cldjj>llcdci}d<i>dfici{ildfjiccps}{if{jlj<j[2]lp>ljsj[6]f{lpsf}sf}pcpc}",
	"<fpf>",
	"{<sc>dlpflcflsl{ifiddjlj}}d<scflsis>l",
	"pddi{<jipdc>ii[3]i{dlll[7]l{cijclpfjjdpj}lif<dsljf>pd}cs<d<jf>jl[11]lsj{jc}{sjdpicid}{jpiipfcfc}>jjj{f<pffccc><fsl><fdcdjpi>psj}}p<{pljp[6]jijfcddi}<flscsfjdlcpp>>s<ff>dc",
	"l<{jj}cccfl>j<{jfpl}dflcil<ds{ci}{cllpfifcp}ssplijfj><cflic<ijilfiipfscc>cipij>><jsfpsffdccc>l{sd}ip<<lfcfliisscs>jjicfsjd{l}f<iddpfljpjp>>isif",
	"jfdcjcllsj<jilcfji{f{pfccfjcscijj}<jpfsd>lpd}>",
	"{cpiljldidf}d",
	"ff{sp{<pdjlij[9]fcpfjd>lp}p}lc<l[15]icl>lf{fdcpssf[11]cd{jds}sp}{sc<f>sdi}flscd",
	"l<ipf[1]fi{sislpjsidjid}d[1]c{pclssisilfll}l{sldijflljjsl}<fs>>pd<s{lcspf}jj>{d{if}l}",
	"ij<jljj<pljf>{<ljjiiidipc>sscs<lsdissdscspp>s{llcjcpdispsc}l[10]<cicjldli>id}i{s<sddsj[6]illjdfi>sjd{sipdcfff}ssspid}islc>dcc",
	"j<<idjjpsdijfij><fpl>i<cfpiifjf[9]sfsj>sjp<dd>pf>{iccs}cddpjsjp",
	"v<p{f<cilpjjlci>j}s><ic{pidjljcfidds}{sljdjjidssfd}d<jllj><jc>ljis{cddlsddjfc}>",
	"{s{sspdfsi}<jf>}p<fjf>ipd<f>fsj",
	"pp<<l>{jl}<sc>dcc<fpjf>csf>cjji{psj}ls",
	"vp<lp>j<ds[4]<i><fiiilfcspcsp>>jcj<{f[12]cfi<jjpdccildiii>{ijsj}p{cpjplcfd}lljs}iiij>dl",
	"{<pppcfssdcfl>}<jii{f[2]cjpspf<ddjlpsddj>sj<cfp>i}<p{ljlpl}dlpc{djdcpdfsf}[9]<jcccc[13]l>lp>lpic<picjjj{cccclii}p>j{{dijfdfp}s<f>{pps}lc{pdcjifcdl}lpcds}>cspdl",
	"{if<pil>llcls<{si}{si}<di>fc>fds}jpip<diiscpcfpjpj>",
	"c<pdc<pc{fddc}lcdcp>i<<d>s>cfsfs{sslip}>cl",
	"if{{j}f<diidildiljid>pd{pd{ssflff}{ls}c{iisjppfpsdfs}p}sfiidd}pd{ccfccp}",
	"dsdfdjii<p{f}<ippjll><psdscislllpi>>sdi{scs<fpdd>d}l",
	"cf{jdlscsc<c{sfi}ldcclflpli[7]>{<pid><pcffplpsfjlp>s[13]p{lii}<dld><pppp>jijj{d[8]psp}}cd{<jl>{jsscjlpljf[15]}jcj}}<dj<il<pdcfl>j{fdccfjjs}{sl}djcl{fcllddpc}s>s{s<plciiljc>fjfij}sljlfpf>i{ccpldllcf{sfpcfidcd[3]fsd}i}s",
	"<jjpcl{{ij[8]iip}sc{jlpfdpdjpisp}csfijjjc}sfslji>p{cc}{f{jcdcjlpdiiid}p<lissj>fi}d{{fisfpsfiffcs}djjd}sdcssp{j}",
	"p{lci[14]dcppj}jcfijslf{{s}{c}{jd}ccsdilcf}",
	"{dl{cfcpp}lf{jfsd}jjss{jc[7]lspcci}c}cfijl{ijpsj<s><icd>}jsi<cdjsflc><dllildp>",
	"<{f}fcis>jlpdf",
	"jlspjdi{s}",
	"sp<d>jlfp{di}<sjpjiljccij<jj[1]>>piiilij",
	"ijslflssdijfs{s[7]i}",
	"cddll{djif{{lscjljss}<pppfsjjsd>d}dcjdfij}li",
	"vfdd{ccf{j[2]pjfjs}pi}{pspij}s",
	"pd{cji<jjsfidjsppli>fjpi}ls",
	"vci<d{pjpc}{ilcs}>",
	"disp<djfsii[2]scfdcd>cpc<dcjp<i<llds>dc><d{f[2]j}>jsi<id<ljidpppcifff>jip>fi>ffcc",
	"jif{<dl>jc{ji<idllfc>sfpcsff{c}{p}}<f>pldi}sli{lp}l{lcdi<ldjjjpj<c>ii{ccjf}{dl[10]ifdi[14]i}>dd{if}ljfc}fp",
	"i<li{p}p<pid<i>>{s<pjllfdslf>ci}cdijjl>j<ffll<lscffpdfcdip><s>sdcdjc>{<l<i><ic>c[8]{ppdpciddddjl}l>ldjcfjcp<jfljidsd[7]jp>i}d{fcifdcsds[3]{pd[16]fffdpsffdp}jp}fi{lfdjcsf}j",
	"dd{f{sjid[4]}c<jfjpijdlspcj>jf[2]l<cci>dj{ipl}d}cldic{c}",
	"i<cpsiss>ipsds",
	"jcc{<lipccjsdfij>fcf<jipplf>sifi}<<dpsid>ipc>ffi{djlpi}is{il}<fsilccp[12]sdf[13]jc>l",
	"pfl<j{cpfd}>j",
	"c{jdl<s>pps<ffpiji[16]pfcppc>ijdj}",
	"i<l><ccijl>c{c<jjcscisi>}<{d}clfpjpclcdi><s<<d>ff<fpjilpss>s>clfdi>pjsfji",
	"flfpci<<fldpsjcj>l>jflscss",
	"fp{s}cs<sc>s{sd}cd",
	"j<jp>ic<fcdjjll>sj{<pfjcdfdcd[2]>cl}lj<fccpjsscljsf>c",
	"dc<j[14]c><p>cs<jcssfcll>scj<djls>s",
	"s{fdci}fsflc<<jfjl>>fdcfc",
	"s<p>ii",
	"c<lcd<jd{lcsjsilsfsdl}dclll{ill}if<sj>>ccddip>sjpj",
	"j{silpssili<isj>}sdjl<sj><dfjsdd>",
	"<<ps>pifl[15]si>jd{jcccfsildjdd}<ppspsfjlfpip>lifp",
	"ccpp{dss<c>{si}{djlfjpldfi[2]jj}si<pi<ipcsccdfljcj>siidfclp{ijcisf}>cjl}ccifc",
	"cpil<pj>jfpcdf",
	"fffcdpdsiiflp{fcpljf}{cjis}i",
	"sil{<{didcs[14]i[2]jisp}pfj<icjjlffjjl[15]id>{j}d<dplpfpjsiijp>c>jf}jps{lcsfi<dcppsp[12]jdffjl>iijpcd}jif<fl>",
	"sjcijd<dipdijd>dsf",
	"jfs{sf<i>{fpii{pljljis}[3]pcispfj}dcscc{<j[16]>{siclcid}}ls}ps<dijcscclslfj>",
	"sf<lflccfcpfdp>sfdsf<{ccsddcddpcps}>llfls",
	"cllip{ci}sj",
	"<spscdjdis[11]sci>{jjp<l>{ppj}<pfcflcs[5]plf>i<ipilisi[7]pjldp>dics}ijp<dddpscdif>",
	"cjccfp<cjfccpjdj<l>ip>scsspj",
	"jpdd{jjdl}",
	"f{ifdjs[3]spjsfij}",
	"ls{c}sp",
	"{csdjj{iic}ss[6]j}<pj>scpj",
	"fdpccs<lj{jdf[3]s}c<pcsfj[14]fjsipcl>>{icsjcj}{pscdpisji}p{{p{ldli}{if}f<f>d<dj>pdiii}sdddfs}",
	"{pfjsflcdlcfs}spfp<fl{jj}pci>",
	"fjpi<jdil[2]<ffp{ljd}ldcfs>fsp>cd<cddcdjlli>{s{sifdlc}ifc}pd",
	"i<l>lf{fc}fppsjs",
	"{sidl<s><fpfcfc><disficcl>sd<isplpcscp><clcpdjcjic>{ljdpj}}dc<ldsss{{cflfjiflcfcf}li}f<dp{ccdissii}picdsfpd{d}>clpl>dfs",
	"piijdplp{ilfdscsipsfs}{dldc{i}<sljldpdscdpj>dpld<di>c}d",
	"df<f[8]s>i<jjllilfdiljd>d<dplfddp[13]lcjpi>fddsp",
	"jcpipi<lilccsjlsjjl>",
	"<f{lls}dds>lp",
	"f<pjcss{jpc}l{ii{ci}ffdipl}cj{c{fsfiiicijidc}f{lffdcfij}sj[13]<ddi[12]pdip>iscsd}p><<i>{llpc}cild{cf}dj><scipcislpdfs>fsc",
	"<lcspsisccljs>lccjfldp",
	"<fs>fff",
	"f{j[1]lplc}p{{ssccd}}sjssjffjp",
	"<ljd[16]lfdlp{pjplfilsiicp}<sps<fl>ccjfdi{fd}>dc>d<jii>fii",
	"{j{clif}f<c[7]{jpcjd[1]lijccjp}<l>d{djpi}p<l[16]ilddcd>psp>j{j<jdspd>jssp<ildfdpjsjdp>lpild}ij<c><f>ld}dfjdcsdcdpcj",
	"<fi>cj<ld<ds>scsllldid>d<fdc>icdsijdc",
	"ic{dj<ill><csicd>p<i>ipis}i",
	"fljj<fps>cisc",
	"isjsl<s>lis<p>pj",
	"dlssc{lpi<{jcddpii}{fpljdfjljifp}pjc>}d",
	"ss<icp[14]pd{iislf}c[2]i><f>lisis<fjdi>i",
	"l<pls{ijddfc}fll{icifpfffc}lps{cflsjppscfi}>d<dp{lfl}i[5]csddddpl>fdpjc",
	"{sdj<{i}>s{p}fsdcjd}{fsppjjfifipl}pdds",
	"f{ji{j}fdddp{icdslsjcfds}p{pcfdlddpfijp}c}",
	"pfiilidjd<jd>l",
	"sfi{<ci>}sdpjcds{<pjfdj<sdfssiil><ilsplsdlcipc><jdsdd[5]pspfdcf>i<ipiiipc>cf>spjfs<ppp<cpficsflff>i>idi<lf<pj[2]jdc><dlc>scc{l[8]l}{ffs}{lidspfsfppss}f{cpifp}>i}",
	"pis<pililsipljfj>ldfiflj",
	"plispjcij<ps[6]d{pdp<jsi>dsl}csdslsf<dslscj[5]cc>>ld<cilpijisdipc>f",
	"{ji{jjil{dic}ppllsj<jccs>}f}df<jli>pllfi{p<dp>{{ds}cjfc}jl<<ddjssdjfjssc>>scpspd}",
	"fci{ilsfj}jjdcfsjic",
	"vs<d{i{i}fsidj<l>pjpp}{dp<lppsicilpsdj[14]>f<l>l{iidissi[9]ccppj}fpfl<jf>}>ll{c}jj",
	"<{lpjii[8]jdli}sjf<ciccjlldc>plj{lpji[15]lldcff}pli>",
	"pp{fljpilsccdlj}lj<is>slljcp",
	"f{{pcpcpfsfpfpp}<c>}ll",
	"p{fcdffc[11]iipifs}s",
	"dp<f>f{ldjjfcjp<sdpijjd<ijf[13]fjcpfcfss>jddl>i{<lpijd[1]pcjspdl>}p}f",
	"d{jpjcjspslcdi}{jlllli<ji>spd}j{c{lcsccdf[2]dpddl}fpi<lj>ddf<cidjf[14]fs>fd}c{p[7]cl}jfffj{lpc<j{icidslpcll[4]fj}fjslcpps<dj[5]fjlc>j>ds{<ljl>d{cfipccjjsffi}lc<dlclf>ffdi{ldfijc}d}spjpi}",
	"<cc>j<j<dcp>lcsd{dsifcfsfjffi}p>icldpdjljp",
	"vsd<d<jis{cifdlpppiifc}sjl{lj[6]dls}f{c}c<flfpf>>{llsflfp{fpdifjd}ijcj}c[7]fp>cs{jfd{discjpi[14]d}{pcc[2]idfplfdjs}d{clpspsplfdjc}{cidjifijf}{clpjlc[6]}cdc}fdljp",
	"dilj{s[6]dfsdi}ls<jdl>",
	"ifdcdsds{scpdcfsjdi{lj}p}d{jssdispjf<lllidfcps>sj}f<cj{iplpcl{fcildsciispj}jcd{s}c}ici<ljf>lci>",
	"pj{s{fcicpl{plllpcididfl}jldp[8]i}dd<csi<llcjdl[6]c>{sfsjjcjjdlfi}cjjpc<fl>j><lllp[14]sfsp<jilfdjcdf>ffj>ccjcsi}i",
	"pcdp{s}",
	"i<cscjjsf{{pjpisjcid}pl{lfjdd}pfp{iplps}fsdl}>lfscifdf<dd[10]i>i",
	"ifppifcp{iplfscspddsd}",
	"{{l<fcldji>dlp<fidcflfccpjd>ffjc{dfcppfsld}c}{j[13]li<pspdsccjlcss>i<jcji[15]j[4]sliilsp>p<fsfipfcdjds[13]i><lilcdcjlss>idd}s[10]sj{fs}}c{ips}fj",
	"pjlfsl<l><iscd>pd",
	"dfjd<s>jd{ips}",
	"<spljffl{fjf}cjjp>",
	"{jcfd}cs{jcisfdf}fji",
};
const char* G_agg_sigs[]  = {
	"{cfdcfpj[15]lddj}",
	"{i{cfdcfpj[15]lddj}ps}",
	"{fpj{i{cfdcfpj[15]lddj}ps}i}",
	"<ilcsdp>",
	"{i}",
	"{js}",
	"<iipp>",
	"{fjcif}",
	"{cpjjdifcjcp}",
	"<{i}{js}dcids<iipp>{fjcif}{cpjjdifcjcp}if>",
	"<cl>",
	"<lcpsicpspl[3]ff>",
	"{sj}",
	"<lddidfc{sj}>",
	"{ppsldspj}",
	"<s[7]csddcfdlpfd>",
	"{ffficscid}",
	"<ilc[3]fscssj>",
	"<{ppsldspj}<s[7]csddcfdlpfd>dj{ffficscid}piij<ilc[3]fscssj>ds>",
	"<l>",
	"<lllcp<lddidfc{sj}>jl<{ppsldspj}<s[7]csddcfdlpfd>dj{ffficscid}piij<ilc[3]fscssj>ds>c<l>i>",
	"{pdjcpjsilfdp}",
	"<pllif>",
	"{cfci}",
	"<p{pdjcpjsilfdp}jd<pllif>d{cfci}sdc[16]if>",
	"{ddipljjssifc}",
	"<icdf>",
	"<jpdfpc>",
	"<slfdfs{ddipljjssifc}d<icdf>f<jpdfpc>l[6]>",
	"<slcdd>",
	"<lps<slcdd>[11]j[2]spj[9]pdjj>",
	"{ij<p{pdjcpjsilfdp}jd<pllif>d{cfci}sdc[16]if>l[12]s<slfdfs{ddipljjssifc}d<icdf>f<jpdfpc>l[6]>p<lps<slcdd>[11]j[2]spj[9]pdjj>}",
	"{p}",
	"{lssl}",
	"{illds}",
	"<p>",
	"<jplcpsppjisf>",
	"<dddidfjidllf>",
	"{cjcdcpcilccs}",
	"{cic[16]scpsfjlfl}",
	"<s{cjcdcpcilccs}icpfcs{cic[16]scpsfjlfl}>",
	"{cccs}",
	"<j>",
	"<lli>",
	"<ciffl>",
	"{fscf}",
	"{d}",
	"{spiddl[12]pps<ciffl>{fscf}{d}}",
	"{sd<lli>{spiddl[12]pps<ciffl>{fscf}{d}}jsdlccss}",
	"<lcidjsljpidi[10]>",
	"<il>",
	"<jjdfill<lcidjsljpidi[10]><il>>",
	"{fls[1]jjdd<jjdfill<lcidjsljpidi[10]><il>>c}",
	"{pdc}",
	"<fdppljdcdpi[5]d>",
	"<pjlsl>",
	"{lflsfifldljl}",
	"{f[2]fsspi}",
	"{{pdc}fl<fdppljdcdpi[5]d>jc<pjlsl>{lflsfifldljl}lls{f[2]fsspi}}",
	"<cjjclcfi>",
	"{fcjsfsicplsf}",
	"<i>",
	"<sciclf{fcjsfsicplsf}f{d}p<i>i>",
	"<sfci[16]>",
	"{dpcc}",
	"<slj>",
	"{fc<slj>d}",
	"{{{pdc}fl<fdppljdcdpi[5]d>jc<pjlsl>{lflsfifldljl}lls{f[2]fsspi}}<cjjclcfi><sciclf{fcjsfsicplsf}f{d}p<i>i>slpff<sfci[16]>j{dpcc}{fc<slj>d}}",
	"<pjifdj>",
	"{d<pjifdj>}",
	"<clflpdcplclj>",
	"{fjcpfdccjcjd}",
	"{s<clflpdcplclj>jjcjc{fjcpfdccjcjd}scis}",
	"{ij{s<clflpdcplclj>jjcjc{fjcpfdccjcjd}scis}jdlj}",
	"<cf[1]>",
	"{dpcf[15]cdffdpji}",
	"<{dpcf[15]cdffdpji}ff>",
	"<if>",
	"{jsp[5]jic}",
	"<fl<if>s{jsp[5]jic}pspddjp>",
	"<cd<{dpcf[15]cdffdpji}ff><fl<if>s{jsp[5]jic}pspddjp>>",
	"<dlfidsdfjpif>",
	"<<dlfidsdfjpif>lldc>",
	"<pslcf[5]cl>",
	"<icddcliislj>",
	"<js<pslcf[5]cl><icddcliislj>jjl>",
	"<djpfslj>",
	"{d<djpfslj>}",
	"{jdpfiijjpfld}",
	"<ffp[2]di[16]fpsc>",
	"{ljfdfisifjid}",
	"{dcslc}",
	"<<ffp[2]di[16]fpsc>i{ljfdfisifjid}{dcslc}fipj<j>>",
	"<cdpjpjjsifds>",
	"<j<cdpjpjjsifds>ddc>",
	"{dsjscc}",
	"<iljjfildc>",
	"<ls>",
	"{l{dsjscc}<iljjfildc>fddjc[13]<ls>jis}",
	"{dscfcflpp{l{dsjscc}<iljjfildc>fddjc[13]<ls>jis}lf}",
	"<dj>",
	"{jlpf}",
	"{picfjfjlcl}",
	"<ccfiijf>",
	"{fdjj[4]}",
	"<jsjpids>",
	"{lsdispii}",
	"{pp}",
	"{{picfjfjlcl}d<ccfiijf>f{fdjj[4]}<jsjpids>cs{lsdispii}ld{pp}}",
	"{ssjjdifcsp[12]ps}",
	"{ip{ssjjdifcsp[12]ps}d}",
	"{if[13]f}",
	"<{{picfjfjlcl}d<ccfiijf>f{fdjj[4]}<jsjpids>cs{lsdispii}ld{pp}}pdd{ip{ssjjdifcsp[12]ps}d}fffs{if[13]f}id>",
	"{fjl}",
	"<lpidj>",
	"<c>",
	"{j}",
	"<<c>{j}>",
	"<fcldjppiddc>",
	"{fcp}",
	"{pjic<fcldjppiddc>{fcp}ii[3]}",
	"{jfi{fjl}ps<lpidj>i<<c>{j}>j{pjic<fcldjppiddc>{fcp}ii[3]}p}",
	"{djjdpjdc}",
	"<pfcilplilpcl>",
	"{ff}",
	"<sjldflcdilii>",
	"{psi}",
	"<jsf[7]pjpcdjdcp>",
	"{d<pfcilplilpcl>p{ff}<sjldflcdilii>{p}p{psi}i<jsf[7]pjpcdjdcp>}",
	"{cjlc}",
	"<cpsscdlfcfcd>",
	"<dfdjjs<cpsscdlfcfcd>lclfl>",
	"{ldp{cjlc}<dfdjjs<cpsscdlfcfcd>lclfl>if[16]d}",
	"{sdlclcfij[3]cjp}",
	"{pi[13]{sdlclcfij[3]cjp}sd[9]ili<i>f}",
	"{{pi[13]{sdlclcfij[3]cjp}sd[9]ili<i>f}l}",
	"<cdpdjfscplpi>",
	"{pfcls}",
	"{lif}",
	"{{lif}fdfjccl}",
	"{l}",
	"{jlfsdsjssssj}",
	"<{l}csjifi{jlfsdsjssssj}>",
	"{ipdjifj}",
	"{jpiifjfis{ipdjifj}pc}",
	"{fcslfdd}",
	"{{jpiifjfis{ipdjifj}pc}if{fcslfdd}ffpj}",
	"{dpljclld}",
	"{pflj}",
	"<sfdlscsllfdf>",
	"{spcs}",
	"<fi{pflj}d<sfdlscsllfdf>{spcs}pfccff>",
	"{fjdclci}",
	"{jsdflcf{fjdclci}}",
	"{ffl<fi{pflj}d<sfdlscsllfdf>{spcs}pfccff>jid{jsdflcf{fjdclci}}ppjc}",
	"<cjf>",
	"{ssiiijf}",
	"<sjif{ssiiijf}djfpijc>",
	"<pjsd>",
	"<f[6]dijip[1]>",
	"{sflld<pjsd>lisff<f[6]dijip[1]>}",
	"{s}",
	"<cp>",
	"<sppsldldd>",
	"{d<sjif{ssiiijf}djfpijc>jps{sflld<pjsd>lisff<f[6]dijip[1]>}i{s}<cp>j<sppsldldd>p}",
	"{siji}",
	"<djsisd>",
	"<is[13]ls<djsisd>jd>",
	"<<is[13]ls<djsisd>jd>jds>",
	"<cjdsdij>",
	"<j[12]ljisssplspi>",
	"{ddjc[12]lcjipcj}",
	"{<j[12]ljisssplspi>[3]i[15]f{ddjc[12]lcjipcj}jpdipscc}",
	"{djpplcpdpclf}",
	"<ii{djpplcpdpclf}l>",
	"<ljsjpiipllcc>",
	"<sspdcfijdsfs>",
	"{ip<ljsjpiipllcc>ldcf<sspdcfijdsfs>{l}<if>ci}",
	"<s>",
	"{{<j[12]ljisssplspi>[3]i[15]f{ddjc[12]lcjipcj}jpdipscc}<ii{djpplcpdpclf}l>slpsp{ip<ljsjpiipllcc>ldcf<sspdcfijdsfs>{l}<if>ci}p<s>s[10]s}",
	"{cddpiicc}",
	"{c{cddpiicc}<s>cjlpc{d}djf[2]}",
	"<sfcclifipfcs>",
	"{p<sfcclifipfcs>i}",
	"<jl[10]plldsjl>",
	"<psf<jl[10]plldsjl>j>",
	"{ijliiddflips}",
	"{ii}",
	"{fsc[2]{ijliiddflips}jc{ii}sd}",
	"<{c{cddpiicc}<s>cjlpc{d}djf[2]}{p<sfcclifipfcs>i}pc<psf<jl[10]plldsjl>j>if{fsc[2]{ijliiddflips}jc{ii}sd}>",
	"{lp}",
	"{dfdddssplijf}",
	"<dsfs[8]s{lp}{dfdddssplijf}cjjpd>",
	"<ffppjspfppif>",
	"{f}",
	"{sss<dsfs[8]s{lp}{dfdddssplijf}cjjpd><ffppjspfppif>pcdi{f}jl}",
	"<llljd>",
	"<cpssdsjpdl<j>s>",
	"{didjjfj{l}lps}",
	"<cl{didjjfj{l}lps}jd>",
	"{flsisssfcj}",
	"<pflj>",
	"<lfip>",
	"{scpdld<lfip>fccds}",
	"{fij}",
	"<pis{fij}ccspficp>",
	"<{scpdld<lfip>fccds}<pis{fij}ccspficp>[6]pcpjjjsjjp>",
	"{lifj}",
	"<ll>",
	"<l{lifj}s<ll>fcsj>",
	"<ldid>",
	"{c}",
	"{fsipdpppj[12]c}",
	"<l<ldid>{c}{fsipdpppj[12]c}dfipljf>",
	"<idssccldj[4]cdc>",
	"<<idssccldj[4]cdc>sflsjjp>",
	"{cdisdf[11]<<idssccldj[4]cdc>sflsjjp>}",
	"<pcc[12]d>",
	"<pdjfc>",
	"{<pdjfc>jdl}",
	"{jd[2]l}",
	"<ijdii>",
	"{djfj}",
	"{jj{jd[2]l}ldc<ijdii>c{djfj}l[7]dc}",
	"<s{<pdjfc>jdl}islc{jj{jd[2]l}ldc<ijdii>c{djfj}l[7]dc}ccids>",
	"<jjl>",
	"{islfi}",
	"<icccijsli[4]sip>",
	"<li>",
	"{f<jjl>llc{islfi}<icccijsli[4]sip>fpps<li>}",
	"<cscljjcl>",
	"<id>",
	"{liljci}",
	"<fll<id>ddcdpf{liljci}d>",
	"{dfplcdjjcfd}",
	"<cifpddljdij>",
	"<cid[2]cfjpllipc>",
	"{jicfcdiil}",
	"<cfjp<cid[2]cfjpllipc>c{jicfcdiil}pildp>",
	"{cdiscjpiscpj}",
	"<s{cdiscjpiscpj}jplfic>",
	"<iicidppi>",
	"{lcf}",
	"{fsllflllccjj}",
	"<ljcf>",
	"{cflljdsccjdf}",
	"<jppii{lcf}d{fsllflllccjj}f[11]<ljcf>{cflljdsccjdf}p>",
	"{djffjjjsi}",
	"<ilccdpslisjj>",
	"<sjfjijsslsif>",
	"<sijjpciddclj>",
	"<fc>",
	"<pc<sjfjijsslsif>si<sijjpciddclj><fc>jlc>",
	"<isflpipf>",
	"<<isflpipf>js{p}j>",
	"<f[1]j>",
	"{ss}",
	"{p<f[1]j>cdpipfp[15]fl{ss}}",
	"{dds[11]}",
	"<s<<isflpipf>js{p}j>c{p<f[1]j>cdpipfp[15]fl{ss}}jjpi{dds[11]}>",
	"<lcjjccpifjlp>",
	"{icpfcicldpcd}",
	"{sllfij}",
	"<sf<lcjjccpifjlp>ildip{icpfcicldpcd}ld{sllfij}>",
	"{<sf<lcjjccpifjlp>ildip{icpfcicldpcd}ld{sllfij}>ilpfsljj}",
	"<sljp[9]dpcfcpsf>",
	"{pjfj<sljp[9]dpcfcpsf>}",
	"{fciil[3]ficijfi}",
	"{dfp{fciil[3]ficijfi}pdj}",
	"<pidfjlc{dfp{fciil[3]ficijfi}pdj}{d}ssi>",
	"{ildlssjsi}",
	"{ddfi}",
	"<cp{ildlssjsi}ispdp{ddfi}lfj>",
	"<<cp{ildlssjsi}ispdp{ddfi}lfj>>",
	"<djpdjpflcslf>",
	"<jppjldiss[9]ic[12]j>",
	"<lcjif<jppjldiss[9]ic[12]j>psf>",
	"<pc>",
	"{iflplciiciif}",
	"<pjlipfsc>",
	"<ii>",
	"{pddsssif}",
	"<<pjlipfsc>sffdi<ii>c{pddsssif}lf[14]p>",
	"{idccsld<<pjlipfsc>sffdi<ii>c{pddsssif}lf[14]p>f}",
	"{plffipd}",
	"<pilpfcs[13]pislc>",
	"{iiisfdspl{plffipd}<pilpfcs[13]pislc>f}",
	"{lp[13]djsilfscj[4]c}",
	"{diljflj{lp[13]djsilfscj[4]c}pjpp}",
	"<fsd>",
	"{djp}",
	"<siljlc{djp}lpjpp>",
	"{ps{diljflj{lp[13]djsilfscj[4]c}pjpp}dfs<fsd><siljlc{djp}lpjpp>jlld}",
	"<scj[12]sp>",
	"<cspdlp>",
	"<ldjss>",
	"<ll[13]jlpfff[3]dfsf>",
	"<cspjsi>",
	"<cci[14]spj>",
	"<psi[1]ifdcjdcif>",
	"{fl<ll[13]jlpfff[3]dfsf><cspjsi>f<cci[14]spj>is<psi[1]ifdcjdcif>idi}",
	"<sjpd{fl<ll[13]jlpfff[3]dfsf><cspjsi>f<cci[14]spj>is<psi[1]ifdcjdcif>idi}ils[3]>",
	"<f[13]>",
	"{<f[13]>}",
	"{ccjlpj}",
	"{pssj[14]ilccd}",
	"<djsfdjsc>",
	"<iifdldpid{pssj[14]ilccd}p<djsfdjsc>>",
	"{cpiicjjjdsjd}",
	"{pddcp}",
	"<cijpip{cpiicjjjdsjd}dd{pddcp}>",
	"<fcfd<iifdldpid{pssj[14]ilccd}p<djsfdjsc>>sj<cijpip{cpiicjjjdsjd}dd{pddcp}>p[4]>",
	"{slcss[8]lpc<i>psl}",
	"{{slcss[8]lpc<i>psl}c<l>d}",
	"<ddj>",
	"{<ddj>}",
	"<d>",
	"<dc>",
	"<sdijl>",
	"{fpdiipddpipi}",
	"{jipddfcl}",
	"<jpclcciicfds>",
	"<pidplpfsd>",
	"{si[5]is<pidplpfsd>fil}",
	"<cjlcdijljccl>",
	"{lj}",
	"<dpiicljfdccf>",
	"{pj<l>jfj[5]ljd<dpiicljfdccf>ip}",
	"{{p}ss}",
	"<{si[5]is<pidplpfsd>fil}fid<cjlcdijljccl>f{lj}{pj<l>jfj[5]ljd<dpiicljfdccf>ip}p{{p}ss}dc>",
	"<fsjdjfds>",
	"<<fsjdjfds>pflijppis>",
	"{jdfp}",
	"{cddfsliljldi}",
	"{lff{cddfsliljldi}j}",
	"{fpf}",
	"<fpds<<fsjdjfds>pflijppis>ci{jdfp}{lff{cddfsliljldi}j}si{fpf}>",
	"{jjjpf}",
	"{pi}",
	"{jjsiss}",
	"{ssssllfssfij}",
	"<pfjlccd[8]lscjs>",
	"{{ssssllfssfij}lcd<pfjlccd[8]lscjs>pfiffdd}",
	"{pdflsfcjsci}",
	"{lcicffdcddld}",
	"<lfpjd>",
	"{fdp[3]cfdps{pdflsfcjsci}{lcicffdcddld}d<lfpjd>}",
	"{p{fdp[3]cfdps{pdflsfcjsci}{lcicffdcddld}d<lfpjd>}}",
	"<{d}>",
	"<jjilfccjdifj>",
	"{dfpjpcd}",
	"<jjlsfffpidjs>",
	"{<jjlsfffpidjs>ppf}",
	"<{<jjlsfffpidjs>ppf}d>",
	"<dsllcjlfjpcp>",
	"<ss>",
	"<liidcsp>",
	"<spldp>",
	"{jifipjcf<spldp>dpd}",
	"<p{jifipjcf<spldp>dpd}ss>",
	"{dffsfi[3]jpcijj}",
	"<cpflcc>",
	"<ldl>",
	"{ifpljcdjisff}",
	"{i<ldl>{ifpljcdjisff}cc}",
	"{iidjcpcscfid}",
	"{fjs}",
	"{ppidj}",
	"<ldjj>",
	"{lisdc[5]ld}",
	"{cdslssjfl<ldjj>{lisdc[5]ld}l}",
	"<scj>",
	"<ssdcfdfldclc>",
	"{p[5]<ssdcfdfldclc>}",
	"{ffsjfsdfdjf[8]s}",
	"<lppdpsfdsdip>",
	"<is>",
	"{fcsc{ffsjfsdfdjf[8]s}lj<lppdpsfdsdip><is>jld}",
	"{jsj{cdslssjfl<ldjj>{lisdc[5]ld}l}<scj>f{p[5]<ssdcfdfldclc>}ji{fcsc{ffsjfsdfdjf[8]s}lj<lppdpsfdsdip><is>jld}js}",
	"{dpldiicsffdc}",
	"{flsclcijjjip}",
	"<<ss>>",
	"<idij>",
	"<li<idij>jdscijfsl>",
	"<lfpdpsjif[2]>",
	"{fj}",
	"{psfc<lfpdpsjif[2]>d[16]pljd{fj}s}",
	"{<<ss>>sjdf<li<idij>jdscijfsl>d{psfc<lfpdpsjif[2]>d[16]pljd{fj}s}sdpd}",
	"{jsc{i}}",
	"{cfilpppsici}",
	"<{cfilpppsici}fs>",
	"<{f}>",
	"{ciffllslscpj}",
	"<dlf<{cfilpppsici}fs>ipj<{f}>{ciffllslscpj}jcp[3]>",
	"{cc}",
	"{jij}",
	"{cf{jij}dppdcsj[7]dl}",
	"<{cc}p{cf{jij}dppdcsj[7]dl}j>",
	"<ij[6]dcd>",
	"<cisdlcccjdcj>",
	"{ddfs}",
	"<ddlfsclfdppf>",
	"{ccpi}",
	"{jpcp}",
	"{jlfpfjisss}",
	"<{ccpi}l{jpcp}icf{jlfpfjisss}dlsip>",
	"{jjjd}",
	"{ffpjcfjpi}",
	"{djpjfipc}",
	"{ddscs}",
	"<fij<p>{jjjd}fcd{ffpjcfjpi}{djpjfipc}{ddscs}>",
	"{ipidfsjiis}",
	"<cld[4]lp>",
	"{clip{ipidfsjiis}jdljsp<cld[4]lp>}",
	"{jfll<{ccpi}l{jpcp}icf{jlfpfjisss}dlsip>i<fij<p>{jjjd}fcd{ffpjcfjpi}{djpjfipc}{ddscs}>f{clip{ipidfsjiis}jdljsp<cld[4]lp>}}",
	"<ip>",
	"<pcsjcd>",
	"<c<pcsjcd>fcj<i>ijc<i>dj>",
	"<dsfslp<ip>pp<c<pcsjcd>fcj<i>ijc<i>dj>fd>",
	"{issfjpcsfiji}",
	"<{s}lc{issfjpcsfiji}>",
	"{cpiplsciccdf}",
	"<dcldccfdj[11]l[16]ds>",
	"{jpccsdlfplsl}",
	"{fllpjps[3]fflcd}",
	"<sjflfsfpjsdl>",
	"{dij{jpccsdlfplsl}{fllpjps[3]fflcd}jls<sjflfsfpjsdl>pdi}",
	"{spifdildcfc}",
	"<sf{spifdildcfc}p[3]d>",
	"<ppj>",
	"<p<ppj>s[7]ll>",
	"{jl}",
	"{lssjscl[11]dd}",
	"{dpipdldf{lssjscl[11]dd}[9]lsc}",
	"<lslcssddj>",
	"<di[6]fcd>",
	"<ljd>",
	"<f>",
	"{<f>s<i>}",
	"<iifi>",
	"<jfssdfddcs[9]s>",
	"{ldjljp}",
	"<icsllfji>",
	"{jjpcfc}",
	"<lil>",
	"{cijdic}",
	"{dj{jjpcfc}iii<lil>ic{cijdic}cd}",
	"{j{dj{jjpcfc}iii<lil>ic{cijdic}cd}j}",
	"{sff}",
	"{dlisjjjfli}",
	"{slijpfpplip[13]d}",
	"{p{sff}d{dlisjjjfli}ii{slijpfpplip[13]d}}",
	"<fslld{p{sff}d{dlisjjjfli}ii{slijpfpplip[13]d}}ld>",
	"<ifpi>",
	"{cifldfplsll}",
	"<dps>",
	"<pdc<ifpi>c{cifldfplsll}sfcjc<dps>>",
	"{plfjpjs}",
	"<jppsiipf>",
	"{jlfdp}",
	"<llccfj>",
	"<ccjljpjccffi>",
	"<j{plfjpjs}<jppsiipf>{jlfdp}fd<llccfj>lppp<ccjljpjccffi>>",
	"{cjidslfddlcc}",
	"<djdcccc>",
	"<sl{cjidslfddlcc}lpjjcl<djdcccc>l>",
	"{iij[7]<pdc<ifpi>c{cifldfplsll}sfcjc<dps>>d<j{plfjpjs}<jppsiipf>{jlfdp}fd<llccfj>lppp<ccjljpjccffi>>fjiil<sl{cjidslfddlcc}lpjjcl<djdcccc>l>}",
	"{iffpdijfjlis}",
	"<pjdjffs{iffpdijfjlis}>",
	"<cc>",
	"<sj[9]j[16]d>",
	"{jcdf}",
	"{ji<sj[9]j[16]d>sl[12]jjffij{jcdf}}",
	"<dl>",
	"{ps}",
	"{fl}",
	"<cslss[4]lsjp{fl}cp>",
	"{jpp{ps}pjsjij<cslss[4]lsjp{fl}cp>f}",
	"{ciffpdpljipc}",
	"{dijidsfifiic}",
	"<jsj[7]ii>",
	"{lpf[13]s<jsj[7]ii>dp[10]s}",
	"{pcl[6]cldpispi[10]j}",
	"<{pcl[6]cldpispi[10]j}jj<c>scslfpip>",
	"{fp}",
	"{ijlcjpspd}",
	"{jfss{fp}{ijlcjpspd}s}",
	"{lsfffddii{p}fd[10]}",
	"{jijcll[2]djdjcj}",
	"<ps{fp}s>",
	"<{lpf[13]s<jsj[7]ii>dp[10]s}ppl<{pcl[6]cldpispi[10]j}jj<c>scslfpip>{jfss{fp}{ijlcjpspd}s}cps{lsfffddii{p}fd[10]}{jijcll[2]djdjcj}<ps{fp}s>>",
	"<fjlpiidps[4]pf>",
	"{<fjlpiidps[4]pf>ssl}",
	"{lslfiiddid[10]j[2]l}",
	"{{lslfiiddid[10]j[2]l}}",
	"<spj>",
	"{dlc<spj>s}",
	"{{{lslfiiddid[10]j[2]l}}<c>p{dlc<spj>s}[13]l[7]}",
	"{cl[9]ffi}",
	"<icp>",
	"{i[8]dpslpdscjcc}",
	"<cdls>",
	"{cii}",
	"<lj<icp>{i[8]dpslpdscjcc}dfif<cdls>{cii}pd>",
	"<ij>",
	"<cdjspdsfjdll>",
	"{ilcj<ij>j<cdjspdsfjdll>cpjdc}",
	"<cjcpfsij[8]ffji>",
	"<<cjcpfsij[8]ffji>cpic<f>>",
	"<sp>",
	"<ijc<lj<icp>{i[8]dpslpdscjcc}dfif<cdls>{cii}pd>{ilcj<ij>j<cdjspdsfjdll>cpjdc}cf<<cjcpfsij[8]ffji>cpic<f>>f<sp>>",
	"<lc>",
	"{idlfipi}",
	"{ic}",
	"<iidscj{ic}sll<i>>",
	"{c[16]jcpcpljdipl}",
	"{dfd}",
	"<{dfd}c>",
	"{{idlfipi}{d}ffp<iidscj{ic}sll<i>>jf{c[16]jcpcpljdipl}<{dfd}c>j}",
	"<fdflp>",
	"<scjcs[12]scspipi>",
	"{lfcpfdlpfidl}",
	"{dsscifslddfj}",
	"<djdi>",
	"{pfj<fdflp><scjcs[12]scspipi>{lfcpfdlpfidl}jl{dsscifslddfj}i<djdi>j}",
	"{dd}",
	"<fjil{dd}di>",
	"<lcl[10]iildll>",
	"<djijlfff<lcl[10]iildll>pjs>",
	"{df}",
	"{isjpf[6]ifdlp{df}c}",
	"{dscllfdpsjcd}",
	"{fcs}",
	"<lcslpsjffcsj>",
	"<spifllfjiidp>",
	"<<lcslpsjffcsj>j<spifllfjiidp>djj>",
	"{lfc}",
	"<spcs{lfc}>",
	"<flsi>",
	"<s[15]i{isjpf[6]ifdlp{df}c}l{dscllfdpsjcd}{fcs}{p}i<<lcslpsjffcsj>j<spifllfjiidp>djj><spcs{lfc}>s<flsi>>",
	"{pd}",
	"{jjppijcpcs}",
	"<jspscclpps>",
	"<fd>",
	"{cicls}",
	"{sl{cicls}slscclsds}",
	"{flpp<fd>jis{sl{cicls}slscclsds}}",
	"<lf[4]d>",
	"<cpf>",
	"{cccc[3]<cpf>i}",
	"<clsifsjjd>",
	"<fcjjss>",
	"<<clsifsjjd>pisc<fcjjss>[2]si>",
	"{dccll<lf[4]d>{cccc[3]<cpf>i}is<<clsifsjjd>pisc<fcjjss>[2]si>lp}",
	"{sjf{l}}",
	"{if}",
	"<lfpjf>",
	"<isjdciffjcf>",
	"{cpcfifjdlfpj}",
	"{cjjdpfcf[3]lc}",
	"{i{if}<lfpjf><isjdciffjcf>{cpcfifjdlfpj}icis{cjjdpfcf[3]lc}jp}",
	"{dfl[6]}",
	"<ficcclfcdpil>",
	"<fdp>",
	"{sldicdcjlfdi}",
	"<p[8]cfssifpdfip>",
	"<<ficcclfcdpil>ji<fdp>c[4]p{sldicdcjlfdi}dj<p[8]cfssifpdfip>fp>",
	"{<<ficcclfcdpil>ji<fdp>c[4]p{sldicdcjlfdi}dj<p[8]cfssifpdfip>fp>jsfsssddcsp[1]}",
	"<iclflj>",
	"{spljfll}",
	"<sciiljjpdi[11]dp>",
	"<cj>",
	"{i<sciiljjpdi[11]dp>jjif<cj>cj}",
	"<icssf{j}jsddid>",
	"<pjpddsfjsdjj>",
	"{ppp<pjpddsfjsdjj>}",
	"<jfdpp>",
	"<ipjdcispfsji>",
	"<sdisf>",
	"<sijlpli>",
	"{ssllcscjcsjf}",
	"{cdf[9]ffcpipiii}",
	"{<sdisf>f<sijlpli>ids{l}f{ssllcscjcsjf}{cdf[9]ffcpipiii}}",
	"<jid>",
	"<lfpfiispllls>",
	"{cpflidcsdclf}",
	"<csf>",
	"<<jid>jsc<lfpfiispllls>p{cpflidcsdclf}d<csf>dl>",
	"<spj{<sdisf>f<sijlpli>ids{l}f{ssllcscjcsjf}{cdf[9]ffcpipiii}}f<<jid>jsc<lfpfiispllls>p{cpflidcsdclf}d<csf>dl>>",
	"{difci}",
	"{djs}",
	"<ppdp>",
	"{cdljfldljp[13]pj}",
	"{{cdljfldljp[13]pj}ffdp<c>}",
	"{csildlpdcjis}",
	"{{csildlpdcjis}jipfipidjsc}",
	"{f{{cdljfldljp[13]pj}ffdp<c>}i{{csildlpdcjis}jipfipidjsc}}",
	"<fp>",
	"{pcccid}",
	"{d{pd}<fp>fp{pcccid}ddijsi}",
	"{jslpjlcc}",
	"<{jslpjlcc}cdc>",
	"<fiicsjilfll>",
	"<s<fiicsjilfll>sji>",
	"<c[1]i<s<fiicsjilfll>sji>iiiis>",
	"<jj>",
	"{cdd[15]dcfpdfdf}",
	"<clddf>",
	"{pf}",
	"<jp<c>fij<jj>{cdd[15]dcfpdfdf}p<clddf>{pf}i>",
	"{cdplppjlllfj}",
	"{cs}",
	"<jffcfpiffcji>",
	"{dpjifc}",
	"<islsc>",
	"{sfp}",
	"<cjpddiscs{sfp}si>",
	"{slljji}",
	"<ifj<s>{slljji}sjfc>",
	"<jccj<islsc>f<cjpddiscs{sfp}si><ifj<s>{slljji}sjfc>>",
	"{d[2]fi}",
	"{pjlilllfilis}",
	"{lcslc<jj>p}",
	"<ipsfjlss>",
	"<pdildd>",
	"{j<ipsfjlss>dpppfilli<pdildd>}",
	"<{j<ipsfjlss>dpppfilli<pdildd>}>",
	"{ppddisp}",
	"<idcjdp[15]ddfips>",
	"<ill{ppddisp}l<idcjdp[15]ddfips>>",
	"<sls>",
	"<lcs>",
	"<id<lcs>>",
	"{jc}",
	"<cspcpldjlicj>",
	"{iscsf<sls><id<lcs>>i{jc}s<cspcpldjlicj>s}",
	"{cifdl}",
	"<c{cifdl}{i}cljsidcsc>",
	"{lcj}",
	"{jiflddc}",
	"<ll{jiflddc}>",
	"{cpijpsdl<ll{jiflddc}>djs}",
	"<jpdjdjllfcdf>",
	"{iiipp<i>p{f}<jpdjdjllfcdf>sj[7]p}",
	"<ilfjcfdfpi[2]>",
	"{llpjd}",
	"{fd<ilfjcfdfpi[2]>{llpjd}c[14]jcipfl}",
	"{{fd<ilfjcfdfpi[2]>{llpjd}c[14]jcipfl}jdcli}",
	"{s[5]isscd}",
	"{scdpidspfjf[6]i}",
	"<{s[5]isscd}cc{scdpidspfjf[6]i}>",
	"<cdi>",
	"<lji>",
	"{clci<cdi>fjsl<lji>}",
	"<sp<{s[5]isscd}cc{scdpidspfjf[6]i}>f{clci<cdi>fjsl<lji>}>",
	"{fcl[4]ifidijppd[9]}",
	"<ljclcpiplfdd>",
	"<pilfsp>",
	"{dlclffcl<ljclcpiplfdd>d<pilfsp>c}",
	"{dijcscijj}",
	"<iflisdjjjsjp>",
	"{lf}",
	"<sc{dijcscijj}f<iflisdjjjsjp>{lf}>",
	"<pl>",
	"<sljssijcpijs>",
	"{lsllc}",
	"<d[6]<sljssijcpijs>jdisldfc{lsllc}p>",
	"<ppsdcjs>",
	"<ljld[1]pfdjl<ppsdcjs>>",
	"<<i>cd>",
	"{jlp[13]i<ljld[1]pfdjl<ppsdcjs>>{p}sfd<<i>cd>dp}",
	"<cis>",
	"<i<cis>jijjiji>",
	"<fddffi>",
	"{cilfcfp<fddffi>jdlc}",
	"{{cilfcfp<fddffi>jdlc}}",
	"{fj[2]fcpldds}",
	"<lspdlsj>",
	"<jf>",
	"{idpdsjdcilcd}",
	"{ij{idpdsjdcilcd}l}",
	"{cjjddp}",
	"{<jf>i{ij{idpdsjdcilcd}l}[13]lliplsc{cjjddp}i}",
	"<djscds[1]jljfli>",
	"<lddfljpcfjlc>",
	"{psfidcidfjlf}",
	"{p<djscds[1]jljfli><lddfljpcfjlc>d{psfidcidfjlf}l}",
	"<sf>",
	"{pfi}",
	"{c[2]pfddfc[1]fjsif}",
	"<<sf>ll<sp>cl<pc>{pfi}cd{c[2]pfddfc[1]fjsif}d>",
	"<si>",
	"<jcpjc>",
	"{cldc}",
	"<<jcpjc>d{cldc}jcfcjp>",
	"{didl}",
	"{cldsf}",
	"{fpddsscl}",
	"<jpjl{didl}{cldsf}f{s}jil[9]{fpddsscl}>",
	"{<c><jpjl{didl}{cldsf}f{s}jil[9]{fpddsscl}>}",
	"{ll}",
	"{plpls[14]jj{ll}fc}",
	"{cciidll}",
	"<scilsl>",
	"<{cciidll}<scilsl>>",
	"{lfdlpd}",
	"<lpslss[15]cijslc>",
	"{idp}",
	"{{lfdlpd}<lpslss[15]cijslc>lldi{idp}icdi[9]i}",
	"<{{lfdlpd}<lpslss[15]cijslc>lldi{idp}icdi[9]i}d>",
	"<djiijfssdill>",
	"<<djiijfssdill>jsilp[11]lcclij>",
	"<ccljscdjidll>",
	"{jdldj<ccljscdjidll>jc}",
	"<<<djiijfssdill>jsilp[11]lcclij>fc{jdldj<ccljscdjidll>jc}ipds[7]>",
	"{jdj{p}}",
	"<lpfsiclpljid>",
	"{dplscppfdllc}",
	"<jjpiisdfsjcc>",
	"{fsf}",
	"{l[2]<jjpiisdfsjcc>jf{fsf}}",
	"<fcflcpjjfdcp>",
	"<lc<fcflcpjjfdcp>d>",
	"<{l[2]<jjpiisdfsjcc>jf{fsf}}<lc<fcflcpjjfdcp>d>flcc>",
	"<cpcjisjj>",
	"<spppf[4]>",
	"<ccf>",
	"{sjpcidldf}",
	"{iipj{sjpcidldf}ljp}",
	"<idfjsscdslds>",
	"<fic>",
	"<sfsjssfljs<fic>l>",
	"<jc<ccf>{iipj{sjpcidldf}ljp}ij<idfjsscdslds>jfs<sfsjssfljs<fic>l>l>",
	"{ffpiljpld}",
	"{csi{d}fpiij{ffpiljpld}pj}",
	"<pjil>",
	"<<pjil>>",
	"<jjijilfcf>",
	"{cij}",
	"<iil>",
	"{{cij}<iil>d}",
	"<l<i>fp{{cij}<iil>d}fsdf{p}ij>",
	"<splpjf>",
	"{scdllpildci}",
	"<cpl<splpjf>sfcj{scdllpildci}lj>",
	"<<cpl<splpjf>sfcj{scdllpildci}lj>>",
	"{silsi}",
	"<fdpif>",
	"<ilpllipj>",
	"{icjsdp}",
	"<fi<fdpif>ijidpjf<ilpllipj>{icjsdp}>",
	"<{silsi}cfd<fi<fdpif>ijidpjf<ilpllipj>{icjsdp}>jifl>",
	"<jlf>",
	"{cpcl}",
	"{cpcill<jlf>lcs{cpcl}c}",
	"{sp}",
	"{is}",
	"{diciplppdji[10]}",
	"{dss}",
	"{idipi{is}{diciplppdji[10]}{dss}}",
	"{jsi[11]p{idipi{is}{diciplppdji[10]}{dss}}ss}",
	"<lfcid>",
	"{dffcl}",
	"{dppfcfjjdplc}",
	"{fps{dffcl}<if>{dppfcfjjdplc}lfiscp}",
	"<csldlpllpcdc>",
	"<csj<csldlpllpcdc>i>",
	"{iilfllifdsjf}",
	"{lijpd}",
	"<jclj>",
	"<lld{lijpd}fislsd<jclj>d>",
	"<sldsp[3]pdisffd>",
	"<idcl[11]pcjflijf>",
	"{icli<idcl[11]pcjflijf>}",
	"{llffjjsjsfjl}",
	"{flcpfllifslp}",
	"<cps<c>scffd{flcpfllifslp}cf>",
	"{difljjd}",
	"<dflpddfsppcf>",
	"{isjj}",
	"{lpj}",
	"{ij}",
	"{{lpj}sc{ij}flllsldj}",
	"{sjdipds[9]ssl[4]js[5]}",
	"{flidlld[3]jpcll}",
	"<{sjdipds[9]ssl[4]js[5]}{flidlld[3]jpcll}djcjp>",
	"<iiiplds>",
	"{dfcliiscjcdf}",
	"<d<iiiplds>cpc{dfcliiscjcdf}if>",
	"{cpjsjlspcccd}",
	"{dcs}",
	"<pp>",
	"<d{cpjsjlspcccd}js{dcs}<pp>f[2]fidjf>",
	"<p<fc>ccsi>",
	"{f<{sjdipds[9]ssl[4]js[5]}{flidlld[3]jpcll}djcjp>d<d<iiiplds>cpc{dfcliiscjcdf}if>js<d{cpjsjlspcccd}js{dcs}<pp>f[2]fidjf>dclc<p<fc>ccsi>}",
	"<liccc>",
	"<ljpssjdf>",
	"{jljdpplfpipp}",
	"{j{jljdpplfpipp}}",
	"{ld}",
	"{jfij}",
	"{iflcjp}",
	"{iicc}",
	"<dsiss{iicc}pp>",
	"{isc{cs}f[8]c<dsiss{iicc}pp>icis}",
	"{psp}",
	"<ilijsip>",
	"<fcpssfsi>",
	"<lfl>",
	"<clc<ilijsip>cc<fcpssfsi><id>sj<lfl>d>",
	"{jd}",
	"{fji}",
	"{jjp}",
	"<ilfiiid>",
	"<lpiicpllfpi>",
	"<cjislcispcsf>",
	"{sdl<ilfiiid><lpiicpllfpi>sdfp<cjislcispcsf>f}",
	"{cdjjspfdiccf}",
	"{{cdjjspfdiccf}ld}",
	"{id{sdl<ilfiiid><lpiicpllfpi>sdfp<cjislcispcsf>f}{{cdjjspfdiccf}ld}cc}",
	"{cpsfil[6]slfifc}",
	"{jifsc}",
	"<ds{d}ipcil{cpsfil[6]slfifc}{jifsc}lf>",
	"{ji{p}fd<sls>}",
	"{pjcfsj}",
	"{{pjcfsj}c}",
	"<jpjffdipp>",
	"{dpcccpdfffpc}",
	"<cpddlcl>",
	"{pdlfsfjlcfdf}",
	"<p[1]sjdljl>",
	"<dlilljcsls>",
	"{lljic}",
	"{isc{pdlfsfjlcfdf}sij<p[1]sjdljl><dlilljcsls>s{lljic}s}",
	"<dpjsisjisl>",
	"<isilijplcsd[6]d>",
	"{icp<dpjsisjisl><j>d<isilijplcsd[6]d>f}",
	"<ssldddfjip>",
	"<<ssldddfjip>>",
	"<djl{icp<dpjsisjisl><j>d<isilijplcsd[6]d>f}<<ssldddfjip>>isiljs<is>>",
	"<lllclpccpdsj>",
	"<jp>",
	"<dj<jp>>",
	"<jfpcjcpd<dj<jp>>dfi>",
	"<fldlfdppcp>",
	"<fpfsi>",
	"<<fldlfdppcp>i<fpfsi>ls>",
	"{l<<fldlfdppcp>i<fpfsi>ls>f}",
	"<jj[1]jl>",
	"{spi<jj[1]jl>c[10]dlfsp[8]}",
	"<ijpfdiscl>",
	"{ldf}",
	"<cpf{s}<ijpfdiscl>pidf{ldf}ls>",
	"{il}",
	"<scc>",
	"{ii{il}p[14]pllpfps<scc>}",
	"<ljdifi[13]jl>",
	"{jlspidsls}",
	"<cflsi>",
	"{<ljdifi[13]jl>p{jlspidsls}d<cflsi>sjfd[9]jjf}",
	"{ffsfcfd}",
	"<pd[2]fssfpidfip[9]>",
	"<ffs<pd[2]fssfpidfip[9]>f>",
	"<{<ljdifi[13]jl>p{jlspidsls}d<cflsi>sjfd[9]jjf}{ffsfcfd}jllc<ffs<pd[2]fssfpidfip[9]>f>fcllc>",
	"{lsdcc[16]fs}",
	"{ipjf}",
	"{spl}",
	"{{lsdcc[16]fs}{ipjf}l{spl}lpjfi[12]}",
	"<llcf>",
	"<cpljssdc<llcf>dll>",
	"{iscllsfjflp}",
	"{ild}",
	"<cddpd>",
	"<sdd>",
	"<pclpd{iscllsfjflp}sjp{ild}<cddpd><sdd>>",
	"{pl{{lsdcc[16]fs}{ipjf}l{spl}lpjfi[12]}<cpljssdc<llcf>dll><pclpd{iscllsfjflp}sjp{ild}<cddpd><sdd>>ldl}",
	"<pljs>",
	"<dpsldsdspdss>",
	"{pfilsilidscj}",
	"<<pljs><dpsldsdspdss>{pfilsilidscj}pfcddpcjj>",
	"{ljfcdd[16]sjslcd}",
	"{jlijssiflfdj}",
	"{icfl{ljfcdd[16]sjslcd}jcjsj{jlijssiflfdj}f}",
	"<p[12]lcplcipsffs>",
	"<fs{c}fppisjjj<p[12]lcplcipsffs>>",
	"{lp<<pljs><dpsldsdspdss>{pfilsilidscj}pfcddpcjj>pj{icfl{ljfcdd[16]sjslcd}jcjsj{jlijssiflfdj}f}<fs{c}fppisjjj<p[12]lcplcipsffs>>ff}",
	"<clll>",
	"{fdj}",
	"<disf>",
	"{iip<clll><c>{fdj}p<disf>dcld}",
	"<sidippliljsi>",
	"<idfcsl>",
	"<cpdsl[2]<sidippliljsi>jffi{j}<idfcsl>>",
	"{j<jj>j}",
	"{<cpdsl[2]<sidippliljsi>jffi{j}<idfcsl>>pipdifd{j<jj>j}cji}",
	"{ficsddpi}",
	"{iilcdddl}",
	"<<c>jc{iilcdddl}cci>",
	"<{sp}[2]<<c>jc{iilcdddl}cci>jjiic>",
	"{d<i>s<jf>pd}",
	"<pidfjdjpcis>",
	"{jfdpsjsdpcjs}",
	"{ffls}",
	"<jd>",
	"{isdds<s>i<jd>fi}",
	"<scps{isdds<s>i<jd>fi}fj>",
	"{ijllc}",
	"<dlpcsdldf>",
	"{p{ijllc}<dlpcsdldf>fsfsicppj}",
	"{djj}",
	"<ss{djj}{lf}s>",
	"{sclpp}",
	"{pjlflilidfpp}",
	"{icl}",
	"<pc{sclpp}{pjlflilidfpp}spjjcjc{icl}>",
	"<pi>",
	"<isdcccij>",
	"<jpsp<isdcccij>>",
	"{lpcp[10]p[14]spfdpjc}",
	"<dpllf>",
	"<d{lpcp[10]p[14]spfdpjc}<f><dpllf>>",
	"{fcpfjccdjlsc}",
	"<sj>",
	"<{j}>",
	"{fsidscplfcjc}",
	"<sc>",
	"{csdfdfldlff}",
	"{d{fsidscplfcjc}is<sc>f{csdfdfldlff}lcsl[6]p}",
	"<cclpip>",
	"<psjccidfsdil>",
	"<l[1]sddlf>",
	"<pc<cclpip><psjccidfsdil>iidlpp<l[1]sddlf>j>",
	"{ciddclp}",
	"{{ciddclp}}",
	"{l<pc<cclpip><psjccidfsdil>iidlpp<l[1]sddlf>j>d{{ciddclp}}ic}",
	"<pfjljlpdf[14]ppj>",
	"{fjdflj}",
	"{cfcj[2]<pi>js{fjdflj}[9]ipcj}",
	"<sclil>",
	"{sdflpij[10]lddjd}",
	"{cdjfpcdl}",
	"{cj}",
	"{{sdflpij[10]lddjd}d{cdjfpcdl}{cj}l}",
	"<dds>",
	"{fipjjil}",
	"<plldd<dds>ilpd{fipjjil}>",
	"<<plldd<dds>ilpd{fipjjil}>>",
	"<scijffislp>",
	"<sfpscc[5]d>",
	"<pjfpcffjlddf>",
	"{<sfpscc[5]d>d<pjfpcffjlddf>}",
	"{f[11]si}",
	"{cdjp}",
	"<sli>",
	"{ljfflf}",
	"<jdjcld>",
	"<ipd>",
	"{fjsji}",
	"<pclcdjf[3]jcsps>",
	"<{ljfflf}cd<jdjcld>idcc<ipd>{fjsji}<pclcdjf[3]jcsps>>",
	"<<sli>di[16]<{ljfflf}cd<jdjcld>idcc<ipd>{fjsji}<pclcdjf[3]jcsps>>fpl>",
	"{cipci}",
	"{ilfj}",
	"{sd}",
	"<{sd}ip>",
	"<pdiccjllscpf>",
	"{fpcljcfilf[11]is}",
	"<l{fpcljcfilf[11]is}>",
	"<csslppjjd>",
	"{ci}",
	"{<csslppjjd>dcliipcscj{ci}}",
	"{l{<csslppjjd>dcliipcscj{ci}}ipi{d}}",
	"{cfsc}",
	"{scpispj}",
	"<sipifcj>",
	"<ffdi>",
	"{f<ffdi>j}",
	"<icl>",
	"{ifd<icl>iljli[4]ipl}",
	"<jiijp>",
	"{ffj[7]}",
	"<p[6]p{lp}dis<jiijp>{ffj[7]}jdil>",
	"{{ifd<icl>iljli[4]ipl}<p[6]p{lp}dis<jiijp>{ffj[7]}jdil>i}",
	"{fjpflcspsjsp}",
	"<p[3]>",
	"{psldpjlscpsd}",
	"<ispj>",
	"<cjdjdpji>",
	"<li[4]df>",
	"{<ispj>jjj<cjdjdpji>sdsfpj<li[4]df>}",
	"{siccfcscjjlc}",
	"{lfijpii}",
	"<spdfp>",
	"{icsiispscjd}",
	"<jfsfisl>",
	"{cfccfjpjssj}",
	"<sspfpc{cfccfjpjssj}c{d}>",
	"{cdi<sspfpc{cfccfjpjssj}c{d}>scffilps}",
	"<iji>",
	"<dipcs[6]>",
	"<cjs>",
	"{jslsjsjlfc}",
	"<{jslsjsjlfc}[14]>",
	"{icpcplj[14]lsplj}",
	"<ddldc>",
	"<ppdjppsppssf>",
	"<jcpddddpfpcs>",
	"{dlsflcsspisf}",
	"{<ddldc>ji<ppdjppsppssf>csisl<jcpddddpfpcs>l{dlsflcsspisf}}",
	"<ldccd[5]fpjjdjc>",
	"{cjip}",
	"{fl<ldccd[5]fpjjdjc>jsljifc{cjip}l}",
	"<f{<ddldc>ji<ppdjppsppssf>csisl<jcpddddpfpcs>l{dlsflcsspisf}}fp{fl<ldccd[5]fpjjdjc>jsljifc{cjip}l}j>",
	"<liisccpjjflj>",
	"{jjdjcicil}",
	"<jffsi>",
	"<cfii>",
	"{c<jffsi>[7]jil<cfii>cpd}",
	"<jj[7]scffc[12]plpfd>",
	"<lipddd<jj[7]scffc[12]plpfd>fc>",
	"{j<lipddd<jj[7]scffc[12]plpfd>fc>}",
	"<dpd>",
	"<<dpd>d>",
	"<jiisidi>",
	"{clpiiffclfd}",
	"{ldp}",
	"{sf<jiisidi>{clpiiffclfd}{ldp}cddcffi}",
	"{sc}",
	"<lfclfpp>",
	"<jpp[3]ic[2]ssc>",
	"{j[12]dp}",
	"{ljsfjiplsdcp}",
	"<lpl{j[12]dp}f{ljsfjiplsdcp}il>",
	"{dfpdiilfj}",
	"{di[13]}",
	"{sp{di[13]}cccic}",
	"<sfs>",
	"<fd<sfs>ip<f><jp>p>",
	"{d<c>fpjiddlp}",
	"<{sp{di[13]}cccic}d<fd<sfs>ip<f><jp>p>c{d<c>fpjiddlp}cppdsdc>",
	"{ilcijdiifffp}",
	"{jddlddf[11]cff}",
	"{cijsj}",
	"<jds>",
	"{ffdddscidfdj}",
	"<ip[2]liflffci>",
	"<cpdcp[1]>",
	"<{jddlddf[11]cff}{cijsj}l<jds>f{ffdddscidfdj}[13]d<ip[2]liflffci><cpdcp[1]>iii>",
	"<cljfsiplfii>",
	"{ci<cljfsiplfii>sl<f>lip<i>d}",
	"<isc{ci<cljfsiplfii>sl<f>lip<i>d}lc{pd}si>",
	"<pl[4]flsffpicpl>",
	"{pfcicspcps}",
	"{sdlildd<pl[4]flsffpicpl>pl{pfcicspcps}p}",
	"{ddlsfidcjppd}",
	"<sjjsjpjidd>",
	"{fisiicllcici}",
	"{isjlfcscidlj}",
	"{clp<sjjsjpjidd>j{fisiicllcici}lfjp{isjlfcscidlj}c}",
	"{ic<s>}",
	"{jdsjcpi}",
	"{pfp}",
	"{flldpc{jdsjcpi}fc{pfp}}",
	"<dpplpdjpjjf[9]c>",
	"<sipics[10]illclf>",
	"{iddcdli}",
	"{ddlfpj}",
	"{<sipics[10]illclf>s{iddcdli}[2]jdf{ddlfpj}c<jd>ci<id>}",
	"{pcjlsdcjl}",
	"<idclc>",
	"{ddif{pcjlsdcjl}pi<idclc>ijfs}",
	"{pdjssd}",
	"{sdpllcdpdiji}",
	"{lpcslp{sdpllcdpdiji}jcdis}",
	"{fplpsc[6]icjfcj}",
	"<{fplpsc[6]icjfcj}sfs>",
	"{{ddif{pcjlsdcjl}pi<idclc>ijfs}ffc{pdjssd}{lpcslp{sdpllcdpdiji}jcdis}s<{fplpsc[6]icjfcj}sfs>f}",
	"<fjipflpcd>",
	"<pf>",
	"{djps<pf>}",
	"<fcc[10]didcffl[1]j[10]l>",
	"<lp[1]cfsfi>",
	"<s<lp[1]cfsfi>jsf>",
	"{idlspcliiscj}",
	"<ic>",
	"{scciffsdifcl}",
	"<iispfp>",
	"{sj{idlspcliiscj}<ic>s{scciffsdifcl}f<iispfp>}",
	"{{sj{idlspcliiscj}<ic>s{scciffsdifcl}f<iispfp>}c[2]lcppsdjspp}",
	"{sdlfij}",
	"<{sdlfij}sld>",
	"<ljjlcslsisds>",
	"<jlicsdjid[8]jji>",
	"{p[8]lifdl}",
	"<jcpij>",
	"{fllscp[12]}",
	"<cfcis>",
	"{<ljjlcslsisds>f<jlicsdjid[8]jji>{p[8]lifdl}i<jcpij>fj{fllscp[12]}c<cfcis>f}",
	"<dspdllcp>",
	"<ifpfsdds[1]splj>",
	"{dcif}",
	"<c<ifpfsdds[1]splj>sii<i>cc{dcif}cfd>",
	"<jfijifisdli[6]s>",
	"<isiilfp>",
	"<pd<jfijifisdli[6]s>ididcijj<isiilfp>>",
	"{cd{<ljjlcslsisds>f<jlicsdjid[8]jji>{p[8]lifdl}i<jcpij>fj{fllscp[12]}c<cfcis>f}d<dspdllcp><c<ifpfsdds[1]splj>sii<i>cc{dcif}cfd>pll<pd<jfijifisdli[6]s>ididcijj<isiilfp>>{l}p}",
	"<lfc[7]ipisf[12]ccsf>",
	"{dpssds}",
	"<<lfc[7]ipisf[12]ccsf>ijicccp{dpssds}>",
	"{ls}",
	"<fps[12]s{ls}pdjd>",
	"{js<<lfc[7]ipisf[12]ccsf>ijicccp{dpssds}>fljcff<fps[12]s{ls}pdjd>cs}",
	"<i[10]>",
	"{ilsd}",
	"<ddcljdccdcci>",
	"<filpsslc[3]fifi>",
	"<dpldpcdispsj>",
	"{s{ilsd}<ddcljdccdcci><filpsslc[3]fifi>csjlspj<dpldpcdispsj>}",
	"<pjdcd{il}fl>",
	"<jfcp[6]pf{s{ilsd}<ddcljdccdcci><filpsslc[3]fifi>csjlspj<dpldpcdispsj>}<pjdcd{il}fl>dfs[15]j>",
	"<lilpj>",
	"{ic<lilpj>sfspsdjll}",
	"<{ic<lilpj>sfspsdjll}lfislssplpc>",
	"<p[11]llpcsfc>",
	"{cpicccffpdip}",
	"{jfccs<p[11]llpcsfc>s<j>idj{cpicccffpdip}}",
	"<scpfddfjji{jfccs<p[11]llpcsfc>s<j>idj{cpicccffpdip}}>",
	"<idpc>",
	"<<idpc>f<sc>l>",
	"{dld}",
	"{jilcijps[7]jc<sj>f}",
	"<sfj[14]pijl>",
	"{ddfssfl[8]s[15]pf}",
	"{<sfj[14]pijl>l{ddfssfl[8]s[15]pf}}",
	"<{c}cildlsp{jilcijps[7]jc<sj>f}{<sfj[14]pijl>l{ddfssfl[8]s[15]pf}}ld>",
	"<clcfdfdip>",
	"{psijidici}",
	"{js{psijidici}}",
	"<sjcssj>",
	"<dcjcdifilcfc>",
	"<dcif[9]cdcljsif>",
	"{i<sjcssj>c[4]<dcjcdifilcfc>d<dcif[9]cdcljsif>ll}",
	"{sfpf}",
	"{f{sfpf}lpidppcpff}",
	"<c{js{psijidici}}dsdc{i<sjcssj>c[4]<dcjcdifilcfc>d<dcif[9]cdcljsif>ll}ffc{f{sfpf}lpidppcpff}l>",
	"{ciciflf[8]liijl}",
	"<sjddc{ciciflf[8]liijl}l<ii>iffc>",
	"{iddfdfcsj}",
	"{clfdjdp}",
	"{pj[8]clf}",
	"<dd{clfdjdp}{pj[8]clf}[4]clissclc>",
	"{lcjsiifdp[2]pd[13]f}",
	"{isldfjsdcccs}",
	"<ipc[11]ifiip>",
	"{cf{lcjsiifdp[2]pd[13]f}f{isldfjsdcccs}sp<ipc[11]ifiip>}",
	"{jp}",
	"<l<dd{clfdjdp}{pj[8]clf}[4]clissclc>cj{cf{lcjsiifdp[2]pd[13]f}f{isldfjsdcccs}sp<ipc[11]ifiip>}jjd{jp}>",
	"<filc>",
	"{ildc}",
	"<jsljlpfjfs>",
	"{ccpcdl<filc>{ildc}<jsljlpfjfs>llp}",
	"{pplplfcd}",
	"<p{pplplfcd}jfdj>",
	"{fds}",
	"{ccs}",
	"<jl{fds}jfifjf{ccs}pd>",
	"<sps[12]ijd<jl{fds}jfifjf{ccs}pd>di>",
	"<fippidjddf>",
	"<diddpjpdlcji>",
	"{fjp}",
	"<lfcld>",
	"{c<pf>lcj}",
	"{sdfcs}",
	"<{c<pf>lcj}f{sdfcs}pi[6]i{sj}dscdp>",
	"<dlsf[11]scdfl>",
	"<ilcl[14]jspdcppi>",
	"{ijdjlflijfjc}",
	"{jp<j><sc>i<ilcl[14]jspdcppi>jl{ijdjlflijfjc}jii}",
	"{sfdsdl}",
	"<ppfdpljlfjd>",
	"{sjlldd{sfdsdl}<ppfdpljlfjd>ispj}",
	"{cfj}",
	"<ssfscsdp{cfj}ipp>",
	"<ssfdf>",
	"<icf>",
	"<cpfpccl<ssfdf>j<icf>js>",
	"<fsp{jp<j><sc>i<ilcl[14]jspdcppi>jl{ijdjlflijfjc}jii}sicl[14]{sjlldd{sfdsdl}<ppfdpljlfjd>ispj}<ssfscsdp{cfj}ipp><cpfpccl<ssfdf>j<icf>js>f>",
	"{psff}",
	"{{psff}s}",
	"{{d}i}",
	"<dfpjsfcspp>",
	"{pp{i}<l><dfpjsfcspp>jjcpd}",
	"{slifi}",
	"{cffipsdcfipp}",
	"{pl}",
	"{ii[7]ii}",
	"<d{slifi}{cffipsdcfipp}sdffpp<s>{pl}{ii[7]ii}>",
	"{s[7]djdfjdcjjs}",
	"{c[12]ddccs}",
	"{lfjsppssiilp}",
	"<lfjd>",
	"{i{s[7]djdfjdcjjs}l{c[12]ddccs}pcii{lfjsppssiilp}pf<lfjd>}",
	"<piccjpjf>",
	"{di}",
	"<dl<piccjpjf>[5]l<s>cl{di}diid>",
	"<pfiid>",
	"<c<pfiid>p>",
	"{pdjffjsi}",
	"{cf{pdjffjsi}ccl}",
	"{<d{slifi}{cffipsdcfipp}sdffpp<s>{pl}{ii[7]ii}>[5]l{i{s[7]djdfjdcjjs}l{c[12]ddccs}pcii{lfjsppssiilp}pf<lfjd>}idi<dl<piccjpjf>[5]l<s>cl{di}diid><c<pfiid>p>c{cf{pdjffjsi}ccl}cp}",
	"<dllcddllcsji>",
	"{s[3]d}",
	"<{j}cipidp>",
	"<dssfjcj{s[3]d}{c}i<{j}cipidp>f>",
	"{dpsiddcfdddd}",
	"{pjlp[13]difsiffs}",
	"<ipdcp[13]ldljjl>",
	"<sjscpiisci>",
	"<pldlfs>",
	"{{pjlp[13]difsiffs}[16]<ipdcp[13]ldljjl>d<p>i<sjscpiisci>dlsp<pldlfs>f}",
	"{{{pjlp[13]difsiffs}[16]<ipdcp[13]ldljjl>d<p>i<sjscpiisci>dlsp<pldlfs>f}ps<p>jcsdd}",
	"{ssfdpccsccis}",
	"{cpljcijipsff}",
	"{lds}",
	"{f<ccf>s{ssfdpccsccis}ii{cpljcijipsff}{lds}i[5]fp}",
	"<jdj[14]jllsij>",
	"{sl<jdj[14]jllsij>pc}",
	"{ssj}",
	"{j<j>p}",
	"<{f<ccf>s{ssfdpccsccis}ii{cpljcijipsff}{lds}i[5]fp}{sl<jdj[14]jllsij>pc}pl{ssj}clc{j<j>p}pjs>",
	"{dji{c}ij}",
	"{cip}",
	"{cdpcpiljfsjs}",
	"{l[13]i}",
	"<spjcd>",
	"{llpf{cdpcpiljfsjs}c{l[13]i}lpd<spjcd>l}",
	"{dc}",
	"<ddflf{dji{c}ij}{cip}j{llpf{cdpcpiljfsjs}c{l[13]i}lpd<spjcd>l}{dc}fj>",
	"<cdiscfscsfpf>",
	"{slilldc[16]dsspj}",
	"{jsi}",
	"{s<cdiscfscsfpf>didp{slilldc[16]dsspj}jpii{jsi}}",
	"<jsjlc>",
	"{dfcllcpclsl[3]d}",
	"<s[6]cjccls>",
	"{pf<jsjlc>ijc{dfcllcpclsl[3]d}slcc<s[6]cjccls>}",
	"<ljlf{s<cdiscfscsfpf>didp{slilldc[16]dsspj}jpii{jsi}}{pf<jsjlc>ijc{dfcllcpclsl[3]d}slcc<s[6]cjccls>}jcdiii>",
	"<ccpj>",
	"<fijsisfljsij>",
	"<l[13]dffpslslcsl[16]>",
	"{dd<fijsisfljsij>f<l[13]dffpslslcsl[16]>}",
	"{{dd<fijsisfljsij>f<l[13]dffpslslcsl[16]>}}",
	"{lddjip}",
	"<ifdc{lddjip}>",
	"{fdd}",
	"<{fcs}ffccii{fdd}f>",
	"{dis}",
	"{p[2]fpdi[12]i}",
	"{fs[13]lf{p}pp{p[2]fpdi[12]i}fppl}",
	"{pppcdcss}",
	"<spjfplp>",
	"<dflsis<spjfplp>>",
	"<lpjs[3]illflppj>",
	"<dicj[10]pccjs>",
	"<dclscdpfc<lpjs[3]illflppj>s<dicj[10]pccjs>>",
	"<jd[6]>",
	"<ils>",
	"<sds>",
	"<jsffcip>",
	"{<ils><sds><jsffcip>ljdspjl}",
	"<cfpp>",
	"{jlsssippdcpp}",
	"{{jlsssippdcpp}lcijpcifpc}",
	"<slfd>",
	"{llpsjpdsijf}",
	"{ls<sds>sdj{llpsjpdsijf}lfpsf}",
	"<<slfd>cs{ls<sds>sdj{llpsjpdsijf}lfpsf}flp>",
	"<cpfsjif[16]pj>",
	"<llplds[7]sccsdl>",
	"{<cpfsjif[16]pj>pcffp<llplds[7]sccsdl>iccff}",
	"{ffpp{<cpfsjif[16]pj>pcffp<llplds[7]sccsdl>iccff}f}",
	"<idcddfcfcfdd>",
	"<cpsplfdsiil>",
	"{flf}",
	"<cdsc{flf}is>",
	"<ppipdjf[3]sssdp>",
	"{jpljc}",
	"{pl<ppipdjf[3]sssdp>{jpljc}}",
	"<dpcpfjsdlli[4]j>",
	"<<cdsc{flf}is>p[9]pp{pl<ppipdjf[3]sssdp>{jpljc}}pp<dpcpfjsdlli[4]j>dj>",
	"<pdpjlldp[8]cjpd>",
	"{lfci}",
	"{f<j>fcci<pdpjlldp[8]cjpd>ccs{lfci}c}",
	"<ilplj>",
	"<c<ilplj>>",
	"{slpcji}",
	"<ldf{slpcji}<jjl>ipp>",
	"<ps<c<ilplj>>fflffjs<ldf{slpcji}<jjl>ipp>j>",
	"<slljcjljdsji>",
	"<d<slljcjljdsji>cjjcillf[9]jd>",
	"<jspild>",
	"{p[12]sii}",
	"<didflis[14]ssfjs>",
	"{cilpli}",
	"{pfffj}",
	"{plslcsdcs}",
	"<dfifisj[3]c>",
	"{jiil<dfifisj[3]c>cppspl}",
	"{ljd{jiil<dfifisj[3]c>cppspl}cp}",
	"<jds[15]cp>",
	"{sissfdiss}",
	"<lfifpfdd[3]idci>",
	"<c{sissfdiss}dl<lfifpfdd[3]idci>sii<ip>>",
	"<fidp>",
	"<icplljpfc>",
	"<cdfsi>",
	"{s[13]}",
	"<dsi{s[13]}pj>",
	"{sf}",
	"{jpslsdsfs}",
	"<s{jpslsdsfs}[14]spdpijfifc>",
	"<ld>",
	"{sjjcfss}",
	"{li}",
	"{fjdlssjci}",
	"<ccp<ld><sp><pp>ii{sjjcfss}{li}{fjdlssjci}s>",
	"<lj<c>ccpccll<l>d>",
	"{fi<ccp<ld><sp><pp>ii{sjjcfss}{li}{fjdlssjci}s>fspc<lj<c>ccpccll<l>d>clss}",
	"{lfpis}",
	"{pdsdpdl}",
	"<ic[10]cccfl>",
	"{c[4]s}",
	"<c<ic[10]cccfl>ijpj{c[4]s}p{l}>",
	"{pdsppsd}",
	"<fsccifpffjfd>",
	"{lsip}",
	"{dfiiiijip[5]fpc}",
	"<{pdsppsd}p<fsccifpffjfd>d{lsip}csp{dfiiiijip[5]fpc}cil>",
	"{fppc[9]illlfscl}",
	"{fdlpcsfldsjl}",
	"{{fdlpcsfldsjl}l[15]i[5]fc}",
	"<fjccdc[3]>",
	"{{{fdlpcsfldsjl}l[15]i[5]fc}<fjccdc[3]>[1]icjf}",
	"<sflcjlppjl[16]ij>",
	"{fclslccfldcf}",
	"<jfcs>",
	"{<sflcjlppjl[16]ij>fi{fclslccfldcf}<jfcs>f{i}cpj}",
	"{{<sflcjlppjl[16]ij>fi{fclslccfldcf}<jfcs>f{i}cpj}spci}",
	"<cics>",
	"<dipsplljij>",
	"{ipjjcd}",
	"{p<cics><dipsplljij>jd{ipjjcd}flisil}",
	"{ldfij}",
	"<slfcllipcl>",
	"{ds}",
	"{ipjifdpf}",
	"{lpisfllsc}",
	"{{c}sc{ds}{ipjifdpf}cid[3]{lpisfllsc}jdf}",
	"<jssf>",
	"{pfjijfcfjpcj}",
	"{sslccd[2]sl}",
	"<pfippsfsdifp>",
	"<cfjjjidcp>",
	"{p{pfjijfcfjpcj}i{sslccd[2]sl}cdsj<pfippsfsdifp>i<cfjjjidcp>p}",
	"<iddcfjspc>",
	"<fljdpific[7]ps>",
	"{cicdcsl<iddcfjspc>pf<fljdpific[7]ps>f}",
	"{flpplfsjjd{cicdcsl<iddcfjspc>pf<fljdpific[7]ps>f}i}",
	"{lfl[7]lljccdlsc}",
	"{fipdplcillsi}",
	"<cdcdiiiidcp>",
	"<ff[15]ffcf>",
	"{cl}",
	"<difl{d}p>",
	"<cflllffjppjl>",
	"<ljildjf>",
	"{d<cflllffjppjl>lpfpi<ljildjf>djll}",
	"{if[15]ppsj{d<cflllffjppjl>lpfpi<ljildjf>djll}}",
	"{fpcs}",
	"<{fpcs}d{l}>",
	"<sdci[16]>",
	"{<{fpcs}d{l}>fpfl<sdci[16]>lcfps}",
	"{ilcsjpjj[9]plid}",
	"<dclcji>",
	"<<dclcji>sflliffijf<p>>",
	"<sd>",
	"{ffl<sd>sp}",
	"{jidjicd{ffl<sd>sp}jipj}",
	"<lp[8]iii>",
	"<sl{p}<lp[8]iii>jjcfp[11]ifp>",
	"{ipdli}",
	"<ssssj{ipdli}>",
	"<jpfcslppplfj>",
	"{cdcfj}",
	"{fssdl[14]lsls<jpfcslppplfj>c{cdcfj}}",
	"{fccd[15]<sl{p}<lp[8]iii>jjcfp[11]ifp><ssssj{ipdli}>idcj{fssdl[14]lsls<jpfcslppplfj>c{cdcfj}}i}",
	"<ljilcill[15]isij>",
	"<pplfp<ljilcill[15]isij>csp>",
	"<iclsssdsfisd>",
	"{plsd}",
	"{sjc}",
	"<spp[15]>",
	"{ffppjlcp{sjc}i<spp[15]>f}",
	"{lilsl}",
	"{{lilsl}iildd}",
	"<l[1]cifld{plsd}{ffppjlcp{sjc}i<spp[15]>f}df{{lilsl}iildd}s>",
	"{jcifsjjsipds}",
	"<djfplsc{jcifsjjsipds}<j>i>",
	"<j[9]sjisppls>",
	"{lcfcj}",
	"{jpdji[10]fdllidp}",
	"{ljc<p>i{lcfcj}ccp{jpdji[10]fdllidp}fd}",
	"<pilijfcfplsi>",
	"{ccl}",
	"<ipfjijljpfsj>",
	"<<pilijfcfplsi>{ccl}l<ipfjijljpfsj>>",
	"<dcjcdccl>",
	"<fcppp>",
	"{fiic<dcjcdccl>ll<fcppp>cdsj}",
	"<liip>",
	"<jlspi>",
	"{pspipjp<jlspi>icdp}",
	"<ifspiss{fiic<dcjcdccl>ll<fcppp>cdsj}<liip>c{pspipjp<jlspi>icdp}d>",
	"<<fd>ilj>",
	"<pj<<fd>ilj>pf>",
	"<fdpdfdljjp>",
	"<sfffsfcsd>",
	"<ccpljjj[9]jilii>",
	"<sis[6]f<fdpdfdljjp>cijjf<sfffsfcsd><ccpljjj[9]jilii>>",
	"{scp}",
	"<pj{scp}pf>",
	"<spfjjs[3]>",
	"{sfjlsslddjlj}",
	"<fdll{sfjlsslddjlj}l>",
	"{jcjcfdpd}",
	"<pic>",
	"{fsjic[6]sidfpfp}",
	"{sd[8]jsi{jcjcfdpd}<pic>l{fsjic[6]sidfpfp}psl}",
	"{iifpli}",
	"{sdd}",
	"<s<d>ij>",
	"<djlc>",
	"<spc<djlc>jplc>",
	"{jii}",
	"{dcpp}",
	"<fijdfsl>",
	"<{jii}fij{dcpp}<fijdfsl>il[12]jc>",
	"<fdidsiddp>",
	"{lfdpdd{l}<fdidsiddp>}",
	"<flfjfs<{jii}fij{dcpp}<fijdfsl>il[12]jc><dj>c{lfdpdd{l}<fdidsiddp>}sf[9]>",
	"{sidijc}",
	"<dffpii{fdd}<s>p{sidijc}fs>",
	"{<dffpii{fdd}<s>p{sidijc}fs>fs}",
	"{pff}",
	"<lpsljljjicf{pff}>",
	"{cisji}",
	"{jsfppclpllfd}",
	"<pjlippj{cisji}{jsfppclpllfd}[15]ij{f}>",
	"{picijpdp}",
	"{dcifdi}",
	"{lcs}",
	"<pcdjjc>",
	"<pj{picijpdp}dic{dcifdi}c{lcs}d<pcdjjc>[15]d>",
	"{{ff}d}",
	"{ilfjficidfpp}",
	"<fddi{ilfjficidfpp}isjijff>",
	"<fp<lpsljljjicf{pff}>l<pjlippj{cisji}{jsfppclpllfd}[15]ij{f}><pj{picijpdp}dic{dcifdi}c{lcs}d<pcdjjc>[15]d>l{{ff}d}ff<fddi{ilfjficidfpp}isjijff>p>",
	"<fpcj>",
	"{ifdi}",
	"{cc[7]cs}",
	"{<fpcj>{s}ijs[3]c{ifdi}cd{cc[7]cs}l[1]}",
	"{ccpc}",
	"<ldfj>",
	"{ddijclfjsjjl}",
	"{pip}",
	"{{ddijclfjsjjl}cl<s>c{pip}dlii}",
	"{sfj[13]fpcdfilfp}",
	"<ssj>",
	"{ljcfi<ssj>pf}",
	"{pfjsji}",
	"{pdsllpsfddfl}",
	"<{cldc}jddj{pdsllpsfddfl}jssc>",
	"{lccp{pfjsji}iili<{cldc}jddj{pdsllpsfddfl}jssc>ff}",
	"{p[5]fldcdilcdcs}",
	"{ccc}",
	"<pfs{p[5]fldcdilcdcs}{if}<d>p{ccc}d[11]ifi>",
	"{jpcsi<pfs{p[5]fldcdilcdcs}{if}<d>p{ccc}d[11]ifi>cfpffs}",
	"<flscpll[10]pp[11]cpd>",
	"{cis[14]ldsscji[8]pi}",
	"{idjspfdc}",
	"<c{l}sc{cis[14]ldsscji[8]pi}ld{idjspfdc}p>",
	"<pj[1]>",
	"<iddldp>",
	"<jsfllpispfcl>",
	"{iip}",
	"<ipdi[14]cjld>",
	"<<i>i<iddldp>jlp<jsfllpispfcl>{iip}[14]sif<ipdi[14]cjld>>",
	"<cdfsij[13]ss>",
	"{d<<i>i<iddldp>jlp<jsfllpispfcl>{iip}[14]sif<ipdi[14]cjld>><cdfsij[13]ss>}",
	"<ccppisj>",
	"<cldjj>",
	"{sfll<i><cldjj>llcdci}",
	"{ildfjiccps}",
	"<j[2]lp>",
	"{lpsf}",
	"{jlj<j[2]lp>ljsj[6]f{lpsf}sf}",
	"{if{jlj<j[2]lp>ljsj[6]f{lpsf}sf}pcpc}",
	"<fpf>",
	"{ifiddjlj}",
	"{<sc>dlpflcflsl{ifiddjlj}}",
	"<scflsis>",
	"<jipdc>",
	"{cijclpfjjdpj}",
	"<dsljf>",
	"{dlll[7]l{cijclpfjjdpj}lif<dsljf>pd}",
	"{sjdpicid}",
	"{jpiipfcfc}",
	"<d<jf>jl[11]lsj{jc}{sjdpicid}{jpiipfcfc}>",
	"<pffccc>",
	"<fsl>",
	"<fdcdjpi>",
	"{f<pffccc><fsl><fdcdjpi>psj}",
	"{<jipdc>ii[3]i{dlll[7]l{cijclpfjjdpj}lif<dsljf>pd}cs<d<jf>jl[11]lsj{jc}{sjdpicid}{jpiipfcfc}>jjj{f<pffccc><fsl><fdcdjpi>psj}}",
	"{pljp[6]jijfcddi}",
	"<flscsfjdlcpp>",
	"<{pljp[6]jijfcddi}<flscsfjdlcpp>>",
	"<ff>",
	"{jj}",
	"<{jj}cccfl>",
	"{jfpl}",
	"{cllpfifcp}",
	"<ds{ci}{cllpfifcp}ssplijfj>",
	"<ijilfiipfscc>",
	"<cflic<ijilfiipfscc>cipij>",
	"<{jfpl}dflcil<ds{ci}{cllpfifcp}ssplijfj><cflic<ijilfiipfscc>cipij>>",
	"<jsfpsffdccc>",
	"<lfcfliisscs>",
	"<iddpfljpjp>",
	"<<lfcfliisscs>jjicfsjd{l}f<iddpfljpjp>>",
	"{pfccfjcscijj}",
	"<jpfsd>",
	"{f{pfccfjcscijj}<jpfsd>lpd}",
	"<jilcfji{f{pfccfjcscijj}<jpfsd>lpd}>",
	"{cpiljldidf}",
	"<pdjlij[9]fcpfjd>",
	"{<pdjlij[9]fcpfjd>lp}",
	"{sp{<pdjlij[9]fcpfjd>lp}p}",
	"<l[15]icl>",
	"{jds}",
	"{fdcpssf[11]cd{jds}sp}",
	"{sc<f>sdi}",
	"{sislpjsidjid}",
	"{pclssisilfll}",
	"{sldijflljjsl}",
	"<fs>",
	"<ipf[1]fi{sislpjsidjid}d[1]c{pclssisilfll}l{sldijflljjsl}<fs>>",
	"{lcspf}",
	"<s{lcspf}jj>",
	"{d{if}l}",
	"<pljf>",
	"<ljjiiidipc>",
	"<lsdissdscspp>",
	"{llcjcpdispsc}",
	"<cicjldli>",
	"{<ljjiiidipc>sscs<lsdissdscspp>s{llcjcpdispsc}l[10]<cicjldli>id}",
	"<sddsj[6]illjdfi>",
	"{sipdcfff}",
	"{s<sddsj[6]illjdfi>sjd{sipdcfff}ssspid}",
	"<jljj<pljf>{<ljjiiidipc>sscs<lsdissdscspp>s{llcjcpdispsc}l[10]<cicjldli>id}i{s<sddsj[6]illjdfi>sjd{sipdcfff}ssspid}islc>",
	"<idjjpsdijfij>",
	"<fpl>",
	"<cfpiifjf[9]sfsj>",
	"<dd>",
	"<<idjjpsdijfij><fpl>i<cfpiifjf[9]sfsj>sjp<dd>pf>",
	"{iccs}",
	"<cilpjjlci>",
	"{f<cilpjjlci>j}",
	"<p{f<cilpjjlci>j}s>",
	"{pidjljcfidds}",
	"{sljdjjidssfd}",
	"<jllj>",
	"<jc>",
	"{cddlsddjfc}",
	"<ic{pidjljcfidds}{sljdjjidssfd}d<jllj><jc>ljis{cddlsddjfc}>",
	"{sspdfsi}",
	"{s{sspdfsi}<jf>}",
	"<fjf>",
	"<fpjf>",
	"<<l>{jl}<sc>dcc<fpjf>csf>",
	"{psj}",
	"<lp>",
	"<fiiilfcspcsp>",
	"<ds[4]<i><fiiilfcspcsp>>",
	"<jjpdccildiii>",
	"{ijsj}",
	"{cpjplcfd}",
	"{f[12]cfi<jjpdccildiii>{ijsj}p{cpjplcfd}lljs}",
	"<{f[12]cfi<jjpdccildiii>{ijsj}p{cpjplcfd}lljs}iiij>",
	"<pppcfssdcfl>",
	"{<pppcfssdcfl>}",
	"<ddjlpsddj>",
	"<cfp>",
	"{f[2]cjpspf<ddjlpsddj>sj<cfp>i}",
	"{ljlpl}",
	"{djdcpdfsf}",
	"<jcccc[13]l>",
	"<p{ljlpl}dlpc{djdcpdfsf}[9]<jcccc[13]l>lp>",
	"{cccclii}",
	"<picjjj{cccclii}p>",
	"{dijfdfp}",
	"{pps}",
	"{pdcjifcdl}",
	"{{dijfdfp}s<f>{pps}lc{pdcjifcdl}lpcds}",
	"<jii{f[2]cjpspf<ddjlpsddj>sj<cfp>i}<p{ljlpl}dlpc{djdcpdfsf}[9]<jcccc[13]l>lp>lpic<picjjj{cccclii}p>j{{dijfdfp}s<f>{pps}lc{pdcjifcdl}lpcds}>",
	"<pil>",
	"{si}",
	"<di>",
	"<{si}{si}<di>fc>",
	"{if<pil>llcls<{si}{si}<di>fc>fds}",
	"<diiscpcfpjpj>",
	"{fddc}",
	"<pc{fddc}lcdcp>",
	"<<d>s>",
	"{sslip}",
	"<pdc<pc{fddc}lcdcp>i<<d>s>cfsfs{sslip}>",
	"<diidildiljid>",
	"{ssflff}",
	"{iisjppfpsdfs}",
	"{pd{ssflff}{ls}c{iisjppfpsdfs}p}",
	"{{j}f<diidildiljid>pd{pd{ssflff}{ls}c{iisjppfpsdfs}p}sfiidd}",
	"{ccfccp}",
	"<ippjll>",
	"<psdscislllpi>",
	"<p{f}<ippjll><psdscislllpi>>",
	"<fpdd>",
	"{scs<fpdd>d}",
	"{sfi}",
	"<c{sfi}ldcclflpli[7]>",
	"<pid>",
	"<pcffplpsfjlp>",
	"{lii}",
	"<dld>",
	"<pppp>",
	"{d[8]psp}",
	"{<pid><pcffplpsfjlp>s[13]p{lii}<dld><pppp>jijj{d[8]psp}}",
	"<jl>",
	"{jsscjlpljf[15]}",
	"{<jl>{jsscjlpljf[15]}jcj}",
	"{jdlscsc<c{sfi}ldcclflpli[7]>{<pid><pcffplpsfjlp>s[13]p{lii}<dld><pppp>jijj{d[8]psp}}cd{<jl>{jsscjlpljf[15]}jcj}}",
	"<pdcfl>",
	"{fdccfjjs}",
	"{sl}",
	"{fcllddpc}",
	"<il<pdcfl>j{fdccfjjs}{sl}djcl{fcllddpc}s>",
	"<plciiljc>",
	"{s<plciiljc>fjfij}",
	"<dj<il<pdcfl>j{fdccfjjs}{sl}djcl{fcllddpc}s>s{s<plciiljc>fjfij}sljlfpf>",
	"{sfpcfidcd[3]fsd}",
	"{ccpldllcf{sfpcfidcd[3]fsd}i}",
	"{ij[8]iip}",
	"{jlpfdpdjpisp}",
	"{{ij[8]iip}sc{jlpfdpdjpisp}csfijjjc}",
	"<jjpcl{{ij[8]iip}sc{jlpfdpdjpisp}csfijjjc}sfslji>",
	"{jcdcjlpdiiid}",
	"<lissj>",
	"{f{jcdcjlpdiiid}p<lissj>fi}",
	"{fisfpsfiffcs}",
	"{{fisfpsfiffcs}djjd}",
	"{lci[14]dcppj}",
	"{{s}{c}{jd}ccsdilcf}",
	"{cfcpp}",
	"{jfsd}",
	"{jc[7]lspcci}",
	"{dl{cfcpp}lf{jfsd}jjss{jc[7]lspcci}c}",
	"<icd>",
	"{ijpsj<s><icd>}",
	"<cdjsflc>",
	"<dllildp>",
	"<{f}fcis>",
	"<jj[1]>",
	"<sjpjiljccij<jj[1]>>",
	"{s[7]i}",
	"{lscjljss}",
	"<pppfsjjsd>",
	"{{lscjljss}<pppfsjjsd>d}",
	"{djif{{lscjljss}<pppfsjjsd>d}dcjdfij}",
	"{j[2]pjfjs}",
	"{ccf{j[2]pjfjs}pi}",
	"{pspij}",
	"<jjsfidjsppli>",
	"{cji<jjsfidjsppli>fjpi}",
	"{pjpc}",
	"{ilcs}",
	"<d{pjpc}{ilcs}>",
	"<djfsii[2]scfdcd>",
	"<llds>",
	"<i<llds>dc>",
	"{f[2]j}",
	"<d{f[2]j}>",
	"<ljidpppcifff>",
	"<id<ljidpppcifff>jip>",
	"<dcjp<i<llds>dc><d{f[2]j}>jsi<id<ljidpppcifff>jip>fi>",
	"<idllfc>",
	"{ji<idllfc>sfpcsff{c}{p}}",
	"{<dl>jc{ji<idllfc>sfpcsff{c}{p}}<f>pldi}",
	"{ccjf}",
	"{dl[10]ifdi[14]i}",
	"<ldjjjpj<c>ii{ccjf}{dl[10]ifdi[14]i}>",
	"{lcdi<ldjjjpj<c>ii{ccjf}{dl[10]ifdi[14]i}>dd{if}ljfc}",
	"<pid<i>>",
	"<pjllfdslf>",
	"{s<pjllfdslf>ci}",
	"<li{p}p<pid<i>>{s<pjllfdslf>ci}cdijjl>",
	"<lscffpdfcdip>",
	"<ffll<lscffpdfcdip><s>sdcdjc>",
	"{ppdpciddddjl}",
	"<l<i><ic>c[8]{ppdpciddddjl}l>",
	"<jfljidsd[7]jp>",
	"{<l<i><ic>c[8]{ppdpciddddjl}l>ldjcfjcp<jfljidsd[7]jp>i}",
	"{pd[16]fffdpsffdp}",
	"{fcifdcsds[3]{pd[16]fffdpsffdp}jp}",
	"{lfdjcsf}",
	"{sjid[4]}",
	"<jfjpijdlspcj>",
	"<cci>",
	"{ipl}",
	"{f{sjid[4]}c<jfjpijdlspcj>jf[2]l<cci>dj{ipl}d}",
	"<cpsiss>",
	"<lipccjsdfij>",
	"<jipplf>",
	"{<lipccjsdfij>fcf<jipplf>sifi}",
	"<dpsid>",
	"<<dpsid>ipc>",
	"{djlpi}",
	"<fsilccp[12]sdf[13]jc>",
	"{cpfd}",
	"<j{cpfd}>",
	"<ffpiji[16]pfcppc>",
	"{jdl<s>pps<ffpiji[16]pfcppc>ijdj}",
	"<ccijl>",
	"<jjcscisi>",
	"{c<jjcscisi>}",
	"<{d}clfpjpclcdi>",
	"<fpjilpss>",
	"<<d>ff<fpjilpss>s>",
	"<s<<d>ff<fpjilpss>s>clfdi>",
	"<fldpsjcj>",
	"<<fldpsjcj>l>",
	"<fcdjjll>",
	"<pfjcdfdcd[2]>",
	"{<pfjcdfdcd[2]>cl}",
	"<fccpjsscljsf>",
	"<j[14]c>",
	"<jcssfcll>",
	"<djls>",
	"{fdci}",
	"<jfjl>",
	"<<jfjl>>",
	"{lcsjsilsfsdl}",
	"{ill}",
	"<jd{lcsjsilsfsdl}dclll{ill}if<sj>>",
	"<lcd<jd{lcsjsilsfsdl}dclll{ill}if<sj>>ccddip>",
	"<isj>",
	"{silpssili<isj>}",
	"<dfjsdd>",
	"<ps>",
	"<<ps>pifl[15]si>",
	"{jcccfsildjdd}",
	"<ppspsfjlfpip>",
	"{djlfjpldfi[2]jj}",
	"<ipcsccdfljcj>",
	"{ijcisf}",
	"<pi<ipcsccdfljcj>siidfclp{ijcisf}>",
	"{dss<c>{si}{djlfjpldfi[2]jj}si<pi<ipcsccdfljcj>siidfclp{ijcisf}>cjl}",
	"<pj>",
	"{fcpljf}",
	"{cjis}",
	"{didcs[14]i[2]jisp}",
	"<icjjlffjjl[15]id>",
	"<dplpfpjsiijp>",
	"<{didcs[14]i[2]jisp}pfj<icjjlffjjl[15]id>{j}d<dplpfpjsiijp>c>",
	"{<{didcs[14]i[2]jisp}pfj<icjjlffjjl[15]id>{j}d<dplpfpjsiijp>c>jf}",
	"<dcppsp[12]jdffjl>",
	"{lcsfi<dcppsp[12]jdffjl>iijpcd}",
	"<fl>",
	"<dipdijd>",
	"{pljljis}",
	"{fpii{pljljis}[3]pcispfj}",
	"<j[16]>",
	"{siclcid}",
	"{<j[16]>{siclcid}}",
	"{sf<i>{fpii{pljljis}[3]pcispfj}dcscc{<j[16]>{siclcid}}ls}",
	"<dijcscclslfj>",
	"<lflccfcpfdp>",
	"{ccsddcddpcps}",
	"<{ccsddcddpcps}>",
	"<spscdjdis[11]sci>",
	"{ppj}",
	"<pfcflcs[5]plf>",
	"<ipilisi[7]pjldp>",
	"{jjp<l>{ppj}<pfcflcs[5]plf>i<ipilisi[7]pjldp>dics}",
	"<dddpscdif>",
	"<cjfccpjdj<l>ip>",
	"{jjdl}",
	"{ifdjs[3]spjsfij}",
	"{iic}",
	"{csdjj{iic}ss[6]j}",
	"{jdf[3]s}",
	"<pcsfj[14]fjsipcl>",
	"<lj{jdf[3]s}c<pcsfj[14]fjsipcl>>",
	"{icsjcj}",
	"{pscdpisji}",
	"{ldli}",
	"{p{ldli}{if}f<f>d<dj>pdiii}",
	"{{p{ldli}{if}f<f>d<dj>pdiii}sdddfs}",
	"{pfjsflcdlcfs}",
	"<fl{jj}pci>",
	"{ljd}",
	"<ffp{ljd}ldcfs>",
	"<jdil[2]<ffp{ljd}ldcfs>fsp>",
	"<cddcdjlli>",
	"{sifdlc}",
	"{s{sifdlc}ifc}",
	"{fc}",
	"<fpfcfc>",
	"<disficcl>",
	"<isplpcscp>",
	"<clcpdjcjic>",
	"{ljdpj}",
	"{sidl<s><fpfcfc><disficcl>sd<isplpcscp><clcpdjcjic>{ljdpj}}",
	"{cflfjiflcfcf}",
	"{{cflfjiflcfcf}li}",
	"{ccdissii}",
	"<dp{ccdissii}picdsfpd{d}>",
	"<ldsss{{cflfjiflcfcf}li}f<dp{ccdissii}picdsfpd{d}>clpl>",
	"{ilfdscsipsfs}",
	"<sljldpdscdpj>",
	"{dldc{i}<sljldpdscdpj>dpld<di>c}",
	"<f[8]s>",
	"<jjllilfdiljd>",
	"<dplfddp[13]lcjpi>",
	"<lilccsjlsjjl>",
	"{lls}",
	"<f{lls}dds>",
	"{jpc}",
	"{ii{ci}ffdipl}",
	"{fsfiiicijidc}",
	"{lffdcfij}",
	"<ddi[12]pdip>",
	"{c{fsfiiicijidc}f{lffdcfij}sj[13]<ddi[12]pdip>iscsd}",
	"<pjcss{jpc}l{ii{ci}ffdipl}cj{c{fsfiiicijidc}f{lffdcfij}sj[13]<ddi[12]pdip>iscsd}p>",
	"{llpc}",
	"{cf}",
	"<<i>{llpc}cild{cf}dj>",
	"<scipcislpdfs>",
	"<lcspsisccljs>",
	"{j[1]lplc}",
	"{ssccd}",
	"{{ssccd}}",
	"{pjplfilsiicp}",
	"{fd}",
	"<sps<fl>ccjfdi{fd}>",
	"<ljd[16]lfdlp{pjplfilsiicp}<sps<fl>ccjfdi{fd}>dc>",
	"<jii>",
	"{clif}",
	"{jpcjd[1]lijccjp}",
	"{djpi}",
	"<l[16]ilddcd>",
	"<c[7]{jpcjd[1]lijccjp}<l>d{djpi}p<l[16]ilddcd>psp>",
	"<jdspd>",
	"<ildfdpjsjdp>",
	"{j<jdspd>jssp<ildfdpjsjdp>lpild}",
	"{j{clif}f<c[7]{jpcjd[1]lijccjp}<l>d{djpi}p<l[16]ilddcd>psp>j{j<jdspd>jssp<ildfdpjsjdp>lpild}ij<c><f>ld}",
	"<fi>",
	"<ds>",
	"<ld<ds>scsllldid>",
	"<fdc>",
	"<ill>",
	"<csicd>",
	"{dj<ill><csicd>p<i>ipis}",
	"<fps>",
	"{jcddpii}",
	"{fpljdfjljifp}",
	"<{jcddpii}{fpljdfjljifp}pjc>",
	"{lpi<{jcddpii}{fpljdfjljifp}pjc>}",
	"{iislf}",
	"<icp[14]pd{iislf}c[2]i>",
	"<fjdi>",
	"{ijddfc}",
	"{icifpfffc}",
	"{cflsjppscfi}",
	"<pls{ijddfc}fll{icifpfffc}lps{cflsjppscfi}>",
	"{lfl}",
	"<dp{lfl}i[5]csddddpl>",
	"<{i}>",
	"{sdj<{i}>s{p}fsdcjd}",
	"{fsppjjfifipl}",
	"{icdslsjcfds}",
	"{pcfdlddpfijp}",
	"{ji{j}fdddp{icdslsjcfds}p{pcfdlddpfijp}c}",
	"<ci>",
	"{<ci>}",
	"<sdfssiil>",
	"<ilsplsdlcipc>",
	"<jdsdd[5]pspfdcf>",
	"<ipiiipc>",
	"<pjfdj<sdfssiil><ilsplsdlcipc><jdsdd[5]pspfdcf>i<ipiiipc>cf>",
	"<cpficsflff>",
	"<ppp<cpficsflff>i>",
	"<pj[2]jdc>",
	"<dlc>",
	"{l[8]l}",
	"{ffs}",
	"{lidspfsfppss}",
	"{cpifp}",
	"<lf<pj[2]jdc><dlc>scc{l[8]l}{ffs}{lidspfsfppss}f{cpifp}>",
	"{<pjfdj<sdfssiil><ilsplsdlcipc><jdsdd[5]pspfdcf>i<ipiiipc>cf>spjfs<ppp<cpficsflff>i>idi<lf<pj[2]jdc><dlc>scc{l[8]l}{ffs}{lidspfsfppss}f{cpifp}>i}",
	"<pililsipljfj>",
	"<jsi>",
	"{pdp<jsi>dsl}",
	"<dslscj[5]cc>",
	"<ps[6]d{pdp<jsi>dsl}csdslsf<dslscj[5]cc>>",
	"<cilpijisdipc>",
	"{dic}",
	"<jccs>",
	"{jjil{dic}ppllsj<jccs>}",
	"{ji{jjil{dic}ppllsj<jccs>}f}",
	"<jli>",
	"<dp>",
	"{{ds}cjfc}",
	"<ddjssdjfjssc>",
	"<<ddjssdjfjssc>>",
	"{p<dp>{{ds}cjfc}jl<<ddjssdjfjssc>>scpspd}",
	"{ilsfj}",
	"{i{i}fsidj<l>pjpp}",
	"<lppsicilpsdj[14]>",
	"{iidissi[9]ccppj}",
	"{dp<lppsicilpsdj[14]>f<l>l{iidissi[9]ccppj}fpfl<jf>}",
	"<d{i{i}fsidj<l>pjpp}{dp<lppsicilpsdj[14]>f<l>l{iidissi[9]ccppj}fpfl<jf>}>",
	"{lpjii[8]jdli}",
	"<ciccjlldc>",
	"{lpji[15]lldcff}",
	"<{lpjii[8]jdli}sjf<ciccjlldc>plj{lpji[15]lldcff}pli>",
	"{fljpilsccdlj}",
	"{pcpcpfsfpfpp}",
	"{{pcpcpfsfpfpp}<c>}",
	"{fcdffc[11]iipifs}",
	"<ijf[13]fjcpfcfss>",
	"<sdpijjd<ijf[13]fjcpfcfss>jddl>",
	"<lpijd[1]pcjspdl>",
	"{<lpijd[1]pcjspdl>}",
	"{ldjjfcjp<sdpijjd<ijf[13]fjcpfcfss>jddl>i{<lpijd[1]pcjspdl>}p}",
	"{jpjcjspslcdi}",
	"<ji>",
	"{jlllli<ji>spd}",
	"{lcsccdf[2]dpddl}",
	"<lj>",
	"<cidjf[14]fs>",
	"{c{lcsccdf[2]dpddl}fpi<lj>ddf<cidjf[14]fs>fd}",
	"{p[7]cl}",
	"{icidslpcll[4]fj}",
	"<dj[5]fjlc>",
	"<j{icidslpcll[4]fj}fjslcpps<dj[5]fjlc>j>",
	"<ljl>",
	"{cfipccjjsffi}",
	"<dlclf>",
	"{ldfijc}",
	"{<ljl>d{cfipccjjsffi}lc<dlclf>ffdi{ldfijc}d}",
	"{lpc<j{icidslpcll[4]fj}fjslcpps<dj[5]fjlc>j>ds{<ljl>d{cfipccjjsffi}lc<dlclf>ffdi{ldfijc}d}spjpi}",
	"<dcp>",
	"{dsifcfsfjffi}",
	"<j<dcp>lcsd{dsifcfsfjffi}p>",
	"{cifdlpppiifc}",
	"{lj[6]dls}",
	"<flfpf>",
	"<jis{cifdlpppiifc}sjl{lj[6]dls}f{c}c<flfpf>>",
	"{fpdifjd}",
	"{llsflfp{fpdifjd}ijcj}",
	"<d<jis{cifdlpppiifc}sjl{lj[6]dls}f{c}c<flfpf>>{llsflfp{fpdifjd}ijcj}c[7]fp>",
	"{discjpi[14]d}",
	"{pcc[2]idfplfdjs}",
	"{clpspsplfdjc}",
	"{cidjifijf}",
	"{clpjlc[6]}",
	"{jfd{discjpi[14]d}{pcc[2]idfplfdjs}d{clpspsplfdjc}{cidjifijf}{clpjlc[6]}cdc}",
	"{s[6]dfsdi}",
	"<jdl>",
	"{scpdcfsjdi{lj}p}",
	"<lllidfcps>",
	"{jssdispjf<lllidfcps>sj}",
	"{fcildsciispj}",
	"{iplpcl{fcildsciispj}jcd{s}c}",
	"<ljf>",
	"<cj{iplpcl{fcildsciispj}jcd{s}c}ici<ljf>lci>",
	"{plllpcididfl}",
	"{fcicpl{plllpcididfl}jldp[8]i}",
	"<llcjdl[6]c>",
	"{sfsjjcjjdlfi}",
	"<csi<llcjdl[6]c>{sfsjjcjjdlfi}cjjpc<fl>j>",
	"<jilfdjcdf>",
	"<lllp[14]sfsp<jilfdjcdf>ffj>",
	"{s{fcicpl{plllpcididfl}jldp[8]i}dd<csi<llcjdl[6]c>{sfsjjcjjdlfi}cjjpc<fl>j><lllp[14]sfsp<jilfdjcdf>ffj>ccjcsi}",
	"{pjpisjcid}",
	"{lfjdd}",
	"{iplps}",
	"{{pjpisjcid}pl{lfjdd}pfp{iplps}fsdl}",
	"<cscjjsf{{pjpisjcid}pl{lfjdd}pfp{iplps}fsdl}>",
	"<dd[10]i>",
	"{iplfscspddsd}",
	"<fcldji>",
	"<fidcflfccpjd>",
	"{dfcppfsld}",
	"{l<fcldji>dlp<fidcflfccpjd>ffjc{dfcppfsld}c}",
	"<pspdsccjlcss>",
	"<jcji[15]j[4]sliilsp>",
	"<fsfipfcdjds[13]i>",
	"<lilcdcjlss>",
	"{j[13]li<pspdsccjlcss>i<jcji[15]j[4]sliilsp>p<fsfipfcdjds[13]i><lilcdcjlss>idd}",
	"{fs}",
	"{{l<fcldji>dlp<fidcflfccpjd>ffjc{dfcppfsld}c}{j[13]li<pspdsccjlcss>i<jcji[15]j[4]sliilsp>p<fsfipfcdjds[13]i><lilcdcjlss>idd}s[10]sj{fs}}",
	"{ips}",
	"<iscd>",
	"{fjf}",
	"<spljffl{fjf}cjjp>",
	"{jcfd}",
	"{jcisfdf}"
};
int G_agg_sizes[] = {
	sizeof(struct A1),
	sizeof(struct A2),
	sizeof(struct A3),
	sizeof(union  A4),
	sizeof(struct A5),
	sizeof(struct A6),
	sizeof(union  A7),
	sizeof(struct A8),
	sizeof(struct A9),
	sizeof(union  A10),
	sizeof(union  A11),
	sizeof(union  A12),
	sizeof(struct A13),
	sizeof(union  A14),
	sizeof(struct A15),
	sizeof(union  A16),
	sizeof(struct A17),
	sizeof(union  A18),
	sizeof(union  A19),
	sizeof(union  A20),
	sizeof(union  A21),
	sizeof(struct A22),
	sizeof(union  A23),
	sizeof(struct A24),
	sizeof(union  A25),
	sizeof(struct A26),
	sizeof(union  A27),
	sizeof(union  A28),
	sizeof(union  A29),
	sizeof(union  A30),
	sizeof(union  A31),
	sizeof(struct A32),
	sizeof(struct A33),
	sizeof(struct A34),
	sizeof(struct A35),
	sizeof(union  A36),
	sizeof(union  A37),
	sizeof(union  A38),
	sizeof(struct A39),
	sizeof(struct A40),
	sizeof(union  A41),
	sizeof(struct A42),
	sizeof(union  A43),
	sizeof(union  A44),
	sizeof(union  A45),
	sizeof(struct A46),
	sizeof(struct A47),
	sizeof(struct A48),
	sizeof(struct A49),
	sizeof(union  A50),
	sizeof(union  A51),
	sizeof(union  A52),
	sizeof(struct A53),
	sizeof(struct A54),
	sizeof(union  A55),
	sizeof(union  A56),
	sizeof(struct A57),
	sizeof(struct A58),
	sizeof(struct A59),
	sizeof(union  A60),
	sizeof(struct A61),
	sizeof(union  A62),
	sizeof(union  A63),
	sizeof(union  A64),
	sizeof(struct A65),
	sizeof(union  A66),
	sizeof(struct A67),
	sizeof(struct A68),
	sizeof(union  A69),
	sizeof(struct A70),
	sizeof(union  A71),
	sizeof(struct A72),
	sizeof(struct A73),
	sizeof(struct A74),
	sizeof(union  A75),
	sizeof(struct A76),
	sizeof(union  A77),
	sizeof(union  A78),
	sizeof(struct A79),
	sizeof(union  A80),
	sizeof(union  A81),
	sizeof(union  A82),
	sizeof(union  A83),
	sizeof(union  A84),
	sizeof(union  A85),
	sizeof(union  A86),
	sizeof(union  A87),
	sizeof(struct A88),
	sizeof(struct A89),
	sizeof(union  A90),
	sizeof(struct A91),
	sizeof(struct A92),
	sizeof(union  A93),
	sizeof(union  A94),
	sizeof(union  A95),
	sizeof(struct A96),
	sizeof(union  A97),
	sizeof(union  A98),
	sizeof(struct A99),
	sizeof(struct A100),
	sizeof(union  A101),
	sizeof(struct A102),
	sizeof(struct A103),
	sizeof(union  A104),
	sizeof(struct A105),
	sizeof(union  A106),
	sizeof(struct A107),
	sizeof(struct A108),
	sizeof(struct A109),
	sizeof(struct A110),
	sizeof(struct A111),
	sizeof(struct A112),
	sizeof(union  A113),
	sizeof(struct A114),
	sizeof(union  A115),
	sizeof(union  A116),
	sizeof(struct A117),
	sizeof(union  A118),
	sizeof(union  A119),
	sizeof(struct A120),
	sizeof(struct A121),
	sizeof(struct A122),
	sizeof(struct A123),
	sizeof(union  A124),
	sizeof(struct A125),
	sizeof(union  A126),
	sizeof(struct A127),
	sizeof(union  A128),
	sizeof(struct A129),
	sizeof(struct A130),
	sizeof(union  A131),
	sizeof(union  A132),
	sizeof(struct A133),
	sizeof(struct A134),
	sizeof(struct A135),
	sizeof(struct A136),
	sizeof(union  A137),
	sizeof(struct A138),
	sizeof(struct A139),
	sizeof(struct A140),
	sizeof(struct A141),
	sizeof(struct A142),
	sizeof(union  A143),
	sizeof(struct A144),
	sizeof(struct A145),
	sizeof(struct A146),
	sizeof(struct A147),
	sizeof(struct A148),
	sizeof(struct A149),
	sizeof(union  A150),
	sizeof(struct A151),
	sizeof(union  A152),
	sizeof(struct A153),
	sizeof(struct A154),
	sizeof(struct A155),
	sizeof(union  A156),
	sizeof(struct A157),
	sizeof(union  A158),
	sizeof(union  A159),
	sizeof(union  A160),
	sizeof(struct A161),
	sizeof(struct A162),
	sizeof(union  A163),
	sizeof(union  A164),
	sizeof(struct A165),
	sizeof(struct A166),
	sizeof(union  A167),
	sizeof(union  A168),
	sizeof(union  A169),
	sizeof(union  A170),
	sizeof(union  A171),
	sizeof(struct A172),
	sizeof(struct A173),
	sizeof(struct A174),
	sizeof(union  A175),
	sizeof(union  A176),
	sizeof(union  A177),
	sizeof(struct A178),
	sizeof(union  A179),
	sizeof(struct A180),
	sizeof(struct A181),
	sizeof(struct A182),
	sizeof(union  A183),
	sizeof(struct A184),
	sizeof(union  A185),
	sizeof(union  A186),
	sizeof(struct A187),
	sizeof(struct A188),
	sizeof(struct A189),
	sizeof(union  A190),
	sizeof(struct A191),
	sizeof(struct A192),
	sizeof(union  A193),
	sizeof(union  A194),
	sizeof(struct A195),
	sizeof(struct A196),
	sizeof(union  A197),
	sizeof(union  A198),
	sizeof(struct A199),
	sizeof(union  A200),
	sizeof(struct A201),
	sizeof(union  A202),
	sizeof(union  A203),
	sizeof(struct A204),
	sizeof(struct A205),
	sizeof(union  A206),
	sizeof(union  A207),
	sizeof(struct A208),
	sizeof(union  A209),
	sizeof(union  A210),
	sizeof(union  A211),
	sizeof(struct A212),
	sizeof(struct A213),
	sizeof(union  A214),
	sizeof(union  A215),
	sizeof(union  A216),
	sizeof(struct A217),
	sizeof(union  A218),
	sizeof(union  A219),
	sizeof(struct A220),
	sizeof(struct A221),
	sizeof(union  A222),
	sizeof(struct A223),
	sizeof(struct A224),
	sizeof(union  A225),
	sizeof(union  A226),
	sizeof(struct A227),
	sizeof(union  A228),
	sizeof(union  A229),
	sizeof(struct A230),
	sizeof(union  A231),
	sizeof(union  A232),
	sizeof(struct A233),
	sizeof(union  A234),
	sizeof(struct A235),
	sizeof(union  A236),
	sizeof(union  A237),
	sizeof(struct A238),
	sizeof(union  A239),
	sizeof(struct A240),
	sizeof(union  A241),
	sizeof(union  A242),
	sizeof(struct A243),
	sizeof(struct A244),
	sizeof(union  A245),
	sizeof(struct A246),
	sizeof(union  A247),
	sizeof(struct A248),
	sizeof(union  A249),
	sizeof(union  A250),
	sizeof(union  A251),
	sizeof(union  A252),
	sizeof(union  A253),
	sizeof(union  A254),
	sizeof(union  A255),
	sizeof(union  A256),
	sizeof(struct A257),
	sizeof(struct A258),
	sizeof(struct A259),
	sizeof(union  A260),
	sizeof(union  A261),
	sizeof(struct A262),
	sizeof(struct A263),
	sizeof(union  A264),
	sizeof(struct A265),
	sizeof(union  A266),
	sizeof(struct A267),
	sizeof(struct A268),
	sizeof(struct A269),
	sizeof(union  A270),
	sizeof(struct A271),
	sizeof(struct A272),
	sizeof(union  A273),
	sizeof(union  A274),
	sizeof(union  A275),
	sizeof(union  A276),
	sizeof(union  A277),
	sizeof(union  A278),
	sizeof(struct A279),
	sizeof(union  A280),
	sizeof(union  A281),
	sizeof(struct A282),
	sizeof(union  A283),
	sizeof(struct A284),
	sizeof(struct A285),
	sizeof(union  A286),
	sizeof(struct A287),
	sizeof(struct A288),
	sizeof(struct A289),
	sizeof(union  A290),
	sizeof(struct A291),
	sizeof(union  A292),
	sizeof(struct A293),
	sizeof(union  A294),
	sizeof(union  A295),
	sizeof(union  A296),
	sizeof(union  A297),
	sizeof(union  A298),
	sizeof(union  A299),
	sizeof(union  A300),
	sizeof(struct A301),
	sizeof(union  A302),
	sizeof(union  A303),
	sizeof(struct A304),
	sizeof(struct A305),
	sizeof(struct A306),
	sizeof(union  A307),
	sizeof(union  A308),
	sizeof(struct A309),
	sizeof(struct A310),
	sizeof(union  A311),
	sizeof(union  A312),
	sizeof(struct A313),
	sizeof(struct A314),
	sizeof(union  A315),
	sizeof(struct A316),
	sizeof(union  A317),
	sizeof(union  A318),
	sizeof(union  A319),
	sizeof(struct A320),
	sizeof(struct A321),
	sizeof(union  A322),
	sizeof(union  A323),
	sizeof(struct A324),
	sizeof(union  A325),
	sizeof(struct A326),
	sizeof(union  A327),
	sizeof(struct A328),
	sizeof(struct A329),
	sizeof(union  A330),
	sizeof(union  A331),
	sizeof(union  A332),
	sizeof(struct A333),
	sizeof(struct A334),
	sizeof(struct A335),
	sizeof(struct A336),
	sizeof(union  A337),
	sizeof(struct A338),
	sizeof(struct A339),
	sizeof(struct A340),
	sizeof(struct A341),
	sizeof(union  A342),
	sizeof(struct A343),
	sizeof(struct A344),
	sizeof(struct A345),
	sizeof(union  A346),
	sizeof(struct A347),
	sizeof(struct A348),
	sizeof(union  A349),
	sizeof(union  A350),
	sizeof(struct A351),
	sizeof(union  A352),
	sizeof(struct A353),
	sizeof(union  A354),
	sizeof(union  A355),
	sizeof(union  A356),
	sizeof(union  A357),
	sizeof(union  A358),
	sizeof(struct A359),
	sizeof(union  A360),
	sizeof(struct A361),
	sizeof(union  A362),
	sizeof(union  A363),
	sizeof(struct A364),
	sizeof(struct A365),
	sizeof(struct A366),
	sizeof(struct A367),
	sizeof(struct A368),
	sizeof(union  A369),
	sizeof(struct A370),
	sizeof(struct A371),
	sizeof(union  A372),
	sizeof(union  A373),
	sizeof(struct A374),
	sizeof(struct A375),
	sizeof(union  A376),
	sizeof(union  A377),
	sizeof(struct A378),
	sizeof(struct A379),
	sizeof(struct A380),
	sizeof(struct A381),
	sizeof(union  A382),
	sizeof(union  A383),
	sizeof(union  A384),
	sizeof(union  A385),
	sizeof(struct A386),
	sizeof(struct A387),
	sizeof(struct A388),
	sizeof(struct A389),
	sizeof(struct A390),
	sizeof(union  A391),
	sizeof(union  A392),
	sizeof(struct A393),
	sizeof(union  A394),
	sizeof(struct A395),
	sizeof(struct A396),
	sizeof(struct A397),
	sizeof(union  A398),
	sizeof(union  A399),
	sizeof(union  A400),
	sizeof(struct A401),
	sizeof(union  A402),
	sizeof(struct A403),
	sizeof(struct A404),
	sizeof(struct A405),
	sizeof(union  A406),
	sizeof(struct A407),
	sizeof(struct A408),
	sizeof(struct A409),
	sizeof(struct A410),
	sizeof(union  A411),
	sizeof(struct A412),
	sizeof(union  A413),
	sizeof(struct A414),
	sizeof(struct A415),
	sizeof(union  A416),
	sizeof(union  A417),
	sizeof(union  A418),
	sizeof(union  A419),
	sizeof(struct A420),
	sizeof(union  A421),
	sizeof(struct A422),
	sizeof(union  A423),
	sizeof(struct A424),
	sizeof(struct A425),
	sizeof(union  A426),
	sizeof(struct A427),
	sizeof(struct A428),
	sizeof(union  A429),
	sizeof(union  A430),
	sizeof(union  A431),
	sizeof(struct A432),
	sizeof(struct A433),
	sizeof(struct A434),
	sizeof(union  A435),
	sizeof(union  A436),
	sizeof(union  A437),
	sizeof(union  A438),
	sizeof(struct A439),
	sizeof(union  A440),
	sizeof(union  A441),
	sizeof(struct A442),
	sizeof(union  A443),
	sizeof(struct A444),
	sizeof(union  A445),
	sizeof(struct A446),
	sizeof(struct A447),
	sizeof(struct A448),
	sizeof(struct A449),
	sizeof(struct A450),
	sizeof(struct A451),
	sizeof(struct A452),
	sizeof(union  A453),
	sizeof(union  A454),
	sizeof(struct A455),
	sizeof(union  A456),
	sizeof(union  A457),
	sizeof(struct A458),
	sizeof(union  A459),
	sizeof(struct A460),
	sizeof(union  A461),
	sizeof(union  A462),
	sizeof(union  A463),
	sizeof(struct A464),
	sizeof(union  A465),
	sizeof(union  A466),
	sizeof(struct A467),
	sizeof(struct A468),
	sizeof(union  A469),
	sizeof(union  A470),
	sizeof(union  A471),
	sizeof(struct A472),
	sizeof(struct A473),
	sizeof(union  A474),
	sizeof(struct A475),
	sizeof(struct A476),
	sizeof(union  A477),
	sizeof(struct A478),
	sizeof(struct A479),
	sizeof(struct A480),
	sizeof(union  A481),
	sizeof(struct A482),
	sizeof(struct A483),
	sizeof(union  A484),
	sizeof(struct A485),
	sizeof(struct A486),
	sizeof(struct A487),
	sizeof(struct A488),
	sizeof(struct A489),
	sizeof(union  A490),
	sizeof(union  A491),
	sizeof(union  A492),
	sizeof(struct A493),
	sizeof(struct A494),
	sizeof(struct A495),
	sizeof(union  A496),
	sizeof(struct A497),
	sizeof(struct A498),
	sizeof(struct A499),
	sizeof(union  A500),
	sizeof(struct A501),
	sizeof(union  A502),
	sizeof(struct A503),
	sizeof(union  A504),
	sizeof(union  A505),
	sizeof(union  A506),
	sizeof(struct A507),
	sizeof(union  A508),
	sizeof(union  A509),
	sizeof(union  A510),
	sizeof(union  A511),
	sizeof(union  A512),
	sizeof(struct A513),
	sizeof(struct A514),
	sizeof(union  A515),
	sizeof(struct A516),
	sizeof(struct A517),
	sizeof(union  A518),
	sizeof(struct A519),
	sizeof(union  A520),
	sizeof(union  A521),
	sizeof(struct A522),
	sizeof(struct A523),
	sizeof(union  A524),
	sizeof(struct A525),
	sizeof(struct A526),
	sizeof(union  A527),
	sizeof(union  A528),
	sizeof(union  A529),
	sizeof(struct A530),
	sizeof(struct A531),
	sizeof(struct A532),
	sizeof(struct A533),
	sizeof(union  A534),
	sizeof(union  A535),
	sizeof(union  A536),
	sizeof(struct A537),
	sizeof(union  A538),
	sizeof(union  A539),
	sizeof(union  A540),
	sizeof(struct A541),
	sizeof(struct A542),
	sizeof(union  A543),
	sizeof(union  A544),
	sizeof(struct A545),
	sizeof(struct A546),
	sizeof(struct A547),
	sizeof(union  A548),
	sizeof(union  A549),
	sizeof(struct A550),
	sizeof(union  A551),
	sizeof(union  A552),
	sizeof(union  A553),
	sizeof(struct A554),
	sizeof(struct A555),
	sizeof(struct A556),
	sizeof(union  A557),
	sizeof(union  A558),
	sizeof(struct A559),
	sizeof(struct A560),
	sizeof(struct A561),
	sizeof(struct A562),
	sizeof(union  A563),
	sizeof(union  A564),
	sizeof(struct A565),
	sizeof(union  A566),
	sizeof(union  A567),
	sizeof(struct A568),
	sizeof(union  A569),
	sizeof(struct A570),
	sizeof(union  A571),
	sizeof(union  A572),
	sizeof(struct A573),
	sizeof(union  A574),
	sizeof(union  A575),
	sizeof(struct A576),
	sizeof(union  A577),
	sizeof(union  A578),
	sizeof(union  A579),
	sizeof(union  A580),
	sizeof(struct A581),
	sizeof(struct A582),
	sizeof(struct A583),
	sizeof(union  A584),
	sizeof(union  A585),
	sizeof(struct A586),
	sizeof(union  A587),
	sizeof(union  A588),
	sizeof(union  A589),
	sizeof(struct A590),
	sizeof(struct A591),
	sizeof(union  A592),
	sizeof(struct A593),
	sizeof(struct A594),
	sizeof(struct A595),
	sizeof(struct A596),
	sizeof(struct A597),
	sizeof(union  A598),
	sizeof(struct A599),
	sizeof(struct A600),
	sizeof(struct A601),
	sizeof(union  A602),
	sizeof(union  A603),
	sizeof(union  A604),
	sizeof(union  A605),
	sizeof(union  A606),
	sizeof(struct A607),
	sizeof(union  A608),
	sizeof(struct A609),
	sizeof(union  A610),
	sizeof(struct A611),
	sizeof(struct A612),
	sizeof(union  A613),
	sizeof(struct A614),
	sizeof(union  A615),
	sizeof(struct A616),
	sizeof(union  A617),
	sizeof(struct A618),
	sizeof(union  A619),
	sizeof(union  A620),
	sizeof(struct A621),
	sizeof(struct A622),
	sizeof(struct A623),
	sizeof(union  A624),
	sizeof(union  A625),
	sizeof(struct A626),
	sizeof(union  A627),
	sizeof(struct A628),
	sizeof(union  A629),
	sizeof(union  A630),
	sizeof(union  A631),
	sizeof(union  A632),
	sizeof(union  A633),
	sizeof(struct A634),
	sizeof(union  A635),
	sizeof(struct A636),
	sizeof(struct A637),
	sizeof(union  A638),
	sizeof(struct A639),
	sizeof(struct A640),
	sizeof(union  A641),
	sizeof(struct A642),
	sizeof(union  A643),
	sizeof(struct A644),
	sizeof(union  A645),
	sizeof(struct A646),
	sizeof(struct A647),
	sizeof(struct A648),
	sizeof(struct A649),
	sizeof(struct A650),
	sizeof(union  A651),
	sizeof(union  A652),
	sizeof(union  A653),
	sizeof(struct A654),
	sizeof(union  A655),
	sizeof(struct A656),
	sizeof(union  A657),
	sizeof(union  A658),
	sizeof(struct A659),
	sizeof(struct A660),
	sizeof(union  A661),
	sizeof(struct A662),
	sizeof(union  A663),
	sizeof(union  A664),
	sizeof(union  A665),
	sizeof(struct A666),
	sizeof(union  A667),
	sizeof(union  A668),
	sizeof(union  A669),
	sizeof(union  A670),
	sizeof(struct A671),
	sizeof(union  A672),
	sizeof(union  A673),
	sizeof(union  A674),
	sizeof(struct A675),
	sizeof(struct A676),
	sizeof(struct A677),
	sizeof(union  A678),
	sizeof(union  A679),
	sizeof(struct A680),
	sizeof(struct A681),
	sizeof(struct A682),
	sizeof(struct A683),
	sizeof(union  A684),
	sizeof(union  A685),
	sizeof(struct A686),
	sizeof(struct A687),
	sizeof(union  A688),
	sizeof(struct A689),
	sizeof(struct A690),
	sizeof(union  A691),
	sizeof(union  A692),
	sizeof(union  A693),
	sizeof(struct A694),
	sizeof(union  A695),
	sizeof(struct A696),
	sizeof(struct A697),
	sizeof(struct A698),
	sizeof(union  A699),
	sizeof(struct A700),
	sizeof(struct A701),
	sizeof(struct A702),
	sizeof(struct A703),
	sizeof(union  A704),
	sizeof(union  A705),
	sizeof(struct A706),
	sizeof(union  A707),
	sizeof(struct A708),
	sizeof(struct A709),
	sizeof(union  A710),
	sizeof(union  A711),
	sizeof(union  A712),
	sizeof(union  A713),
	sizeof(struct A714),
	sizeof(union  A715),
	sizeof(struct A716),
	sizeof(union  A717),
	sizeof(struct A718),
	sizeof(union  A719),
	sizeof(struct A720),
	sizeof(struct A721),
	sizeof(union  A722),
	sizeof(union  A723),
	sizeof(union  A724),
	sizeof(union  A725),
	sizeof(union  A726),
	sizeof(union  A727),
	sizeof(struct A728),
	sizeof(struct A729),
	sizeof(union  A730),
	sizeof(union  A731),
	sizeof(union  A732),
	sizeof(union  A733),
	sizeof(struct A734),
	sizeof(struct A735),
	sizeof(union  A736),
	sizeof(union  A737),
	sizeof(union  A738),
	sizeof(struct A739),
	sizeof(union  A740),
	sizeof(struct A741),
	sizeof(union  A742),
	sizeof(union  A743),
	sizeof(struct A744),
	sizeof(union  A745),
	sizeof(union  A746),
	sizeof(struct A747),
	sizeof(union  A748),
	sizeof(union  A749),
	sizeof(struct A750),
	sizeof(union  A751),
	sizeof(union  A752),
	sizeof(union  A753),
	sizeof(struct A754),
	sizeof(struct A755),
	sizeof(struct A756),
	sizeof(struct A757),
	sizeof(struct A758),
	sizeof(struct A759),
	sizeof(struct A760),
	sizeof(struct A761),
	sizeof(union  A762),
	sizeof(struct A763),
	sizeof(struct A764),
	sizeof(struct A765),
	sizeof(union  A766),
	sizeof(union  A767),
	sizeof(struct A768),
	sizeof(struct A769),
	sizeof(union  A770),
	sizeof(union  A771),
	sizeof(union  A772),
	sizeof(union  A773),
	sizeof(struct A774),
	sizeof(struct A775),
	sizeof(struct A776),
	sizeof(union  A777),
	sizeof(struct A778),
	sizeof(union  A779),
	sizeof(struct A780),
	sizeof(struct A781),
	sizeof(struct A782),
	sizeof(struct A783),
	sizeof(struct A784),
	sizeof(struct A785),
	sizeof(union  A786),
	sizeof(union  A787),
	sizeof(struct A788),
	sizeof(union  A789),
	sizeof(struct A790),
	sizeof(struct A791),
	sizeof(union  A792),
	sizeof(union  A793),
	sizeof(union  A794),
	sizeof(struct A795),
	sizeof(union  A796),
	sizeof(union  A797),
	sizeof(struct A798),
	sizeof(struct A799),
	sizeof(struct A800),
	sizeof(struct A801),
	sizeof(struct A802),
	sizeof(struct A803),
	sizeof(union  A804),
	sizeof(struct A805),
	sizeof(struct A806),
	sizeof(union  A807),
	sizeof(union  A808),
	sizeof(union  A809),
	sizeof(union  A810),
	sizeof(struct A811),
	sizeof(struct A812),
	sizeof(struct A813),
	sizeof(union  A814),
	sizeof(union  A815),
	sizeof(union  A816),
	sizeof(struct A817),
	sizeof(struct A818),
	sizeof(struct A819),
	sizeof(struct A820),
	sizeof(struct A821),
	sizeof(struct A822),
	sizeof(union  A823),
	sizeof(struct A824),
	sizeof(struct A825),
	sizeof(struct A826),
	sizeof(union  A827),
	sizeof(struct A828),
	sizeof(union  A829),
	sizeof(struct A830),
	sizeof(union  A831),
	sizeof(union  A832),
	sizeof(struct A833),
	sizeof(struct A834),
	sizeof(union  A835),
	sizeof(union  A836),
	sizeof(struct A837),
	sizeof(union  A838),
	sizeof(union  A839),
	sizeof(union  A840),
	sizeof(union  A841),
	sizeof(union  A842),
	sizeof(union  A843),
	sizeof(union  A844),
	sizeof(union  A845),
	sizeof(union  A846),
	sizeof(union  A847),
	sizeof(struct A848),
	sizeof(union  A849),
	sizeof(struct A850),
	sizeof(union  A851),
	sizeof(struct A852),
	sizeof(union  A853),
	sizeof(struct A854),
	sizeof(union  A855),
	sizeof(struct A856),
	sizeof(union  A857),
	sizeof(struct A858),
	sizeof(union  A859),
	sizeof(struct A860),
	sizeof(struct A861),
	sizeof(union  A862),
	sizeof(union  A863),
	sizeof(union  A864),
	sizeof(struct A865),
	sizeof(struct A866),
	sizeof(struct A867),
	sizeof(struct A868),
	sizeof(union  A869),
	sizeof(union  A870),
	sizeof(struct A871),
	sizeof(struct A872),
	sizeof(union  A873),
	sizeof(union  A874),
	sizeof(union  A875),
	sizeof(struct A876),
	sizeof(union  A877),
	sizeof(union  A878),
	sizeof(struct A879),
	sizeof(union  A880),
	sizeof(struct A881),
	sizeof(struct A882),
	sizeof(struct A883),
	sizeof(union  A884),
	sizeof(union  A885),
	sizeof(struct A886),
	sizeof(union  A887),
	sizeof(struct A888),
	sizeof(union  A889),
	sizeof(struct A890),
	sizeof(union  A891),
	sizeof(union  A892),
	sizeof(union  A893),
	sizeof(struct A894),
	sizeof(struct A895),
	sizeof(struct A896),
	sizeof(struct A897),
	sizeof(union  A898),
	sizeof(union  A899),
	sizeof(struct A900),
	sizeof(union  A901),
	sizeof(struct A902),
	sizeof(struct A903),
	sizeof(union  A904),
	sizeof(struct A905),
	sizeof(union  A906),
	sizeof(struct A907),
	sizeof(union  A908),
	sizeof(struct A909),
	sizeof(struct A910),
	sizeof(union  A911),
	sizeof(struct A912),
	sizeof(struct A913),
	sizeof(struct A914),
	sizeof(union  A915),
	sizeof(union  A916),
	sizeof(union  A917),
	sizeof(union  A918),
	sizeof(struct A919),
	sizeof(union  A920),
	sizeof(union  A921),
	sizeof(struct A922),
	sizeof(union  A923),
	sizeof(union  A924),
	sizeof(struct A925),
	sizeof(union  A926),
	sizeof(struct A927),
	sizeof(struct A928),
	sizeof(union  A929),
	sizeof(union  A930),
	sizeof(union  A931),
	sizeof(union  A932),
	sizeof(struct A933),
	sizeof(struct A934),
	sizeof(struct A935),
	sizeof(union  A936),
	sizeof(struct A937),
	sizeof(struct A938),
	sizeof(union  A939),
	sizeof(struct A940),
	sizeof(struct A941),
	sizeof(struct A942),
	sizeof(struct A943),
	sizeof(union  A944),
	sizeof(struct A945),
	sizeof(union  A946),
	sizeof(union  A947),
	sizeof(union  A948),
	sizeof(union  A949),
	sizeof(union  A950),
	sizeof(struct A951),
	sizeof(struct A952),
	sizeof(struct A953),
	sizeof(union  A954),
	sizeof(struct A955),
	sizeof(union  A956),
	sizeof(union  A957),
	sizeof(struct A958),
	sizeof(union  A959),
	sizeof(union  A960),
	sizeof(union  A961),
	sizeof(struct A962),
	sizeof(struct A963),
	sizeof(struct A964),
	sizeof(union  A965),
	sizeof(union  A966),
	sizeof(struct A967),
	sizeof(union  A968),
	sizeof(union  A969),
	sizeof(struct A970),
	sizeof(struct A971),
	sizeof(struct A972),
	sizeof(struct A973),
	sizeof(struct A974),
	sizeof(union  A975),
	sizeof(union  A976),
	sizeof(struct A977),
	sizeof(union  A978),
	sizeof(struct A979),
	sizeof(union  A980),
	sizeof(struct A981),
	sizeof(union  A982),
	sizeof(struct A983),
	sizeof(struct A984),
	sizeof(union  A985),
	sizeof(struct A986),
	sizeof(union  A987),
	sizeof(union  A988),
	sizeof(union  A989),
	sizeof(struct A990),
	sizeof(struct A991),
	sizeof(struct A992),
	sizeof(union  A993),
	sizeof(struct A994),
	sizeof(union  A995),
	sizeof(struct A996),
	sizeof(union  A997),
	sizeof(struct A998),
	sizeof(union  A999),
	sizeof(union  A1000),
	sizeof(union  A1001),
	sizeof(struct A1002),
	sizeof(union  A1003),
	sizeof(struct A1004),
	sizeof(union  A1005),
	sizeof(union  A1006),
	sizeof(union  A1007),
	sizeof(struct A1008),
	sizeof(struct A1009),
	sizeof(union  A1010),
	sizeof(struct A1011),
	sizeof(struct A1012),
	sizeof(union  A1013),
	sizeof(union  A1014),
	sizeof(struct A1015),
	sizeof(union  A1016),
	sizeof(union  A1017),
	sizeof(struct A1018),
	sizeof(union  A1019),
	sizeof(union  A1020),
	sizeof(struct A1021),
	sizeof(union  A1022),
	sizeof(union  A1023),
	sizeof(union  A1024),
	sizeof(struct A1025),
	sizeof(struct A1026),
	sizeof(struct A1027),
	sizeof(struct A1028),
	sizeof(union  A1029),
	sizeof(union  A1030),
	sizeof(struct A1031),
	sizeof(struct A1032),
	sizeof(union  A1033),
	sizeof(struct A1034),
	sizeof(struct A1035),
	sizeof(struct A1036),
	sizeof(union  A1037),
	sizeof(union  A1038),
	sizeof(struct A1039),
	sizeof(union  A1040),
	sizeof(struct A1041),
	sizeof(struct A1042),
	sizeof(struct A1043),
	sizeof(union  A1044),
	sizeof(struct A1045),
	sizeof(union  A1046),
	sizeof(union  A1047),
	sizeof(union  A1048),
	sizeof(union  A1049),
	sizeof(struct A1050),
	sizeof(union  A1051),
	sizeof(union  A1052),
	sizeof(struct A1053),
	sizeof(struct A1054),
	sizeof(struct A1055),
	sizeof(union  A1056),
	sizeof(struct A1057),
	sizeof(struct A1058),
	sizeof(struct A1059),
	sizeof(struct A1060),
	sizeof(struct A1061),
	sizeof(struct A1062),
	sizeof(struct A1063),
	sizeof(union  A1064),
	sizeof(union  A1065),
	sizeof(struct A1066),
	sizeof(struct A1067),
	sizeof(struct A1068),
	sizeof(struct A1069),
	sizeof(union  A1070),
	sizeof(struct A1071),
	sizeof(struct A1072),
	sizeof(struct A1073),
	sizeof(struct A1074),
	sizeof(struct A1075),
	sizeof(union  A1076),
	sizeof(struct A1077),
	sizeof(union  A1078),
	sizeof(union  A1079),
	sizeof(struct A1080),
	sizeof(union  A1081),
	sizeof(union  A1082),
	sizeof(union  A1083),
	sizeof(struct A1084),
	sizeof(union  A1085),
	sizeof(struct A1086),
	sizeof(union  A1087),
	sizeof(struct A1088),
	sizeof(struct A1089),
	sizeof(struct A1090),
	sizeof(union  A1091),
	sizeof(union  A1092),
	sizeof(union  A1093),
	sizeof(struct A1094),
	sizeof(union  A1095),
	sizeof(struct A1096),
	sizeof(union  A1097),
	sizeof(struct A1098),
	sizeof(union  A1099),
	sizeof(union  A1100),
	sizeof(struct A1101),
	sizeof(union  A1102),
	sizeof(union  A1103),
	sizeof(union  A1104),
	sizeof(union  A1105),
	sizeof(struct A1106),
	sizeof(union  A1107),
	sizeof(struct A1108),
	sizeof(union  A1109),
	sizeof(struct A1110),
	sizeof(union  A1111),
	sizeof(struct A1112),
	sizeof(union  A1113),
	sizeof(struct A1114),
	sizeof(union  A1115),
	sizeof(union  A1116),
	sizeof(union  A1117),
	sizeof(struct A1118),
	sizeof(union  A1119),
	sizeof(union  A1120),
	sizeof(union  A1121),
	sizeof(struct A1122),
	sizeof(union  A1123),
	sizeof(union  A1124),
	sizeof(struct A1125),
	sizeof(struct A1126),
	sizeof(union  A1127),
	sizeof(union  A1128),
	sizeof(union  A1129),
	sizeof(struct A1130),
	sizeof(struct A1131),
	sizeof(union  A1132),
	sizeof(struct A1133),
	sizeof(struct A1134),
	sizeof(union  A1135),
	sizeof(union  A1136),
	sizeof(struct A1137),
	sizeof(struct A1138),
	sizeof(union  A1139),
	sizeof(union  A1140),
	sizeof(union  A1141),
	sizeof(struct A1142),
	sizeof(struct A1143),
	sizeof(struct A1144),
	sizeof(union  A1145),
	sizeof(struct A1146),
	sizeof(union  A1147),
	sizeof(struct A1148),
	sizeof(struct A1149),
	sizeof(struct A1150),
	sizeof(union  A1151),
	sizeof(struct A1152),
	sizeof(struct A1153),
	sizeof(union  A1154),
	sizeof(struct A1155),
	sizeof(struct A1156),
	sizeof(union  A1157),
	sizeof(union  A1158),
	sizeof(struct A1159),
	sizeof(union  A1160),
	sizeof(struct A1161),
	sizeof(struct A1162),
	sizeof(union  A1163),
	sizeof(struct A1164),
	sizeof(struct A1165),
	sizeof(union  A1166),
	sizeof(union  A1167),
	sizeof(union  A1168),
	sizeof(union  A1169),
	sizeof(struct A1170),
	sizeof(union  A1171),
	sizeof(struct A1172),
	sizeof(struct A1173),
	sizeof(union  A1174),
	sizeof(union  A1175),
	sizeof(union  A1176),
	sizeof(struct A1177),
	sizeof(struct A1178),
	sizeof(struct A1179),
	sizeof(union  A1180),
	sizeof(struct A1181),
	sizeof(struct A1182),
	sizeof(union  A1183),
	sizeof(union  A1184),
	sizeof(union  A1185),
	sizeof(union  A1186),
	sizeof(union  A1187),
	sizeof(struct A1188),
	sizeof(struct A1189),
	sizeof(struct A1190),
	sizeof(union  A1191),
	sizeof(struct A1192),
	sizeof(struct A1193),
	sizeof(struct A1194),
	sizeof(struct A1195),
	sizeof(struct A1196),
	sizeof(union  A1197),
	sizeof(struct A1198),
	sizeof(struct A1199),
	sizeof(struct A1200),
	sizeof(union  A1201),
	sizeof(struct A1202),
	sizeof(union  A1203),
	sizeof(struct A1204),
	sizeof(union  A1205),
	sizeof(union  A1206),
	sizeof(union  A1207),
	sizeof(struct A1208),
	sizeof(struct A1209),
	sizeof(struct A1210),
	sizeof(union  A1211),
	sizeof(struct A1212),
	sizeof(union  A1213),
	sizeof(union  A1214),
	sizeof(struct A1215),
	sizeof(struct A1216),
	sizeof(union  A1217),
	sizeof(union  A1218),
	sizeof(union  A1219),
	sizeof(struct A1220),
	sizeof(struct A1221),
	sizeof(struct A1222),
	sizeof(struct A1223),
	sizeof(struct A1224),
	sizeof(struct A1225),
	sizeof(union  A1226),
	sizeof(struct A1227),
	sizeof(struct A1228),
	sizeof(struct A1229),
	sizeof(union  A1230),
	sizeof(struct A1231),
	sizeof(struct A1232),
	sizeof(struct A1233),
	sizeof(struct A1234),
	sizeof(union  A1235),
	sizeof(struct A1236),
	sizeof(struct A1237),
	sizeof(union  A1238),
	sizeof(union  A1239),
	sizeof(struct A1240),
	sizeof(struct A1241),
	sizeof(struct A1242),
	sizeof(union  A1243),
	sizeof(struct A1244),
	sizeof(union  A1245),
	sizeof(struct A1246),
	sizeof(union  A1247),
	sizeof(union  A1248),
	sizeof(union  A1249),
	sizeof(union  A1250),
	sizeof(struct A1251),
	sizeof(struct A1252),
	sizeof(struct A1253),
	sizeof(union  A1254),
	sizeof(struct A1255),
	sizeof(union  A1256),
	sizeof(struct A1257),
	sizeof(struct A1258),
	sizeof(struct A1259),
	sizeof(struct A1260),
	sizeof(union  A1261),
	sizeof(union  A1262),
	sizeof(union  A1263),
	sizeof(union  A1264),
	sizeof(union  A1265),
	sizeof(union  A1266),
	sizeof(union  A1267),
	sizeof(union  A1268),
	sizeof(union  A1269),
	sizeof(struct A1270),
	sizeof(union  A1271),
	sizeof(struct A1272),
	sizeof(struct A1273),
	sizeof(union  A1274),
	sizeof(struct A1275),
	sizeof(struct A1276),
	sizeof(union  A1277),
	sizeof(union  A1278),
	sizeof(union  A1279),
	sizeof(struct A1280),
	sizeof(struct A1281),
	sizeof(union  A1282),
	sizeof(union  A1283),
	sizeof(struct A1284),
	sizeof(union  A1285),
	sizeof(union  A1286),
	sizeof(struct A1287),
	sizeof(struct A1288),
	sizeof(union  A1289),
	sizeof(union  A1290),
	sizeof(union  A1291),
	sizeof(struct A1292),
	sizeof(struct A1293),
	sizeof(union  A1294),
	sizeof(union  A1295),
	sizeof(struct A1296),
	sizeof(union  A1297),
	sizeof(union  A1298),
	sizeof(union  A1299),
	sizeof(union  A1300),
	sizeof(union  A1301),
	sizeof(struct A1302),
	sizeof(union  A1303),
	sizeof(struct A1304),
	sizeof(struct A1305),
	sizeof(struct A1306),
	sizeof(union  A1307),
	sizeof(struct A1308),
	sizeof(struct A1309),
	sizeof(union  A1310),
	sizeof(struct A1311),
	sizeof(union  A1312),
	sizeof(union  A1313),
	sizeof(union  A1314),
	sizeof(union  A1315),
	sizeof(union  A1316),
	sizeof(struct A1317),
	sizeof(union  A1318),
	sizeof(struct A1319),
	sizeof(struct A1320),
	sizeof(union  A1321),
	sizeof(union  A1322),
	sizeof(struct A1323),
	sizeof(struct A1324),
	sizeof(struct A1325),
	sizeof(union  A1326),
	sizeof(union  A1327),
	sizeof(struct A1328),
	sizeof(struct A1329),
	sizeof(struct A1330),
	sizeof(union  A1331),
	sizeof(struct A1332),
	sizeof(union  A1333),
	sizeof(struct A1334),
	sizeof(union  A1335),
	sizeof(struct A1336),
	sizeof(struct A1337),
	sizeof(union  A1338),
	sizeof(struct A1339),
	sizeof(struct A1340),
	sizeof(struct A1341),
	sizeof(union  A1342),
	sizeof(struct A1343),
	sizeof(union  A1344),
	sizeof(struct A1345),
	sizeof(union  A1346),
	sizeof(struct A1347),
	sizeof(struct A1348),
	sizeof(union  A1349),
	sizeof(union  A1350),
	sizeof(struct A1351),
	sizeof(struct A1352),
	sizeof(struct A1353),
	sizeof(union  A1354),
	sizeof(struct A1355),
	sizeof(struct A1356),
	sizeof(struct A1357),
	sizeof(struct A1358),
	sizeof(union  A1359),
	sizeof(struct A1360),
	sizeof(struct A1361),
	sizeof(union  A1362),
	sizeof(union  A1363),
	sizeof(struct A1364),
	sizeof(union  A1365),
	sizeof(union  A1366),
	sizeof(struct A1367),
	sizeof(struct A1368),
	sizeof(struct A1369),
	sizeof(struct A1370),
	sizeof(union  A1371),
	sizeof(union  A1372),
	sizeof(struct A1373),
	sizeof(union  A1374),
	sizeof(union  A1375),
	sizeof(union  A1376),
	sizeof(struct A1377),
	sizeof(struct A1378),
	sizeof(struct A1379),
	sizeof(union  A1380),
	sizeof(union  A1381),
	sizeof(struct A1382),
	sizeof(struct A1383),
	sizeof(union  A1384),
	sizeof(union  A1385),
	sizeof(union  A1386),
	sizeof(struct A1387),
	sizeof(struct A1388),
	sizeof(union  A1389),
	sizeof(union  A1390),
	sizeof(struct A1391),
	sizeof(union  A1392),
	sizeof(union  A1393),
	sizeof(struct A1394),
	sizeof(struct A1395),
	sizeof(struct A1396),
	sizeof(union  A1397),
	sizeof(union  A1398),
	sizeof(union  A1399),
	sizeof(struct A1400),
	sizeof(struct A1401),
	sizeof(union  A1402),
	sizeof(struct A1403),
	sizeof(struct A1404),
	sizeof(struct A1405),
	sizeof(union  A1406),
	sizeof(struct A1407),
	sizeof(union  A1408),
	sizeof(union  A1409),
	sizeof(struct A1410),
	sizeof(struct A1411),
	sizeof(struct A1412),
	sizeof(union  A1413),
	sizeof(struct A1414),
	sizeof(union  A1415),
	sizeof(union  A1416),
	sizeof(union  A1417),
	sizeof(union  A1418),
	sizeof(struct A1419),
	sizeof(union  A1420),
	sizeof(union  A1421),
	sizeof(struct A1422),
	sizeof(union  A1423),
	sizeof(union  A1424),
	sizeof(union  A1425),
	sizeof(union  A1426),
	sizeof(union  A1427),
	sizeof(union  A1428),
	sizeof(union  A1429),
	sizeof(struct A1430),
	sizeof(union  A1431),
	sizeof(union  A1432),
	sizeof(struct A1433),
	sizeof(union  A1434),
	sizeof(struct A1435),
	sizeof(union  A1436),
	sizeof(struct A1437),
	sizeof(struct A1438),
	sizeof(struct A1439),
	sizeof(struct A1440),
	sizeof(union  A1441),
	sizeof(union  A1442),
	sizeof(union  A1443),
	sizeof(struct A1444),
	sizeof(struct A1445),
	sizeof(union  A1446),
	sizeof(union  A1447),
	sizeof(union  A1448),
	sizeof(struct A1449),
	sizeof(union  A1450),
	sizeof(struct A1451),
	sizeof(union  A1452),
	sizeof(struct A1453),
	sizeof(struct A1454),
	sizeof(union  A1455),
	sizeof(struct A1456),
	sizeof(struct A1457),
	sizeof(union  A1458),
	sizeof(struct A1459),
	sizeof(struct A1460),
	sizeof(struct A1461),
	sizeof(union  A1462),
	sizeof(union  A1463),
	sizeof(struct A1464),
	sizeof(struct A1465),
	sizeof(union  A1466),
	sizeof(union  A1467),
	sizeof(union  A1468),
	sizeof(struct A1469),
	sizeof(struct A1470),
	sizeof(struct A1471),
	sizeof(struct A1472),
	sizeof(union  A1473),
	sizeof(struct A1474),
	sizeof(struct A1475),
	sizeof(struct A1476),
	sizeof(struct A1477),
	sizeof(union  A1478),
	sizeof(struct A1479),
	sizeof(struct A1480),
	sizeof(struct A1481),
	sizeof(union  A1482),
	sizeof(struct A1483),
	sizeof(struct A1484),
	sizeof(struct A1485),
	sizeof(union  A1486),
	sizeof(struct A1487),
	sizeof(union  A1488),
	sizeof(struct A1489),
	sizeof(struct A1490),
	sizeof(union  A1491),
	sizeof(union  A1492),
	sizeof(union  A1493),
	sizeof(union  A1494),
	sizeof(struct A1495),
	sizeof(union  A1496),
	sizeof(union  A1497),
	sizeof(union  A1498),
	sizeof(struct A1499),
	sizeof(union  A1500),
	sizeof(union  A1501),
	sizeof(struct A1502),
	sizeof(struct A1503),
	sizeof(union  A1504),
	sizeof(struct A1505),
	sizeof(struct A1506),
	sizeof(struct A1507),
	sizeof(union  A1508),
	sizeof(struct A1509),
	sizeof(struct A1510),
	sizeof(union  A1511),
	sizeof(union  A1512),
	sizeof(struct A1513),
	sizeof(union  A1514),
	sizeof(struct A1515),
	sizeof(struct A1516),
	sizeof(struct A1517),
	sizeof(union  A1518),
	sizeof(union  A1519),
	sizeof(union  A1520),
	sizeof(union  A1521),
	sizeof(struct A1522),
	sizeof(struct A1523),
	sizeof(struct A1524),
	sizeof(union  A1525),
	sizeof(union  A1526),
	sizeof(union  A1527),
	sizeof(struct A1528),
	sizeof(union  A1529),
	sizeof(struct A1530),
	sizeof(struct A1531),
	sizeof(union  A1532),
	sizeof(union  A1533),
	sizeof(union  A1534),
	sizeof(union  A1535),
	sizeof(union  A1536),
	sizeof(union  A1537),
	sizeof(union  A1538),
	sizeof(union  A1539),
	sizeof(struct A1540),
	sizeof(union  A1541),
	sizeof(struct A1542),
	sizeof(union  A1543),
	sizeof(struct A1544),
	sizeof(union  A1545),
	sizeof(struct A1546),
	sizeof(struct A1547),
	sizeof(union  A1548),
	sizeof(struct A1549),
	sizeof(struct A1550),
	sizeof(struct A1551),
	sizeof(struct A1552),
	sizeof(struct A1553),
	sizeof(struct A1554),
	sizeof(union  A1555),
	sizeof(union  A1556),
	sizeof(struct A1557),
	sizeof(union  A1558),
	sizeof(struct A1559),
	sizeof(union  A1560),
	sizeof(union  A1561),
	sizeof(union  A1562),
	sizeof(struct A1563),
	sizeof(union  A1564),
	sizeof(struct A1565),
	sizeof(union  A1566),
	sizeof(struct A1567),
	sizeof(struct A1568),
	sizeof(union  A1569),
	sizeof(union  A1570),
	sizeof(union  A1571),
	sizeof(union  A1572),
	sizeof(union  A1573),
	sizeof(union  A1574),
	sizeof(struct A1575),
	sizeof(union  A1576),
	sizeof(struct A1577),
	sizeof(union  A1578),
	sizeof(struct A1579),
	sizeof(struct A1580),
	sizeof(union  A1581),
	sizeof(union  A1582),
	sizeof(struct A1583),
	sizeof(union  A1584),
	sizeof(struct A1585),
	sizeof(struct A1586),
	sizeof(union  A1587),
	sizeof(union  A1588),
	sizeof(union  A1589),
	sizeof(struct A1590),
	sizeof(union  A1591),
	sizeof(union  A1592),
	sizeof(union  A1593),
	sizeof(union  A1594),
	sizeof(struct A1595),
	sizeof(struct A1596),
	sizeof(struct A1597),
	sizeof(union  A1598),
	sizeof(union  A1599),
	sizeof(struct A1600),
	sizeof(union  A1601),
	sizeof(union  A1602),
	sizeof(struct A1603),
	sizeof(struct A1604),
	sizeof(struct A1605),
	sizeof(union  A1606),
	sizeof(union  A1607),
	sizeof(struct A1608),
	sizeof(union  A1609),
	sizeof(struct A1610),
	sizeof(struct A1611),
	sizeof(struct A1612),
	sizeof(struct A1613),
	sizeof(union  A1614),
	sizeof(union  A1615),
	sizeof(struct A1616),
	sizeof(union  A1617),
	sizeof(union  A1618),
	sizeof(struct A1619),
	sizeof(union  A1620),
	sizeof(struct A1621),
	sizeof(union  A1622),
	sizeof(union  A1623),
	sizeof(struct A1624),
	sizeof(union  A1625),
	sizeof(union  A1626),
	sizeof(struct A1627),
	sizeof(struct A1628),
	sizeof(struct A1629),
	sizeof(struct A1630),
	sizeof(struct A1631),
	sizeof(union  A1632),
	sizeof(union  A1633),
	sizeof(union  A1634),
	sizeof(union  A1635),
	sizeof(struct A1636),
	sizeof(struct A1637),
	sizeof(union  A1638),
	sizeof(union  A1639),
	sizeof(union  A1640),
	sizeof(struct A1641),
	sizeof(union  A1642),
	sizeof(union  A1643),
	sizeof(struct A1644),
	sizeof(struct A1645),
	sizeof(union  A1646),
	sizeof(struct A1647),
	sizeof(struct A1648),
	sizeof(struct A1649),
	sizeof(union  A1650),
	sizeof(struct A1651),
	sizeof(struct A1652),
	sizeof(struct A1653),
	sizeof(union  A1654),
	sizeof(union  A1655),
	sizeof(struct A1656),
	sizeof(union  A1657),
	sizeof(struct A1658),
	sizeof(struct A1659),
	sizeof(struct A1660),
	sizeof(struct A1661),
	sizeof(struct A1662),
	sizeof(union  A1663),
	sizeof(struct A1664),
	sizeof(union  A1665),
	sizeof(struct A1666),
	sizeof(struct A1667),
	sizeof(struct A1668),
	sizeof(struct A1669),
	sizeof(struct A1670),
	sizeof(struct A1671),
	sizeof(struct A1672),
	sizeof(struct A1673),
	sizeof(struct A1674),
	sizeof(union  A1675),
	sizeof(struct A1676),
	sizeof(union  A1677),
	sizeof(union  A1678),
	sizeof(union  A1679),
	sizeof(union  A1680),
	sizeof(union  A1681),
	sizeof(struct A1682),
	sizeof(struct A1683),
	sizeof(union  A1684),
	sizeof(struct A1685),
	sizeof(struct A1686),
	sizeof(struct A1687),
	sizeof(struct A1688),
	sizeof(struct A1689),
	sizeof(union  A1690),
	sizeof(struct A1691),
	sizeof(struct A1692),
	sizeof(struct A1693),
	sizeof(union  A1694),
	sizeof(union  A1695),
	sizeof(union  A1696),
	sizeof(union  A1697),
	sizeof(struct A1698),
	sizeof(union  A1699),
	sizeof(union  A1700),
	sizeof(union  A1701),
	sizeof(union  A1702),
	sizeof(union  A1703),
	sizeof(struct A1704),
	sizeof(struct A1705),
	sizeof(struct A1706),
	sizeof(struct A1707),
	sizeof(union  A1708),
	sizeof(struct A1709),
	sizeof(union  A1710),
	sizeof(union  A1711),
	sizeof(struct A1712),
	sizeof(union  A1713),
	sizeof(union  A1714),
	sizeof(union  A1715),
	sizeof(struct A1716),
	sizeof(union  A1717),
	sizeof(union  A1718),
	sizeof(struct A1719),
	sizeof(struct A1720),
	sizeof(struct A1721),
	sizeof(struct A1722),
	sizeof(struct A1723),
	sizeof(union  A1724),
	sizeof(union  A1725),
	sizeof(struct A1726),
	sizeof(struct A1727),
	sizeof(union  A1728),
	sizeof(union  A1729),
	sizeof(union  A1730),
	sizeof(struct A1731),
	sizeof(union  A1732),
	sizeof(union  A1733),
	sizeof(struct A1734),
	sizeof(union  A1735),
	sizeof(struct A1736),
	sizeof(union  A1737),
	sizeof(union  A1738),
	sizeof(struct A1739),
	sizeof(union  A1740),
	sizeof(union  A1741),
	sizeof(struct A1742),
	sizeof(union  A1743),
	sizeof(union  A1744),
	sizeof(union  A1745),
	sizeof(union  A1746),
	sizeof(union  A1747),
	sizeof(union  A1748),
	sizeof(union  A1749),
	sizeof(union  A1750),
	sizeof(struct A1751),
	sizeof(union  A1752),
	sizeof(union  A1753),
	sizeof(union  A1754),
	sizeof(union  A1755),
	sizeof(struct A1756),
	sizeof(union  A1757),
	sizeof(union  A1758),
	sizeof(struct A1759),
	sizeof(struct A1760),
	sizeof(union  A1761),
	sizeof(union  A1762),
	sizeof(union  A1763),
	sizeof(struct A1764),
	sizeof(union  A1765),
	sizeof(union  A1766),
	sizeof(union  A1767),
	sizeof(struct A1768),
	sizeof(union  A1769),
	sizeof(struct A1770),
	sizeof(union  A1771),
	sizeof(struct A1772),
	sizeof(union  A1773),
	sizeof(struct A1774),
	sizeof(union  A1775),
	sizeof(struct A1776),
	sizeof(struct A1777),
	sizeof(struct A1778),
	sizeof(union  A1779),
	sizeof(union  A1780),
	sizeof(union  A1781),
	sizeof(struct A1782),
	sizeof(union  A1783),
	sizeof(struct A1784),
	sizeof(union  A1785),
	sizeof(union  A1786),
	sizeof(struct A1787),
	sizeof(struct A1788),
	sizeof(union  A1789),
	sizeof(struct A1790),
	sizeof(struct A1791),
	sizeof(struct A1792),
	sizeof(union  A1793),
	sizeof(union  A1794),
	sizeof(struct A1795),
	sizeof(union  A1796),
	sizeof(union  A1797),
	sizeof(struct A1798),
	sizeof(union  A1799),
	sizeof(union  A1800),
	sizeof(struct A1801),
	sizeof(union  A1802),
	sizeof(union  A1803),
	sizeof(struct A1804),
	sizeof(struct A1805),
	sizeof(struct A1806),
	sizeof(struct A1807),
	sizeof(struct A1808),
	sizeof(union  A1809),
	sizeof(union  A1810),
	sizeof(struct A1811),
	sizeof(struct A1812),
	sizeof(struct A1813),
	sizeof(struct A1814),
	sizeof(struct A1815),
	sizeof(struct A1816),
	sizeof(union  A1817),
	sizeof(struct A1818),
	sizeof(union  A1819),
	sizeof(union  A1820),
	sizeof(union  A1821),
	sizeof(struct A1822),
	sizeof(struct A1823),
	sizeof(struct A1824),
	sizeof(union  A1825),
	sizeof(union  A1826),
	sizeof(union  A1827),
	sizeof(union  A1828),
	sizeof(struct A1829),
	sizeof(struct A1830),
	sizeof(struct A1831),
	sizeof(struct A1832),
	sizeof(struct A1833),
	sizeof(union  A1834),
	sizeof(union  A1835),
	sizeof(struct A1836),
	sizeof(union  A1837),
	sizeof(struct A1838),
	sizeof(union  A1839),
	sizeof(union  A1840),
	sizeof(union  A1841),
	sizeof(union  A1842),
	sizeof(struct A1843),
	sizeof(union  A1844),
	sizeof(struct A1845),
	sizeof(struct A1846),
	sizeof(struct A1847),
	sizeof(struct A1848),
	sizeof(union  A1849),
	sizeof(struct A1850),
	sizeof(union  A1851),
	sizeof(struct A1852),
	sizeof(struct A1853),
	sizeof(union  A1854),
	sizeof(union  A1855),
	sizeof(union  A1856),
	sizeof(struct A1857),
	sizeof(struct A1858),
	sizeof(struct A1859),
	sizeof(struct A1860),
	sizeof(struct A1861),
	sizeof(union  A1862),
	sizeof(union  A1863),
	sizeof(union  A1864),
	sizeof(struct A1865),
	sizeof(struct A1866),
	sizeof(struct A1867),
	sizeof(union  A1868),
	sizeof(union  A1869),
	sizeof(union  A1870),
	sizeof(union  A1871),
	sizeof(struct A1872),
	sizeof(struct A1873),
	sizeof(union  A1874),
	sizeof(union  A1875),
	sizeof(union  A1876),
	sizeof(union  A1877),
	sizeof(union  A1878),
	sizeof(union  A1879),
	sizeof(struct A1880),
	sizeof(union  A1881),
	sizeof(struct A1882),
	sizeof(struct A1883),
	sizeof(union  A1884),
	sizeof(struct A1885),
	sizeof(struct A1886),
	sizeof(union  A1887),
	sizeof(union  A1888),
	sizeof(struct A1889),
	sizeof(struct A1890),
	sizeof(struct A1891),
	sizeof(union  A1892),
	sizeof(struct A1893),
	sizeof(union  A1894),
	sizeof(union  A1895),
	sizeof(struct A1896),
	sizeof(struct A1897),
	sizeof(struct A1898),
	sizeof(struct A1899),
	sizeof(struct A1900),
	sizeof(union  A1901),
	sizeof(struct A1902),
	sizeof(union  A1903),
	sizeof(union  A1904),
	sizeof(union  A1905),
	sizeof(union  A1906),
	sizeof(union  A1907),
	sizeof(union  A1908),
	sizeof(union  A1909),
	sizeof(union  A1910),
	sizeof(union  A1911),
	sizeof(struct A1912),
	sizeof(struct A1913),
	sizeof(struct A1914),
	sizeof(struct A1915),
	sizeof(union  A1916),
	sizeof(struct A1917),
	sizeof(union  A1918),
	sizeof(union  A1919),
	sizeof(struct A1920),
	sizeof(union  A1921),
	sizeof(union  A1922),
	sizeof(union  A1923),
	sizeof(struct A1924),
	sizeof(union  A1925),
	sizeof(struct A1926),
	sizeof(struct A1927),
	sizeof(union  A1928),
	sizeof(union  A1929),
	sizeof(struct A1930),
	sizeof(union  A1931),
	sizeof(union  A1932),
	sizeof(struct A1933),
	sizeof(struct A1934),
	sizeof(struct A1935),
	sizeof(union  A1936),
	sizeof(struct A1937),
	sizeof(struct A1938),
	sizeof(union  A1939),
	sizeof(struct A1940),
	sizeof(union  A1941),
	sizeof(struct A1942),
	sizeof(union  A1943),
	sizeof(struct A1944),
	sizeof(struct A1945),
	sizeof(struct A1946),
	sizeof(struct A1947),
	sizeof(union  A1948),
	sizeof(union  A1949),
	sizeof(union  A1950),
	sizeof(struct A1951),
	sizeof(struct A1952),
	sizeof(struct A1953),
	sizeof(union  A1954),
	sizeof(struct A1955),
	sizeof(struct A1956),
	sizeof(union  A1957),
	sizeof(union  A1958),
	sizeof(struct A1959),
	sizeof(struct A1960),
	sizeof(struct A1961),
	sizeof(union  A1962),
	sizeof(union  A1963),
	sizeof(union  A1964),
	sizeof(struct A1965),
	sizeof(union  A1966),
	sizeof(struct A1967),
	sizeof(struct A1968),
	sizeof(struct A1969),
	sizeof(union  A1970),
	sizeof(struct A1971),
	sizeof(union  A1972),
	sizeof(struct A1973),
	sizeof(struct A1974),
	sizeof(union  A1975),
	sizeof(union  A1976),
	sizeof(struct A1977),
	sizeof(struct A1978),
	sizeof(union  A1979),
	sizeof(struct A1980),
	sizeof(struct A1981),
	sizeof(struct A1982),
	sizeof(struct A1983),
	sizeof(struct A1984),
	sizeof(struct A1985),
	sizeof(struct A1986),
	sizeof(union  A1987),
	sizeof(struct A1988),
	sizeof(union  A1989),
	sizeof(struct A1990),
	sizeof(struct A1991),
	sizeof(struct A1992),
	sizeof(union  A1993),
	sizeof(union  A1994),
	sizeof(struct A1995),
	sizeof(struct A1996),
	sizeof(union  A1997),
	sizeof(struct A1998),
	sizeof(union  A1999),
	sizeof(union  A2000),
	sizeof(union  A2001),
	sizeof(struct A2002),
	sizeof(struct A2003),
	sizeof(struct A2004),
	sizeof(struct A2005),
	sizeof(struct A2006),
	sizeof(union  A2007),
	sizeof(union  A2008),
	sizeof(struct A2009),
	sizeof(union  A2010),
	sizeof(union  A2011),
	sizeof(struct A2012),
	sizeof(struct A2013),
	sizeof(union  A2014),
	sizeof(union  A2015),
	sizeof(union  A2016),
	sizeof(union  A2017),
	sizeof(struct A2018),
	sizeof(struct A2019),
	sizeof(struct A2020),
	sizeof(struct A2021),
	sizeof(union  A2022),
	sizeof(struct A2023),
	sizeof(union  A2024),
	sizeof(struct A2025),
	sizeof(struct A2026)
};
funptr G_agg_touchdcstfuncs[] = {
	(funptr)&f_touchdcstA1,
	(funptr)&f_touchdcstA2,
	(funptr)&f_touchdcstA3,
	(funptr)&f_touchdcstA4,
	(funptr)&f_touchdcstA5,
	(funptr)&f_touchdcstA6,
	(funptr)&f_touchdcstA7,
	(funptr)&f_touchdcstA8,
	(funptr)&f_touchdcstA9,
	(funptr)&f_touchdcstA10,
	(funptr)&f_touchdcstA11,
	(funptr)&f_touchdcstA12,
	(funptr)&f_touchdcstA13,
	(funptr)&f_touchdcstA14,
	(funptr)&f_touchdcstA15,
	(funptr)&f_touchdcstA16,
	(funptr)&f_touchdcstA17,
	(funptr)&f_touchdcstA18,
	(funptr)&f_touchdcstA19,
	(funptr)&f_touchdcstA20,
	(funptr)&f_touchdcstA21,
	(funptr)&f_touchdcstA22,
	(funptr)&f_touchdcstA23,
	(funptr)&f_touchdcstA24,
	(funptr)&f_touchdcstA25,
	(funptr)&f_touchdcstA26,
	(funptr)&f_touchdcstA27,
	(funptr)&f_touchdcstA28,
	(funptr)&f_touchdcstA29,
	(funptr)&f_touchdcstA30,
	(funptr)&f_touchdcstA31,
	(funptr)&f_touchdcstA32,
	(funptr)&f_touchdcstA33,
	(funptr)&f_touchdcstA34,
	(funptr)&f_touchdcstA35,
	(funptr)&f_touchdcstA36,
	(funptr)&f_touchdcstA37,
	(funptr)&f_touchdcstA38,
	(funptr)&f_touchdcstA39,
	(funptr)&f_touchdcstA40,
	(funptr)&f_touchdcstA41,
	(funptr)&f_touchdcstA42,
	(funptr)&f_touchdcstA43,
	(funptr)&f_touchdcstA44,
	(funptr)&f_touchdcstA45,
	(funptr)&f_touchdcstA46,
	(funptr)&f_touchdcstA47,
	(funptr)&f_touchdcstA48,
	(funptr)&f_touchdcstA49,
	(funptr)&f_touchdcstA50,
	(funptr)&f_touchdcstA51,
	(funptr)&f_touchdcstA52,
	(funptr)&f_touchdcstA53,
	(funptr)&f_touchdcstA54,
	(funptr)&f_touchdcstA55,
	(funptr)&f_touchdcstA56,
	(funptr)&f_touchdcstA57,
	(funptr)&f_touchdcstA58,
	(funptr)&f_touchdcstA59,
	(funptr)&f_touchdcstA60,
	(funptr)&f_touchdcstA61,
	(funptr)&f_touchdcstA62,
	(funptr)&f_touchdcstA63,
	(funptr)&f_touchdcstA64,
	(funptr)&f_touchdcstA65,
	(funptr)&f_touchdcstA66,
	(funptr)&f_touchdcstA67,
	(funptr)&f_touchdcstA68,
	(funptr)&f_touchdcstA69,
	(funptr)&f_touchdcstA70,
	(funptr)&f_touchdcstA71,
	(funptr)&f_touchdcstA72,
	(funptr)&f_touchdcstA73,
	(funptr)&f_touchdcstA74,
	(funptr)&f_touchdcstA75,
	(funptr)&f_touchdcstA76,
	(funptr)&f_touchdcstA77,
	(funptr)&f_touchdcstA78,
	(funptr)&f_touchdcstA79,
	(funptr)&f_touchdcstA80,
	(funptr)&f_touchdcstA81,
	(funptr)&f_touchdcstA82,
	(funptr)&f_touchdcstA83,
	(funptr)&f_touchdcstA84,
	(funptr)&f_touchdcstA85,
	(funptr)&f_touchdcstA86,
	(funptr)&f_touchdcstA87,
	(funptr)&f_touchdcstA88,
	(funptr)&f_touchdcstA89,
	(funptr)&f_touchdcstA90,
	(funptr)&f_touchdcstA91,
	(funptr)&f_touchdcstA92,
	(funptr)&f_touchdcstA93,
	(funptr)&f_touchdcstA94,
	(funptr)&f_touchdcstA95,
	(funptr)&f_touchdcstA96,
	(funptr)&f_touchdcstA97,
	(funptr)&f_touchdcstA98,
	(funptr)&f_touchdcstA99,
	(funptr)&f_touchdcstA100,
	(funptr)&f_touchdcstA101,
	(funptr)&f_touchdcstA102,
	(funptr)&f_touchdcstA103,
	(funptr)&f_touchdcstA104,
	(funptr)&f_touchdcstA105,
	(funptr)&f_touchdcstA106,
	(funptr)&f_touchdcstA107,
	(funptr)&f_touchdcstA108,
	(funptr)&f_touchdcstA109,
	(funptr)&f_touchdcstA110,
	(funptr)&f_touchdcstA111,
	(funptr)&f_touchdcstA112,
	(funptr)&f_touchdcstA113,
	(funptr)&f_touchdcstA114,
	(funptr)&f_touchdcstA115,
	(funptr)&f_touchdcstA116,
	(funptr)&f_touchdcstA117,
	(funptr)&f_touchdcstA118,
	(funptr)&f_touchdcstA119,
	(funptr)&f_touchdcstA120,
	(funptr)&f_touchdcstA121,
	(funptr)&f_touchdcstA122,
	(funptr)&f_touchdcstA123,
	(funptr)&f_touchdcstA124,
	(funptr)&f_touchdcstA125,
	(funptr)&f_touchdcstA126,
	(funptr)&f_touchdcstA127,
	(funptr)&f_touchdcstA128,
	(funptr)&f_touchdcstA129,
	(funptr)&f_touchdcstA130,
	(funptr)&f_touchdcstA131,
	(funptr)&f_touchdcstA132,
	(funptr)&f_touchdcstA133,
	(funptr)&f_touchdcstA134,
	(funptr)&f_touchdcstA135,
	(funptr)&f_touchdcstA136,
	(funptr)&f_touchdcstA137,
	(funptr)&f_touchdcstA138,
	(funptr)&f_touchdcstA139,
	(funptr)&f_touchdcstA140,
	(funptr)&f_touchdcstA141,
	(funptr)&f_touchdcstA142,
	(funptr)&f_touchdcstA143,
	(funptr)&f_touchdcstA144,
	(funptr)&f_touchdcstA145,
	(funptr)&f_touchdcstA146,
	(funptr)&f_touchdcstA147,
	(funptr)&f_touchdcstA148,
	(funptr)&f_touchdcstA149,
	(funptr)&f_touchdcstA150,
	(funptr)&f_touchdcstA151,
	(funptr)&f_touchdcstA152,
	(funptr)&f_touchdcstA153,
	(funptr)&f_touchdcstA154,
	(funptr)&f_touchdcstA155,
	(funptr)&f_touchdcstA156,
	(funptr)&f_touchdcstA157,
	(funptr)&f_touchdcstA158,
	(funptr)&f_touchdcstA159,
	(funptr)&f_touchdcstA160,
	(funptr)&f_touchdcstA161,
	(funptr)&f_touchdcstA162,
	(funptr)&f_touchdcstA163,
	(funptr)&f_touchdcstA164,
	(funptr)&f_touchdcstA165,
	(funptr)&f_touchdcstA166,
	(funptr)&f_touchdcstA167,
	(funptr)&f_touchdcstA168,
	(funptr)&f_touchdcstA169,
	(funptr)&f_touchdcstA170,
	(funptr)&f_touchdcstA171,
	(funptr)&f_touchdcstA172,
	(funptr)&f_touchdcstA173,
	(funptr)&f_touchdcstA174,
	(funptr)&f_touchdcstA175,
	(funptr)&f_touchdcstA176,
	(funptr)&f_touchdcstA177,
	(funptr)&f_touchdcstA178,
	(funptr)&f_touchdcstA179,
	(funptr)&f_touchdcstA180,
	(funptr)&f_touchdcstA181,
	(funptr)&f_touchdcstA182,
	(funptr)&f_touchdcstA183,
	(funptr)&f_touchdcstA184,
	(funptr)&f_touchdcstA185,
	(funptr)&f_touchdcstA186,
	(funptr)&f_touchdcstA187,
	(funptr)&f_touchdcstA188,
	(funptr)&f_touchdcstA189,
	(funptr)&f_touchdcstA190,
	(funptr)&f_touchdcstA191,
	(funptr)&f_touchdcstA192,
	(funptr)&f_touchdcstA193,
	(funptr)&f_touchdcstA194,
	(funptr)&f_touchdcstA195,
	(funptr)&f_touchdcstA196,
	(funptr)&f_touchdcstA197,
	(funptr)&f_touchdcstA198,
	(funptr)&f_touchdcstA199,
	(funptr)&f_touchdcstA200,
	(funptr)&f_touchdcstA201,
	(funptr)&f_touchdcstA202,
	(funptr)&f_touchdcstA203,
	(funptr)&f_touchdcstA204,
	(funptr)&f_touchdcstA205,
	(funptr)&f_touchdcstA206,
	(funptr)&f_touchdcstA207,
	(funptr)&f_touchdcstA208,
	(funptr)&f_touchdcstA209,
	(funptr)&f_touchdcstA210,
	(funptr)&f_touchdcstA211,
	(funptr)&f_touchdcstA212,
	(funptr)&f_touchdcstA213,
	(funptr)&f_touchdcstA214,
	(funptr)&f_touchdcstA215,
	(funptr)&f_touchdcstA216,
	(funptr)&f_touchdcstA217,
	(funptr)&f_touchdcstA218,
	(funptr)&f_touchdcstA219,
	(funptr)&f_touchdcstA220,
	(funptr)&f_touchdcstA221,
	(funptr)&f_touchdcstA222,
	(funptr)&f_touchdcstA223,
	(funptr)&f_touchdcstA224,
	(funptr)&f_touchdcstA225,
	(funptr)&f_touchdcstA226,
	(funptr)&f_touchdcstA227,
	(funptr)&f_touchdcstA228,
	(funptr)&f_touchdcstA229,
	(funptr)&f_touchdcstA230,
	(funptr)&f_touchdcstA231,
	(funptr)&f_touchdcstA232,
	(funptr)&f_touchdcstA233,
	(funptr)&f_touchdcstA234,
	(funptr)&f_touchdcstA235,
	(funptr)&f_touchdcstA236,
	(funptr)&f_touchdcstA237,
	(funptr)&f_touchdcstA238,
	(funptr)&f_touchdcstA239,
	(funptr)&f_touchdcstA240,
	(funptr)&f_touchdcstA241,
	(funptr)&f_touchdcstA242,
	(funptr)&f_touchdcstA243,
	(funptr)&f_touchdcstA244,
	(funptr)&f_touchdcstA245,
	(funptr)&f_touchdcstA246,
	(funptr)&f_touchdcstA247,
	(funptr)&f_touchdcstA248,
	(funptr)&f_touchdcstA249,
	(funptr)&f_touchdcstA250,
	(funptr)&f_touchdcstA251,
	(funptr)&f_touchdcstA252,
	(funptr)&f_touchdcstA253,
	(funptr)&f_touchdcstA254,
	(funptr)&f_touchdcstA255,
	(funptr)&f_touchdcstA256,
	(funptr)&f_touchdcstA257,
	(funptr)&f_touchdcstA258,
	(funptr)&f_touchdcstA259,
	(funptr)&f_touchdcstA260,
	(funptr)&f_touchdcstA261,
	(funptr)&f_touchdcstA262,
	(funptr)&f_touchdcstA263,
	(funptr)&f_touchdcstA264,
	(funptr)&f_touchdcstA265,
	(funptr)&f_touchdcstA266,
	(funptr)&f_touchdcstA267,
	(funptr)&f_touchdcstA268,
	(funptr)&f_touchdcstA269,
	(funptr)&f_touchdcstA270,
	(funptr)&f_touchdcstA271,
	(funptr)&f_touchdcstA272,
	(funptr)&f_touchdcstA273,
	(funptr)&f_touchdcstA274,
	(funptr)&f_touchdcstA275,
	(funptr)&f_touchdcstA276,
	(funptr)&f_touchdcstA277,
	(funptr)&f_touchdcstA278,
	(funptr)&f_touchdcstA279,
	(funptr)&f_touchdcstA280,
	(funptr)&f_touchdcstA281,
	(funptr)&f_touchdcstA282,
	(funptr)&f_touchdcstA283,
	(funptr)&f_touchdcstA284,
	(funptr)&f_touchdcstA285,
	(funptr)&f_touchdcstA286,
	(funptr)&f_touchdcstA287,
	(funptr)&f_touchdcstA288,
	(funptr)&f_touchdcstA289,
	(funptr)&f_touchdcstA290,
	(funptr)&f_touchdcstA291,
	(funptr)&f_touchdcstA292,
	(funptr)&f_touchdcstA293,
	(funptr)&f_touchdcstA294,
	(funptr)&f_touchdcstA295,
	(funptr)&f_touchdcstA296,
	(funptr)&f_touchdcstA297,
	(funptr)&f_touchdcstA298,
	(funptr)&f_touchdcstA299,
	(funptr)&f_touchdcstA300,
	(funptr)&f_touchdcstA301,
	(funptr)&f_touchdcstA302,
	(funptr)&f_touchdcstA303,
	(funptr)&f_touchdcstA304,
	(funptr)&f_touchdcstA305,
	(funptr)&f_touchdcstA306,
	(funptr)&f_touchdcstA307,
	(funptr)&f_touchdcstA308,
	(funptr)&f_touchdcstA309,
	(funptr)&f_touchdcstA310,
	(funptr)&f_touchdcstA311,
	(funptr)&f_touchdcstA312,
	(funptr)&f_touchdcstA313,
	(funptr)&f_touchdcstA314,
	(funptr)&f_touchdcstA315,
	(funptr)&f_touchdcstA316,
	(funptr)&f_touchdcstA317,
	(funptr)&f_touchdcstA318,
	(funptr)&f_touchdcstA319,
	(funptr)&f_touchdcstA320,
	(funptr)&f_touchdcstA321,
	(funptr)&f_touchdcstA322,
	(funptr)&f_touchdcstA323,
	(funptr)&f_touchdcstA324,
	(funptr)&f_touchdcstA325,
	(funptr)&f_touchdcstA326,
	(funptr)&f_touchdcstA327,
	(funptr)&f_touchdcstA328,
	(funptr)&f_touchdcstA329,
	(funptr)&f_touchdcstA330,
	(funptr)&f_touchdcstA331,
	(funptr)&f_touchdcstA332,
	(funptr)&f_touchdcstA333,
	(funptr)&f_touchdcstA334,
	(funptr)&f_touchdcstA335,
	(funptr)&f_touchdcstA336,
	(funptr)&f_touchdcstA337,
	(funptr)&f_touchdcstA338,
	(funptr)&f_touchdcstA339,
	(funptr)&f_touchdcstA340,
	(funptr)&f_touchdcstA341,
	(funptr)&f_touchdcstA342,
	(funptr)&f_touchdcstA343,
	(funptr)&f_touchdcstA344,
	(funptr)&f_touchdcstA345,
	(funptr)&f_touchdcstA346,
	(funptr)&f_touchdcstA347,
	(funptr)&f_touchdcstA348,
	(funptr)&f_touchdcstA349,
	(funptr)&f_touchdcstA350,
	(funptr)&f_touchdcstA351,
	(funptr)&f_touchdcstA352,
	(funptr)&f_touchdcstA353,
	(funptr)&f_touchdcstA354,
	(funptr)&f_touchdcstA355,
	(funptr)&f_touchdcstA356,
	(funptr)&f_touchdcstA357,
	(funptr)&f_touchdcstA358,
	(funptr)&f_touchdcstA359,
	(funptr)&f_touchdcstA360,
	(funptr)&f_touchdcstA361,
	(funptr)&f_touchdcstA362,
	(funptr)&f_touchdcstA363,
	(funptr)&f_touchdcstA364,
	(funptr)&f_touchdcstA365,
	(funptr)&f_touchdcstA366,
	(funptr)&f_touchdcstA367,
	(funptr)&f_touchdcstA368,
	(funptr)&f_touchdcstA369,
	(funptr)&f_touchdcstA370,
	(funptr)&f_touchdcstA371,
	(funptr)&f_touchdcstA372,
	(funptr)&f_touchdcstA373,
	(funptr)&f_touchdcstA374,
	(funptr)&f_touchdcstA375,
	(funptr)&f_touchdcstA376,
	(funptr)&f_touchdcstA377,
	(funptr)&f_touchdcstA378,
	(funptr)&f_touchdcstA379,
	(funptr)&f_touchdcstA380,
	(funptr)&f_touchdcstA381,
	(funptr)&f_touchdcstA382,
	(funptr)&f_touchdcstA383,
	(funptr)&f_touchdcstA384,
	(funptr)&f_touchdcstA385,
	(funptr)&f_touchdcstA386,
	(funptr)&f_touchdcstA387,
	(funptr)&f_touchdcstA388,
	(funptr)&f_touchdcstA389,
	(funptr)&f_touchdcstA390,
	(funptr)&f_touchdcstA391,
	(funptr)&f_touchdcstA392,
	(funptr)&f_touchdcstA393,
	(funptr)&f_touchdcstA394,
	(funptr)&f_touchdcstA395,
	(funptr)&f_touchdcstA396,
	(funptr)&f_touchdcstA397,
	(funptr)&f_touchdcstA398,
	(funptr)&f_touchdcstA399,
	(funptr)&f_touchdcstA400,
	(funptr)&f_touchdcstA401,
	(funptr)&f_touchdcstA402,
	(funptr)&f_touchdcstA403,
	(funptr)&f_touchdcstA404,
	(funptr)&f_touchdcstA405,
	(funptr)&f_touchdcstA406,
	(funptr)&f_touchdcstA407,
	(funptr)&f_touchdcstA408,
	(funptr)&f_touchdcstA409,
	(funptr)&f_touchdcstA410,
	(funptr)&f_touchdcstA411,
	(funptr)&f_touchdcstA412,
	(funptr)&f_touchdcstA413,
	(funptr)&f_touchdcstA414,
	(funptr)&f_touchdcstA415,
	(funptr)&f_touchdcstA416,
	(funptr)&f_touchdcstA417,
	(funptr)&f_touchdcstA418,
	(funptr)&f_touchdcstA419,
	(funptr)&f_touchdcstA420,
	(funptr)&f_touchdcstA421,
	(funptr)&f_touchdcstA422,
	(funptr)&f_touchdcstA423,
	(funptr)&f_touchdcstA424,
	(funptr)&f_touchdcstA425,
	(funptr)&f_touchdcstA426,
	(funptr)&f_touchdcstA427,
	(funptr)&f_touchdcstA428,
	(funptr)&f_touchdcstA429,
	(funptr)&f_touchdcstA430,
	(funptr)&f_touchdcstA431,
	(funptr)&f_touchdcstA432,
	(funptr)&f_touchdcstA433,
	(funptr)&f_touchdcstA434,
	(funptr)&f_touchdcstA435,
	(funptr)&f_touchdcstA436,
	(funptr)&f_touchdcstA437,
	(funptr)&f_touchdcstA438,
	(funptr)&f_touchdcstA439,
	(funptr)&f_touchdcstA440,
	(funptr)&f_touchdcstA441,
	(funptr)&f_touchdcstA442,
	(funptr)&f_touchdcstA443,
	(funptr)&f_touchdcstA444,
	(funptr)&f_touchdcstA445,
	(funptr)&f_touchdcstA446,
	(funptr)&f_touchdcstA447,
	(funptr)&f_touchdcstA448,
	(funptr)&f_touchdcstA449,
	(funptr)&f_touchdcstA450,
	(funptr)&f_touchdcstA451,
	(funptr)&f_touchdcstA452,
	(funptr)&f_touchdcstA453,
	(funptr)&f_touchdcstA454,
	(funptr)&f_touchdcstA455,
	(funptr)&f_touchdcstA456,
	(funptr)&f_touchdcstA457,
	(funptr)&f_touchdcstA458,
	(funptr)&f_touchdcstA459,
	(funptr)&f_touchdcstA460,
	(funptr)&f_touchdcstA461,
	(funptr)&f_touchdcstA462,
	(funptr)&f_touchdcstA463,
	(funptr)&f_touchdcstA464,
	(funptr)&f_touchdcstA465,
	(funptr)&f_touchdcstA466,
	(funptr)&f_touchdcstA467,
	(funptr)&f_touchdcstA468,
	(funptr)&f_touchdcstA469,
	(funptr)&f_touchdcstA470,
	(funptr)&f_touchdcstA471,
	(funptr)&f_touchdcstA472,
	(funptr)&f_touchdcstA473,
	(funptr)&f_touchdcstA474,
	(funptr)&f_touchdcstA475,
	(funptr)&f_touchdcstA476,
	(funptr)&f_touchdcstA477,
	(funptr)&f_touchdcstA478,
	(funptr)&f_touchdcstA479,
	(funptr)&f_touchdcstA480,
	(funptr)&f_touchdcstA481,
	(funptr)&f_touchdcstA482,
	(funptr)&f_touchdcstA483,
	(funptr)&f_touchdcstA484,
	(funptr)&f_touchdcstA485,
	(funptr)&f_touchdcstA486,
	(funptr)&f_touchdcstA487,
	(funptr)&f_touchdcstA488,
	(funptr)&f_touchdcstA489,
	(funptr)&f_touchdcstA490,
	(funptr)&f_touchdcstA491,
	(funptr)&f_touchdcstA492,
	(funptr)&f_touchdcstA493,
	(funptr)&f_touchdcstA494,
	(funptr)&f_touchdcstA495,
	(funptr)&f_touchdcstA496,
	(funptr)&f_touchdcstA497,
	(funptr)&f_touchdcstA498,
	(funptr)&f_touchdcstA499,
	(funptr)&f_touchdcstA500,
	(funptr)&f_touchdcstA501,
	(funptr)&f_touchdcstA502,
	(funptr)&f_touchdcstA503,
	(funptr)&f_touchdcstA504,
	(funptr)&f_touchdcstA505,
	(funptr)&f_touchdcstA506,
	(funptr)&f_touchdcstA507,
	(funptr)&f_touchdcstA508,
	(funptr)&f_touchdcstA509,
	(funptr)&f_touchdcstA510,
	(funptr)&f_touchdcstA511,
	(funptr)&f_touchdcstA512,
	(funptr)&f_touchdcstA513,
	(funptr)&f_touchdcstA514,
	(funptr)&f_touchdcstA515,
	(funptr)&f_touchdcstA516,
	(funptr)&f_touchdcstA517,
	(funptr)&f_touchdcstA518,
	(funptr)&f_touchdcstA519,
	(funptr)&f_touchdcstA520,
	(funptr)&f_touchdcstA521,
	(funptr)&f_touchdcstA522,
	(funptr)&f_touchdcstA523,
	(funptr)&f_touchdcstA524,
	(funptr)&f_touchdcstA525,
	(funptr)&f_touchdcstA526,
	(funptr)&f_touchdcstA527,
	(funptr)&f_touchdcstA528,
	(funptr)&f_touchdcstA529,
	(funptr)&f_touchdcstA530,
	(funptr)&f_touchdcstA531,
	(funptr)&f_touchdcstA532,
	(funptr)&f_touchdcstA533,
	(funptr)&f_touchdcstA534,
	(funptr)&f_touchdcstA535,
	(funptr)&f_touchdcstA536,
	(funptr)&f_touchdcstA537,
	(funptr)&f_touchdcstA538,
	(funptr)&f_touchdcstA539,
	(funptr)&f_touchdcstA540,
	(funptr)&f_touchdcstA541,
	(funptr)&f_touchdcstA542,
	(funptr)&f_touchdcstA543,
	(funptr)&f_touchdcstA544,
	(funptr)&f_touchdcstA545,
	(funptr)&f_touchdcstA546,
	(funptr)&f_touchdcstA547,
	(funptr)&f_touchdcstA548,
	(funptr)&f_touchdcstA549,
	(funptr)&f_touchdcstA550,
	(funptr)&f_touchdcstA551,
	(funptr)&f_touchdcstA552,
	(funptr)&f_touchdcstA553,
	(funptr)&f_touchdcstA554,
	(funptr)&f_touchdcstA555,
	(funptr)&f_touchdcstA556,
	(funptr)&f_touchdcstA557,
	(funptr)&f_touchdcstA558,
	(funptr)&f_touchdcstA559,
	(funptr)&f_touchdcstA560,
	(funptr)&f_touchdcstA561,
	(funptr)&f_touchdcstA562,
	(funptr)&f_touchdcstA563,
	(funptr)&f_touchdcstA564,
	(funptr)&f_touchdcstA565,
	(funptr)&f_touchdcstA566,
	(funptr)&f_touchdcstA567,
	(funptr)&f_touchdcstA568,
	(funptr)&f_touchdcstA569,
	(funptr)&f_touchdcstA570,
	(funptr)&f_touchdcstA571,
	(funptr)&f_touchdcstA572,
	(funptr)&f_touchdcstA573,
	(funptr)&f_touchdcstA574,
	(funptr)&f_touchdcstA575,
	(funptr)&f_touchdcstA576,
	(funptr)&f_touchdcstA577,
	(funptr)&f_touchdcstA578,
	(funptr)&f_touchdcstA579,
	(funptr)&f_touchdcstA580,
	(funptr)&f_touchdcstA581,
	(funptr)&f_touchdcstA582,
	(funptr)&f_touchdcstA583,
	(funptr)&f_touchdcstA584,
	(funptr)&f_touchdcstA585,
	(funptr)&f_touchdcstA586,
	(funptr)&f_touchdcstA587,
	(funptr)&f_touchdcstA588,
	(funptr)&f_touchdcstA589,
	(funptr)&f_touchdcstA590,
	(funptr)&f_touchdcstA591,
	(funptr)&f_touchdcstA592,
	(funptr)&f_touchdcstA593,
	(funptr)&f_touchdcstA594,
	(funptr)&f_touchdcstA595,
	(funptr)&f_touchdcstA596,
	(funptr)&f_touchdcstA597,
	(funptr)&f_touchdcstA598,
	(funptr)&f_touchdcstA599,
	(funptr)&f_touchdcstA600,
	(funptr)&f_touchdcstA601,
	(funptr)&f_touchdcstA602,
	(funptr)&f_touchdcstA603,
	(funptr)&f_touchdcstA604,
	(funptr)&f_touchdcstA605,
	(funptr)&f_touchdcstA606,
	(funptr)&f_touchdcstA607,
	(funptr)&f_touchdcstA608,
	(funptr)&f_touchdcstA609,
	(funptr)&f_touchdcstA610,
	(funptr)&f_touchdcstA611,
	(funptr)&f_touchdcstA612,
	(funptr)&f_touchdcstA613,
	(funptr)&f_touchdcstA614,
	(funptr)&f_touchdcstA615,
	(funptr)&f_touchdcstA616,
	(funptr)&f_touchdcstA617,
	(funptr)&f_touchdcstA618,
	(funptr)&f_touchdcstA619,
	(funptr)&f_touchdcstA620,
	(funptr)&f_touchdcstA621,
	(funptr)&f_touchdcstA622,
	(funptr)&f_touchdcstA623,
	(funptr)&f_touchdcstA624,
	(funptr)&f_touchdcstA625,
	(funptr)&f_touchdcstA626,
	(funptr)&f_touchdcstA627,
	(funptr)&f_touchdcstA628,
	(funptr)&f_touchdcstA629,
	(funptr)&f_touchdcstA630,
	(funptr)&f_touchdcstA631,
	(funptr)&f_touchdcstA632,
	(funptr)&f_touchdcstA633,
	(funptr)&f_touchdcstA634,
	(funptr)&f_touchdcstA635,
	(funptr)&f_touchdcstA636,
	(funptr)&f_touchdcstA637,
	(funptr)&f_touchdcstA638,
	(funptr)&f_touchdcstA639,
	(funptr)&f_touchdcstA640,
	(funptr)&f_touchdcstA641,
	(funptr)&f_touchdcstA642,
	(funptr)&f_touchdcstA643,
	(funptr)&f_touchdcstA644,
	(funptr)&f_touchdcstA645,
	(funptr)&f_touchdcstA646,
	(funptr)&f_touchdcstA647,
	(funptr)&f_touchdcstA648,
	(funptr)&f_touchdcstA649,
	(funptr)&f_touchdcstA650,
	(funptr)&f_touchdcstA651,
	(funptr)&f_touchdcstA652,
	(funptr)&f_touchdcstA653,
	(funptr)&f_touchdcstA654,
	(funptr)&f_touchdcstA655,
	(funptr)&f_touchdcstA656,
	(funptr)&f_touchdcstA657,
	(funptr)&f_touchdcstA658,
	(funptr)&f_touchdcstA659,
	(funptr)&f_touchdcstA660,
	(funptr)&f_touchdcstA661,
	(funptr)&f_touchdcstA662,
	(funptr)&f_touchdcstA663,
	(funptr)&f_touchdcstA664,
	(funptr)&f_touchdcstA665,
	(funptr)&f_touchdcstA666,
	(funptr)&f_touchdcstA667,
	(funptr)&f_touchdcstA668,
	(funptr)&f_touchdcstA669,
	(funptr)&f_touchdcstA670,
	(funptr)&f_touchdcstA671,
	(funptr)&f_touchdcstA672,
	(funptr)&f_touchdcstA673,
	(funptr)&f_touchdcstA674,
	(funptr)&f_touchdcstA675,
	(funptr)&f_touchdcstA676,
	(funptr)&f_touchdcstA677,
	(funptr)&f_touchdcstA678,
	(funptr)&f_touchdcstA679,
	(funptr)&f_touchdcstA680,
	(funptr)&f_touchdcstA681,
	(funptr)&f_touchdcstA682,
	(funptr)&f_touchdcstA683,
	(funptr)&f_touchdcstA684,
	(funptr)&f_touchdcstA685,
	(funptr)&f_touchdcstA686,
	(funptr)&f_touchdcstA687,
	(funptr)&f_touchdcstA688,
	(funptr)&f_touchdcstA689,
	(funptr)&f_touchdcstA690,
	(funptr)&f_touchdcstA691,
	(funptr)&f_touchdcstA692,
	(funptr)&f_touchdcstA693,
	(funptr)&f_touchdcstA694,
	(funptr)&f_touchdcstA695,
	(funptr)&f_touchdcstA696,
	(funptr)&f_touchdcstA697,
	(funptr)&f_touchdcstA698,
	(funptr)&f_touchdcstA699,
	(funptr)&f_touchdcstA700,
	(funptr)&f_touchdcstA701,
	(funptr)&f_touchdcstA702,
	(funptr)&f_touchdcstA703,
	(funptr)&f_touchdcstA704,
	(funptr)&f_touchdcstA705,
	(funptr)&f_touchdcstA706,
	(funptr)&f_touchdcstA707,
	(funptr)&f_touchdcstA708,
	(funptr)&f_touchdcstA709,
	(funptr)&f_touchdcstA710,
	(funptr)&f_touchdcstA711,
	(funptr)&f_touchdcstA712,
	(funptr)&f_touchdcstA713,
	(funptr)&f_touchdcstA714,
	(funptr)&f_touchdcstA715,
	(funptr)&f_touchdcstA716,
	(funptr)&f_touchdcstA717,
	(funptr)&f_touchdcstA718,
	(funptr)&f_touchdcstA719,
	(funptr)&f_touchdcstA720,
	(funptr)&f_touchdcstA721,
	(funptr)&f_touchdcstA722,
	(funptr)&f_touchdcstA723,
	(funptr)&f_touchdcstA724,
	(funptr)&f_touchdcstA725,
	(funptr)&f_touchdcstA726,
	(funptr)&f_touchdcstA727,
	(funptr)&f_touchdcstA728,
	(funptr)&f_touchdcstA729,
	(funptr)&f_touchdcstA730,
	(funptr)&f_touchdcstA731,
	(funptr)&f_touchdcstA732,
	(funptr)&f_touchdcstA733,
	(funptr)&f_touchdcstA734,
	(funptr)&f_touchdcstA735,
	(funptr)&f_touchdcstA736,
	(funptr)&f_touchdcstA737,
	(funptr)&f_touchdcstA738,
	(funptr)&f_touchdcstA739,
	(funptr)&f_touchdcstA740,
	(funptr)&f_touchdcstA741,
	(funptr)&f_touchdcstA742,
	(funptr)&f_touchdcstA743,
	(funptr)&f_touchdcstA744,
	(funptr)&f_touchdcstA745,
	(funptr)&f_touchdcstA746,
	(funptr)&f_touchdcstA747,
	(funptr)&f_touchdcstA748,
	(funptr)&f_touchdcstA749,
	(funptr)&f_touchdcstA750,
	(funptr)&f_touchdcstA751,
	(funptr)&f_touchdcstA752,
	(funptr)&f_touchdcstA753,
	(funptr)&f_touchdcstA754,
	(funptr)&f_touchdcstA755,
	(funptr)&f_touchdcstA756,
	(funptr)&f_touchdcstA757,
	(funptr)&f_touchdcstA758,
	(funptr)&f_touchdcstA759,
	(funptr)&f_touchdcstA760,
	(funptr)&f_touchdcstA761,
	(funptr)&f_touchdcstA762,
	(funptr)&f_touchdcstA763,
	(funptr)&f_touchdcstA764,
	(funptr)&f_touchdcstA765,
	(funptr)&f_touchdcstA766,
	(funptr)&f_touchdcstA767,
	(funptr)&f_touchdcstA768,
	(funptr)&f_touchdcstA769,
	(funptr)&f_touchdcstA770,
	(funptr)&f_touchdcstA771,
	(funptr)&f_touchdcstA772,
	(funptr)&f_touchdcstA773,
	(funptr)&f_touchdcstA774,
	(funptr)&f_touchdcstA775,
	(funptr)&f_touchdcstA776,
	(funptr)&f_touchdcstA777,
	(funptr)&f_touchdcstA778,
	(funptr)&f_touchdcstA779,
	(funptr)&f_touchdcstA780,
	(funptr)&f_touchdcstA781,
	(funptr)&f_touchdcstA782,
	(funptr)&f_touchdcstA783,
	(funptr)&f_touchdcstA784,
	(funptr)&f_touchdcstA785,
	(funptr)&f_touchdcstA786,
	(funptr)&f_touchdcstA787,
	(funptr)&f_touchdcstA788,
	(funptr)&f_touchdcstA789,
	(funptr)&f_touchdcstA790,
	(funptr)&f_touchdcstA791,
	(funptr)&f_touchdcstA792,
	(funptr)&f_touchdcstA793,
	(funptr)&f_touchdcstA794,
	(funptr)&f_touchdcstA795,
	(funptr)&f_touchdcstA796,
	(funptr)&f_touchdcstA797,
	(funptr)&f_touchdcstA798,
	(funptr)&f_touchdcstA799,
	(funptr)&f_touchdcstA800,
	(funptr)&f_touchdcstA801,
	(funptr)&f_touchdcstA802,
	(funptr)&f_touchdcstA803,
	(funptr)&f_touchdcstA804,
	(funptr)&f_touchdcstA805,
	(funptr)&f_touchdcstA806,
	(funptr)&f_touchdcstA807,
	(funptr)&f_touchdcstA808,
	(funptr)&f_touchdcstA809,
	(funptr)&f_touchdcstA810,
	(funptr)&f_touchdcstA811,
	(funptr)&f_touchdcstA812,
	(funptr)&f_touchdcstA813,
	(funptr)&f_touchdcstA814,
	(funptr)&f_touchdcstA815,
	(funptr)&f_touchdcstA816,
	(funptr)&f_touchdcstA817,
	(funptr)&f_touchdcstA818,
	(funptr)&f_touchdcstA819,
	(funptr)&f_touchdcstA820,
	(funptr)&f_touchdcstA821,
	(funptr)&f_touchdcstA822,
	(funptr)&f_touchdcstA823,
	(funptr)&f_touchdcstA824,
	(funptr)&f_touchdcstA825,
	(funptr)&f_touchdcstA826,
	(funptr)&f_touchdcstA827,
	(funptr)&f_touchdcstA828,
	(funptr)&f_touchdcstA829,
	(funptr)&f_touchdcstA830,
	(funptr)&f_touchdcstA831,
	(funptr)&f_touchdcstA832,
	(funptr)&f_touchdcstA833,
	(funptr)&f_touchdcstA834,
	(funptr)&f_touchdcstA835,
	(funptr)&f_touchdcstA836,
	(funptr)&f_touchdcstA837,
	(funptr)&f_touchdcstA838,
	(funptr)&f_touchdcstA839,
	(funptr)&f_touchdcstA840,
	(funptr)&f_touchdcstA841,
	(funptr)&f_touchdcstA842,
	(funptr)&f_touchdcstA843,
	(funptr)&f_touchdcstA844,
	(funptr)&f_touchdcstA845,
	(funptr)&f_touchdcstA846,
	(funptr)&f_touchdcstA847,
	(funptr)&f_touchdcstA848,
	(funptr)&f_touchdcstA849,
	(funptr)&f_touchdcstA850,
	(funptr)&f_touchdcstA851,
	(funptr)&f_touchdcstA852,
	(funptr)&f_touchdcstA853,
	(funptr)&f_touchdcstA854,
	(funptr)&f_touchdcstA855,
	(funptr)&f_touchdcstA856,
	(funptr)&f_touchdcstA857,
	(funptr)&f_touchdcstA858,
	(funptr)&f_touchdcstA859,
	(funptr)&f_touchdcstA860,
	(funptr)&f_touchdcstA861,
	(funptr)&f_touchdcstA862,
	(funptr)&f_touchdcstA863,
	(funptr)&f_touchdcstA864,
	(funptr)&f_touchdcstA865,
	(funptr)&f_touchdcstA866,
	(funptr)&f_touchdcstA867,
	(funptr)&f_touchdcstA868,
	(funptr)&f_touchdcstA869,
	(funptr)&f_touchdcstA870,
	(funptr)&f_touchdcstA871,
	(funptr)&f_touchdcstA872,
	(funptr)&f_touchdcstA873,
	(funptr)&f_touchdcstA874,
	(funptr)&f_touchdcstA875,
	(funptr)&f_touchdcstA876,
	(funptr)&f_touchdcstA877,
	(funptr)&f_touchdcstA878,
	(funptr)&f_touchdcstA879,
	(funptr)&f_touchdcstA880,
	(funptr)&f_touchdcstA881,
	(funptr)&f_touchdcstA882,
	(funptr)&f_touchdcstA883,
	(funptr)&f_touchdcstA884,
	(funptr)&f_touchdcstA885,
	(funptr)&f_touchdcstA886,
	(funptr)&f_touchdcstA887,
	(funptr)&f_touchdcstA888,
	(funptr)&f_touchdcstA889,
	(funptr)&f_touchdcstA890,
	(funptr)&f_touchdcstA891,
	(funptr)&f_touchdcstA892,
	(funptr)&f_touchdcstA893,
	(funptr)&f_touchdcstA894,
	(funptr)&f_touchdcstA895,
	(funptr)&f_touchdcstA896,
	(funptr)&f_touchdcstA897,
	(funptr)&f_touchdcstA898,
	(funptr)&f_touchdcstA899,
	(funptr)&f_touchdcstA900,
	(funptr)&f_touchdcstA901,
	(funptr)&f_touchdcstA902,
	(funptr)&f_touchdcstA903,
	(funptr)&f_touchdcstA904,
	(funptr)&f_touchdcstA905,
	(funptr)&f_touchdcstA906,
	(funptr)&f_touchdcstA907,
	(funptr)&f_touchdcstA908,
	(funptr)&f_touchdcstA909,
	(funptr)&f_touchdcstA910,
	(funptr)&f_touchdcstA911,
	(funptr)&f_touchdcstA912,
	(funptr)&f_touchdcstA913,
	(funptr)&f_touchdcstA914,
	(funptr)&f_touchdcstA915,
	(funptr)&f_touchdcstA916,
	(funptr)&f_touchdcstA917,
	(funptr)&f_touchdcstA918,
	(funptr)&f_touchdcstA919,
	(funptr)&f_touchdcstA920,
	(funptr)&f_touchdcstA921,
	(funptr)&f_touchdcstA922,
	(funptr)&f_touchdcstA923,
	(funptr)&f_touchdcstA924,
	(funptr)&f_touchdcstA925,
	(funptr)&f_touchdcstA926,
	(funptr)&f_touchdcstA927,
	(funptr)&f_touchdcstA928,
	(funptr)&f_touchdcstA929,
	(funptr)&f_touchdcstA930,
	(funptr)&f_touchdcstA931,
	(funptr)&f_touchdcstA932,
	(funptr)&f_touchdcstA933,
	(funptr)&f_touchdcstA934,
	(funptr)&f_touchdcstA935,
	(funptr)&f_touchdcstA936,
	(funptr)&f_touchdcstA937,
	(funptr)&f_touchdcstA938,
	(funptr)&f_touchdcstA939,
	(funptr)&f_touchdcstA940,
	(funptr)&f_touchdcstA941,
	(funptr)&f_touchdcstA942,
	(funptr)&f_touchdcstA943,
	(funptr)&f_touchdcstA944,
	(funptr)&f_touchdcstA945,
	(funptr)&f_touchdcstA946,
	(funptr)&f_touchdcstA947,
	(funptr)&f_touchdcstA948,
	(funptr)&f_touchdcstA949,
	(funptr)&f_touchdcstA950,
	(funptr)&f_touchdcstA951,
	(funptr)&f_touchdcstA952,
	(funptr)&f_touchdcstA953,
	(funptr)&f_touchdcstA954,
	(funptr)&f_touchdcstA955,
	(funptr)&f_touchdcstA956,
	(funptr)&f_touchdcstA957,
	(funptr)&f_touchdcstA958,
	(funptr)&f_touchdcstA959,
	(funptr)&f_touchdcstA960,
	(funptr)&f_touchdcstA961,
	(funptr)&f_touchdcstA962,
	(funptr)&f_touchdcstA963,
	(funptr)&f_touchdcstA964,
	(funptr)&f_touchdcstA965,
	(funptr)&f_touchdcstA966,
	(funptr)&f_touchdcstA967,
	(funptr)&f_touchdcstA968,
	(funptr)&f_touchdcstA969,
	(funptr)&f_touchdcstA970,
	(funptr)&f_touchdcstA971,
	(funptr)&f_touchdcstA972,
	(funptr)&f_touchdcstA973,
	(funptr)&f_touchdcstA974,
	(funptr)&f_touchdcstA975,
	(funptr)&f_touchdcstA976,
	(funptr)&f_touchdcstA977,
	(funptr)&f_touchdcstA978,
	(funptr)&f_touchdcstA979,
	(funptr)&f_touchdcstA980,
	(funptr)&f_touchdcstA981,
	(funptr)&f_touchdcstA982,
	(funptr)&f_touchdcstA983,
	(funptr)&f_touchdcstA984,
	(funptr)&f_touchdcstA985,
	(funptr)&f_touchdcstA986,
	(funptr)&f_touchdcstA987,
	(funptr)&f_touchdcstA988,
	(funptr)&f_touchdcstA989,
	(funptr)&f_touchdcstA990,
	(funptr)&f_touchdcstA991,
	(funptr)&f_touchdcstA992,
	(funptr)&f_touchdcstA993,
	(funptr)&f_touchdcstA994,
	(funptr)&f_touchdcstA995,
	(funptr)&f_touchdcstA996,
	(funptr)&f_touchdcstA997,
	(funptr)&f_touchdcstA998,
	(funptr)&f_touchdcstA999,
	(funptr)&f_touchdcstA1000,
	(funptr)&f_touchdcstA1001,
	(funptr)&f_touchdcstA1002,
	(funptr)&f_touchdcstA1003,
	(funptr)&f_touchdcstA1004,
	(funptr)&f_touchdcstA1005,
	(funptr)&f_touchdcstA1006,
	(funptr)&f_touchdcstA1007,
	(funptr)&f_touchdcstA1008,
	(funptr)&f_touchdcstA1009,
	(funptr)&f_touchdcstA1010,
	(funptr)&f_touchdcstA1011,
	(funptr)&f_touchdcstA1012,
	(funptr)&f_touchdcstA1013,
	(funptr)&f_touchdcstA1014,
	(funptr)&f_touchdcstA1015,
	(funptr)&f_touchdcstA1016,
	(funptr)&f_touchdcstA1017,
	(funptr)&f_touchdcstA1018,
	(funptr)&f_touchdcstA1019,
	(funptr)&f_touchdcstA1020,
	(funptr)&f_touchdcstA1021,
	(funptr)&f_touchdcstA1022,
	(funptr)&f_touchdcstA1023,
	(funptr)&f_touchdcstA1024,
	(funptr)&f_touchdcstA1025,
	(funptr)&f_touchdcstA1026,
	(funptr)&f_touchdcstA1027,
	(funptr)&f_touchdcstA1028,
	(funptr)&f_touchdcstA1029,
	(funptr)&f_touchdcstA1030,
	(funptr)&f_touchdcstA1031,
	(funptr)&f_touchdcstA1032,
	(funptr)&f_touchdcstA1033,
	(funptr)&f_touchdcstA1034,
	(funptr)&f_touchdcstA1035,
	(funptr)&f_touchdcstA1036,
	(funptr)&f_touchdcstA1037,
	(funptr)&f_touchdcstA1038,
	(funptr)&f_touchdcstA1039,
	(funptr)&f_touchdcstA1040,
	(funptr)&f_touchdcstA1041,
	(funptr)&f_touchdcstA1042,
	(funptr)&f_touchdcstA1043,
	(funptr)&f_touchdcstA1044,
	(funptr)&f_touchdcstA1045,
	(funptr)&f_touchdcstA1046,
	(funptr)&f_touchdcstA1047,
	(funptr)&f_touchdcstA1048,
	(funptr)&f_touchdcstA1049,
	(funptr)&f_touchdcstA1050,
	(funptr)&f_touchdcstA1051,
	(funptr)&f_touchdcstA1052,
	(funptr)&f_touchdcstA1053,
	(funptr)&f_touchdcstA1054,
	(funptr)&f_touchdcstA1055,
	(funptr)&f_touchdcstA1056,
	(funptr)&f_touchdcstA1057,
	(funptr)&f_touchdcstA1058,
	(funptr)&f_touchdcstA1059,
	(funptr)&f_touchdcstA1060,
	(funptr)&f_touchdcstA1061,
	(funptr)&f_touchdcstA1062,
	(funptr)&f_touchdcstA1063,
	(funptr)&f_touchdcstA1064,
	(funptr)&f_touchdcstA1065,
	(funptr)&f_touchdcstA1066,
	(funptr)&f_touchdcstA1067,
	(funptr)&f_touchdcstA1068,
	(funptr)&f_touchdcstA1069,
	(funptr)&f_touchdcstA1070,
	(funptr)&f_touchdcstA1071,
	(funptr)&f_touchdcstA1072,
	(funptr)&f_touchdcstA1073,
	(funptr)&f_touchdcstA1074,
	(funptr)&f_touchdcstA1075,
	(funptr)&f_touchdcstA1076,
	(funptr)&f_touchdcstA1077,
	(funptr)&f_touchdcstA1078,
	(funptr)&f_touchdcstA1079,
	(funptr)&f_touchdcstA1080,
	(funptr)&f_touchdcstA1081,
	(funptr)&f_touchdcstA1082,
	(funptr)&f_touchdcstA1083,
	(funptr)&f_touchdcstA1084,
	(funptr)&f_touchdcstA1085,
	(funptr)&f_touchdcstA1086,
	(funptr)&f_touchdcstA1087,
	(funptr)&f_touchdcstA1088,
	(funptr)&f_touchdcstA1089,
	(funptr)&f_touchdcstA1090,
	(funptr)&f_touchdcstA1091,
	(funptr)&f_touchdcstA1092,
	(funptr)&f_touchdcstA1093,
	(funptr)&f_touchdcstA1094,
	(funptr)&f_touchdcstA1095,
	(funptr)&f_touchdcstA1096,
	(funptr)&f_touchdcstA1097,
	(funptr)&f_touchdcstA1098,
	(funptr)&f_touchdcstA1099,
	(funptr)&f_touchdcstA1100,
	(funptr)&f_touchdcstA1101,
	(funptr)&f_touchdcstA1102,
	(funptr)&f_touchdcstA1103,
	(funptr)&f_touchdcstA1104,
	(funptr)&f_touchdcstA1105,
	(funptr)&f_touchdcstA1106,
	(funptr)&f_touchdcstA1107,
	(funptr)&f_touchdcstA1108,
	(funptr)&f_touchdcstA1109,
	(funptr)&f_touchdcstA1110,
	(funptr)&f_touchdcstA1111,
	(funptr)&f_touchdcstA1112,
	(funptr)&f_touchdcstA1113,
	(funptr)&f_touchdcstA1114,
	(funptr)&f_touchdcstA1115,
	(funptr)&f_touchdcstA1116,
	(funptr)&f_touchdcstA1117,
	(funptr)&f_touchdcstA1118,
	(funptr)&f_touchdcstA1119,
	(funptr)&f_touchdcstA1120,
	(funptr)&f_touchdcstA1121,
	(funptr)&f_touchdcstA1122,
	(funptr)&f_touchdcstA1123,
	(funptr)&f_touchdcstA1124,
	(funptr)&f_touchdcstA1125,
	(funptr)&f_touchdcstA1126,
	(funptr)&f_touchdcstA1127,
	(funptr)&f_touchdcstA1128,
	(funptr)&f_touchdcstA1129,
	(funptr)&f_touchdcstA1130,
	(funptr)&f_touchdcstA1131,
	(funptr)&f_touchdcstA1132,
	(funptr)&f_touchdcstA1133,
	(funptr)&f_touchdcstA1134,
	(funptr)&f_touchdcstA1135,
	(funptr)&f_touchdcstA1136,
	(funptr)&f_touchdcstA1137,
	(funptr)&f_touchdcstA1138,
	(funptr)&f_touchdcstA1139,
	(funptr)&f_touchdcstA1140,
	(funptr)&f_touchdcstA1141,
	(funptr)&f_touchdcstA1142,
	(funptr)&f_touchdcstA1143,
	(funptr)&f_touchdcstA1144,
	(funptr)&f_touchdcstA1145,
	(funptr)&f_touchdcstA1146,
	(funptr)&f_touchdcstA1147,
	(funptr)&f_touchdcstA1148,
	(funptr)&f_touchdcstA1149,
	(funptr)&f_touchdcstA1150,
	(funptr)&f_touchdcstA1151,
	(funptr)&f_touchdcstA1152,
	(funptr)&f_touchdcstA1153,
	(funptr)&f_touchdcstA1154,
	(funptr)&f_touchdcstA1155,
	(funptr)&f_touchdcstA1156,
	(funptr)&f_touchdcstA1157,
	(funptr)&f_touchdcstA1158,
	(funptr)&f_touchdcstA1159,
	(funptr)&f_touchdcstA1160,
	(funptr)&f_touchdcstA1161,
	(funptr)&f_touchdcstA1162,
	(funptr)&f_touchdcstA1163,
	(funptr)&f_touchdcstA1164,
	(funptr)&f_touchdcstA1165,
	(funptr)&f_touchdcstA1166,
	(funptr)&f_touchdcstA1167,
	(funptr)&f_touchdcstA1168,
	(funptr)&f_touchdcstA1169,
	(funptr)&f_touchdcstA1170,
	(funptr)&f_touchdcstA1171,
	(funptr)&f_touchdcstA1172,
	(funptr)&f_touchdcstA1173,
	(funptr)&f_touchdcstA1174,
	(funptr)&f_touchdcstA1175,
	(funptr)&f_touchdcstA1176,
	(funptr)&f_touchdcstA1177,
	(funptr)&f_touchdcstA1178,
	(funptr)&f_touchdcstA1179,
	(funptr)&f_touchdcstA1180,
	(funptr)&f_touchdcstA1181,
	(funptr)&f_touchdcstA1182,
	(funptr)&f_touchdcstA1183,
	(funptr)&f_touchdcstA1184,
	(funptr)&f_touchdcstA1185,
	(funptr)&f_touchdcstA1186,
	(funptr)&f_touchdcstA1187,
	(funptr)&f_touchdcstA1188,
	(funptr)&f_touchdcstA1189,
	(funptr)&f_touchdcstA1190,
	(funptr)&f_touchdcstA1191,
	(funptr)&f_touchdcstA1192,
	(funptr)&f_touchdcstA1193,
	(funptr)&f_touchdcstA1194,
	(funptr)&f_touchdcstA1195,
	(funptr)&f_touchdcstA1196,
	(funptr)&f_touchdcstA1197,
	(funptr)&f_touchdcstA1198,
	(funptr)&f_touchdcstA1199,
	(funptr)&f_touchdcstA1200,
	(funptr)&f_touchdcstA1201,
	(funptr)&f_touchdcstA1202,
	(funptr)&f_touchdcstA1203,
	(funptr)&f_touchdcstA1204,
	(funptr)&f_touchdcstA1205,
	(funptr)&f_touchdcstA1206,
	(funptr)&f_touchdcstA1207,
	(funptr)&f_touchdcstA1208,
	(funptr)&f_touchdcstA1209,
	(funptr)&f_touchdcstA1210,
	(funptr)&f_touchdcstA1211,
	(funptr)&f_touchdcstA1212,
	(funptr)&f_touchdcstA1213,
	(funptr)&f_touchdcstA1214,
	(funptr)&f_touchdcstA1215,
	(funptr)&f_touchdcstA1216,
	(funptr)&f_touchdcstA1217,
	(funptr)&f_touchdcstA1218,
	(funptr)&f_touchdcstA1219,
	(funptr)&f_touchdcstA1220,
	(funptr)&f_touchdcstA1221,
	(funptr)&f_touchdcstA1222,
	(funptr)&f_touchdcstA1223,
	(funptr)&f_touchdcstA1224,
	(funptr)&f_touchdcstA1225,
	(funptr)&f_touchdcstA1226,
	(funptr)&f_touchdcstA1227,
	(funptr)&f_touchdcstA1228,
	(funptr)&f_touchdcstA1229,
	(funptr)&f_touchdcstA1230,
	(funptr)&f_touchdcstA1231,
	(funptr)&f_touchdcstA1232,
	(funptr)&f_touchdcstA1233,
	(funptr)&f_touchdcstA1234,
	(funptr)&f_touchdcstA1235,
	(funptr)&f_touchdcstA1236,
	(funptr)&f_touchdcstA1237,
	(funptr)&f_touchdcstA1238,
	(funptr)&f_touchdcstA1239,
	(funptr)&f_touchdcstA1240,
	(funptr)&f_touchdcstA1241,
	(funptr)&f_touchdcstA1242,
	(funptr)&f_touchdcstA1243,
	(funptr)&f_touchdcstA1244,
	(funptr)&f_touchdcstA1245,
	(funptr)&f_touchdcstA1246,
	(funptr)&f_touchdcstA1247,
	(funptr)&f_touchdcstA1248,
	(funptr)&f_touchdcstA1249,
	(funptr)&f_touchdcstA1250,
	(funptr)&f_touchdcstA1251,
	(funptr)&f_touchdcstA1252,
	(funptr)&f_touchdcstA1253,
	(funptr)&f_touchdcstA1254,
	(funptr)&f_touchdcstA1255,
	(funptr)&f_touchdcstA1256,
	(funptr)&f_touchdcstA1257,
	(funptr)&f_touchdcstA1258,
	(funptr)&f_touchdcstA1259,
	(funptr)&f_touchdcstA1260,
	(funptr)&f_touchdcstA1261,
	(funptr)&f_touchdcstA1262,
	(funptr)&f_touchdcstA1263,
	(funptr)&f_touchdcstA1264,
	(funptr)&f_touchdcstA1265,
	(funptr)&f_touchdcstA1266,
	(funptr)&f_touchdcstA1267,
	(funptr)&f_touchdcstA1268,
	(funptr)&f_touchdcstA1269,
	(funptr)&f_touchdcstA1270,
	(funptr)&f_touchdcstA1271,
	(funptr)&f_touchdcstA1272,
	(funptr)&f_touchdcstA1273,
	(funptr)&f_touchdcstA1274,
	(funptr)&f_touchdcstA1275,
	(funptr)&f_touchdcstA1276,
	(funptr)&f_touchdcstA1277,
	(funptr)&f_touchdcstA1278,
	(funptr)&f_touchdcstA1279,
	(funptr)&f_touchdcstA1280,
	(funptr)&f_touchdcstA1281,
	(funptr)&f_touchdcstA1282,
	(funptr)&f_touchdcstA1283,
	(funptr)&f_touchdcstA1284,
	(funptr)&f_touchdcstA1285,
	(funptr)&f_touchdcstA1286,
	(funptr)&f_touchdcstA1287,
	(funptr)&f_touchdcstA1288,
	(funptr)&f_touchdcstA1289,
	(funptr)&f_touchdcstA1290,
	(funptr)&f_touchdcstA1291,
	(funptr)&f_touchdcstA1292,
	(funptr)&f_touchdcstA1293,
	(funptr)&f_touchdcstA1294,
	(funptr)&f_touchdcstA1295,
	(funptr)&f_touchdcstA1296,
	(funptr)&f_touchdcstA1297,
	(funptr)&f_touchdcstA1298,
	(funptr)&f_touchdcstA1299,
	(funptr)&f_touchdcstA1300,
	(funptr)&f_touchdcstA1301,
	(funptr)&f_touchdcstA1302,
	(funptr)&f_touchdcstA1303,
	(funptr)&f_touchdcstA1304,
	(funptr)&f_touchdcstA1305,
	(funptr)&f_touchdcstA1306,
	(funptr)&f_touchdcstA1307,
	(funptr)&f_touchdcstA1308,
	(funptr)&f_touchdcstA1309,
	(funptr)&f_touchdcstA1310,
	(funptr)&f_touchdcstA1311,
	(funptr)&f_touchdcstA1312,
	(funptr)&f_touchdcstA1313,
	(funptr)&f_touchdcstA1314,
	(funptr)&f_touchdcstA1315,
	(funptr)&f_touchdcstA1316,
	(funptr)&f_touchdcstA1317,
	(funptr)&f_touchdcstA1318,
	(funptr)&f_touchdcstA1319,
	(funptr)&f_touchdcstA1320,
	(funptr)&f_touchdcstA1321,
	(funptr)&f_touchdcstA1322,
	(funptr)&f_touchdcstA1323,
	(funptr)&f_touchdcstA1324,
	(funptr)&f_touchdcstA1325,
	(funptr)&f_touchdcstA1326,
	(funptr)&f_touchdcstA1327,
	(funptr)&f_touchdcstA1328,
	(funptr)&f_touchdcstA1329,
	(funptr)&f_touchdcstA1330,
	(funptr)&f_touchdcstA1331,
	(funptr)&f_touchdcstA1332,
	(funptr)&f_touchdcstA1333,
	(funptr)&f_touchdcstA1334,
	(funptr)&f_touchdcstA1335,
	(funptr)&f_touchdcstA1336,
	(funptr)&f_touchdcstA1337,
	(funptr)&f_touchdcstA1338,
	(funptr)&f_touchdcstA1339,
	(funptr)&f_touchdcstA1340,
	(funptr)&f_touchdcstA1341,
	(funptr)&f_touchdcstA1342,
	(funptr)&f_touchdcstA1343,
	(funptr)&f_touchdcstA1344,
	(funptr)&f_touchdcstA1345,
	(funptr)&f_touchdcstA1346,
	(funptr)&f_touchdcstA1347,
	(funptr)&f_touchdcstA1348,
	(funptr)&f_touchdcstA1349,
	(funptr)&f_touchdcstA1350,
	(funptr)&f_touchdcstA1351,
	(funptr)&f_touchdcstA1352,
	(funptr)&f_touchdcstA1353,
	(funptr)&f_touchdcstA1354,
	(funptr)&f_touchdcstA1355,
	(funptr)&f_touchdcstA1356,
	(funptr)&f_touchdcstA1357,
	(funptr)&f_touchdcstA1358,
	(funptr)&f_touchdcstA1359,
	(funptr)&f_touchdcstA1360,
	(funptr)&f_touchdcstA1361,
	(funptr)&f_touchdcstA1362,
	(funptr)&f_touchdcstA1363,
	(funptr)&f_touchdcstA1364,
	(funptr)&f_touchdcstA1365,
	(funptr)&f_touchdcstA1366,
	(funptr)&f_touchdcstA1367,
	(funptr)&f_touchdcstA1368,
	(funptr)&f_touchdcstA1369,
	(funptr)&f_touchdcstA1370,
	(funptr)&f_touchdcstA1371,
	(funptr)&f_touchdcstA1372,
	(funptr)&f_touchdcstA1373,
	(funptr)&f_touchdcstA1374,
	(funptr)&f_touchdcstA1375,
	(funptr)&f_touchdcstA1376,
	(funptr)&f_touchdcstA1377,
	(funptr)&f_touchdcstA1378,
	(funptr)&f_touchdcstA1379,
	(funptr)&f_touchdcstA1380,
	(funptr)&f_touchdcstA1381,
	(funptr)&f_touchdcstA1382,
	(funptr)&f_touchdcstA1383,
	(funptr)&f_touchdcstA1384,
	(funptr)&f_touchdcstA1385,
	(funptr)&f_touchdcstA1386,
	(funptr)&f_touchdcstA1387,
	(funptr)&f_touchdcstA1388,
	(funptr)&f_touchdcstA1389,
	(funptr)&f_touchdcstA1390,
	(funptr)&f_touchdcstA1391,
	(funptr)&f_touchdcstA1392,
	(funptr)&f_touchdcstA1393,
	(funptr)&f_touchdcstA1394,
	(funptr)&f_touchdcstA1395,
	(funptr)&f_touchdcstA1396,
	(funptr)&f_touchdcstA1397,
	(funptr)&f_touchdcstA1398,
	(funptr)&f_touchdcstA1399,
	(funptr)&f_touchdcstA1400,
	(funptr)&f_touchdcstA1401,
	(funptr)&f_touchdcstA1402,
	(funptr)&f_touchdcstA1403,
	(funptr)&f_touchdcstA1404,
	(funptr)&f_touchdcstA1405,
	(funptr)&f_touchdcstA1406,
	(funptr)&f_touchdcstA1407,
	(funptr)&f_touchdcstA1408,
	(funptr)&f_touchdcstA1409,
	(funptr)&f_touchdcstA1410,
	(funptr)&f_touchdcstA1411,
	(funptr)&f_touchdcstA1412,
	(funptr)&f_touchdcstA1413,
	(funptr)&f_touchdcstA1414,
	(funptr)&f_touchdcstA1415,
	(funptr)&f_touchdcstA1416,
	(funptr)&f_touchdcstA1417,
	(funptr)&f_touchdcstA1418,
	(funptr)&f_touchdcstA1419,
	(funptr)&f_touchdcstA1420,
	(funptr)&f_touchdcstA1421,
	(funptr)&f_touchdcstA1422,
	(funptr)&f_touchdcstA1423,
	(funptr)&f_touchdcstA1424,
	(funptr)&f_touchdcstA1425,
	(funptr)&f_touchdcstA1426,
	(funptr)&f_touchdcstA1427,
	(funptr)&f_touchdcstA1428,
	(funptr)&f_touchdcstA1429,
	(funptr)&f_touchdcstA1430,
	(funptr)&f_touchdcstA1431,
	(funptr)&f_touchdcstA1432,
	(funptr)&f_touchdcstA1433,
	(funptr)&f_touchdcstA1434,
	(funptr)&f_touchdcstA1435,
	(funptr)&f_touchdcstA1436,
	(funptr)&f_touchdcstA1437,
	(funptr)&f_touchdcstA1438,
	(funptr)&f_touchdcstA1439,
	(funptr)&f_touchdcstA1440,
	(funptr)&f_touchdcstA1441,
	(funptr)&f_touchdcstA1442,
	(funptr)&f_touchdcstA1443,
	(funptr)&f_touchdcstA1444,
	(funptr)&f_touchdcstA1445,
	(funptr)&f_touchdcstA1446,
	(funptr)&f_touchdcstA1447,
	(funptr)&f_touchdcstA1448,
	(funptr)&f_touchdcstA1449,
	(funptr)&f_touchdcstA1450,
	(funptr)&f_touchdcstA1451,
	(funptr)&f_touchdcstA1452,
	(funptr)&f_touchdcstA1453,
	(funptr)&f_touchdcstA1454,
	(funptr)&f_touchdcstA1455,
	(funptr)&f_touchdcstA1456,
	(funptr)&f_touchdcstA1457,
	(funptr)&f_touchdcstA1458,
	(funptr)&f_touchdcstA1459,
	(funptr)&f_touchdcstA1460,
	(funptr)&f_touchdcstA1461,
	(funptr)&f_touchdcstA1462,
	(funptr)&f_touchdcstA1463,
	(funptr)&f_touchdcstA1464,
	(funptr)&f_touchdcstA1465,
	(funptr)&f_touchdcstA1466,
	(funptr)&f_touchdcstA1467,
	(funptr)&f_touchdcstA1468,
	(funptr)&f_touchdcstA1469,
	(funptr)&f_touchdcstA1470,
	(funptr)&f_touchdcstA1471,
	(funptr)&f_touchdcstA1472,
	(funptr)&f_touchdcstA1473,
	(funptr)&f_touchdcstA1474,
	(funptr)&f_touchdcstA1475,
	(funptr)&f_touchdcstA1476,
	(funptr)&f_touchdcstA1477,
	(funptr)&f_touchdcstA1478,
	(funptr)&f_touchdcstA1479,
	(funptr)&f_touchdcstA1480,
	(funptr)&f_touchdcstA1481,
	(funptr)&f_touchdcstA1482,
	(funptr)&f_touchdcstA1483,
	(funptr)&f_touchdcstA1484,
	(funptr)&f_touchdcstA1485,
	(funptr)&f_touchdcstA1486,
	(funptr)&f_touchdcstA1487,
	(funptr)&f_touchdcstA1488,
	(funptr)&f_touchdcstA1489,
	(funptr)&f_touchdcstA1490,
	(funptr)&f_touchdcstA1491,
	(funptr)&f_touchdcstA1492,
	(funptr)&f_touchdcstA1493,
	(funptr)&f_touchdcstA1494,
	(funptr)&f_touchdcstA1495,
	(funptr)&f_touchdcstA1496,
	(funptr)&f_touchdcstA1497,
	(funptr)&f_touchdcstA1498,
	(funptr)&f_touchdcstA1499,
	(funptr)&f_touchdcstA1500,
	(funptr)&f_touchdcstA1501,
	(funptr)&f_touchdcstA1502,
	(funptr)&f_touchdcstA1503,
	(funptr)&f_touchdcstA1504,
	(funptr)&f_touchdcstA1505,
	(funptr)&f_touchdcstA1506,
	(funptr)&f_touchdcstA1507,
	(funptr)&f_touchdcstA1508,
	(funptr)&f_touchdcstA1509,
	(funptr)&f_touchdcstA1510,
	(funptr)&f_touchdcstA1511,
	(funptr)&f_touchdcstA1512,
	(funptr)&f_touchdcstA1513,
	(funptr)&f_touchdcstA1514,
	(funptr)&f_touchdcstA1515,
	(funptr)&f_touchdcstA1516,
	(funptr)&f_touchdcstA1517,
	(funptr)&f_touchdcstA1518,
	(funptr)&f_touchdcstA1519,
	(funptr)&f_touchdcstA1520,
	(funptr)&f_touchdcstA1521,
	(funptr)&f_touchdcstA1522,
	(funptr)&f_touchdcstA1523,
	(funptr)&f_touchdcstA1524,
	(funptr)&f_touchdcstA1525,
	(funptr)&f_touchdcstA1526,
	(funptr)&f_touchdcstA1527,
	(funptr)&f_touchdcstA1528,
	(funptr)&f_touchdcstA1529,
	(funptr)&f_touchdcstA1530,
	(funptr)&f_touchdcstA1531,
	(funptr)&f_touchdcstA1532,
	(funptr)&f_touchdcstA1533,
	(funptr)&f_touchdcstA1534,
	(funptr)&f_touchdcstA1535,
	(funptr)&f_touchdcstA1536,
	(funptr)&f_touchdcstA1537,
	(funptr)&f_touchdcstA1538,
	(funptr)&f_touchdcstA1539,
	(funptr)&f_touchdcstA1540,
	(funptr)&f_touchdcstA1541,
	(funptr)&f_touchdcstA1542,
	(funptr)&f_touchdcstA1543,
	(funptr)&f_touchdcstA1544,
	(funptr)&f_touchdcstA1545,
	(funptr)&f_touchdcstA1546,
	(funptr)&f_touchdcstA1547,
	(funptr)&f_touchdcstA1548,
	(funptr)&f_touchdcstA1549,
	(funptr)&f_touchdcstA1550,
	(funptr)&f_touchdcstA1551,
	(funptr)&f_touchdcstA1552,
	(funptr)&f_touchdcstA1553,
	(funptr)&f_touchdcstA1554,
	(funptr)&f_touchdcstA1555,
	(funptr)&f_touchdcstA1556,
	(funptr)&f_touchdcstA1557,
	(funptr)&f_touchdcstA1558,
	(funptr)&f_touchdcstA1559,
	(funptr)&f_touchdcstA1560,
	(funptr)&f_touchdcstA1561,
	(funptr)&f_touchdcstA1562,
	(funptr)&f_touchdcstA1563,
	(funptr)&f_touchdcstA1564,
	(funptr)&f_touchdcstA1565,
	(funptr)&f_touchdcstA1566,
	(funptr)&f_touchdcstA1567,
	(funptr)&f_touchdcstA1568,
	(funptr)&f_touchdcstA1569,
	(funptr)&f_touchdcstA1570,
	(funptr)&f_touchdcstA1571,
	(funptr)&f_touchdcstA1572,
	(funptr)&f_touchdcstA1573,
	(funptr)&f_touchdcstA1574,
	(funptr)&f_touchdcstA1575,
	(funptr)&f_touchdcstA1576,
	(funptr)&f_touchdcstA1577,
	(funptr)&f_touchdcstA1578,
	(funptr)&f_touchdcstA1579,
	(funptr)&f_touchdcstA1580,
	(funptr)&f_touchdcstA1581,
	(funptr)&f_touchdcstA1582,
	(funptr)&f_touchdcstA1583,
	(funptr)&f_touchdcstA1584,
	(funptr)&f_touchdcstA1585,
	(funptr)&f_touchdcstA1586,
	(funptr)&f_touchdcstA1587,
	(funptr)&f_touchdcstA1588,
	(funptr)&f_touchdcstA1589,
	(funptr)&f_touchdcstA1590,
	(funptr)&f_touchdcstA1591,
	(funptr)&f_touchdcstA1592,
	(funptr)&f_touchdcstA1593,
	(funptr)&f_touchdcstA1594,
	(funptr)&f_touchdcstA1595,
	(funptr)&f_touchdcstA1596,
	(funptr)&f_touchdcstA1597,
	(funptr)&f_touchdcstA1598,
	(funptr)&f_touchdcstA1599,
	(funptr)&f_touchdcstA1600,
	(funptr)&f_touchdcstA1601,
	(funptr)&f_touchdcstA1602,
	(funptr)&f_touchdcstA1603,
	(funptr)&f_touchdcstA1604,
	(funptr)&f_touchdcstA1605,
	(funptr)&f_touchdcstA1606,
	(funptr)&f_touchdcstA1607,
	(funptr)&f_touchdcstA1608,
	(funptr)&f_touchdcstA1609,
	(funptr)&f_touchdcstA1610,
	(funptr)&f_touchdcstA1611,
	(funptr)&f_touchdcstA1612,
	(funptr)&f_touchdcstA1613,
	(funptr)&f_touchdcstA1614,
	(funptr)&f_touchdcstA1615,
	(funptr)&f_touchdcstA1616,
	(funptr)&f_touchdcstA1617,
	(funptr)&f_touchdcstA1618,
	(funptr)&f_touchdcstA1619,
	(funptr)&f_touchdcstA1620,
	(funptr)&f_touchdcstA1621,
	(funptr)&f_touchdcstA1622,
	(funptr)&f_touchdcstA1623,
	(funptr)&f_touchdcstA1624,
	(funptr)&f_touchdcstA1625,
	(funptr)&f_touchdcstA1626,
	(funptr)&f_touchdcstA1627,
	(funptr)&f_touchdcstA1628,
	(funptr)&f_touchdcstA1629,
	(funptr)&f_touchdcstA1630,
	(funptr)&f_touchdcstA1631,
	(funptr)&f_touchdcstA1632,
	(funptr)&f_touchdcstA1633,
	(funptr)&f_touchdcstA1634,
	(funptr)&f_touchdcstA1635,
	(funptr)&f_touchdcstA1636,
	(funptr)&f_touchdcstA1637,
	(funptr)&f_touchdcstA1638,
	(funptr)&f_touchdcstA1639,
	(funptr)&f_touchdcstA1640,
	(funptr)&f_touchdcstA1641,
	(funptr)&f_touchdcstA1642,
	(funptr)&f_touchdcstA1643,
	(funptr)&f_touchdcstA1644,
	(funptr)&f_touchdcstA1645,
	(funptr)&f_touchdcstA1646,
	(funptr)&f_touchdcstA1647,
	(funptr)&f_touchdcstA1648,
	(funptr)&f_touchdcstA1649,
	(funptr)&f_touchdcstA1650,
	(funptr)&f_touchdcstA1651,
	(funptr)&f_touchdcstA1652,
	(funptr)&f_touchdcstA1653,
	(funptr)&f_touchdcstA1654,
	(funptr)&f_touchdcstA1655,
	(funptr)&f_touchdcstA1656,
	(funptr)&f_touchdcstA1657,
	(funptr)&f_touchdcstA1658,
	(funptr)&f_touchdcstA1659,
	(funptr)&f_touchdcstA1660,
	(funptr)&f_touchdcstA1661,
	(funptr)&f_touchdcstA1662,
	(funptr)&f_touchdcstA1663,
	(funptr)&f_touchdcstA1664,
	(funptr)&f_touchdcstA1665,
	(funptr)&f_touchdcstA1666,
	(funptr)&f_touchdcstA1667,
	(funptr)&f_touchdcstA1668,
	(funptr)&f_touchdcstA1669,
	(funptr)&f_touchdcstA1670,
	(funptr)&f_touchdcstA1671,
	(funptr)&f_touchdcstA1672,
	(funptr)&f_touchdcstA1673,
	(funptr)&f_touchdcstA1674,
	(funptr)&f_touchdcstA1675,
	(funptr)&f_touchdcstA1676,
	(funptr)&f_touchdcstA1677,
	(funptr)&f_touchdcstA1678,
	(funptr)&f_touchdcstA1679,
	(funptr)&f_touchdcstA1680,
	(funptr)&f_touchdcstA1681,
	(funptr)&f_touchdcstA1682,
	(funptr)&f_touchdcstA1683,
	(funptr)&f_touchdcstA1684,
	(funptr)&f_touchdcstA1685,
	(funptr)&f_touchdcstA1686,
	(funptr)&f_touchdcstA1687,
	(funptr)&f_touchdcstA1688,
	(funptr)&f_touchdcstA1689,
	(funptr)&f_touchdcstA1690,
	(funptr)&f_touchdcstA1691,
	(funptr)&f_touchdcstA1692,
	(funptr)&f_touchdcstA1693,
	(funptr)&f_touchdcstA1694,
	(funptr)&f_touchdcstA1695,
	(funptr)&f_touchdcstA1696,
	(funptr)&f_touchdcstA1697,
	(funptr)&f_touchdcstA1698,
	(funptr)&f_touchdcstA1699,
	(funptr)&f_touchdcstA1700,
	(funptr)&f_touchdcstA1701,
	(funptr)&f_touchdcstA1702,
	(funptr)&f_touchdcstA1703,
	(funptr)&f_touchdcstA1704,
	(funptr)&f_touchdcstA1705,
	(funptr)&f_touchdcstA1706,
	(funptr)&f_touchdcstA1707,
	(funptr)&f_touchdcstA1708,
	(funptr)&f_touchdcstA1709,
	(funptr)&f_touchdcstA1710,
	(funptr)&f_touchdcstA1711,
	(funptr)&f_touchdcstA1712,
	(funptr)&f_touchdcstA1713,
	(funptr)&f_touchdcstA1714,
	(funptr)&f_touchdcstA1715,
	(funptr)&f_touchdcstA1716,
	(funptr)&f_touchdcstA1717,
	(funptr)&f_touchdcstA1718,
	(funptr)&f_touchdcstA1719,
	(funptr)&f_touchdcstA1720,
	(funptr)&f_touchdcstA1721,
	(funptr)&f_touchdcstA1722,
	(funptr)&f_touchdcstA1723,
	(funptr)&f_touchdcstA1724,
	(funptr)&f_touchdcstA1725,
	(funptr)&f_touchdcstA1726,
	(funptr)&f_touchdcstA1727,
	(funptr)&f_touchdcstA1728,
	(funptr)&f_touchdcstA1729,
	(funptr)&f_touchdcstA1730,
	(funptr)&f_touchdcstA1731,
	(funptr)&f_touchdcstA1732,
	(funptr)&f_touchdcstA1733,
	(funptr)&f_touchdcstA1734,
	(funptr)&f_touchdcstA1735,
	(funptr)&f_touchdcstA1736,
	(funptr)&f_touchdcstA1737,
	(funptr)&f_touchdcstA1738,
	(funptr)&f_touchdcstA1739,
	(funptr)&f_touchdcstA1740,
	(funptr)&f_touchdcstA1741,
	(funptr)&f_touchdcstA1742,
	(funptr)&f_touchdcstA1743,
	(funptr)&f_touchdcstA1744,
	(funptr)&f_touchdcstA1745,
	(funptr)&f_touchdcstA1746,
	(funptr)&f_touchdcstA1747,
	(funptr)&f_touchdcstA1748,
	(funptr)&f_touchdcstA1749,
	(funptr)&f_touchdcstA1750,
	(funptr)&f_touchdcstA1751,
	(funptr)&f_touchdcstA1752,
	(funptr)&f_touchdcstA1753,
	(funptr)&f_touchdcstA1754,
	(funptr)&f_touchdcstA1755,
	(funptr)&f_touchdcstA1756,
	(funptr)&f_touchdcstA1757,
	(funptr)&f_touchdcstA1758,
	(funptr)&f_touchdcstA1759,
	(funptr)&f_touchdcstA1760,
	(funptr)&f_touchdcstA1761,
	(funptr)&f_touchdcstA1762,
	(funptr)&f_touchdcstA1763,
	(funptr)&f_touchdcstA1764,
	(funptr)&f_touchdcstA1765,
	(funptr)&f_touchdcstA1766,
	(funptr)&f_touchdcstA1767,
	(funptr)&f_touchdcstA1768,
	(funptr)&f_touchdcstA1769,
	(funptr)&f_touchdcstA1770,
	(funptr)&f_touchdcstA1771,
	(funptr)&f_touchdcstA1772,
	(funptr)&f_touchdcstA1773,
	(funptr)&f_touchdcstA1774,
	(funptr)&f_touchdcstA1775,
	(funptr)&f_touchdcstA1776,
	(funptr)&f_touchdcstA1777,
	(funptr)&f_touchdcstA1778,
	(funptr)&f_touchdcstA1779,
	(funptr)&f_touchdcstA1780,
	(funptr)&f_touchdcstA1781,
	(funptr)&f_touchdcstA1782,
	(funptr)&f_touchdcstA1783,
	(funptr)&f_touchdcstA1784,
	(funptr)&f_touchdcstA1785,
	(funptr)&f_touchdcstA1786,
	(funptr)&f_touchdcstA1787,
	(funptr)&f_touchdcstA1788,
	(funptr)&f_touchdcstA1789,
	(funptr)&f_touchdcstA1790,
	(funptr)&f_touchdcstA1791,
	(funptr)&f_touchdcstA1792,
	(funptr)&f_touchdcstA1793,
	(funptr)&f_touchdcstA1794,
	(funptr)&f_touchdcstA1795,
	(funptr)&f_touchdcstA1796,
	(funptr)&f_touchdcstA1797,
	(funptr)&f_touchdcstA1798,
	(funptr)&f_touchdcstA1799,
	(funptr)&f_touchdcstA1800,
	(funptr)&f_touchdcstA1801,
	(funptr)&f_touchdcstA1802,
	(funptr)&f_touchdcstA1803,
	(funptr)&f_touchdcstA1804,
	(funptr)&f_touchdcstA1805,
	(funptr)&f_touchdcstA1806,
	(funptr)&f_touchdcstA1807,
	(funptr)&f_touchdcstA1808,
	(funptr)&f_touchdcstA1809,
	(funptr)&f_touchdcstA1810,
	(funptr)&f_touchdcstA1811,
	(funptr)&f_touchdcstA1812,
	(funptr)&f_touchdcstA1813,
	(funptr)&f_touchdcstA1814,
	(funptr)&f_touchdcstA1815,
	(funptr)&f_touchdcstA1816,
	(funptr)&f_touchdcstA1817,
	(funptr)&f_touchdcstA1818,
	(funptr)&f_touchdcstA1819,
	(funptr)&f_touchdcstA1820,
	(funptr)&f_touchdcstA1821,
	(funptr)&f_touchdcstA1822,
	(funptr)&f_touchdcstA1823,
	(funptr)&f_touchdcstA1824,
	(funptr)&f_touchdcstA1825,
	(funptr)&f_touchdcstA1826,
	(funptr)&f_touchdcstA1827,
	(funptr)&f_touchdcstA1828,
	(funptr)&f_touchdcstA1829,
	(funptr)&f_touchdcstA1830,
	(funptr)&f_touchdcstA1831,
	(funptr)&f_touchdcstA1832,
	(funptr)&f_touchdcstA1833,
	(funptr)&f_touchdcstA1834,
	(funptr)&f_touchdcstA1835,
	(funptr)&f_touchdcstA1836,
	(funptr)&f_touchdcstA1837,
	(funptr)&f_touchdcstA1838,
	(funptr)&f_touchdcstA1839,
	(funptr)&f_touchdcstA1840,
	(funptr)&f_touchdcstA1841,
	(funptr)&f_touchdcstA1842,
	(funptr)&f_touchdcstA1843,
	(funptr)&f_touchdcstA1844,
	(funptr)&f_touchdcstA1845,
	(funptr)&f_touchdcstA1846,
	(funptr)&f_touchdcstA1847,
	(funptr)&f_touchdcstA1848,
	(funptr)&f_touchdcstA1849,
	(funptr)&f_touchdcstA1850,
	(funptr)&f_touchdcstA1851,
	(funptr)&f_touchdcstA1852,
	(funptr)&f_touchdcstA1853,
	(funptr)&f_touchdcstA1854,
	(funptr)&f_touchdcstA1855,
	(funptr)&f_touchdcstA1856,
	(funptr)&f_touchdcstA1857,
	(funptr)&f_touchdcstA1858,
	(funptr)&f_touchdcstA1859,
	(funptr)&f_touchdcstA1860,
	(funptr)&f_touchdcstA1861,
	(funptr)&f_touchdcstA1862,
	(funptr)&f_touchdcstA1863,
	(funptr)&f_touchdcstA1864,
	(funptr)&f_touchdcstA1865,
	(funptr)&f_touchdcstA1866,
	(funptr)&f_touchdcstA1867,
	(funptr)&f_touchdcstA1868,
	(funptr)&f_touchdcstA1869,
	(funptr)&f_touchdcstA1870,
	(funptr)&f_touchdcstA1871,
	(funptr)&f_touchdcstA1872,
	(funptr)&f_touchdcstA1873,
	(funptr)&f_touchdcstA1874,
	(funptr)&f_touchdcstA1875,
	(funptr)&f_touchdcstA1876,
	(funptr)&f_touchdcstA1877,
	(funptr)&f_touchdcstA1878,
	(funptr)&f_touchdcstA1879,
	(funptr)&f_touchdcstA1880,
	(funptr)&f_touchdcstA1881,
	(funptr)&f_touchdcstA1882,
	(funptr)&f_touchdcstA1883,
	(funptr)&f_touchdcstA1884,
	(funptr)&f_touchdcstA1885,
	(funptr)&f_touchdcstA1886,
	(funptr)&f_touchdcstA1887,
	(funptr)&f_touchdcstA1888,
	(funptr)&f_touchdcstA1889,
	(funptr)&f_touchdcstA1890,
	(funptr)&f_touchdcstA1891,
	(funptr)&f_touchdcstA1892,
	(funptr)&f_touchdcstA1893,
	(funptr)&f_touchdcstA1894,
	(funptr)&f_touchdcstA1895,
	(funptr)&f_touchdcstA1896,
	(funptr)&f_touchdcstA1897,
	(funptr)&f_touchdcstA1898,
	(funptr)&f_touchdcstA1899,
	(funptr)&f_touchdcstA1900,
	(funptr)&f_touchdcstA1901,
	(funptr)&f_touchdcstA1902,
	(funptr)&f_touchdcstA1903,
	(funptr)&f_touchdcstA1904,
	(funptr)&f_touchdcstA1905,
	(funptr)&f_touchdcstA1906,
	(funptr)&f_touchdcstA1907,
	(funptr)&f_touchdcstA1908,
	(funptr)&f_touchdcstA1909,
	(funptr)&f_touchdcstA1910,
	(funptr)&f_touchdcstA1911,
	(funptr)&f_touchdcstA1912,
	(funptr)&f_touchdcstA1913,
	(funptr)&f_touchdcstA1914,
	(funptr)&f_touchdcstA1915,
	(funptr)&f_touchdcstA1916,
	(funptr)&f_touchdcstA1917,
	(funptr)&f_touchdcstA1918,
	(funptr)&f_touchdcstA1919,
	(funptr)&f_touchdcstA1920,
	(funptr)&f_touchdcstA1921,
	(funptr)&f_touchdcstA1922,
	(funptr)&f_touchdcstA1923,
	(funptr)&f_touchdcstA1924,
	(funptr)&f_touchdcstA1925,
	(funptr)&f_touchdcstA1926,
	(funptr)&f_touchdcstA1927,
	(funptr)&f_touchdcstA1928,
	(funptr)&f_touchdcstA1929,
	(funptr)&f_touchdcstA1930,
	(funptr)&f_touchdcstA1931,
	(funptr)&f_touchdcstA1932,
	(funptr)&f_touchdcstA1933,
	(funptr)&f_touchdcstA1934,
	(funptr)&f_touchdcstA1935,
	(funptr)&f_touchdcstA1936,
	(funptr)&f_touchdcstA1937,
	(funptr)&f_touchdcstA1938,
	(funptr)&f_touchdcstA1939,
	(funptr)&f_touchdcstA1940,
	(funptr)&f_touchdcstA1941,
	(funptr)&f_touchdcstA1942,
	(funptr)&f_touchdcstA1943,
	(funptr)&f_touchdcstA1944,
	(funptr)&f_touchdcstA1945,
	(funptr)&f_touchdcstA1946,
	(funptr)&f_touchdcstA1947,
	(funptr)&f_touchdcstA1948,
	(funptr)&f_touchdcstA1949,
	(funptr)&f_touchdcstA1950,
	(funptr)&f_touchdcstA1951,
	(funptr)&f_touchdcstA1952,
	(funptr)&f_touchdcstA1953,
	(funptr)&f_touchdcstA1954,
	(funptr)&f_touchdcstA1955,
	(funptr)&f_touchdcstA1956,
	(funptr)&f_touchdcstA1957,
	(funptr)&f_touchdcstA1958,
	(funptr)&f_touchdcstA1959,
	(funptr)&f_touchdcstA1960,
	(funptr)&f_touchdcstA1961,
	(funptr)&f_touchdcstA1962,
	(funptr)&f_touchdcstA1963,
	(funptr)&f_touchdcstA1964,
	(funptr)&f_touchdcstA1965,
	(funptr)&f_touchdcstA1966,
	(funptr)&f_touchdcstA1967,
	(funptr)&f_touchdcstA1968,
	(funptr)&f_touchdcstA1969,
	(funptr)&f_touchdcstA1970,
	(funptr)&f_touchdcstA1971,
	(funptr)&f_touchdcstA1972,
	(funptr)&f_touchdcstA1973,
	(funptr)&f_touchdcstA1974,
	(funptr)&f_touchdcstA1975,
	(funptr)&f_touchdcstA1976,
	(funptr)&f_touchdcstA1977,
	(funptr)&f_touchdcstA1978,
	(funptr)&f_touchdcstA1979,
	(funptr)&f_touchdcstA1980,
	(funptr)&f_touchdcstA1981,
	(funptr)&f_touchdcstA1982,
	(funptr)&f_touchdcstA1983,
	(funptr)&f_touchdcstA1984,
	(funptr)&f_touchdcstA1985,
	(funptr)&f_touchdcstA1986,
	(funptr)&f_touchdcstA1987,
	(funptr)&f_touchdcstA1988,
	(funptr)&f_touchdcstA1989,
	(funptr)&f_touchdcstA1990,
	(funptr)&f_touchdcstA1991,
	(funptr)&f_touchdcstA1992,
	(funptr)&f_touchdcstA1993,
	(funptr)&f_touchdcstA1994,
	(funptr)&f_touchdcstA1995,
	(funptr)&f_touchdcstA1996,
	(funptr)&f_touchdcstA1997,
	(funptr)&f_touchdcstA1998,
	(funptr)&f_touchdcstA1999,
	(funptr)&f_touchdcstA2000,
	(funptr)&f_touchdcstA2001,
	(funptr)&f_touchdcstA2002,
	(funptr)&f_touchdcstA2003,
	(funptr)&f_touchdcstA2004,
	(funptr)&f_touchdcstA2005,
	(funptr)&f_touchdcstA2006,
	(funptr)&f_touchdcstA2007,
	(funptr)&f_touchdcstA2008,
	(funptr)&f_touchdcstA2009,
	(funptr)&f_touchdcstA2010,
	(funptr)&f_touchdcstA2011,
	(funptr)&f_touchdcstA2012,
	(funptr)&f_touchdcstA2013,
	(funptr)&f_touchdcstA2014,
	(funptr)&f_touchdcstA2015,
	(funptr)&f_touchdcstA2016,
	(funptr)&f_touchdcstA2017,
	(funptr)&f_touchdcstA2018,
	(funptr)&f_touchdcstA2019,
	(funptr)&f_touchdcstA2020,
	(funptr)&f_touchdcstA2021,
	(funptr)&f_touchdcstA2022,
	(funptr)&f_touchdcstA2023,
	(funptr)&f_touchdcstA2024,
	(funptr)&f_touchdcstA2025,
	(funptr)&f_touchdcstA2026
};
funptr G_agg_cmpfuncs[] = {
	(funptr)&f_cmpA1,
	(funptr)&f_cmpA2,
	(funptr)&f_cmpA3,
	(funptr)&f_cmpA4,
	(funptr)&f_cmpA5,
	(funptr)&f_cmpA6,
	(funptr)&f_cmpA7,
	(funptr)&f_cmpA8,
	(funptr)&f_cmpA9,
	(funptr)&f_cmpA10,
	(funptr)&f_cmpA11,
	(funptr)&f_cmpA12,
	(funptr)&f_cmpA13,
	(funptr)&f_cmpA14,
	(funptr)&f_cmpA15,
	(funptr)&f_cmpA16,
	(funptr)&f_cmpA17,
	(funptr)&f_cmpA18,
	(funptr)&f_cmpA19,
	(funptr)&f_cmpA20,
	(funptr)&f_cmpA21,
	(funptr)&f_cmpA22,
	(funptr)&f_cmpA23,
	(funptr)&f_cmpA24,
	(funptr)&f_cmpA25,
	(funptr)&f_cmpA26,
	(funptr)&f_cmpA27,
	(funptr)&f_cmpA28,
	(funptr)&f_cmpA29,
	(funptr)&f_cmpA30,
	(funptr)&f_cmpA31,
	(funptr)&f_cmpA32,
	(funptr)&f_cmpA33,
	(funptr)&f_cmpA34,
	(funptr)&f_cmpA35,
	(funptr)&f_cmpA36,
	(funptr)&f_cmpA37,
	(funptr)&f_cmpA38,
	(funptr)&f_cmpA39,
	(funptr)&f_cmpA40,
	(funptr)&f_cmpA41,
	(funptr)&f_cmpA42,
	(funptr)&f_cmpA43,
	(funptr)&f_cmpA44,
	(funptr)&f_cmpA45,
	(funptr)&f_cmpA46,
	(funptr)&f_cmpA47,
	(funptr)&f_cmpA48,
	(funptr)&f_cmpA49,
	(funptr)&f_cmpA50,
	(funptr)&f_cmpA51,
	(funptr)&f_cmpA52,
	(funptr)&f_cmpA53,
	(funptr)&f_cmpA54,
	(funptr)&f_cmpA55,
	(funptr)&f_cmpA56,
	(funptr)&f_cmpA57,
	(funptr)&f_cmpA58,
	(funptr)&f_cmpA59,
	(funptr)&f_cmpA60,
	(funptr)&f_cmpA61,
	(funptr)&f_cmpA62,
	(funptr)&f_cmpA63,
	(funptr)&f_cmpA64,
	(funptr)&f_cmpA65,
	(funptr)&f_cmpA66,
	(funptr)&f_cmpA67,
	(funptr)&f_cmpA68,
	(funptr)&f_cmpA69,
	(funptr)&f_cmpA70,
	(funptr)&f_cmpA71,
	(funptr)&f_cmpA72,
	(funptr)&f_cmpA73,
	(funptr)&f_cmpA74,
	(funptr)&f_cmpA75,
	(funptr)&f_cmpA76,
	(funptr)&f_cmpA77,
	(funptr)&f_cmpA78,
	(funptr)&f_cmpA79,
	(funptr)&f_cmpA80,
	(funptr)&f_cmpA81,
	(funptr)&f_cmpA82,
	(funptr)&f_cmpA83,
	(funptr)&f_cmpA84,
	(funptr)&f_cmpA85,
	(funptr)&f_cmpA86,
	(funptr)&f_cmpA87,
	(funptr)&f_cmpA88,
	(funptr)&f_cmpA89,
	(funptr)&f_cmpA90,
	(funptr)&f_cmpA91,
	(funptr)&f_cmpA92,
	(funptr)&f_cmpA93,
	(funptr)&f_cmpA94,
	(funptr)&f_cmpA95,
	(funptr)&f_cmpA96,
	(funptr)&f_cmpA97,
	(funptr)&f_cmpA98,
	(funptr)&f_cmpA99,
	(funptr)&f_cmpA100,
	(funptr)&f_cmpA101,
	(funptr)&f_cmpA102,
	(funptr)&f_cmpA103,
	(funptr)&f_cmpA104,
	(funptr)&f_cmpA105,
	(funptr)&f_cmpA106,
	(funptr)&f_cmpA107,
	(funptr)&f_cmpA108,
	(funptr)&f_cmpA109,
	(funptr)&f_cmpA110,
	(funptr)&f_cmpA111,
	(funptr)&f_cmpA112,
	(funptr)&f_cmpA113,
	(funptr)&f_cmpA114,
	(funptr)&f_cmpA115,
	(funptr)&f_cmpA116,
	(funptr)&f_cmpA117,
	(funptr)&f_cmpA118,
	(funptr)&f_cmpA119,
	(funptr)&f_cmpA120,
	(funptr)&f_cmpA121,
	(funptr)&f_cmpA122,
	(funptr)&f_cmpA123,
	(funptr)&f_cmpA124,
	(funptr)&f_cmpA125,
	(funptr)&f_cmpA126,
	(funptr)&f_cmpA127,
	(funptr)&f_cmpA128,
	(funptr)&f_cmpA129,
	(funptr)&f_cmpA130,
	(funptr)&f_cmpA131,
	(funptr)&f_cmpA132,
	(funptr)&f_cmpA133,
	(funptr)&f_cmpA134,
	(funptr)&f_cmpA135,
	(funptr)&f_cmpA136,
	(funptr)&f_cmpA137,
	(funptr)&f_cmpA138,
	(funptr)&f_cmpA139,
	(funptr)&f_cmpA140,
	(funptr)&f_cmpA141,
	(funptr)&f_cmpA142,
	(funptr)&f_cmpA143,
	(funptr)&f_cmpA144,
	(funptr)&f_cmpA145,
	(funptr)&f_cmpA146,
	(funptr)&f_cmpA147,
	(funptr)&f_cmpA148,
	(funptr)&f_cmpA149,
	(funptr)&f_cmpA150,
	(funptr)&f_cmpA151,
	(funptr)&f_cmpA152,
	(funptr)&f_cmpA153,
	(funptr)&f_cmpA154,
	(funptr)&f_cmpA155,
	(funptr)&f_cmpA156,
	(funptr)&f_cmpA157,
	(funptr)&f_cmpA158,
	(funptr)&f_cmpA159,
	(funptr)&f_cmpA160,
	(funptr)&f_cmpA161,
	(funptr)&f_cmpA162,
	(funptr)&f_cmpA163,
	(funptr)&f_cmpA164,
	(funptr)&f_cmpA165,
	(funptr)&f_cmpA166,
	(funptr)&f_cmpA167,
	(funptr)&f_cmpA168,
	(funptr)&f_cmpA169,
	(funptr)&f_cmpA170,
	(funptr)&f_cmpA171,
	(funptr)&f_cmpA172,
	(funptr)&f_cmpA173,
	(funptr)&f_cmpA174,
	(funptr)&f_cmpA175,
	(funptr)&f_cmpA176,
	(funptr)&f_cmpA177,
	(funptr)&f_cmpA178,
	(funptr)&f_cmpA179,
	(funptr)&f_cmpA180,
	(funptr)&f_cmpA181,
	(funptr)&f_cmpA182,
	(funptr)&f_cmpA183,
	(funptr)&f_cmpA184,
	(funptr)&f_cmpA185,
	(funptr)&f_cmpA186,
	(funptr)&f_cmpA187,
	(funptr)&f_cmpA188,
	(funptr)&f_cmpA189,
	(funptr)&f_cmpA190,
	(funptr)&f_cmpA191,
	(funptr)&f_cmpA192,
	(funptr)&f_cmpA193,
	(funptr)&f_cmpA194,
	(funptr)&f_cmpA195,
	(funptr)&f_cmpA196,
	(funptr)&f_cmpA197,
	(funptr)&f_cmpA198,
	(funptr)&f_cmpA199,
	(funptr)&f_cmpA200,
	(funptr)&f_cmpA201,
	(funptr)&f_cmpA202,
	(funptr)&f_cmpA203,
	(funptr)&f_cmpA204,
	(funptr)&f_cmpA205,
	(funptr)&f_cmpA206,
	(funptr)&f_cmpA207,
	(funptr)&f_cmpA208,
	(funptr)&f_cmpA209,
	(funptr)&f_cmpA210,
	(funptr)&f_cmpA211,
	(funptr)&f_cmpA212,
	(funptr)&f_cmpA213,
	(funptr)&f_cmpA214,
	(funptr)&f_cmpA215,
	(funptr)&f_cmpA216,
	(funptr)&f_cmpA217,
	(funptr)&f_cmpA218,
	(funptr)&f_cmpA219,
	(funptr)&f_cmpA220,
	(funptr)&f_cmpA221,
	(funptr)&f_cmpA222,
	(funptr)&f_cmpA223,
	(funptr)&f_cmpA224,
	(funptr)&f_cmpA225,
	(funptr)&f_cmpA226,
	(funptr)&f_cmpA227,
	(funptr)&f_cmpA228,
	(funptr)&f_cmpA229,
	(funptr)&f_cmpA230,
	(funptr)&f_cmpA231,
	(funptr)&f_cmpA232,
	(funptr)&f_cmpA233,
	(funptr)&f_cmpA234,
	(funptr)&f_cmpA235,
	(funptr)&f_cmpA236,
	(funptr)&f_cmpA237,
	(funptr)&f_cmpA238,
	(funptr)&f_cmpA239,
	(funptr)&f_cmpA240,
	(funptr)&f_cmpA241,
	(funptr)&f_cmpA242,
	(funptr)&f_cmpA243,
	(funptr)&f_cmpA244,
	(funptr)&f_cmpA245,
	(funptr)&f_cmpA246,
	(funptr)&f_cmpA247,
	(funptr)&f_cmpA248,
	(funptr)&f_cmpA249,
	(funptr)&f_cmpA250,
	(funptr)&f_cmpA251,
	(funptr)&f_cmpA252,
	(funptr)&f_cmpA253,
	(funptr)&f_cmpA254,
	(funptr)&f_cmpA255,
	(funptr)&f_cmpA256,
	(funptr)&f_cmpA257,
	(funptr)&f_cmpA258,
	(funptr)&f_cmpA259,
	(funptr)&f_cmpA260,
	(funptr)&f_cmpA261,
	(funptr)&f_cmpA262,
	(funptr)&f_cmpA263,
	(funptr)&f_cmpA264,
	(funptr)&f_cmpA265,
	(funptr)&f_cmpA266,
	(funptr)&f_cmpA267,
	(funptr)&f_cmpA268,
	(funptr)&f_cmpA269,
	(funptr)&f_cmpA270,
	(funptr)&f_cmpA271,
	(funptr)&f_cmpA272,
	(funptr)&f_cmpA273,
	(funptr)&f_cmpA274,
	(funptr)&f_cmpA275,
	(funptr)&f_cmpA276,
	(funptr)&f_cmpA277,
	(funptr)&f_cmpA278,
	(funptr)&f_cmpA279,
	(funptr)&f_cmpA280,
	(funptr)&f_cmpA281,
	(funptr)&f_cmpA282,
	(funptr)&f_cmpA283,
	(funptr)&f_cmpA284,
	(funptr)&f_cmpA285,
	(funptr)&f_cmpA286,
	(funptr)&f_cmpA287,
	(funptr)&f_cmpA288,
	(funptr)&f_cmpA289,
	(funptr)&f_cmpA290,
	(funptr)&f_cmpA291,
	(funptr)&f_cmpA292,
	(funptr)&f_cmpA293,
	(funptr)&f_cmpA294,
	(funptr)&f_cmpA295,
	(funptr)&f_cmpA296,
	(funptr)&f_cmpA297,
	(funptr)&f_cmpA298,
	(funptr)&f_cmpA299,
	(funptr)&f_cmpA300,
	(funptr)&f_cmpA301,
	(funptr)&f_cmpA302,
	(funptr)&f_cmpA303,
	(funptr)&f_cmpA304,
	(funptr)&f_cmpA305,
	(funptr)&f_cmpA306,
	(funptr)&f_cmpA307,
	(funptr)&f_cmpA308,
	(funptr)&f_cmpA309,
	(funptr)&f_cmpA310,
	(funptr)&f_cmpA311,
	(funptr)&f_cmpA312,
	(funptr)&f_cmpA313,
	(funptr)&f_cmpA314,
	(funptr)&f_cmpA315,
	(funptr)&f_cmpA316,
	(funptr)&f_cmpA317,
	(funptr)&f_cmpA318,
	(funptr)&f_cmpA319,
	(funptr)&f_cmpA320,
	(funptr)&f_cmpA321,
	(funptr)&f_cmpA322,
	(funptr)&f_cmpA323,
	(funptr)&f_cmpA324,
	(funptr)&f_cmpA325,
	(funptr)&f_cmpA326,
	(funptr)&f_cmpA327,
	(funptr)&f_cmpA328,
	(funptr)&f_cmpA329,
	(funptr)&f_cmpA330,
	(funptr)&f_cmpA331,
	(funptr)&f_cmpA332,
	(funptr)&f_cmpA333,
	(funptr)&f_cmpA334,
	(funptr)&f_cmpA335,
	(funptr)&f_cmpA336,
	(funptr)&f_cmpA337,
	(funptr)&f_cmpA338,
	(funptr)&f_cmpA339,
	(funptr)&f_cmpA340,
	(funptr)&f_cmpA341,
	(funptr)&f_cmpA342,
	(funptr)&f_cmpA343,
	(funptr)&f_cmpA344,
	(funptr)&f_cmpA345,
	(funptr)&f_cmpA346,
	(funptr)&f_cmpA347,
	(funptr)&f_cmpA348,
	(funptr)&f_cmpA349,
	(funptr)&f_cmpA350,
	(funptr)&f_cmpA351,
	(funptr)&f_cmpA352,
	(funptr)&f_cmpA353,
	(funptr)&f_cmpA354,
	(funptr)&f_cmpA355,
	(funptr)&f_cmpA356,
	(funptr)&f_cmpA357,
	(funptr)&f_cmpA358,
	(funptr)&f_cmpA359,
	(funptr)&f_cmpA360,
	(funptr)&f_cmpA361,
	(funptr)&f_cmpA362,
	(funptr)&f_cmpA363,
	(funptr)&f_cmpA364,
	(funptr)&f_cmpA365,
	(funptr)&f_cmpA366,
	(funptr)&f_cmpA367,
	(funptr)&f_cmpA368,
	(funptr)&f_cmpA369,
	(funptr)&f_cmpA370,
	(funptr)&f_cmpA371,
	(funptr)&f_cmpA372,
	(funptr)&f_cmpA373,
	(funptr)&f_cmpA374,
	(funptr)&f_cmpA375,
	(funptr)&f_cmpA376,
	(funptr)&f_cmpA377,
	(funptr)&f_cmpA378,
	(funptr)&f_cmpA379,
	(funptr)&f_cmpA380,
	(funptr)&f_cmpA381,
	(funptr)&f_cmpA382,
	(funptr)&f_cmpA383,
	(funptr)&f_cmpA384,
	(funptr)&f_cmpA385,
	(funptr)&f_cmpA386,
	(funptr)&f_cmpA387,
	(funptr)&f_cmpA388,
	(funptr)&f_cmpA389,
	(funptr)&f_cmpA390,
	(funptr)&f_cmpA391,
	(funptr)&f_cmpA392,
	(funptr)&f_cmpA393,
	(funptr)&f_cmpA394,
	(funptr)&f_cmpA395,
	(funptr)&f_cmpA396,
	(funptr)&f_cmpA397,
	(funptr)&f_cmpA398,
	(funptr)&f_cmpA399,
	(funptr)&f_cmpA400,
	(funptr)&f_cmpA401,
	(funptr)&f_cmpA402,
	(funptr)&f_cmpA403,
	(funptr)&f_cmpA404,
	(funptr)&f_cmpA405,
	(funptr)&f_cmpA406,
	(funptr)&f_cmpA407,
	(funptr)&f_cmpA408,
	(funptr)&f_cmpA409,
	(funptr)&f_cmpA410,
	(funptr)&f_cmpA411,
	(funptr)&f_cmpA412,
	(funptr)&f_cmpA413,
	(funptr)&f_cmpA414,
	(funptr)&f_cmpA415,
	(funptr)&f_cmpA416,
	(funptr)&f_cmpA417,
	(funptr)&f_cmpA418,
	(funptr)&f_cmpA419,
	(funptr)&f_cmpA420,
	(funptr)&f_cmpA421,
	(funptr)&f_cmpA422,
	(funptr)&f_cmpA423,
	(funptr)&f_cmpA424,
	(funptr)&f_cmpA425,
	(funptr)&f_cmpA426,
	(funptr)&f_cmpA427,
	(funptr)&f_cmpA428,
	(funptr)&f_cmpA429,
	(funptr)&f_cmpA430,
	(funptr)&f_cmpA431,
	(funptr)&f_cmpA432,
	(funptr)&f_cmpA433,
	(funptr)&f_cmpA434,
	(funptr)&f_cmpA435,
	(funptr)&f_cmpA436,
	(funptr)&f_cmpA437,
	(funptr)&f_cmpA438,
	(funptr)&f_cmpA439,
	(funptr)&f_cmpA440,
	(funptr)&f_cmpA441,
	(funptr)&f_cmpA442,
	(funptr)&f_cmpA443,
	(funptr)&f_cmpA444,
	(funptr)&f_cmpA445,
	(funptr)&f_cmpA446,
	(funptr)&f_cmpA447,
	(funptr)&f_cmpA448,
	(funptr)&f_cmpA449,
	(funptr)&f_cmpA450,
	(funptr)&f_cmpA451,
	(funptr)&f_cmpA452,
	(funptr)&f_cmpA453,
	(funptr)&f_cmpA454,
	(funptr)&f_cmpA455,
	(funptr)&f_cmpA456,
	(funptr)&f_cmpA457,
	(funptr)&f_cmpA458,
	(funptr)&f_cmpA459,
	(funptr)&f_cmpA460,
	(funptr)&f_cmpA461,
	(funptr)&f_cmpA462,
	(funptr)&f_cmpA463,
	(funptr)&f_cmpA464,
	(funptr)&f_cmpA465,
	(funptr)&f_cmpA466,
	(funptr)&f_cmpA467,
	(funptr)&f_cmpA468,
	(funptr)&f_cmpA469,
	(funptr)&f_cmpA470,
	(funptr)&f_cmpA471,
	(funptr)&f_cmpA472,
	(funptr)&f_cmpA473,
	(funptr)&f_cmpA474,
	(funptr)&f_cmpA475,
	(funptr)&f_cmpA476,
	(funptr)&f_cmpA477,
	(funptr)&f_cmpA478,
	(funptr)&f_cmpA479,
	(funptr)&f_cmpA480,
	(funptr)&f_cmpA481,
	(funptr)&f_cmpA482,
	(funptr)&f_cmpA483,
	(funptr)&f_cmpA484,
	(funptr)&f_cmpA485,
	(funptr)&f_cmpA486,
	(funptr)&f_cmpA487,
	(funptr)&f_cmpA488,
	(funptr)&f_cmpA489,
	(funptr)&f_cmpA490,
	(funptr)&f_cmpA491,
	(funptr)&f_cmpA492,
	(funptr)&f_cmpA493,
	(funptr)&f_cmpA494,
	(funptr)&f_cmpA495,
	(funptr)&f_cmpA496,
	(funptr)&f_cmpA497,
	(funptr)&f_cmpA498,
	(funptr)&f_cmpA499,
	(funptr)&f_cmpA500,
	(funptr)&f_cmpA501,
	(funptr)&f_cmpA502,
	(funptr)&f_cmpA503,
	(funptr)&f_cmpA504,
	(funptr)&f_cmpA505,
	(funptr)&f_cmpA506,
	(funptr)&f_cmpA507,
	(funptr)&f_cmpA508,
	(funptr)&f_cmpA509,
	(funptr)&f_cmpA510,
	(funptr)&f_cmpA511,
	(funptr)&f_cmpA512,
	(funptr)&f_cmpA513,
	(funptr)&f_cmpA514,
	(funptr)&f_cmpA515,
	(funptr)&f_cmpA516,
	(funptr)&f_cmpA517,
	(funptr)&f_cmpA518,
	(funptr)&f_cmpA519,
	(funptr)&f_cmpA520,
	(funptr)&f_cmpA521,
	(funptr)&f_cmpA522,
	(funptr)&f_cmpA523,
	(funptr)&f_cmpA524,
	(funptr)&f_cmpA525,
	(funptr)&f_cmpA526,
	(funptr)&f_cmpA527,
	(funptr)&f_cmpA528,
	(funptr)&f_cmpA529,
	(funptr)&f_cmpA530,
	(funptr)&f_cmpA531,
	(funptr)&f_cmpA532,
	(funptr)&f_cmpA533,
	(funptr)&f_cmpA534,
	(funptr)&f_cmpA535,
	(funptr)&f_cmpA536,
	(funptr)&f_cmpA537,
	(funptr)&f_cmpA538,
	(funptr)&f_cmpA539,
	(funptr)&f_cmpA540,
	(funptr)&f_cmpA541,
	(funptr)&f_cmpA542,
	(funptr)&f_cmpA543,
	(funptr)&f_cmpA544,
	(funptr)&f_cmpA545,
	(funptr)&f_cmpA546,
	(funptr)&f_cmpA547,
	(funptr)&f_cmpA548,
	(funptr)&f_cmpA549,
	(funptr)&f_cmpA550,
	(funptr)&f_cmpA551,
	(funptr)&f_cmpA552,
	(funptr)&f_cmpA553,
	(funptr)&f_cmpA554,
	(funptr)&f_cmpA555,
	(funptr)&f_cmpA556,
	(funptr)&f_cmpA557,
	(funptr)&f_cmpA558,
	(funptr)&f_cmpA559,
	(funptr)&f_cmpA560,
	(funptr)&f_cmpA561,
	(funptr)&f_cmpA562,
	(funptr)&f_cmpA563,
	(funptr)&f_cmpA564,
	(funptr)&f_cmpA565,
	(funptr)&f_cmpA566,
	(funptr)&f_cmpA567,
	(funptr)&f_cmpA568,
	(funptr)&f_cmpA569,
	(funptr)&f_cmpA570,
	(funptr)&f_cmpA571,
	(funptr)&f_cmpA572,
	(funptr)&f_cmpA573,
	(funptr)&f_cmpA574,
	(funptr)&f_cmpA575,
	(funptr)&f_cmpA576,
	(funptr)&f_cmpA577,
	(funptr)&f_cmpA578,
	(funptr)&f_cmpA579,
	(funptr)&f_cmpA580,
	(funptr)&f_cmpA581,
	(funptr)&f_cmpA582,
	(funptr)&f_cmpA583,
	(funptr)&f_cmpA584,
	(funptr)&f_cmpA585,
	(funptr)&f_cmpA586,
	(funptr)&f_cmpA587,
	(funptr)&f_cmpA588,
	(funptr)&f_cmpA589,
	(funptr)&f_cmpA590,
	(funptr)&f_cmpA591,
	(funptr)&f_cmpA592,
	(funptr)&f_cmpA593,
	(funptr)&f_cmpA594,
	(funptr)&f_cmpA595,
	(funptr)&f_cmpA596,
	(funptr)&f_cmpA597,
	(funptr)&f_cmpA598,
	(funptr)&f_cmpA599,
	(funptr)&f_cmpA600,
	(funptr)&f_cmpA601,
	(funptr)&f_cmpA602,
	(funptr)&f_cmpA603,
	(funptr)&f_cmpA604,
	(funptr)&f_cmpA605,
	(funptr)&f_cmpA606,
	(funptr)&f_cmpA607,
	(funptr)&f_cmpA608,
	(funptr)&f_cmpA609,
	(funptr)&f_cmpA610,
	(funptr)&f_cmpA611,
	(funptr)&f_cmpA612,
	(funptr)&f_cmpA613,
	(funptr)&f_cmpA614,
	(funptr)&f_cmpA615,
	(funptr)&f_cmpA616,
	(funptr)&f_cmpA617,
	(funptr)&f_cmpA618,
	(funptr)&f_cmpA619,
	(funptr)&f_cmpA620,
	(funptr)&f_cmpA621,
	(funptr)&f_cmpA622,
	(funptr)&f_cmpA623,
	(funptr)&f_cmpA624,
	(funptr)&f_cmpA625,
	(funptr)&f_cmpA626,
	(funptr)&f_cmpA627,
	(funptr)&f_cmpA628,
	(funptr)&f_cmpA629,
	(funptr)&f_cmpA630,
	(funptr)&f_cmpA631,
	(funptr)&f_cmpA632,
	(funptr)&f_cmpA633,
	(funptr)&f_cmpA634,
	(funptr)&f_cmpA635,
	(funptr)&f_cmpA636,
	(funptr)&f_cmpA637,
	(funptr)&f_cmpA638,
	(funptr)&f_cmpA639,
	(funptr)&f_cmpA640,
	(funptr)&f_cmpA641,
	(funptr)&f_cmpA642,
	(funptr)&f_cmpA643,
	(funptr)&f_cmpA644,
	(funptr)&f_cmpA645,
	(funptr)&f_cmpA646,
	(funptr)&f_cmpA647,
	(funptr)&f_cmpA648,
	(funptr)&f_cmpA649,
	(funptr)&f_cmpA650,
	(funptr)&f_cmpA651,
	(funptr)&f_cmpA652,
	(funptr)&f_cmpA653,
	(funptr)&f_cmpA654,
	(funptr)&f_cmpA655,
	(funptr)&f_cmpA656,
	(funptr)&f_cmpA657,
	(funptr)&f_cmpA658,
	(funptr)&f_cmpA659,
	(funptr)&f_cmpA660,
	(funptr)&f_cmpA661,
	(funptr)&f_cmpA662,
	(funptr)&f_cmpA663,
	(funptr)&f_cmpA664,
	(funptr)&f_cmpA665,
	(funptr)&f_cmpA666,
	(funptr)&f_cmpA667,
	(funptr)&f_cmpA668,
	(funptr)&f_cmpA669,
	(funptr)&f_cmpA670,
	(funptr)&f_cmpA671,
	(funptr)&f_cmpA672,
	(funptr)&f_cmpA673,
	(funptr)&f_cmpA674,
	(funptr)&f_cmpA675,
	(funptr)&f_cmpA676,
	(funptr)&f_cmpA677,
	(funptr)&f_cmpA678,
	(funptr)&f_cmpA679,
	(funptr)&f_cmpA680,
	(funptr)&f_cmpA681,
	(funptr)&f_cmpA682,
	(funptr)&f_cmpA683,
	(funptr)&f_cmpA684,
	(funptr)&f_cmpA685,
	(funptr)&f_cmpA686,
	(funptr)&f_cmpA687,
	(funptr)&f_cmpA688,
	(funptr)&f_cmpA689,
	(funptr)&f_cmpA690,
	(funptr)&f_cmpA691,
	(funptr)&f_cmpA692,
	(funptr)&f_cmpA693,
	(funptr)&f_cmpA694,
	(funptr)&f_cmpA695,
	(funptr)&f_cmpA696,
	(funptr)&f_cmpA697,
	(funptr)&f_cmpA698,
	(funptr)&f_cmpA699,
	(funptr)&f_cmpA700,
	(funptr)&f_cmpA701,
	(funptr)&f_cmpA702,
	(funptr)&f_cmpA703,
	(funptr)&f_cmpA704,
	(funptr)&f_cmpA705,
	(funptr)&f_cmpA706,
	(funptr)&f_cmpA707,
	(funptr)&f_cmpA708,
	(funptr)&f_cmpA709,
	(funptr)&f_cmpA710,
	(funptr)&f_cmpA711,
	(funptr)&f_cmpA712,
	(funptr)&f_cmpA713,
	(funptr)&f_cmpA714,
	(funptr)&f_cmpA715,
	(funptr)&f_cmpA716,
	(funptr)&f_cmpA717,
	(funptr)&f_cmpA718,
	(funptr)&f_cmpA719,
	(funptr)&f_cmpA720,
	(funptr)&f_cmpA721,
	(funptr)&f_cmpA722,
	(funptr)&f_cmpA723,
	(funptr)&f_cmpA724,
	(funptr)&f_cmpA725,
	(funptr)&f_cmpA726,
	(funptr)&f_cmpA727,
	(funptr)&f_cmpA728,
	(funptr)&f_cmpA729,
	(funptr)&f_cmpA730,
	(funptr)&f_cmpA731,
	(funptr)&f_cmpA732,
	(funptr)&f_cmpA733,
	(funptr)&f_cmpA734,
	(funptr)&f_cmpA735,
	(funptr)&f_cmpA736,
	(funptr)&f_cmpA737,
	(funptr)&f_cmpA738,
	(funptr)&f_cmpA739,
	(funptr)&f_cmpA740,
	(funptr)&f_cmpA741,
	(funptr)&f_cmpA742,
	(funptr)&f_cmpA743,
	(funptr)&f_cmpA744,
	(funptr)&f_cmpA745,
	(funptr)&f_cmpA746,
	(funptr)&f_cmpA747,
	(funptr)&f_cmpA748,
	(funptr)&f_cmpA749,
	(funptr)&f_cmpA750,
	(funptr)&f_cmpA751,
	(funptr)&f_cmpA752,
	(funptr)&f_cmpA753,
	(funptr)&f_cmpA754,
	(funptr)&f_cmpA755,
	(funptr)&f_cmpA756,
	(funptr)&f_cmpA757,
	(funptr)&f_cmpA758,
	(funptr)&f_cmpA759,
	(funptr)&f_cmpA760,
	(funptr)&f_cmpA761,
	(funptr)&f_cmpA762,
	(funptr)&f_cmpA763,
	(funptr)&f_cmpA764,
	(funptr)&f_cmpA765,
	(funptr)&f_cmpA766,
	(funptr)&f_cmpA767,
	(funptr)&f_cmpA768,
	(funptr)&f_cmpA769,
	(funptr)&f_cmpA770,
	(funptr)&f_cmpA771,
	(funptr)&f_cmpA772,
	(funptr)&f_cmpA773,
	(funptr)&f_cmpA774,
	(funptr)&f_cmpA775,
	(funptr)&f_cmpA776,
	(funptr)&f_cmpA777,
	(funptr)&f_cmpA778,
	(funptr)&f_cmpA779,
	(funptr)&f_cmpA780,
	(funptr)&f_cmpA781,
	(funptr)&f_cmpA782,
	(funptr)&f_cmpA783,
	(funptr)&f_cmpA784,
	(funptr)&f_cmpA785,
	(funptr)&f_cmpA786,
	(funptr)&f_cmpA787,
	(funptr)&f_cmpA788,
	(funptr)&f_cmpA789,
	(funptr)&f_cmpA790,
	(funptr)&f_cmpA791,
	(funptr)&f_cmpA792,
	(funptr)&f_cmpA793,
	(funptr)&f_cmpA794,
	(funptr)&f_cmpA795,
	(funptr)&f_cmpA796,
	(funptr)&f_cmpA797,
	(funptr)&f_cmpA798,
	(funptr)&f_cmpA799,
	(funptr)&f_cmpA800,
	(funptr)&f_cmpA801,
	(funptr)&f_cmpA802,
	(funptr)&f_cmpA803,
	(funptr)&f_cmpA804,
	(funptr)&f_cmpA805,
	(funptr)&f_cmpA806,
	(funptr)&f_cmpA807,
	(funptr)&f_cmpA808,
	(funptr)&f_cmpA809,
	(funptr)&f_cmpA810,
	(funptr)&f_cmpA811,
	(funptr)&f_cmpA812,
	(funptr)&f_cmpA813,
	(funptr)&f_cmpA814,
	(funptr)&f_cmpA815,
	(funptr)&f_cmpA816,
	(funptr)&f_cmpA817,
	(funptr)&f_cmpA818,
	(funptr)&f_cmpA819,
	(funptr)&f_cmpA820,
	(funptr)&f_cmpA821,
	(funptr)&f_cmpA822,
	(funptr)&f_cmpA823,
	(funptr)&f_cmpA824,
	(funptr)&f_cmpA825,
	(funptr)&f_cmpA826,
	(funptr)&f_cmpA827,
	(funptr)&f_cmpA828,
	(funptr)&f_cmpA829,
	(funptr)&f_cmpA830,
	(funptr)&f_cmpA831,
	(funptr)&f_cmpA832,
	(funptr)&f_cmpA833,
	(funptr)&f_cmpA834,
	(funptr)&f_cmpA835,
	(funptr)&f_cmpA836,
	(funptr)&f_cmpA837,
	(funptr)&f_cmpA838,
	(funptr)&f_cmpA839,
	(funptr)&f_cmpA840,
	(funptr)&f_cmpA841,
	(funptr)&f_cmpA842,
	(funptr)&f_cmpA843,
	(funptr)&f_cmpA844,
	(funptr)&f_cmpA845,
	(funptr)&f_cmpA846,
	(funptr)&f_cmpA847,
	(funptr)&f_cmpA848,
	(funptr)&f_cmpA849,
	(funptr)&f_cmpA850,
	(funptr)&f_cmpA851,
	(funptr)&f_cmpA852,
	(funptr)&f_cmpA853,
	(funptr)&f_cmpA854,
	(funptr)&f_cmpA855,
	(funptr)&f_cmpA856,
	(funptr)&f_cmpA857,
	(funptr)&f_cmpA858,
	(funptr)&f_cmpA859,
	(funptr)&f_cmpA860,
	(funptr)&f_cmpA861,
	(funptr)&f_cmpA862,
	(funptr)&f_cmpA863,
	(funptr)&f_cmpA864,
	(funptr)&f_cmpA865,
	(funptr)&f_cmpA866,
	(funptr)&f_cmpA867,
	(funptr)&f_cmpA868,
	(funptr)&f_cmpA869,
	(funptr)&f_cmpA870,
	(funptr)&f_cmpA871,
	(funptr)&f_cmpA872,
	(funptr)&f_cmpA873,
	(funptr)&f_cmpA874,
	(funptr)&f_cmpA875,
	(funptr)&f_cmpA876,
	(funptr)&f_cmpA877,
	(funptr)&f_cmpA878,
	(funptr)&f_cmpA879,
	(funptr)&f_cmpA880,
	(funptr)&f_cmpA881,
	(funptr)&f_cmpA882,
	(funptr)&f_cmpA883,
	(funptr)&f_cmpA884,
	(funptr)&f_cmpA885,
	(funptr)&f_cmpA886,
	(funptr)&f_cmpA887,
	(funptr)&f_cmpA888,
	(funptr)&f_cmpA889,
	(funptr)&f_cmpA890,
	(funptr)&f_cmpA891,
	(funptr)&f_cmpA892,
	(funptr)&f_cmpA893,
	(funptr)&f_cmpA894,
	(funptr)&f_cmpA895,
	(funptr)&f_cmpA896,
	(funptr)&f_cmpA897,
	(funptr)&f_cmpA898,
	(funptr)&f_cmpA899,
	(funptr)&f_cmpA900,
	(funptr)&f_cmpA901,
	(funptr)&f_cmpA902,
	(funptr)&f_cmpA903,
	(funptr)&f_cmpA904,
	(funptr)&f_cmpA905,
	(funptr)&f_cmpA906,
	(funptr)&f_cmpA907,
	(funptr)&f_cmpA908,
	(funptr)&f_cmpA909,
	(funptr)&f_cmpA910,
	(funptr)&f_cmpA911,
	(funptr)&f_cmpA912,
	(funptr)&f_cmpA913,
	(funptr)&f_cmpA914,
	(funptr)&f_cmpA915,
	(funptr)&f_cmpA916,
	(funptr)&f_cmpA917,
	(funptr)&f_cmpA918,
	(funptr)&f_cmpA919,
	(funptr)&f_cmpA920,
	(funptr)&f_cmpA921,
	(funptr)&f_cmpA922,
	(funptr)&f_cmpA923,
	(funptr)&f_cmpA924,
	(funptr)&f_cmpA925,
	(funptr)&f_cmpA926,
	(funptr)&f_cmpA927,
	(funptr)&f_cmpA928,
	(funptr)&f_cmpA929,
	(funptr)&f_cmpA930,
	(funptr)&f_cmpA931,
	(funptr)&f_cmpA932,
	(funptr)&f_cmpA933,
	(funptr)&f_cmpA934,
	(funptr)&f_cmpA935,
	(funptr)&f_cmpA936,
	(funptr)&f_cmpA937,
	(funptr)&f_cmpA938,
	(funptr)&f_cmpA939,
	(funptr)&f_cmpA940,
	(funptr)&f_cmpA941,
	(funptr)&f_cmpA942,
	(funptr)&f_cmpA943,
	(funptr)&f_cmpA944,
	(funptr)&f_cmpA945,
	(funptr)&f_cmpA946,
	(funptr)&f_cmpA947,
	(funptr)&f_cmpA948,
	(funptr)&f_cmpA949,
	(funptr)&f_cmpA950,
	(funptr)&f_cmpA951,
	(funptr)&f_cmpA952,
	(funptr)&f_cmpA953,
	(funptr)&f_cmpA954,
	(funptr)&f_cmpA955,
	(funptr)&f_cmpA956,
	(funptr)&f_cmpA957,
	(funptr)&f_cmpA958,
	(funptr)&f_cmpA959,
	(funptr)&f_cmpA960,
	(funptr)&f_cmpA961,
	(funptr)&f_cmpA962,
	(funptr)&f_cmpA963,
	(funptr)&f_cmpA964,
	(funptr)&f_cmpA965,
	(funptr)&f_cmpA966,
	(funptr)&f_cmpA967,
	(funptr)&f_cmpA968,
	(funptr)&f_cmpA969,
	(funptr)&f_cmpA970,
	(funptr)&f_cmpA971,
	(funptr)&f_cmpA972,
	(funptr)&f_cmpA973,
	(funptr)&f_cmpA974,
	(funptr)&f_cmpA975,
	(funptr)&f_cmpA976,
	(funptr)&f_cmpA977,
	(funptr)&f_cmpA978,
	(funptr)&f_cmpA979,
	(funptr)&f_cmpA980,
	(funptr)&f_cmpA981,
	(funptr)&f_cmpA982,
	(funptr)&f_cmpA983,
	(funptr)&f_cmpA984,
	(funptr)&f_cmpA985,
	(funptr)&f_cmpA986,
	(funptr)&f_cmpA987,
	(funptr)&f_cmpA988,
	(funptr)&f_cmpA989,
	(funptr)&f_cmpA990,
	(funptr)&f_cmpA991,
	(funptr)&f_cmpA992,
	(funptr)&f_cmpA993,
	(funptr)&f_cmpA994,
	(funptr)&f_cmpA995,
	(funptr)&f_cmpA996,
	(funptr)&f_cmpA997,
	(funptr)&f_cmpA998,
	(funptr)&f_cmpA999,
	(funptr)&f_cmpA1000,
	(funptr)&f_cmpA1001,
	(funptr)&f_cmpA1002,
	(funptr)&f_cmpA1003,
	(funptr)&f_cmpA1004,
	(funptr)&f_cmpA1005,
	(funptr)&f_cmpA1006,
	(funptr)&f_cmpA1007,
	(funptr)&f_cmpA1008,
	(funptr)&f_cmpA1009,
	(funptr)&f_cmpA1010,
	(funptr)&f_cmpA1011,
	(funptr)&f_cmpA1012,
	(funptr)&f_cmpA1013,
	(funptr)&f_cmpA1014,
	(funptr)&f_cmpA1015,
	(funptr)&f_cmpA1016,
	(funptr)&f_cmpA1017,
	(funptr)&f_cmpA1018,
	(funptr)&f_cmpA1019,
	(funptr)&f_cmpA1020,
	(funptr)&f_cmpA1021,
	(funptr)&f_cmpA1022,
	(funptr)&f_cmpA1023,
	(funptr)&f_cmpA1024,
	(funptr)&f_cmpA1025,
	(funptr)&f_cmpA1026,
	(funptr)&f_cmpA1027,
	(funptr)&f_cmpA1028,
	(funptr)&f_cmpA1029,
	(funptr)&f_cmpA1030,
	(funptr)&f_cmpA1031,
	(funptr)&f_cmpA1032,
	(funptr)&f_cmpA1033,
	(funptr)&f_cmpA1034,
	(funptr)&f_cmpA1035,
	(funptr)&f_cmpA1036,
	(funptr)&f_cmpA1037,
	(funptr)&f_cmpA1038,
	(funptr)&f_cmpA1039,
	(funptr)&f_cmpA1040,
	(funptr)&f_cmpA1041,
	(funptr)&f_cmpA1042,
	(funptr)&f_cmpA1043,
	(funptr)&f_cmpA1044,
	(funptr)&f_cmpA1045,
	(funptr)&f_cmpA1046,
	(funptr)&f_cmpA1047,
	(funptr)&f_cmpA1048,
	(funptr)&f_cmpA1049,
	(funptr)&f_cmpA1050,
	(funptr)&f_cmpA1051,
	(funptr)&f_cmpA1052,
	(funptr)&f_cmpA1053,
	(funptr)&f_cmpA1054,
	(funptr)&f_cmpA1055,
	(funptr)&f_cmpA1056,
	(funptr)&f_cmpA1057,
	(funptr)&f_cmpA1058,
	(funptr)&f_cmpA1059,
	(funptr)&f_cmpA1060,
	(funptr)&f_cmpA1061,
	(funptr)&f_cmpA1062,
	(funptr)&f_cmpA1063,
	(funptr)&f_cmpA1064,
	(funptr)&f_cmpA1065,
	(funptr)&f_cmpA1066,
	(funptr)&f_cmpA1067,
	(funptr)&f_cmpA1068,
	(funptr)&f_cmpA1069,
	(funptr)&f_cmpA1070,
	(funptr)&f_cmpA1071,
	(funptr)&f_cmpA1072,
	(funptr)&f_cmpA1073,
	(funptr)&f_cmpA1074,
	(funptr)&f_cmpA1075,
	(funptr)&f_cmpA1076,
	(funptr)&f_cmpA1077,
	(funptr)&f_cmpA1078,
	(funptr)&f_cmpA1079,
	(funptr)&f_cmpA1080,
	(funptr)&f_cmpA1081,
	(funptr)&f_cmpA1082,
	(funptr)&f_cmpA1083,
	(funptr)&f_cmpA1084,
	(funptr)&f_cmpA1085,
	(funptr)&f_cmpA1086,
	(funptr)&f_cmpA1087,
	(funptr)&f_cmpA1088,
	(funptr)&f_cmpA1089,
	(funptr)&f_cmpA1090,
	(funptr)&f_cmpA1091,
	(funptr)&f_cmpA1092,
	(funptr)&f_cmpA1093,
	(funptr)&f_cmpA1094,
	(funptr)&f_cmpA1095,
	(funptr)&f_cmpA1096,
	(funptr)&f_cmpA1097,
	(funptr)&f_cmpA1098,
	(funptr)&f_cmpA1099,
	(funptr)&f_cmpA1100,
	(funptr)&f_cmpA1101,
	(funptr)&f_cmpA1102,
	(funptr)&f_cmpA1103,
	(funptr)&f_cmpA1104,
	(funptr)&f_cmpA1105,
	(funptr)&f_cmpA1106,
	(funptr)&f_cmpA1107,
	(funptr)&f_cmpA1108,
	(funptr)&f_cmpA1109,
	(funptr)&f_cmpA1110,
	(funptr)&f_cmpA1111,
	(funptr)&f_cmpA1112,
	(funptr)&f_cmpA1113,
	(funptr)&f_cmpA1114,
	(funptr)&f_cmpA1115,
	(funptr)&f_cmpA1116,
	(funptr)&f_cmpA1117,
	(funptr)&f_cmpA1118,
	(funptr)&f_cmpA1119,
	(funptr)&f_cmpA1120,
	(funptr)&f_cmpA1121,
	(funptr)&f_cmpA1122,
	(funptr)&f_cmpA1123,
	(funptr)&f_cmpA1124,
	(funptr)&f_cmpA1125,
	(funptr)&f_cmpA1126,
	(funptr)&f_cmpA1127,
	(funptr)&f_cmpA1128,
	(funptr)&f_cmpA1129,
	(funptr)&f_cmpA1130,
	(funptr)&f_cmpA1131,
	(funptr)&f_cmpA1132,
	(funptr)&f_cmpA1133,
	(funptr)&f_cmpA1134,
	(funptr)&f_cmpA1135,
	(funptr)&f_cmpA1136,
	(funptr)&f_cmpA1137,
	(funptr)&f_cmpA1138,
	(funptr)&f_cmpA1139,
	(funptr)&f_cmpA1140,
	(funptr)&f_cmpA1141,
	(funptr)&f_cmpA1142,
	(funptr)&f_cmpA1143,
	(funptr)&f_cmpA1144,
	(funptr)&f_cmpA1145,
	(funptr)&f_cmpA1146,
	(funptr)&f_cmpA1147,
	(funptr)&f_cmpA1148,
	(funptr)&f_cmpA1149,
	(funptr)&f_cmpA1150,
	(funptr)&f_cmpA1151,
	(funptr)&f_cmpA1152,
	(funptr)&f_cmpA1153,
	(funptr)&f_cmpA1154,
	(funptr)&f_cmpA1155,
	(funptr)&f_cmpA1156,
	(funptr)&f_cmpA1157,
	(funptr)&f_cmpA1158,
	(funptr)&f_cmpA1159,
	(funptr)&f_cmpA1160,
	(funptr)&f_cmpA1161,
	(funptr)&f_cmpA1162,
	(funptr)&f_cmpA1163,
	(funptr)&f_cmpA1164,
	(funptr)&f_cmpA1165,
	(funptr)&f_cmpA1166,
	(funptr)&f_cmpA1167,
	(funptr)&f_cmpA1168,
	(funptr)&f_cmpA1169,
	(funptr)&f_cmpA1170,
	(funptr)&f_cmpA1171,
	(funptr)&f_cmpA1172,
	(funptr)&f_cmpA1173,
	(funptr)&f_cmpA1174,
	(funptr)&f_cmpA1175,
	(funptr)&f_cmpA1176,
	(funptr)&f_cmpA1177,
	(funptr)&f_cmpA1178,
	(funptr)&f_cmpA1179,
	(funptr)&f_cmpA1180,
	(funptr)&f_cmpA1181,
	(funptr)&f_cmpA1182,
	(funptr)&f_cmpA1183,
	(funptr)&f_cmpA1184,
	(funptr)&f_cmpA1185,
	(funptr)&f_cmpA1186,
	(funptr)&f_cmpA1187,
	(funptr)&f_cmpA1188,
	(funptr)&f_cmpA1189,
	(funptr)&f_cmpA1190,
	(funptr)&f_cmpA1191,
	(funptr)&f_cmpA1192,
	(funptr)&f_cmpA1193,
	(funptr)&f_cmpA1194,
	(funptr)&f_cmpA1195,
	(funptr)&f_cmpA1196,
	(funptr)&f_cmpA1197,
	(funptr)&f_cmpA1198,
	(funptr)&f_cmpA1199,
	(funptr)&f_cmpA1200,
	(funptr)&f_cmpA1201,
	(funptr)&f_cmpA1202,
	(funptr)&f_cmpA1203,
	(funptr)&f_cmpA1204,
	(funptr)&f_cmpA1205,
	(funptr)&f_cmpA1206,
	(funptr)&f_cmpA1207,
	(funptr)&f_cmpA1208,
	(funptr)&f_cmpA1209,
	(funptr)&f_cmpA1210,
	(funptr)&f_cmpA1211,
	(funptr)&f_cmpA1212,
	(funptr)&f_cmpA1213,
	(funptr)&f_cmpA1214,
	(funptr)&f_cmpA1215,
	(funptr)&f_cmpA1216,
	(funptr)&f_cmpA1217,
	(funptr)&f_cmpA1218,
	(funptr)&f_cmpA1219,
	(funptr)&f_cmpA1220,
	(funptr)&f_cmpA1221,
	(funptr)&f_cmpA1222,
	(funptr)&f_cmpA1223,
	(funptr)&f_cmpA1224,
	(funptr)&f_cmpA1225,
	(funptr)&f_cmpA1226,
	(funptr)&f_cmpA1227,
	(funptr)&f_cmpA1228,
	(funptr)&f_cmpA1229,
	(funptr)&f_cmpA1230,
	(funptr)&f_cmpA1231,
	(funptr)&f_cmpA1232,
	(funptr)&f_cmpA1233,
	(funptr)&f_cmpA1234,
	(funptr)&f_cmpA1235,
	(funptr)&f_cmpA1236,
	(funptr)&f_cmpA1237,
	(funptr)&f_cmpA1238,
	(funptr)&f_cmpA1239,
	(funptr)&f_cmpA1240,
	(funptr)&f_cmpA1241,
	(funptr)&f_cmpA1242,
	(funptr)&f_cmpA1243,
	(funptr)&f_cmpA1244,
	(funptr)&f_cmpA1245,
	(funptr)&f_cmpA1246,
	(funptr)&f_cmpA1247,
	(funptr)&f_cmpA1248,
	(funptr)&f_cmpA1249,
	(funptr)&f_cmpA1250,
	(funptr)&f_cmpA1251,
	(funptr)&f_cmpA1252,
	(funptr)&f_cmpA1253,
	(funptr)&f_cmpA1254,
	(funptr)&f_cmpA1255,
	(funptr)&f_cmpA1256,
	(funptr)&f_cmpA1257,
	(funptr)&f_cmpA1258,
	(funptr)&f_cmpA1259,
	(funptr)&f_cmpA1260,
	(funptr)&f_cmpA1261,
	(funptr)&f_cmpA1262,
	(funptr)&f_cmpA1263,
	(funptr)&f_cmpA1264,
	(funptr)&f_cmpA1265,
	(funptr)&f_cmpA1266,
	(funptr)&f_cmpA1267,
	(funptr)&f_cmpA1268,
	(funptr)&f_cmpA1269,
	(funptr)&f_cmpA1270,
	(funptr)&f_cmpA1271,
	(funptr)&f_cmpA1272,
	(funptr)&f_cmpA1273,
	(funptr)&f_cmpA1274,
	(funptr)&f_cmpA1275,
	(funptr)&f_cmpA1276,
	(funptr)&f_cmpA1277,
	(funptr)&f_cmpA1278,
	(funptr)&f_cmpA1279,
	(funptr)&f_cmpA1280,
	(funptr)&f_cmpA1281,
	(funptr)&f_cmpA1282,
	(funptr)&f_cmpA1283,
	(funptr)&f_cmpA1284,
	(funptr)&f_cmpA1285,
	(funptr)&f_cmpA1286,
	(funptr)&f_cmpA1287,
	(funptr)&f_cmpA1288,
	(funptr)&f_cmpA1289,
	(funptr)&f_cmpA1290,
	(funptr)&f_cmpA1291,
	(funptr)&f_cmpA1292,
	(funptr)&f_cmpA1293,
	(funptr)&f_cmpA1294,
	(funptr)&f_cmpA1295,
	(funptr)&f_cmpA1296,
	(funptr)&f_cmpA1297,
	(funptr)&f_cmpA1298,
	(funptr)&f_cmpA1299,
	(funptr)&f_cmpA1300,
	(funptr)&f_cmpA1301,
	(funptr)&f_cmpA1302,
	(funptr)&f_cmpA1303,
	(funptr)&f_cmpA1304,
	(funptr)&f_cmpA1305,
	(funptr)&f_cmpA1306,
	(funptr)&f_cmpA1307,
	(funptr)&f_cmpA1308,
	(funptr)&f_cmpA1309,
	(funptr)&f_cmpA1310,
	(funptr)&f_cmpA1311,
	(funptr)&f_cmpA1312,
	(funptr)&f_cmpA1313,
	(funptr)&f_cmpA1314,
	(funptr)&f_cmpA1315,
	(funptr)&f_cmpA1316,
	(funptr)&f_cmpA1317,
	(funptr)&f_cmpA1318,
	(funptr)&f_cmpA1319,
	(funptr)&f_cmpA1320,
	(funptr)&f_cmpA1321,
	(funptr)&f_cmpA1322,
	(funptr)&f_cmpA1323,
	(funptr)&f_cmpA1324,
	(funptr)&f_cmpA1325,
	(funptr)&f_cmpA1326,
	(funptr)&f_cmpA1327,
	(funptr)&f_cmpA1328,
	(funptr)&f_cmpA1329,
	(funptr)&f_cmpA1330,
	(funptr)&f_cmpA1331,
	(funptr)&f_cmpA1332,
	(funptr)&f_cmpA1333,
	(funptr)&f_cmpA1334,
	(funptr)&f_cmpA1335,
	(funptr)&f_cmpA1336,
	(funptr)&f_cmpA1337,
	(funptr)&f_cmpA1338,
	(funptr)&f_cmpA1339,
	(funptr)&f_cmpA1340,
	(funptr)&f_cmpA1341,
	(funptr)&f_cmpA1342,
	(funptr)&f_cmpA1343,
	(funptr)&f_cmpA1344,
	(funptr)&f_cmpA1345,
	(funptr)&f_cmpA1346,
	(funptr)&f_cmpA1347,
	(funptr)&f_cmpA1348,
	(funptr)&f_cmpA1349,
	(funptr)&f_cmpA1350,
	(funptr)&f_cmpA1351,
	(funptr)&f_cmpA1352,
	(funptr)&f_cmpA1353,
	(funptr)&f_cmpA1354,
	(funptr)&f_cmpA1355,
	(funptr)&f_cmpA1356,
	(funptr)&f_cmpA1357,
	(funptr)&f_cmpA1358,
	(funptr)&f_cmpA1359,
	(funptr)&f_cmpA1360,
	(funptr)&f_cmpA1361,
	(funptr)&f_cmpA1362,
	(funptr)&f_cmpA1363,
	(funptr)&f_cmpA1364,
	(funptr)&f_cmpA1365,
	(funptr)&f_cmpA1366,
	(funptr)&f_cmpA1367,
	(funptr)&f_cmpA1368,
	(funptr)&f_cmpA1369,
	(funptr)&f_cmpA1370,
	(funptr)&f_cmpA1371,
	(funptr)&f_cmpA1372,
	(funptr)&f_cmpA1373,
	(funptr)&f_cmpA1374,
	(funptr)&f_cmpA1375,
	(funptr)&f_cmpA1376,
	(funptr)&f_cmpA1377,
	(funptr)&f_cmpA1378,
	(funptr)&f_cmpA1379,
	(funptr)&f_cmpA1380,
	(funptr)&f_cmpA1381,
	(funptr)&f_cmpA1382,
	(funptr)&f_cmpA1383,
	(funptr)&f_cmpA1384,
	(funptr)&f_cmpA1385,
	(funptr)&f_cmpA1386,
	(funptr)&f_cmpA1387,
	(funptr)&f_cmpA1388,
	(funptr)&f_cmpA1389,
	(funptr)&f_cmpA1390,
	(funptr)&f_cmpA1391,
	(funptr)&f_cmpA1392,
	(funptr)&f_cmpA1393,
	(funptr)&f_cmpA1394,
	(funptr)&f_cmpA1395,
	(funptr)&f_cmpA1396,
	(funptr)&f_cmpA1397,
	(funptr)&f_cmpA1398,
	(funptr)&f_cmpA1399,
	(funptr)&f_cmpA1400,
	(funptr)&f_cmpA1401,
	(funptr)&f_cmpA1402,
	(funptr)&f_cmpA1403,
	(funptr)&f_cmpA1404,
	(funptr)&f_cmpA1405,
	(funptr)&f_cmpA1406,
	(funptr)&f_cmpA1407,
	(funptr)&f_cmpA1408,
	(funptr)&f_cmpA1409,
	(funptr)&f_cmpA1410,
	(funptr)&f_cmpA1411,
	(funptr)&f_cmpA1412,
	(funptr)&f_cmpA1413,
	(funptr)&f_cmpA1414,
	(funptr)&f_cmpA1415,
	(funptr)&f_cmpA1416,
	(funptr)&f_cmpA1417,
	(funptr)&f_cmpA1418,
	(funptr)&f_cmpA1419,
	(funptr)&f_cmpA1420,
	(funptr)&f_cmpA1421,
	(funptr)&f_cmpA1422,
	(funptr)&f_cmpA1423,
	(funptr)&f_cmpA1424,
	(funptr)&f_cmpA1425,
	(funptr)&f_cmpA1426,
	(funptr)&f_cmpA1427,
	(funptr)&f_cmpA1428,
	(funptr)&f_cmpA1429,
	(funptr)&f_cmpA1430,
	(funptr)&f_cmpA1431,
	(funptr)&f_cmpA1432,
	(funptr)&f_cmpA1433,
	(funptr)&f_cmpA1434,
	(funptr)&f_cmpA1435,
	(funptr)&f_cmpA1436,
	(funptr)&f_cmpA1437,
	(funptr)&f_cmpA1438,
	(funptr)&f_cmpA1439,
	(funptr)&f_cmpA1440,
	(funptr)&f_cmpA1441,
	(funptr)&f_cmpA1442,
	(funptr)&f_cmpA1443,
	(funptr)&f_cmpA1444,
	(funptr)&f_cmpA1445,
	(funptr)&f_cmpA1446,
	(funptr)&f_cmpA1447,
	(funptr)&f_cmpA1448,
	(funptr)&f_cmpA1449,
	(funptr)&f_cmpA1450,
	(funptr)&f_cmpA1451,
	(funptr)&f_cmpA1452,
	(funptr)&f_cmpA1453,
	(funptr)&f_cmpA1454,
	(funptr)&f_cmpA1455,
	(funptr)&f_cmpA1456,
	(funptr)&f_cmpA1457,
	(funptr)&f_cmpA1458,
	(funptr)&f_cmpA1459,
	(funptr)&f_cmpA1460,
	(funptr)&f_cmpA1461,
	(funptr)&f_cmpA1462,
	(funptr)&f_cmpA1463,
	(funptr)&f_cmpA1464,
	(funptr)&f_cmpA1465,
	(funptr)&f_cmpA1466,
	(funptr)&f_cmpA1467,
	(funptr)&f_cmpA1468,
	(funptr)&f_cmpA1469,
	(funptr)&f_cmpA1470,
	(funptr)&f_cmpA1471,
	(funptr)&f_cmpA1472,
	(funptr)&f_cmpA1473,
	(funptr)&f_cmpA1474,
	(funptr)&f_cmpA1475,
	(funptr)&f_cmpA1476,
	(funptr)&f_cmpA1477,
	(funptr)&f_cmpA1478,
	(funptr)&f_cmpA1479,
	(funptr)&f_cmpA1480,
	(funptr)&f_cmpA1481,
	(funptr)&f_cmpA1482,
	(funptr)&f_cmpA1483,
	(funptr)&f_cmpA1484,
	(funptr)&f_cmpA1485,
	(funptr)&f_cmpA1486,
	(funptr)&f_cmpA1487,
	(funptr)&f_cmpA1488,
	(funptr)&f_cmpA1489,
	(funptr)&f_cmpA1490,
	(funptr)&f_cmpA1491,
	(funptr)&f_cmpA1492,
	(funptr)&f_cmpA1493,
	(funptr)&f_cmpA1494,
	(funptr)&f_cmpA1495,
	(funptr)&f_cmpA1496,
	(funptr)&f_cmpA1497,
	(funptr)&f_cmpA1498,
	(funptr)&f_cmpA1499,
	(funptr)&f_cmpA1500,
	(funptr)&f_cmpA1501,
	(funptr)&f_cmpA1502,
	(funptr)&f_cmpA1503,
	(funptr)&f_cmpA1504,
	(funptr)&f_cmpA1505,
	(funptr)&f_cmpA1506,
	(funptr)&f_cmpA1507,
	(funptr)&f_cmpA1508,
	(funptr)&f_cmpA1509,
	(funptr)&f_cmpA1510,
	(funptr)&f_cmpA1511,
	(funptr)&f_cmpA1512,
	(funptr)&f_cmpA1513,
	(funptr)&f_cmpA1514,
	(funptr)&f_cmpA1515,
	(funptr)&f_cmpA1516,
	(funptr)&f_cmpA1517,
	(funptr)&f_cmpA1518,
	(funptr)&f_cmpA1519,
	(funptr)&f_cmpA1520,
	(funptr)&f_cmpA1521,
	(funptr)&f_cmpA1522,
	(funptr)&f_cmpA1523,
	(funptr)&f_cmpA1524,
	(funptr)&f_cmpA1525,
	(funptr)&f_cmpA1526,
	(funptr)&f_cmpA1527,
	(funptr)&f_cmpA1528,
	(funptr)&f_cmpA1529,
	(funptr)&f_cmpA1530,
	(funptr)&f_cmpA1531,
	(funptr)&f_cmpA1532,
	(funptr)&f_cmpA1533,
	(funptr)&f_cmpA1534,
	(funptr)&f_cmpA1535,
	(funptr)&f_cmpA1536,
	(funptr)&f_cmpA1537,
	(funptr)&f_cmpA1538,
	(funptr)&f_cmpA1539,
	(funptr)&f_cmpA1540,
	(funptr)&f_cmpA1541,
	(funptr)&f_cmpA1542,
	(funptr)&f_cmpA1543,
	(funptr)&f_cmpA1544,
	(funptr)&f_cmpA1545,
	(funptr)&f_cmpA1546,
	(funptr)&f_cmpA1547,
	(funptr)&f_cmpA1548,
	(funptr)&f_cmpA1549,
	(funptr)&f_cmpA1550,
	(funptr)&f_cmpA1551,
	(funptr)&f_cmpA1552,
	(funptr)&f_cmpA1553,
	(funptr)&f_cmpA1554,
	(funptr)&f_cmpA1555,
	(funptr)&f_cmpA1556,
	(funptr)&f_cmpA1557,
	(funptr)&f_cmpA1558,
	(funptr)&f_cmpA1559,
	(funptr)&f_cmpA1560,
	(funptr)&f_cmpA1561,
	(funptr)&f_cmpA1562,
	(funptr)&f_cmpA1563,
	(funptr)&f_cmpA1564,
	(funptr)&f_cmpA1565,
	(funptr)&f_cmpA1566,
	(funptr)&f_cmpA1567,
	(funptr)&f_cmpA1568,
	(funptr)&f_cmpA1569,
	(funptr)&f_cmpA1570,
	(funptr)&f_cmpA1571,
	(funptr)&f_cmpA1572,
	(funptr)&f_cmpA1573,
	(funptr)&f_cmpA1574,
	(funptr)&f_cmpA1575,
	(funptr)&f_cmpA1576,
	(funptr)&f_cmpA1577,
	(funptr)&f_cmpA1578,
	(funptr)&f_cmpA1579,
	(funptr)&f_cmpA1580,
	(funptr)&f_cmpA1581,
	(funptr)&f_cmpA1582,
	(funptr)&f_cmpA1583,
	(funptr)&f_cmpA1584,
	(funptr)&f_cmpA1585,
	(funptr)&f_cmpA1586,
	(funptr)&f_cmpA1587,
	(funptr)&f_cmpA1588,
	(funptr)&f_cmpA1589,
	(funptr)&f_cmpA1590,
	(funptr)&f_cmpA1591,
	(funptr)&f_cmpA1592,
	(funptr)&f_cmpA1593,
	(funptr)&f_cmpA1594,
	(funptr)&f_cmpA1595,
	(funptr)&f_cmpA1596,
	(funptr)&f_cmpA1597,
	(funptr)&f_cmpA1598,
	(funptr)&f_cmpA1599,
	(funptr)&f_cmpA1600,
	(funptr)&f_cmpA1601,
	(funptr)&f_cmpA1602,
	(funptr)&f_cmpA1603,
	(funptr)&f_cmpA1604,
	(funptr)&f_cmpA1605,
	(funptr)&f_cmpA1606,
	(funptr)&f_cmpA1607,
	(funptr)&f_cmpA1608,
	(funptr)&f_cmpA1609,
	(funptr)&f_cmpA1610,
	(funptr)&f_cmpA1611,
	(funptr)&f_cmpA1612,
	(funptr)&f_cmpA1613,
	(funptr)&f_cmpA1614,
	(funptr)&f_cmpA1615,
	(funptr)&f_cmpA1616,
	(funptr)&f_cmpA1617,
	(funptr)&f_cmpA1618,
	(funptr)&f_cmpA1619,
	(funptr)&f_cmpA1620,
	(funptr)&f_cmpA1621,
	(funptr)&f_cmpA1622,
	(funptr)&f_cmpA1623,
	(funptr)&f_cmpA1624,
	(funptr)&f_cmpA1625,
	(funptr)&f_cmpA1626,
	(funptr)&f_cmpA1627,
	(funptr)&f_cmpA1628,
	(funptr)&f_cmpA1629,
	(funptr)&f_cmpA1630,
	(funptr)&f_cmpA1631,
	(funptr)&f_cmpA1632,
	(funptr)&f_cmpA1633,
	(funptr)&f_cmpA1634,
	(funptr)&f_cmpA1635,
	(funptr)&f_cmpA1636,
	(funptr)&f_cmpA1637,
	(funptr)&f_cmpA1638,
	(funptr)&f_cmpA1639,
	(funptr)&f_cmpA1640,
	(funptr)&f_cmpA1641,
	(funptr)&f_cmpA1642,
	(funptr)&f_cmpA1643,
	(funptr)&f_cmpA1644,
	(funptr)&f_cmpA1645,
	(funptr)&f_cmpA1646,
	(funptr)&f_cmpA1647,
	(funptr)&f_cmpA1648,
	(funptr)&f_cmpA1649,
	(funptr)&f_cmpA1650,
	(funptr)&f_cmpA1651,
	(funptr)&f_cmpA1652,
	(funptr)&f_cmpA1653,
	(funptr)&f_cmpA1654,
	(funptr)&f_cmpA1655,
	(funptr)&f_cmpA1656,
	(funptr)&f_cmpA1657,
	(funptr)&f_cmpA1658,
	(funptr)&f_cmpA1659,
	(funptr)&f_cmpA1660,
	(funptr)&f_cmpA1661,
	(funptr)&f_cmpA1662,
	(funptr)&f_cmpA1663,
	(funptr)&f_cmpA1664,
	(funptr)&f_cmpA1665,
	(funptr)&f_cmpA1666,
	(funptr)&f_cmpA1667,
	(funptr)&f_cmpA1668,
	(funptr)&f_cmpA1669,
	(funptr)&f_cmpA1670,
	(funptr)&f_cmpA1671,
	(funptr)&f_cmpA1672,
	(funptr)&f_cmpA1673,
	(funptr)&f_cmpA1674,
	(funptr)&f_cmpA1675,
	(funptr)&f_cmpA1676,
	(funptr)&f_cmpA1677,
	(funptr)&f_cmpA1678,
	(funptr)&f_cmpA1679,
	(funptr)&f_cmpA1680,
	(funptr)&f_cmpA1681,
	(funptr)&f_cmpA1682,
	(funptr)&f_cmpA1683,
	(funptr)&f_cmpA1684,
	(funptr)&f_cmpA1685,
	(funptr)&f_cmpA1686,
	(funptr)&f_cmpA1687,
	(funptr)&f_cmpA1688,
	(funptr)&f_cmpA1689,
	(funptr)&f_cmpA1690,
	(funptr)&f_cmpA1691,
	(funptr)&f_cmpA1692,
	(funptr)&f_cmpA1693,
	(funptr)&f_cmpA1694,
	(funptr)&f_cmpA1695,
	(funptr)&f_cmpA1696,
	(funptr)&f_cmpA1697,
	(funptr)&f_cmpA1698,
	(funptr)&f_cmpA1699,
	(funptr)&f_cmpA1700,
	(funptr)&f_cmpA1701,
	(funptr)&f_cmpA1702,
	(funptr)&f_cmpA1703,
	(funptr)&f_cmpA1704,
	(funptr)&f_cmpA1705,
	(funptr)&f_cmpA1706,
	(funptr)&f_cmpA1707,
	(funptr)&f_cmpA1708,
	(funptr)&f_cmpA1709,
	(funptr)&f_cmpA1710,
	(funptr)&f_cmpA1711,
	(funptr)&f_cmpA1712,
	(funptr)&f_cmpA1713,
	(funptr)&f_cmpA1714,
	(funptr)&f_cmpA1715,
	(funptr)&f_cmpA1716,
	(funptr)&f_cmpA1717,
	(funptr)&f_cmpA1718,
	(funptr)&f_cmpA1719,
	(funptr)&f_cmpA1720,
	(funptr)&f_cmpA1721,
	(funptr)&f_cmpA1722,
	(funptr)&f_cmpA1723,
	(funptr)&f_cmpA1724,
	(funptr)&f_cmpA1725,
	(funptr)&f_cmpA1726,
	(funptr)&f_cmpA1727,
	(funptr)&f_cmpA1728,
	(funptr)&f_cmpA1729,
	(funptr)&f_cmpA1730,
	(funptr)&f_cmpA1731,
	(funptr)&f_cmpA1732,
	(funptr)&f_cmpA1733,
	(funptr)&f_cmpA1734,
	(funptr)&f_cmpA1735,
	(funptr)&f_cmpA1736,
	(funptr)&f_cmpA1737,
	(funptr)&f_cmpA1738,
	(funptr)&f_cmpA1739,
	(funptr)&f_cmpA1740,
	(funptr)&f_cmpA1741,
	(funptr)&f_cmpA1742,
	(funptr)&f_cmpA1743,
	(funptr)&f_cmpA1744,
	(funptr)&f_cmpA1745,
	(funptr)&f_cmpA1746,
	(funptr)&f_cmpA1747,
	(funptr)&f_cmpA1748,
	(funptr)&f_cmpA1749,
	(funptr)&f_cmpA1750,
	(funptr)&f_cmpA1751,
	(funptr)&f_cmpA1752,
	(funptr)&f_cmpA1753,
	(funptr)&f_cmpA1754,
	(funptr)&f_cmpA1755,
	(funptr)&f_cmpA1756,
	(funptr)&f_cmpA1757,
	(funptr)&f_cmpA1758,
	(funptr)&f_cmpA1759,
	(funptr)&f_cmpA1760,
	(funptr)&f_cmpA1761,
	(funptr)&f_cmpA1762,
	(funptr)&f_cmpA1763,
	(funptr)&f_cmpA1764,
	(funptr)&f_cmpA1765,
	(funptr)&f_cmpA1766,
	(funptr)&f_cmpA1767,
	(funptr)&f_cmpA1768,
	(funptr)&f_cmpA1769,
	(funptr)&f_cmpA1770,
	(funptr)&f_cmpA1771,
	(funptr)&f_cmpA1772,
	(funptr)&f_cmpA1773,
	(funptr)&f_cmpA1774,
	(funptr)&f_cmpA1775,
	(funptr)&f_cmpA1776,
	(funptr)&f_cmpA1777,
	(funptr)&f_cmpA1778,
	(funptr)&f_cmpA1779,
	(funptr)&f_cmpA1780,
	(funptr)&f_cmpA1781,
	(funptr)&f_cmpA1782,
	(funptr)&f_cmpA1783,
	(funptr)&f_cmpA1784,
	(funptr)&f_cmpA1785,
	(funptr)&f_cmpA1786,
	(funptr)&f_cmpA1787,
	(funptr)&f_cmpA1788,
	(funptr)&f_cmpA1789,
	(funptr)&f_cmpA1790,
	(funptr)&f_cmpA1791,
	(funptr)&f_cmpA1792,
	(funptr)&f_cmpA1793,
	(funptr)&f_cmpA1794,
	(funptr)&f_cmpA1795,
	(funptr)&f_cmpA1796,
	(funptr)&f_cmpA1797,
	(funptr)&f_cmpA1798,
	(funptr)&f_cmpA1799,
	(funptr)&f_cmpA1800,
	(funptr)&f_cmpA1801,
	(funptr)&f_cmpA1802,
	(funptr)&f_cmpA1803,
	(funptr)&f_cmpA1804,
	(funptr)&f_cmpA1805,
	(funptr)&f_cmpA1806,
	(funptr)&f_cmpA1807,
	(funptr)&f_cmpA1808,
	(funptr)&f_cmpA1809,
	(funptr)&f_cmpA1810,
	(funptr)&f_cmpA1811,
	(funptr)&f_cmpA1812,
	(funptr)&f_cmpA1813,
	(funptr)&f_cmpA1814,
	(funptr)&f_cmpA1815,
	(funptr)&f_cmpA1816,
	(funptr)&f_cmpA1817,
	(funptr)&f_cmpA1818,
	(funptr)&f_cmpA1819,
	(funptr)&f_cmpA1820,
	(funptr)&f_cmpA1821,
	(funptr)&f_cmpA1822,
	(funptr)&f_cmpA1823,
	(funptr)&f_cmpA1824,
	(funptr)&f_cmpA1825,
	(funptr)&f_cmpA1826,
	(funptr)&f_cmpA1827,
	(funptr)&f_cmpA1828,
	(funptr)&f_cmpA1829,
	(funptr)&f_cmpA1830,
	(funptr)&f_cmpA1831,
	(funptr)&f_cmpA1832,
	(funptr)&f_cmpA1833,
	(funptr)&f_cmpA1834,
	(funptr)&f_cmpA1835,
	(funptr)&f_cmpA1836,
	(funptr)&f_cmpA1837,
	(funptr)&f_cmpA1838,
	(funptr)&f_cmpA1839,
	(funptr)&f_cmpA1840,
	(funptr)&f_cmpA1841,
	(funptr)&f_cmpA1842,
	(funptr)&f_cmpA1843,
	(funptr)&f_cmpA1844,
	(funptr)&f_cmpA1845,
	(funptr)&f_cmpA1846,
	(funptr)&f_cmpA1847,
	(funptr)&f_cmpA1848,
	(funptr)&f_cmpA1849,
	(funptr)&f_cmpA1850,
	(funptr)&f_cmpA1851,
	(funptr)&f_cmpA1852,
	(funptr)&f_cmpA1853,
	(funptr)&f_cmpA1854,
	(funptr)&f_cmpA1855,
	(funptr)&f_cmpA1856,
	(funptr)&f_cmpA1857,
	(funptr)&f_cmpA1858,
	(funptr)&f_cmpA1859,
	(funptr)&f_cmpA1860,
	(funptr)&f_cmpA1861,
	(funptr)&f_cmpA1862,
	(funptr)&f_cmpA1863,
	(funptr)&f_cmpA1864,
	(funptr)&f_cmpA1865,
	(funptr)&f_cmpA1866,
	(funptr)&f_cmpA1867,
	(funptr)&f_cmpA1868,
	(funptr)&f_cmpA1869,
	(funptr)&f_cmpA1870,
	(funptr)&f_cmpA1871,
	(funptr)&f_cmpA1872,
	(funptr)&f_cmpA1873,
	(funptr)&f_cmpA1874,
	(funptr)&f_cmpA1875,
	(funptr)&f_cmpA1876,
	(funptr)&f_cmpA1877,
	(funptr)&f_cmpA1878,
	(funptr)&f_cmpA1879,
	(funptr)&f_cmpA1880,
	(funptr)&f_cmpA1881,
	(funptr)&f_cmpA1882,
	(funptr)&f_cmpA1883,
	(funptr)&f_cmpA1884,
	(funptr)&f_cmpA1885,
	(funptr)&f_cmpA1886,
	(funptr)&f_cmpA1887,
	(funptr)&f_cmpA1888,
	(funptr)&f_cmpA1889,
	(funptr)&f_cmpA1890,
	(funptr)&f_cmpA1891,
	(funptr)&f_cmpA1892,
	(funptr)&f_cmpA1893,
	(funptr)&f_cmpA1894,
	(funptr)&f_cmpA1895,
	(funptr)&f_cmpA1896,
	(funptr)&f_cmpA1897,
	(funptr)&f_cmpA1898,
	(funptr)&f_cmpA1899,
	(funptr)&f_cmpA1900,
	(funptr)&f_cmpA1901,
	(funptr)&f_cmpA1902,
	(funptr)&f_cmpA1903,
	(funptr)&f_cmpA1904,
	(funptr)&f_cmpA1905,
	(funptr)&f_cmpA1906,
	(funptr)&f_cmpA1907,
	(funptr)&f_cmpA1908,
	(funptr)&f_cmpA1909,
	(funptr)&f_cmpA1910,
	(funptr)&f_cmpA1911,
	(funptr)&f_cmpA1912,
	(funptr)&f_cmpA1913,
	(funptr)&f_cmpA1914,
	(funptr)&f_cmpA1915,
	(funptr)&f_cmpA1916,
	(funptr)&f_cmpA1917,
	(funptr)&f_cmpA1918,
	(funptr)&f_cmpA1919,
	(funptr)&f_cmpA1920,
	(funptr)&f_cmpA1921,
	(funptr)&f_cmpA1922,
	(funptr)&f_cmpA1923,
	(funptr)&f_cmpA1924,
	(funptr)&f_cmpA1925,
	(funptr)&f_cmpA1926,
	(funptr)&f_cmpA1927,
	(funptr)&f_cmpA1928,
	(funptr)&f_cmpA1929,
	(funptr)&f_cmpA1930,
	(funptr)&f_cmpA1931,
	(funptr)&f_cmpA1932,
	(funptr)&f_cmpA1933,
	(funptr)&f_cmpA1934,
	(funptr)&f_cmpA1935,
	(funptr)&f_cmpA1936,
	(funptr)&f_cmpA1937,
	(funptr)&f_cmpA1938,
	(funptr)&f_cmpA1939,
	(funptr)&f_cmpA1940,
	(funptr)&f_cmpA1941,
	(funptr)&f_cmpA1942,
	(funptr)&f_cmpA1943,
	(funptr)&f_cmpA1944,
	(funptr)&f_cmpA1945,
	(funptr)&f_cmpA1946,
	(funptr)&f_cmpA1947,
	(funptr)&f_cmpA1948,
	(funptr)&f_cmpA1949,
	(funptr)&f_cmpA1950,
	(funptr)&f_cmpA1951,
	(funptr)&f_cmpA1952,
	(funptr)&f_cmpA1953,
	(funptr)&f_cmpA1954,
	(funptr)&f_cmpA1955,
	(funptr)&f_cmpA1956,
	(funptr)&f_cmpA1957,
	(funptr)&f_cmpA1958,
	(funptr)&f_cmpA1959,
	(funptr)&f_cmpA1960,
	(funptr)&f_cmpA1961,
	(funptr)&f_cmpA1962,
	(funptr)&f_cmpA1963,
	(funptr)&f_cmpA1964,
	(funptr)&f_cmpA1965,
	(funptr)&f_cmpA1966,
	(funptr)&f_cmpA1967,
	(funptr)&f_cmpA1968,
	(funptr)&f_cmpA1969,
	(funptr)&f_cmpA1970,
	(funptr)&f_cmpA1971,
	(funptr)&f_cmpA1972,
	(funptr)&f_cmpA1973,
	(funptr)&f_cmpA1974,
	(funptr)&f_cmpA1975,
	(funptr)&f_cmpA1976,
	(funptr)&f_cmpA1977,
	(funptr)&f_cmpA1978,
	(funptr)&f_cmpA1979,
	(funptr)&f_cmpA1980,
	(funptr)&f_cmpA1981,
	(funptr)&f_cmpA1982,
	(funptr)&f_cmpA1983,
	(funptr)&f_cmpA1984,
	(funptr)&f_cmpA1985,
	(funptr)&f_cmpA1986,
	(funptr)&f_cmpA1987,
	(funptr)&f_cmpA1988,
	(funptr)&f_cmpA1989,
	(funptr)&f_cmpA1990,
	(funptr)&f_cmpA1991,
	(funptr)&f_cmpA1992,
	(funptr)&f_cmpA1993,
	(funptr)&f_cmpA1994,
	(funptr)&f_cmpA1995,
	(funptr)&f_cmpA1996,
	(funptr)&f_cmpA1997,
	(funptr)&f_cmpA1998,
	(funptr)&f_cmpA1999,
	(funptr)&f_cmpA2000,
	(funptr)&f_cmpA2001,
	(funptr)&f_cmpA2002,
	(funptr)&f_cmpA2003,
	(funptr)&f_cmpA2004,
	(funptr)&f_cmpA2005,
	(funptr)&f_cmpA2006,
	(funptr)&f_cmpA2007,
	(funptr)&f_cmpA2008,
	(funptr)&f_cmpA2009,
	(funptr)&f_cmpA2010,
	(funptr)&f_cmpA2011,
	(funptr)&f_cmpA2012,
	(funptr)&f_cmpA2013,
	(funptr)&f_cmpA2014,
	(funptr)&f_cmpA2015,
	(funptr)&f_cmpA2016,
	(funptr)&f_cmpA2017,
	(funptr)&f_cmpA2018,
	(funptr)&f_cmpA2019,
	(funptr)&f_cmpA2020,
	(funptr)&f_cmpA2021,
	(funptr)&f_cmpA2022,
	(funptr)&f_cmpA2023,
	(funptr)&f_cmpA2024,
	(funptr)&f_cmpA2025,
	(funptr)&f_cmpA2026
};
int G_maxargs = 15;
